
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005864  08005864  00006864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005990  08005990  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005990  08005990  00006990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005998  08005998  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  080059ac  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080059ac  000071cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199bd  00000000  00000000  00007036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf3  00000000  00000000  000209f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  000246e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001414  00000000  00000000  00026130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff5a  00000000  00000000  00027544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdf5  00000000  00000000  0004749e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0921  00000000  00000000  00064293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d7c  00000000  00000000  00124bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800584c 	.word	0x0800584c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	0800584c 	.word	0x0800584c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000494:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	2002      	movs	r0, #2
 80004be:	f7ff ffdb 	bl	8000478 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	2004      	movs	r0, #4
 80004c4:	f7ff ffd8 	bl	8000478 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	2001      	movs	r0, #1
 80004ca:	f7ff ffd5 	bl	8000478 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShutDown_Pin|EBS_Pin, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80004d4:	4810      	ldr	r0, [pc, #64]	@ (8000518 <MX_GPIO_Init+0x70>)
 80004d6:	f001 fe01 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ShutDown_Pin EBS_Pin */
  GPIO_InitStruct.Pin = ShutDown_Pin|EBS_Pin;
 80004da:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80004de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	4809      	ldr	r0, [pc, #36]	@ (8000518 <MX_GPIO_Init+0x70>)
 80004f2:	f001 fc93 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : NextState_Pin */
  GPIO_InitStruct.Pin = NextState_Pin;
 80004f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(NextState_GPIO_Port, &GPIO_InitStruct);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4803      	ldr	r0, [pc, #12]	@ (8000518 <MX_GPIO_Init+0x70>)
 800050a:	f001 fc87 	bl	8001e1c <HAL_GPIO_Init>

}
 800050e:	bf00      	nop
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	48000400 	.word	0x48000400

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f001 faa4 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f80e 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f7ff ffbe 	bl	80004a8 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 800052c:	f000 f8b6 	bl	800069c <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f9f4 	bl	800091c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000534:	f000 f8f6 	bl	8000724 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000538:	f000 f9a4 	bl	8000884 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainLoRa();
 800053c:	f004 ffca 	bl	80054d4 <mainLoRa>
 8000540:	e7fc      	b.n	800053c <main+0x20>
	...

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b09a      	sub	sp, #104	@ 0x68
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2248      	movs	r2, #72	@ 0x48
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 f92e 	bl	80057b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <SystemClock_Config+0xa0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000572:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <SystemClock_Config+0xa0>)
 8000574:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <SystemClock_Config+0xa0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000586:	2320      	movs	r3, #32
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800058e:	2300      	movs	r3, #0
 8000590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000592:	23b0      	movs	r3, #176	@ 0xb0
 8000594:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000596:	2300      	movs	r3, #0
 8000598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 f886 	bl	80026b0 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005aa:	f000 f81d 	bl	80005e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005ae:	234f      	movs	r3, #79	@ 0x4f
 80005b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fbf2 	bl	8002db4 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d6:	f000 f807 	bl	80005e8 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3768      	adds	r7, #104	@ 0x68
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	58000400 	.word	0x58000400

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <Error_Handler+0x8>

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <NMI_Handler+0x4>

08000608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <MemManage_Handler+0x4>

08000618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <UsageFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000650:	f001 fa66 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800065c:	4802      	ldr	r0, [pc, #8]	@ (8000668 <SUBGHZ_Radio_IRQHandler+0x10>)
 800065e:	f003 fb47 	bl	8003cf0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028

0800066c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000678:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800067a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000688:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4013      	ands	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000690:	68fb      	ldr	r3, [r7, #12]
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_SUBGHZ_Init+0x20>)
 80006a2:	2210      	movs	r2, #16
 80006a4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_SUBGHZ_Init+0x20>)
 80006a8:	f003 f8f8 	bl	800389c <HAL_SUBGHZ_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80006b2:	f7ff ff99 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028

080006c0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ffcf 	bl	800066c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2032      	movs	r0, #50	@ 0x32
 80006d4:	f001 fb5f 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80006d8:	2032      	movs	r0, #50	@ 0x32
 80006da:	f001 fb76 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <LL_APB2_GRP1_EnableClock>:
{
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80006fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4313      	orrs	r3, r2
 8000708:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800070a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800070e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
	...

08000724 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 8000744:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <MX_TIM1_Init+0xa4>)
 8000746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47999 + 1 ;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 8000756:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800075a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076e:	4815      	ldr	r0, [pc, #84]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 8000770:	f003 fc60 	bl	8004034 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800077a:	f7ff ff35 	bl	80005e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 800078c:	f003 fd24 	bl	80041d8 <HAL_TIM_ConfigClockSource>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000796:	f7ff ff27 	bl	80005e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_TIM1_Init+0xa0>)
 80007ac:	f003 fee4 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007b6:	f7ff ff17 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000034 	.word	0x20000034
 80007c8:	40012c00 	.word	0x40012c00

080007cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <HAL_TIM_Base_MspInit+0x24>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d103      	bne.n	80007e6 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007de:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80007e2:	f7ff ff86 	bl	80006f2 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40012c00 	.word	0x40012c00

080007f4 <LL_AHB2_GRP1_EnableClock>:
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000800:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800080c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000810:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000818:	68fb      	ldr	r3, [r7, #12]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <LL_APB1_GRP1_EnableClock>:
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800082c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000830:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800083c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000840:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <LL_APB2_GRP1_EnableClock>:
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800085c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000860:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000862:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000870:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	@ (8000918 <MX_USART1_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008ce:	f003 fed2 	bl	8004676 <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d8:	f7ff fe86 	bl	80005e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008e0:	f004 fc09 	bl	80050f6 <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f7ff fe7d 	bl	80005e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 80008f2:	f004 fc3e 	bl	8005172 <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f7ff fe74 	bl	80005e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_USART1_UART_Init+0x90>)
 8000902:	f004 fbc0 	bl	8005086 <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800090c:	f7ff fe6c 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000080 	.word	0x20000080
 8000918:	40013800 	.word	0x40013800

0800091c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000922:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <MX_USART2_UART_Init+0x94>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000964:	4811      	ldr	r0, [pc, #68]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000966:	f003 fe86 	bl	8004676 <HAL_UART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f7ff fe3a 	bl	80005e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	480d      	ldr	r0, [pc, #52]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 8000978:	f004 fbbd 	bl	80050f6 <HAL_UARTEx_SetTxFifoThreshold>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000982:	f7ff fe31 	bl	80005e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 800098a:	f004 fbf2 	bl	8005172 <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000994:	f7ff fe28 	bl	80005e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_USART2_UART_Init+0x90>)
 800099a:	f004 fb74 	bl	8005086 <HAL_UARTEx_DisableFifoMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f7ff fe20 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000114 	.word	0x20000114
 80009b0:	40004400 	.word	0x40004400

080009b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	@ 0x58
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2238      	movs	r2, #56	@ 0x38
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 feed 	bl	80057b4 <memset>
  if(uartHandle->Instance==USART1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a2d      	ldr	r2, [pc, #180]	@ (8000a94 <HAL_UART_MspInit+0xe0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d126      	bne.n	8000a32 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009e8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80009ec:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fd9e 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009fe:	f7ff fdf3 	bl	80005e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a02:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a06:	f7ff ff25 	bl	8000854 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff fef2 	bl	80007f4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a10:	23c0      	movs	r3, #192	@ 0xc0
 8000a12:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a20:	2307      	movs	r3, #7
 8000a22:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481b      	ldr	r0, [pc, #108]	@ (8000a98 <HAL_UART_MspInit+0xe4>)
 8000a2c:	f001 f9f6 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a30:	e02b      	b.n	8000a8a <HAL_UART_MspInit+0xd6>
  else if(uartHandle->Instance==USART2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_UART_MspInit+0xe8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d126      	bne.n	8000a8a <HAL_UART_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a40:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000a44:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fd72 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_UART_MspInit+0xa6>
      Error_Handler();
 8000a56:	f7ff fdc7 	bl	80005e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000a5e:	f7ff fee1 	bl	8000824 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fec6 	bl	80007f4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f001 f9c9 	bl	8001e1c <HAL_GPIO_Init>
}
 8000a8a:	bf00      	nop
 8000a8c:	3758      	adds	r7, #88	@ 0x58
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013800 	.word	0x40013800
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fe1f 	bl	80006e6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f004 fe8b 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad2:	f7ff fd23 	bl	800051c <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae4:	080059a0 	.word	0x080059a0
  ldr r2, =_sbss
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aec:	200001cc 	.word	0x200001cc

08000af0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>

08000af2 <LL_AHB2_GRP1_EnableClock>:
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
	...

08000b24 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f7ff ffda 	bl	8000af2 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <BSP_RADIO_Init+0x78>)
 8000b54:	f001 f962 	bl	8001e1c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8000b58:	2320      	movs	r3, #32
 8000b5a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <BSP_RADIO_Init+0x78>)
 8000b62:	f001 f95b 	bl	8001e1c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8000b66:	2308      	movs	r3, #8
 8000b68:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <BSP_RADIO_Init+0x78>)
 8000b70:	f001 f954 	bl	8001e1c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <BSP_RADIO_Init+0x78>)
 8000b7a:	f001 faaf 	bl	80020dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2110      	movs	r1, #16
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <BSP_RADIO_Init+0x78>)
 8000b84:	f001 faaa 	bl	80020dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <BSP_RADIO_Init+0x78>)
 8000b8e:	f001 faa5 	bl	80020dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	48000800 	.word	0x48000800

08000ba0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d84b      	bhi.n	8000c48 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb6:	bf00      	nop
 8000bb8:	08000bc9 	.word	0x08000bc9
 8000bbc:	08000be9 	.word	0x08000be9
 8000bc0:	08000c09 	.word	0x08000c09
 8000bc4:	08000c29 	.word	0x08000c29
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2108      	movs	r1, #8
 8000bcc:	4821      	ldr	r0, [pc, #132]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000bce:	f001 fa85 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	481f      	ldr	r0, [pc, #124]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000bd8:	f001 fa80 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2120      	movs	r1, #32
 8000be0:	481c      	ldr	r0, [pc, #112]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000be2:	f001 fa7b 	bl	80020dc <HAL_GPIO_WritePin>
      break;      
 8000be6:	e030      	b.n	8000c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2108      	movs	r1, #8
 8000bec:	4819      	ldr	r0, [pc, #100]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000bee:	f001 fa75 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	4817      	ldr	r0, [pc, #92]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000bf8:	f001 fa70 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2120      	movs	r1, #32
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c02:	f001 fa6b 	bl	80020dc <HAL_GPIO_WritePin>
      break;
 8000c06:	e020      	b.n	8000c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c0e:	f001 fa65 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000c12:	2201      	movs	r2, #1
 8000c14:	2110      	movs	r1, #16
 8000c16:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c18:	f001 fa60 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2120      	movs	r1, #32
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c22:	f001 fa5b 	bl	80020dc <HAL_GPIO_WritePin>
      break;
 8000c26:	e010      	b.n	8000c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c2e:	f001 fa55 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000c32:	2200      	movs	r2, #0
 8000c34:	2110      	movs	r1, #16
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c38:	f001 fa50 	bl	80020dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c42:	f001 fa4b 	bl	80020dc <HAL_GPIO_WritePin>
      break;
 8000c46:	e000      	b.n	8000c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000c48:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	48000800 	.word	0x48000800

08000c58 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b085      	sub	sp, #20
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8000c92:	230f      	movs	r3, #15
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e001      	b.n	8000c9c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8000c98:	2316      	movs	r3, #22
 8000c9a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8000cac:	f7ff ff3a 	bl	8000b24 <BSP_RADIO_Init>
 8000cb0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff6c 	bl	8000ba0 <BSP_RADIO_ConfigRFSwitch>
 8000cc8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8000cd6:	f7ff ffbf 	bl	8000c58 <BSP_RADIO_GetTxConfig>
 8000cda:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8000ce4:	f7ff ffbf 	bl	8000c66 <BSP_RADIO_IsTCXO>
 8000ce8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}

08000cee <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8000cf2:	f7ff ffbf 	bl	8000c74 <BSP_RADIO_IsDCDC>
 8000cf6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffba 	bl	8000c82 <BSP_RADIO_GetRFOMaxPowerConfig>
 8000d0e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8000d26:	4a1d      	ldr	r2, [pc, #116]	@ (8000d9c <SUBGRF_Init+0x84>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8000d2c:	f7ff fcb6 	bl	800069c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8000d30:	2002      	movs	r0, #2
 8000d32:	f000 fe79 	bl	8001a28 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <SUBGRF_Init+0x88>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 f897 	bl	8000e70 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8000d42:	f7ff ffcd 	bl	8000ce0 <RBI_IsTCXO>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d10e      	bne.n	8000d6a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8000d4c:	2140      	movs	r1, #64	@ 0x40
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f000 f9fc 	bl	800114c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8000d54:	2100      	movs	r1, #0
 8000d56:	f640 1011 	movw	r0, #2321	@ 0x911
 8000d5a:	f000 fcdb 	bl	8001714 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8000d5e:	237f      	movs	r3, #127	@ 0x7f
 8000d60:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8000d62:	7b38      	ldrb	r0, [r7, #12]
 8000d64:	f000 f906 	bl	8000f74 <SUBGRF_Calibrate>
 8000d68:	e009      	b.n	8000d7e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	f640 1011 	movw	r0, #2321	@ 0x911
 8000d70:	f000 fcd0 	bl	8001714 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000d74:	2120      	movs	r1, #32
 8000d76:	f640 1012 	movw	r0, #2322	@ 0x912
 8000d7a:	f000 fccb 	bl	8001714 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8000d7e:	210e      	movs	r1, #14
 8000d80:	f640 101f 	movw	r0, #2335	@ 0x91f
 8000d84:	f000 fcc6 	bl	8001714 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8000d88:	f7ff ff8e 	bl	8000ca8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SUBGRF_Init+0x8c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001ac 	.word	0x200001ac
 8000da0:	200001ab 	.word	0x200001ab
 8000da4:	200001a8 	.word	0x200001a8

08000da8 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	461a      	mov	r2, r3
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 fcf4 	bl	80017a8 <SUBGRF_WriteBuffer>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SUBGRF_SendPayload>:

    return 0;
}

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff ffe4 	bl	8000da8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f861 	bl	8000ea8 <SUBGRF_SetTx>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000e08:	f000 fa24 	bl	8001254 <SUBGRF_GetPacketType>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	2202      	movs	r2, #2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8000e1e:	f000 fca1 	bl	8001764 <SUBGRF_WriteRegisters>
            break;
 8000e22:	e000      	b.n	8000e26 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8000e24:	bf00      	nop
    }
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000e48:	f000 fa04 	bl	8001254 <SUBGRF_GetPacketType>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d108      	bne.n	8000e64 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2202      	movs	r2, #2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f240 60be 	movw	r0, #1726	@ 0x6be
 8000e5e:	f000 fc81 	bl	8001764 <SUBGRF_WriteRegisters>
            break;
 8000e62:	e000      	b.n	8000e66 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8000e64:	bf00      	nop
    }
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4619      	mov	r1, r3
 8000e80:	2080      	movs	r0, #128	@ 0x80
 8000e82:	f000 fcb3 	bl	80017ec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SUBGRF_SetStandby+0x34>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8000e92:	e002      	b.n	8000e9a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <SUBGRF_SetStandby+0x34>)
 8000e96:	2202      	movs	r2, #2
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001a8 	.word	0x200001a8

08000ea8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <SUBGRF_SetTx+0x3c>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	0c1b      	lsrs	r3, r3, #16
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	2083      	movs	r0, #131	@ 0x83
 8000ed6:	f000 fc89 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001a8 	.word	0x200001a8

08000ee8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <SUBGRF_SetRx+0x3c>)
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2203      	movs	r2, #3
 8000f12:	4619      	mov	r1, r3
 8000f14:	2082      	movs	r0, #130	@ 0x82
 8000f16:	f000 fc69 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001a8 	.word	0x200001a8

08000f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	209f      	movs	r0, #159	@ 0x9f
 8000f3a:	f000 fc57 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8000f4c:	f7ff fecf 	bl	8000cee <RBI_IsDCDC>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d102      	bne.n	8000f5c <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8000f56:	2301      	movs	r3, #1
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e001      	b.n	8000f60 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	2096      	movs	r0, #150	@ 0x96
 8000f68:	f000 fc40 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000f7c:	793b      	ldrb	r3, [r7, #4]
 8000f7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000f88:	793b      	ldrb	r3, [r7, #4]
 8000f8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000f98:	793b      	ldrb	r3, [r7, #4]
 8000f9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000fa8:	793b      	ldrb	r3, [r7, #4]
 8000faa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000fb8:	793b      	ldrb	r3, [r7, #4]
 8000fba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000fc8:	793b      	ldrb	r3, [r7, #4]
 8000fca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8000fd8:	793b      	ldrb	r3, [r7, #4]
 8000fda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000fe8:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8000fea:	f107 030f 	add.w	r3, r7, #15
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2089      	movs	r0, #137	@ 0x89
 8000ff4:	f000 fbfa 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a1d      	ldr	r2, [pc, #116]	@ (8001080 <SUBGRF_CalibrateImage+0x80>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d904      	bls.n	800101a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001010:	23e1      	movs	r3, #225	@ 0xe1
 8001012:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001014:	23e9      	movs	r3, #233	@ 0xe9
 8001016:	737b      	strb	r3, [r7, #13]
 8001018:	e027      	b.n	800106a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <SUBGRF_CalibrateImage+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d904      	bls.n	800102c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8001022:	23d7      	movs	r3, #215	@ 0xd7
 8001024:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8001026:	23db      	movs	r3, #219	@ 0xdb
 8001028:	737b      	strb	r3, [r7, #13]
 800102a:	e01e      	b.n	800106a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a16      	ldr	r2, [pc, #88]	@ (8001088 <SUBGRF_CalibrateImage+0x88>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d904      	bls.n	800103e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8001034:	23c1      	movs	r3, #193	@ 0xc1
 8001036:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8001038:	23c5      	movs	r3, #197	@ 0xc5
 800103a:	737b      	strb	r3, [r7, #13]
 800103c:	e015      	b.n	800106a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <SUBGRF_CalibrateImage+0x8c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d904      	bls.n	8001050 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8001046:	2375      	movs	r3, #117	@ 0x75
 8001048:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800104a:	2381      	movs	r3, #129	@ 0x81
 800104c:	737b      	strb	r3, [r7, #13]
 800104e:	e00c      	b.n	800106a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <SUBGRF_CalibrateImage+0x90>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d904      	bls.n	8001062 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8001058:	236b      	movs	r3, #107	@ 0x6b
 800105a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800105c:	236f      	movs	r3, #111	@ 0x6f
 800105e:	737b      	strb	r3, [r7, #13]
 8001060:	e003      	b.n	800106a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8001062:	2329      	movs	r3, #41	@ 0x29
 8001064:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8001066:	232b      	movs	r3, #43	@ 0x2b
 8001068:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2202      	movs	r2, #2
 8001070:	4619      	mov	r1, r3
 8001072:	2098      	movs	r0, #152	@ 0x98
 8001074:	f000 fbba 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	35a4e900 	.word	0x35a4e900
 8001084:	32a9f880 	.word	0x32a9f880
 8001088:	2de54480 	.word	0x2de54480
 800108c:	1b6b0b00 	.word	0x1b6b0b00
 8001090:	1954fc40 	.word	0x1954fc40

08001094 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4623      	mov	r3, r4
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	4603      	mov	r3, r0
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	460b      	mov	r3, r1
 80010ac:	717b      	strb	r3, [r7, #5]
 80010ae:	4613      	mov	r3, r2
 80010b0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80010be:	793b      	ldrb	r3, [r7, #4]
 80010c0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2204      	movs	r2, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	2095      	movs	r0, #149	@ 0x95
 80010cc:	f000 fb8e 	bl	80017ec <SUBGRF_WriteCommand>
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}

080010d8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4604      	mov	r4, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	4611      	mov	r1, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	4603      	mov	r3, r0
 80010ec:	80bb      	strh	r3, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]
 80010f2:	4613      	mov	r3, r2
 80010f4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001130:	883b      	ldrh	r3, [r7, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2208      	movs	r2, #8
 800113c:	4619      	mov	r1, r3
 800113e:	2008      	movs	r0, #8
 8001140:	f000 fb54 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	b2db      	uxtb	r3, r3
 8001168:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2204      	movs	r2, #4
 800117e:	4619      	mov	r1, r3
 8001180:	2097      	movs	r0, #151	@ 0x97
 8001182:	f000 fb33 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <SUBGRF_SetRfFrequency+0x84>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff27 	bl	8001000 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <SUBGRF_SetRfFrequency+0x84>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	461c      	mov	r4, r3
 80011be:	4615      	mov	r5, r2
 80011c0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80011c4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80011c8:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <SUBGRF_SetRfFrequency+0x88>)
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7fe ffd9 	bl	8000188 <__aeabi_uldivmod>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4613      	mov	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	0e1b      	lsrs	r3, r3, #24
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2204      	movs	r2, #4
 8001202:	4619      	mov	r1, r3
 8001204:	2086      	movs	r0, #134	@ 0x86
 8001206:	f000 faf1 	bl	80017ec <SUBGRF_WriteCommand>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001214:	200001ab 	.word	0x200001ab
 8001218:	01e84800 	.word	0x01e84800

0800121c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <SUBGRF_SetPacketType+0x34>)
 800122a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d104      	bne.n	800123c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8001232:	2100      	movs	r1, #0
 8001234:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8001238:	f000 fa6c 	bl	8001714 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	208a      	movs	r0, #138	@ 0x8a
 8001244:	f000 fad2 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001a9 	.word	0x200001a9

08001254 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
    return PacketType;
 8001258:	4b02      	ldr	r3, [pc, #8]	@ (8001264 <SUBGRF_GetPacketType+0x10>)
 800125a:	781b      	ldrb	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	200001a9 	.word	0x200001a9

08001268 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	460b      	mov	r3, r1
 8001274:	71bb      	strb	r3, [r7, #6]
 8001276:	4613      	mov	r3, r2
 8001278:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d149      	bne.n	8001314 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fd3b 	bl	8000cfc <RBI_GetRFOMaxPowerConfig>
 8001286:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001288:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	da01      	bge.n	8001296 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b0e      	cmp	r3, #14
 800129a:	d10e      	bne.n	80012ba <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800129c:	2301      	movs	r3, #1
 800129e:	2201      	movs	r2, #1
 80012a0:	2100      	movs	r1, #0
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff fef6 	bl	8001094 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	330e      	adds	r3, #14
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	71bb      	strb	r3, [r7, #6]
 80012b8:	e01f      	b.n	80012fa <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b0a      	cmp	r3, #10
 80012be:	d10e      	bne.n	80012de <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80012c0:	2301      	movs	r3, #1
 80012c2:	2201      	movs	r2, #1
 80012c4:	2100      	movs	r1, #0
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fee4 	bl	8001094 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80012cc:	79ba      	ldrb	r2, [r7, #6]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	330d      	adds	r3, #13
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	71bb      	strb	r3, [r7, #6]
 80012dc:	e00d      	b.n	80012fa <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80012de:	2301      	movs	r3, #1
 80012e0:	2201      	movs	r2, #1
 80012e2:	2100      	movs	r1, #0
 80012e4:	2007      	movs	r0, #7
 80012e6:	f7ff fed5 	bl	8001094 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	330e      	adds	r3, #14
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80012fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012fe:	f113 0f11 	cmn.w	r3, #17
 8001302:	da01      	bge.n	8001308 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001304:	23ef      	movs	r3, #239	@ 0xef
 8001306:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001308:	2118      	movs	r1, #24
 800130a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800130e:	f000 fa01 	bl	8001714 <SUBGRF_WriteRegister>
 8001312:	e067      	b.n	80013e4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001314:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001318:	f000 fa10 	bl	800173c <SUBGRF_ReadRegister>
 800131c:	4603      	mov	r3, r0
 800131e:	f043 031e 	orr.w	r3, r3, #30
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800132a:	f000 f9f3 	bl	8001714 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff fce4 	bl	8000cfc <RBI_GetRFOMaxPowerConfig>
 8001334:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8001336:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	da01      	bge.n	8001344 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b14      	cmp	r3, #20
 8001348:	d10e      	bne.n	8001368 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800134a:	2301      	movs	r3, #1
 800134c:	2200      	movs	r2, #0
 800134e:	2105      	movs	r1, #5
 8001350:	2003      	movs	r0, #3
 8001352:	f7ff fe9f 	bl	8001094 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001356:	79ba      	ldrb	r2, [r7, #6]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	3316      	adds	r3, #22
 8001362:	b2db      	uxtb	r3, r3
 8001364:	71bb      	strb	r3, [r7, #6]
 8001366:	e031      	b.n	80013cc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b11      	cmp	r3, #17
 800136c:	d10e      	bne.n	800138c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800136e:	2301      	movs	r3, #1
 8001370:	2200      	movs	r2, #0
 8001372:	2103      	movs	r1, #3
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fe8d 	bl	8001094 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800137a:	79ba      	ldrb	r2, [r7, #6]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	3316      	adds	r3, #22
 8001386:	b2db      	uxtb	r3, r3
 8001388:	71bb      	strb	r3, [r7, #6]
 800138a:	e01f      	b.n	80013cc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b0e      	cmp	r3, #14
 8001390:	d10e      	bne.n	80013b0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001392:	2301      	movs	r3, #1
 8001394:	2200      	movs	r2, #0
 8001396:	2102      	movs	r1, #2
 8001398:	2002      	movs	r0, #2
 800139a:	f7ff fe7b 	bl	8001094 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800139e:	79ba      	ldrb	r2, [r7, #6]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	330e      	adds	r3, #14
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	71bb      	strb	r3, [r7, #6]
 80013ae:	e00d      	b.n	80013cc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80013b0:	2301      	movs	r3, #1
 80013b2:	2200      	movs	r2, #0
 80013b4:	2107      	movs	r1, #7
 80013b6:	2004      	movs	r0, #4
 80013b8:	f7ff fe6c 	bl	8001094 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80013bc:	79ba      	ldrb	r2, [r7, #6]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	3316      	adds	r3, #22
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80013cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013d0:	f113 0f09 	cmn.w	r3, #9
 80013d4:	da01      	bge.n	80013da <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80013d6:	23f7      	movs	r3, #247	@ 0xf7
 80013d8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80013da:	2138      	movs	r1, #56	@ 0x38
 80013dc:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80013e0:	f000 f998 	bl	8001714 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2202      	movs	r2, #2
 80013f2:	4619      	mov	r1, r3
 80013f4:	208e      	movs	r0, #142	@ 0x8e
 80013f6:	f000 f9f9 	bl	80017ec <SUBGRF_WriteCommand>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001412:	4a61      	ldr	r2, [pc, #388]	@ (8001598 <SUBGRF_SetModulationParams+0x194>)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	e892 0003 	ldmia.w	r2, {r0, r1}
 800141c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <SUBGRF_SetModulationParams+0x198>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d004      	beq.n	8001436 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fef3 	bl	800121c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b03      	cmp	r3, #3
 800143c:	f200 80a5 	bhi.w	800158a <SUBGRF_SetModulationParams+0x186>
 8001440:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <SUBGRF_SetModulationParams+0x44>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	08001459 	.word	0x08001459
 800144c:	08001519 	.word	0x08001519
 8001450:	080014db 	.word	0x080014db
 8001454:	08001547 	.word	0x08001547
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001458:	2308      	movs	r3, #8
 800145a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a4f      	ldr	r2, [pc, #316]	@ (80015a0 <SUBGRF_SetModulationParams+0x19c>)
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	0c1b      	lsrs	r3, r3, #16
 800146c:	b2db      	uxtb	r3, r3
 800146e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b2db      	uxtb	r3, r3
 8001476:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7b1b      	ldrb	r3, [r3, #12]
 8001482:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7b5b      	ldrb	r3, [r3, #13]
 8001488:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2200      	movs	r2, #0
 8001490:	461c      	mov	r4, r3
 8001492:	4615      	mov	r5, r2
 8001494:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001498:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800149c:	4a41      	ldr	r2, [pc, #260]	@ (80015a4 <SUBGRF_SetModulationParams+0x1a0>)
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	4640      	mov	r0, r8
 80014a4:	4649      	mov	r1, r9
 80014a6:	f7fe fe6f 	bl	8000188 <__aeabi_uldivmod>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4613      	mov	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80014c8:	7cfb      	ldrb	r3, [r7, #19]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	208b      	movs	r0, #139	@ 0x8b
 80014d4:	f000 f98a 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 80014d8:	e058      	b.n	800158c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80014da:	2304      	movs	r3, #4
 80014dc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	4a2f      	ldr	r2, [pc, #188]	@ (80015a0 <SUBGRF_SetModulationParams+0x19c>)
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	0c1b      	lsrs	r3, r3, #16
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7d1b      	ldrb	r3, [r3, #20]
 8001504:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001506:	7cfb      	ldrb	r3, [r7, #19]
 8001508:	b29a      	uxth	r2, r3
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	208b      	movs	r0, #139	@ 0x8b
 8001512:	f000 f96b 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 8001516:	e039      	b.n	800158c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8001518:	2304      	movs	r3, #4
 800151a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e1b      	ldrb	r3, [r3, #24]
 8001520:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e5b      	ldrb	r3, [r3, #25]
 8001526:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e9b      	ldrb	r3, [r3, #26]
 800152c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7edb      	ldrb	r3, [r3, #27]
 8001532:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001534:	7cfb      	ldrb	r3, [r7, #19]
 8001536:	b29a      	uxth	r2, r3
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4619      	mov	r1, r3
 800153e:	208b      	movs	r0, #139	@ 0x8b
 8001540:	f000 f954 	bl	80017ec <SUBGRF_WriteCommand>

        break;
 8001544:	e022      	b.n	800158c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001546:	2305      	movs	r3, #5
 8001548:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4a14      	ldr	r2, [pc, #80]	@ (80015a0 <SUBGRF_SetModulationParams+0x19c>)
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
 8001554:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	0c1b      	lsrs	r3, r3, #16
 800155a:	b2db      	uxtb	r3, r3
 800155c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b2db      	uxtb	r3, r3
 8001564:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7b1b      	ldrb	r3, [r3, #12]
 8001570:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7b5b      	ldrb	r3, [r3, #13]
 8001576:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001578:	7cfb      	ldrb	r3, [r7, #19]
 800157a:	b29a      	uxth	r2, r3
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4619      	mov	r1, r3
 8001582:	208b      	movs	r0, #139	@ 0x8b
 8001584:	f000 f932 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 8001588:	e000      	b.n	800158c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800158a:	bf00      	nop
    }
}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001596:	bf00      	nop
 8001598:	08005864 	.word	0x08005864
 800159c:	200001a9 	.word	0x200001a9
 80015a0:	3d090000 	.word	0x3d090000
 80015a4:	01e84800 	.word	0x01e84800

080015a8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80015b4:	4a48      	ldr	r2, [pc, #288]	@ (80016d8 <SUBGRF_SetPacketParams+0x130>)
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80015bc:	c303      	stmia	r3!, {r0, r1}
 80015be:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	4b45      	ldr	r3, [pc, #276]	@ (80016dc <SUBGRF_SetPacketParams+0x134>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d004      	beq.n	80015d6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fe23 	bl	800121c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d878      	bhi.n	80016d0 <SUBGRF_SetPacketParams+0x128>
 80015de:	a201      	add	r2, pc, #4	@ (adr r2, 80015e4 <SUBGRF_SetPacketParams+0x3c>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	08001685 	.word	0x08001685
 80015ec:	08001679 	.word	0x08001679
 80015f0:	080015f5 	.word	0x080015f5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7a5b      	ldrb	r3, [r3, #9]
 80015f8:	2bf1      	cmp	r3, #241	@ 0xf1
 80015fa:	d10a      	bne.n	8001612 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80015fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001600:	f7ff fbf5 	bl	8000dee <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001604:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001608:	f7ff fc11 	bl	8000e2e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800160c:	2302      	movs	r3, #2
 800160e:	75bb      	strb	r3, [r7, #22]
 8001610:	e011      	b.n	8001636 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7a5b      	ldrb	r3, [r3, #9]
 8001616:	2bf2      	cmp	r3, #242	@ 0xf2
 8001618:	d10a      	bne.n	8001630 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800161a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800161e:	f7ff fbe6 	bl	8000dee <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001622:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001626:	f7ff fc02 	bl	8000e2e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800162a:	2306      	movs	r3, #6
 800162c:	75bb      	strb	r3, [r7, #22]
 800162e:	e002      	b.n	8001636 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7a5b      	ldrb	r3, [r3, #9]
 8001634:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001636:	2309      	movs	r3, #9
 8001638:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	885b      	ldrh	r3, [r3, #2]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	885b      	ldrh	r3, [r3, #2]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	795b      	ldrb	r3, [r3, #5]
 8001658:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	799b      	ldrb	r3, [r3, #6]
 800165e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	79db      	ldrb	r3, [r3, #7]
 8001664:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7a1b      	ldrb	r3, [r3, #8]
 800166a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800166c:	7dbb      	ldrb	r3, [r7, #22]
 800166e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7a9b      	ldrb	r3, [r3, #10]
 8001674:	753b      	strb	r3, [r7, #20]
        break;
 8001676:	e022      	b.n	80016be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001678:	2301      	movs	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7b1b      	ldrb	r3, [r3, #12]
 8001680:	733b      	strb	r3, [r7, #12]
        break;
 8001682:	e01c      	b.n	80016be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001684:	2306      	movs	r3, #6
 8001686:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	89db      	ldrh	r3, [r3, #14]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	89db      	ldrh	r3, [r3, #14]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7c1a      	ldrb	r2, [r3, #16]
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <SUBGRF_SetPacketParams+0x138>)
 80016a2:	4611      	mov	r1, r2
 80016a4:	7019      	strb	r1, [r3, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7c5b      	ldrb	r3, [r3, #17]
 80016ae:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7c9b      	ldrb	r3, [r3, #18]
 80016b4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7cdb      	ldrb	r3, [r3, #19]
 80016ba:	747b      	strb	r3, [r7, #17]
        break;
 80016bc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	208c      	movs	r0, #140	@ 0x8c
 80016ca:	f000 f88f 	bl	80017ec <SUBGRF_WriteCommand>
 80016ce:	e000      	b.n	80016d2 <SUBGRF_SetPacketParams+0x12a>
        return;
 80016d0:	bf00      	nop
}
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	0800586c 	.word	0x0800586c
 80016dc:	200001a9 	.word	0x200001a9
 80016e0:	200001aa 	.word	0x200001aa

080016e4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2202      	movs	r2, #2
 8001702:	4619      	mov	r1, r3
 8001704:	208f      	movs	r0, #143	@ 0x8f
 8001706:	f000 f871 	bl	80017ec <SUBGRF_WriteCommand>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	460a      	mov	r2, r1
 800171e:	80fb      	strh	r3, [r7, #6]
 8001720:	4613      	mov	r3, r2
 8001722:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001724:	1d7a      	adds	r2, r7, #5
 8001726:	88f9      	ldrh	r1, [r7, #6]
 8001728:	2301      	movs	r3, #1
 800172a:	4803      	ldr	r0, [pc, #12]	@ (8001738 <SUBGRF_WriteRegister+0x24>)
 800172c:	f002 f91a 	bl	8003964 <HAL_SUBGHZ_WriteRegisters>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000028 	.word	0x20000028

0800173c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001746:	f107 020f 	add.w	r2, r7, #15
 800174a:	88f9      	ldrh	r1, [r7, #6]
 800174c:	2301      	movs	r3, #1
 800174e:	4804      	ldr	r0, [pc, #16]	@ (8001760 <SUBGRF_ReadRegister+0x24>)
 8001750:	f002 f967 	bl	8003a22 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000028 	.word	0x20000028

08001764 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	80fb      	strh	r3, [r7, #6]
 8001770:	4613      	mov	r3, r2
 8001772:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001774:	f3ef 8310 	mrs	r3, PRIMASK
 8001778:	60fb      	str	r3, [r7, #12]
  return(result);
 800177a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800177c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800177e:	b672      	cpsid	i
}
 8001780:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001782:	88bb      	ldrh	r3, [r7, #4]
 8001784:	88f9      	ldrh	r1, [r7, #6]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <SUBGRF_WriteRegisters+0x40>)
 800178a:	f002 f8eb 	bl	8003964 <HAL_SUBGHZ_WriteRegisters>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f383 8810 	msr	PRIMASK, r3
}
 8001798:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000028 	.word	0x20000028

080017a8 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017b8:	f3ef 8310 	mrs	r3, PRIMASK
 80017bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80017be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80017c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017c2:	b672      	cpsid	i
}
 80017c4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	79f9      	ldrb	r1, [r7, #7]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <SUBGRF_WriteBuffer+0x40>)
 80017d0:	f002 fa3b 	bl	8003c4a <HAL_SUBGHZ_WriteBuffer>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f383 8810 	msr	PRIMASK, r3
}
 80017de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000028 	.word	0x20000028

080017ec <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001800:	60fb      	str	r3, [r7, #12]
  return(result);
 8001802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001806:	b672      	cpsid	i
}
 8001808:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	79f9      	ldrb	r1, [r7, #7]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	4806      	ldr	r0, [pc, #24]	@ (800182c <SUBGRF_WriteCommand+0x40>)
 8001812:	f002 f967 	bl	8003ae4 <HAL_SUBGHZ_ExecSetCmd>
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f383 8810 	msr	PRIMASK, r3
}
 8001820:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000028 	.word	0x20000028

08001830 <SUBGRF_SetSwitch>:
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
    CRITICAL_SECTION_END();
}

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001844:	79bb      	ldrb	r3, [r7, #6]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10d      	bne.n	8001866 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d104      	bne.n	800185a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001850:	2302      	movs	r3, #2
 8001852:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001854:	2004      	movs	r0, #4
 8001856:	f000 f8e7 	bl	8001a28 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d107      	bne.n	8001870 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8001860:	2303      	movs	r3, #3
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e004      	b.n	8001870 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fa1f 	bl	8000cb6 <RBI_ConfigRFSwitch>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800188e:	f7ff fa20 	bl	8000cd2 <RBI_GetTxConfig>
 8001892:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d016      	beq.n	80018c8 <SUBGRF_SetRfTxPower+0x48>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b02      	cmp	r3, #2
 800189e:	dc16      	bgt.n	80018ce <SUBGRF_SetRfTxPower+0x4e>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <SUBGRF_SetRfTxPower+0x2e>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d00a      	beq.n	80018c2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80018ac:	e00f      	b.n	80018ce <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	dd02      	ble.n	80018bc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	73fb      	strb	r3, [r7, #15]
            break;
 80018ba:	e009      	b.n	80018d0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
            break;
 80018c0:	e006      	b.n	80018d0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
            break;
 80018c6:	e003      	b.n	80018d0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	73fb      	strb	r3, [r7, #15]
            break;
 80018cc:	e000      	b.n	80018d0 <SUBGRF_SetRfTxPower+0x50>
            break;
 80018ce:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80018d0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2202      	movs	r2, #2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fcc5 	bl	8001268 <SUBGRF_SetTxParams>

    return paSelect;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2001      	movs	r0, #1
 80018f6:	4798      	blx	r3
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200001ac 	.word	0x200001ac

08001904 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2002      	movs	r0, #2
 8001912:	4798      	blx	r3
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200001ac 	.word	0x200001ac

08001920 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2040      	movs	r0, #64	@ 0x40
 800192e:	4798      	blx	r3
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200001ac 	.word	0x200001ac

0800193c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800194e:	2b01      	cmp	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8001952:	e00a      	b.n	800196a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2080      	movs	r0, #128	@ 0x80
 800195a:	4798      	blx	r3
            break;
 800195c:	e005      	b.n	800196a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001966:	4798      	blx	r3
            break;
 8001968:	bf00      	nop
    }
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200001ac 	.word	0x200001ac

08001978 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001988:	4798      	blx	r3
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200001ac 	.word	0x200001ac

08001998 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2020      	movs	r0, #32
 80019a6:	4798      	blx	r3
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200001ac 	.word	0x200001ac

080019b4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2004      	movs	r0, #4
 80019c2:	4798      	blx	r3
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200001ac 	.word	0x200001ac

080019d0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2008      	movs	r0, #8
 80019de:	4798      	blx	r3
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200001ac 	.word	0x200001ac

080019ec <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2010      	movs	r0, #16
 80019fa:	4798      	blx	r3
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200001ac 	.word	0x200001ac

08001a08 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a18:	4798      	blx	r3
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200001ac 	.word	0x200001ac

08001a28 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8001a32:	f7ff f95c 	bl	8000cee <RBI_IsDCDC>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d112      	bne.n	8001a62 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8001a3c:	f640 1023 	movw	r0, #2339	@ 0x923
 8001a40:	f7ff fe7c 	bl	800173c <SUBGRF_ReadRegister>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	f023 0306 	bic.w	r3, r3, #6
 8001a4e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f640 1023 	movw	r0, #2339	@ 0x923
 8001a5e:	f7ff fe59 	bl	8001714 <SUBGRF_WriteRegister>
  }
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f982 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a7c:	f001 fb7c 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <HAL_Init+0x3c>)
 8001a84:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a86:	200f      	movs	r0, #15
 8001a88:	f000 f810 	bl	8001aac <HAL_InitTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	e001      	b.n	8001a9c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a98:	f7fe fdac 	bl	80005f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_InitTick+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d024      	beq.n	8001b0a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ac0:	f001 fb5a 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <HAL_InitTick+0x6c>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4619      	mov	r1, r3
 8001acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f992 	bl	8001e02 <HAL_SYSTICK_Config>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	d809      	bhi.n	8001afe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aea:	2200      	movs	r2, #0
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	f04f 30ff 	mov.w	r0, #4294967295
 8001af2:	f000 f950 	bl	8001d96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af6:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <HAL_InitTick+0x70>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e007      	b.n	8001b0e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e004      	b.n	8001b0e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e001      	b.n	8001b0e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_IncTick+0x1c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a03      	ldr	r2, [pc, #12]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	200001b0 	.word	0x200001b0

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b02      	ldr	r3, [pc, #8]	@ (8001b54 <HAL_GetTick+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	200001b0 	.word	0x200001b0

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffe0 	bl	8001b44 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	@ (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	db12      	blt.n	8001c74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	490a      	ldr	r1, [pc, #40]	@ (8001c80 <__NVIC_DisableIRQ+0x44>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c62:	3320      	adds	r3, #32
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c68:	f3bf 8f4f 	dsb	sy
}
 8001c6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c6e:	f3bf 8f6f 	isb	sy
}
 8001c72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	@ (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff90 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff09 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff20 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff92 	bl	8001cd8 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff61 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff13 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff21 	bl	8001c3c <__NVIC_DisableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff96 	bl	8001d3c <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e140      	b.n	80020ae <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8132 	beq.w	80020a8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x40>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0201 	and.w	r2, r3, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d017      	beq.n	8001efa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d123      	bne.n	8001f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 808c 	beq.w	80020a8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f90:	4a4e      	ldr	r2, [pc, #312]	@ (80020cc <HAL_GPIO_Init+0x2b0>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1bc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a44      	ldr	r2, [pc, #272]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1b8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a43      	ldr	r2, [pc, #268]	@ (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1b4>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e004      	b.n	8001fda <HAL_GPIO_Init+0x1be>
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x1be>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_Init+0x1be>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	f002 0203 	and.w	r2, r2, #3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fea:	4938      	ldr	r1, [pc, #224]	@ (80020cc <HAL_GPIO_Init+0x2b0>)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff8:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800201c:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002022:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002046:	4a24      	ldr	r2, [pc, #144]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800204c:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 800204e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002052:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002072:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 800207c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002080:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3301      	adds	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f47f aeb7 	bne.w	8001e2c <HAL_GPIO_Init+0x10>
  }
}
 80020be:	bf00      	nop
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	58000800 	.word	0x58000800

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
	...

0800210c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a03      	ldr	r2, [pc, #12]	@ (8002124 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	58000400 	.word	0x58000400

08002128 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_PWREx_GetVoltageRange+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	58000400 	.word	0x58000400

08002140 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002150:	d101      	bne.n	8002156 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	58000400 	.word	0x58000400

08002164 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002172:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800218e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ae:	d101      	bne.n	80021b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002208:	d101      	bne.n	800220e <LL_RCC_HSE_IsReady+0x18>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_RCC_HSE_IsReady+0x1a>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002262:	d101      	bne.n	8002268 <LL_RCC_HSI_IsReady+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_RCC_HSI_IsReady+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	061b      	lsls	r3, r3, #24
 8002288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d101      	bne.n	80022b2 <LL_RCC_LSE_IsReady+0x18>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_RCC_LSE_IsReady+0x1a>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d101      	bne.n	8002314 <LL_RCC_LSI_IsReady+0x18>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <LL_RCC_LSI_IsReady+0x1a>
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6013      	str	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d101      	bne.n	800236c <LL_RCC_MSI_IsReady+0x16>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <LL_RCC_MSI_IsReady+0x18>
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b08      	cmp	r3, #8
 8002386:	d101      	bne.n	800238c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800245e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002462:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002484:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002488:	f023 020f 	bic.w	r2, r3, #15
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800255a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002596:	d101      	bne.n	800259c <LL_RCC_PLL_IsReady+0x18>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <LL_RCC_PLL_IsReady+0x1a>
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0303 	and.w	r3, r3, #3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002612:	d101      	bne.n	8002618 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002636:	d101      	bne.n	800263c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265a:	d101      	bne.n	8002660 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800267c:	d101      	bne.n	8002682 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800269a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800269e:	d101      	bne.n	80026a4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e36f      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	f7ff fea6 	bl	8002412 <LL_RCC_GetSysClkSource>
 80026c6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c8:	f7ff ff8f 	bl	80025ea <LL_RCC_PLL_GetMainSource>
 80026cc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80c4 	beq.w	8002864 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x3e>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d176      	bne.n	80027d6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d173      	bne.n	80027d6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e353      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_OscConfig+0x68>
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002716:	e006      	b.n	8002726 <HAL_RCC_OscConfig+0x76>
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800271c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002726:	4293      	cmp	r3, r2
 8002728:	d222      	bcs.n	8002770 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fd5a 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e331      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fe2b 	bl	80023c4 <LL_RCC_MSI_SetCalibTrimming>
 800276e:	e021      	b.n	80027b4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe12 	bl	80023c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fd1f 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e2f6      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027b4:	f000 fce0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4aa7      	ldr	r2, [pc, #668]	@ (8002a58 <HAL_RCC_OscConfig+0x3a8>)
 80027bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80027be:	4ba7      	ldr	r3, [pc, #668]	@ (8002a5c <HAL_RCC_OscConfig+0x3ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f972 	bl	8001aac <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d047      	beq.n	8002862 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	e2e5      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02c      	beq.n	8002838 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027de:	f7ff fd9e 	bl	800231e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f9af 	bl	8001b44 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ea:	f7ff f9ab 	bl	8001b44 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e2d2      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80027fc:	f7ff fdab 	bl	8002356 <LL_RCC_MSI_IsReady>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f1      	beq.n	80027ea <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fdc7 	bl	80023c4 <LL_RCC_MSI_SetCalibTrimming>
 8002836:	e015      	b.n	8002864 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002838:	f7ff fd7f 	bl	800233a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283c:	f7ff f982 	bl	8001b44 <HAL_GetTick>
 8002840:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002844:	f7ff f97e 	bl	8001b44 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e2a5      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002856:	f7ff fd7e 	bl	8002356 <LL_RCC_MSI_IsReady>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f1      	bne.n	8002844 <HAL_RCC_OscConfig+0x194>
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002862:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d058      	beq.n	8002922 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x1d2>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d108      	bne.n	800288e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d105      	bne.n	800288e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d14b      	bne.n	8002922 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e289      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x204>
 80028ae:	f7ff fc86 	bl	80021be <LL_RCC_HSE_Enable>
 80028b2:	e00d      	b.n	80028d0 <HAL_RCC_OscConfig+0x220>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80028bc:	d104      	bne.n	80028c8 <HAL_RCC_OscConfig+0x218>
 80028be:	f7ff fc51 	bl	8002164 <LL_RCC_HSE_EnableTcxo>
 80028c2:	f7ff fc7c 	bl	80021be <LL_RCC_HSE_Enable>
 80028c6:	e003      	b.n	80028d0 <HAL_RCC_OscConfig+0x220>
 80028c8:	f7ff fc87 	bl	80021da <LL_RCC_HSE_Disable>
 80028cc:	f7ff fc58 	bl	8002180 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff f934 	bl	8001b44 <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff f930 	bl	8001b44 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	@ 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e257      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80028f2:	f7ff fc80 	bl	80021f6 <LL_RCC_HSE_IsReady>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f1      	beq.n	80028e0 <HAL_RCC_OscConfig+0x230>
 80028fc:	e011      	b.n	8002922 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7ff f921 	bl	8001b44 <HAL_GetTick>
 8002902:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002906:	f7ff f91d 	bl	8001b44 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	@ 0x64
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e244      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002918:	f7ff fc6d 	bl	80021f6 <LL_RCC_HSE_IsReady>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f1      	bne.n	8002906 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d046      	beq.n	80029bc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x290>
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d10e      	bne.n	8002958 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e22a      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fc8e 	bl	8002272 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002956:	e031      	b.n	80029bc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d019      	beq.n	8002994 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	f7ff fc5a 	bl	8002218 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7ff f8ee 	bl	8001b44 <HAL_GetTick>
 8002968:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7ff f8ea 	bl	8001b44 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e211      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800297e:	f7ff fc67 	bl	8002250 <LL_RCC_HSI_IsReady>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f1      	beq.n	800296c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fc70 	bl	8002272 <LL_RCC_HSI_SetCalibTrimming>
 8002992:	e013      	b.n	80029bc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002994:	f7ff fc4e 	bl	8002234 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff f8d4 	bl	8001b44 <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a0:	f7ff f8d0 	bl	8001b44 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1f7      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029b2:	f7ff fc4d 	bl	8002250 <LL_RCC_HSI_IsReady>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f1      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d06e      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d056      	beq.n	8002a7e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d031      	beq.n	8002a4c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e1d0      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a0a:	f7ff fc67 	bl	80022dc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a0e:	f7ff f899 	bl	8001b44 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a16:	f7ff f895 	bl	8001b44 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b11      	cmp	r3, #17
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1bc      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002a28:	f7ff fc68 	bl	80022fc <LL_RCC_LSI_IsReady>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f1      	bne.n	8002a16 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a3a:	f023 0210 	bic.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4c:	f7ff fc36 	bl	80022bc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7ff f878 	bl	8001b44 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002a56:	e00c      	b.n	8002a72 <HAL_RCC_OscConfig+0x3c2>
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff f870 	bl	8001b44 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b11      	cmp	r3, #17
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e197      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002a72:	f7ff fc43 	bl	80022fc <LL_RCC_LSI_IsReady>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f1      	beq.n	8002a60 <HAL_RCC_OscConfig+0x3b0>
 8002a7c:	e013      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	f7ff fc2d 	bl	80022dc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff f85f 	bl	8001b44 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8a:	f7ff f85b 	bl	8001b44 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b11      	cmp	r3, #17
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e182      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002a9c:	f7ff fc2e 	bl	80022fc <LL_RCC_LSI_IsReady>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f1      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80d8 	beq.w	8002c64 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ab4:	f7ff fb44 	bl	8002140 <LL_PWR_IsEnabledBkUpAccess>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002abe:	f7ff fb25 	bl	800210c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff f83f 	bl	8001b44 <HAL_GetTick>
 8002ac6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7ff f83b 	bl	8001b44 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e162      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002adc:	f7ff fb30 	bl	8002140 <LL_PWR_IsEnabledBkUpAccess>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f1      	beq.n	8002aca <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d07b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b85      	cmp	r3, #133	@ 0x85
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7ff f817 	bl	8001b44 <HAL_GetTick>
 8002b16:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7ff f809 	bl	8001b44 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e12e      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b44:	f7ff fba9 	bl	800229a <LL_RCC_LSE_IsReady>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ef      	beq.n	8002b2e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b81      	cmp	r3, #129	@ 0x81
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b85      	cmp	r3, #133	@ 0x85
 8002b5c:	d121      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fff1 	bl	8001b44 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe ffe3 	bl	8001b44 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e108      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ec      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ba0:	e060      	b.n	8002c64 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe ffcf 	bl	8001b44 <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe ffc1 	bl	8001b44 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e0e6      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ec      	bne.n	8002bbe <HAL_RCC_OscConfig+0x50e>
 8002be4:	e03e      	b.n	8002c64 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe ffad 	bl	8001b44 <HAL_GetTick>
 8002bea:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe ff9f 	bl	8001b44 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0c4      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ec      	bne.n	8002c02 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe ff8c 	bl	8001b44 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe ff7e 	bl	8001b44 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0a3      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c5a:	f7ff fb1e 	bl	800229a <LL_RCC_LSE_IsReady>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ef      	bne.n	8002c44 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8099 	beq.w	8002da0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d06c      	beq.n	8002d4e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d14b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	f7ff fc74 	bl	8002568 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe ff60 	bl	8001b44 <HAL_GetTick>
 8002c84:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe ff5c 	bl	8001b44 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e083      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c9a:	f7ff fc73 	bl	8002584 <LL_RCC_PLL_IsReady>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f1      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	4b40      	ldr	r3, [pc, #256]	@ (8002dac <HAL_RCC_OscConfig+0x6fc>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cbc:	0212      	lsls	r2, r2, #8
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cda:	f7ff fc37 	bl	800254c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe ff29 	bl	8001b44 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe ff25 	bl	8001b44 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b0a      	cmp	r3, #10
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e04c      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002d08:	f7ff fc3c 	bl	8002584 <LL_RCC_PLL_IsReady>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f1      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x646>
 8002d12:	e045      	b.n	8002da0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	f7ff fc28 	bl	8002568 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe ff14 	bl	8001b44 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe ff10 	bl	8001b44 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b0a      	cmp	r3, #10
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e037      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d32:	f7ff fc27 	bl	8002584 <LL_RCC_PLL_IsReady>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f1      	bne.n	8002d20 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d46:	4b1a      	ldr	r3, [pc, #104]	@ (8002db0 <HAL_RCC_OscConfig+0x700>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
 8002d4c:	e028      	b.n	8002da0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e023      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d115      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d10e      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	11c1808c 	.word	0x11c1808c
 8002db0:	eefefffc 	.word	0xeefefffc

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e12c      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b98      	ldr	r3, [pc, #608]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d91b      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b95      	ldr	r3, [pc, #596]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4993      	ldr	r1, [pc, #588]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de6:	f7fe fead 	bl	8001b44 <HAL_GetTick>
 8002dea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dee:	f7fe fea9 	bl	8001b44 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e110      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e00:	4b8a      	ldr	r3, [pc, #552]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d1ef      	bne.n	8002dee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fb02 	bl	8002428 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fe8e 	bl	8001b44 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e2c:	f7fe fe8a 	bl	8001b44 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0f1      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e3e:	f7ff fbdf 	bl	8002600 <LL_RCC_IsActiveFlag_HPRE>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f1      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d016      	beq.n	8002e82 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff faf8 	bl	800244e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe fe71 	bl	8001b44 <HAL_GetTick>
 8002e62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e66:	f7fe fe6d 	bl	8001b44 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0d4      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e78:	f7ff fbd3 	bl	8002622 <LL_RCC_IsActiveFlag_C2HPRE>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f1      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff faf0 	bl	8002478 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e98:	f7fe fe54 	bl	8001b44 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ea0:	f7fe fe50 	bl	8001b44 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e0b7      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002eb2:	f7ff fbc8 	bl	8002646 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f1      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d016      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fae9 	bl	80024a4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ed2:	f7fe fe37 	bl	8001b44 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eda:	f7fe fe33 	bl	8001b44 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e09a      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002eec:	f7ff fbbd 	bl	800266a <LL_RCC_IsActiveFlag_PPRE1>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f1      	beq.n	8002eda <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d017      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fade 	bl	80024ca <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f0e:	f7fe fe19 	bl	8001b44 <HAL_GetTick>
 8002f12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f16:	f7fe fe15 	bl	8001b44 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e07c      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f28:	f7ff fbb0 	bl	800268c <LL_RCC_IsActiveFlag_PPRE2>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f1      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d043      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f46:	f7ff f956 	bl	80021f6 <LL_RCC_HSE_IsReady>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d11e      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e066      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f5c:	f7ff fb12 	bl	8002584 <LL_RCC_PLL_IsReady>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d113      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e05b      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f72:	f7ff f9f0 	bl	8002356 <LL_RCC_MSI_IsReady>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e050      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f80:	f7ff f966 	bl	8002250 <LL_RCC_HSI_IsReady>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e049      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fa2a 	bl	80023ec <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fe fdd4 	bl	8001b44 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fe fdd0 	bl	8001b44 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e035      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	f7ff fa2c 	bl	8002412 <LL_RCC_GetSysClkSource>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d1ec      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d21b      	bcs.n	800300c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd4:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 0207 	bic.w	r2, r3, #7
 8002fdc:	4913      	ldr	r1, [pc, #76]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fdae 	bl	8001b44 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fec:	f7fe fdaa 	bl	8001b44 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e011      	b.n	8003022 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_ClockConfig+0x278>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d1ef      	bne.n	8002fec <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800300c:	f000 f8b4 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003010:	4603      	mov	r3, r0
 8003012:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <HAL_RCC_ClockConfig+0x27c>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003016:	4b07      	ldr	r3, [pc, #28]	@ (8003034 <HAL_RCC_ClockConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fd46 	bl	8001aac <HAL_InitTick>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	58004000 	.word	0x58004000
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003046:	f7ff f9e4 	bl	8002412 <LL_RCC_GetSysClkSource>
 800304a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304c:	f7ff facd 	bl	80025ea <LL_RCC_PLL_GetMainSource>
 8003050:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x2c>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d139      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d136      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003064:	f7ff f987 	bl	8002376 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x62>
 800306e:	f7ff f982 	bl	8002376 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d106      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0x4e>
 8003078:	f7ff f98d 	bl	8002396 <LL_RCC_MSI_GetRange>
 800307c:	4603      	mov	r3, r0
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	e005      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x5a>
 8003086:	f7ff f991 	bl	80023ac <LL_RCC_MSI_GetRangeAfterStandby>
 800308a:	4603      	mov	r3, r0
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	4a36      	ldr	r2, [pc, #216]	@ (800316c <HAL_RCC_GetSysClockFreq+0x134>)
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	e014      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x8c>
 800309a:	f7ff f96c 	bl	8002376 <LL_RCC_MSI_IsEnabledRangeSelect>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x7a>
 80030a4:	f7ff f977 	bl	8002396 <LL_RCC_MSI_GetRange>
 80030a8:	4603      	mov	r3, r0
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	e005      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x86>
 80030b2:	f7ff f97b 	bl	80023ac <LL_RCC_MSI_GetRangeAfterStandby>
 80030b6:	4603      	mov	r3, r0
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	4a2b      	ldr	r2, [pc, #172]	@ (800316c <HAL_RCC_GetSysClockFreq+0x134>)
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030d0:	e012      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d8:	4b25      	ldr	r3, [pc, #148]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x138>)
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e00c      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d109      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030e4:	f7ff f85a 	bl	800219c <LL_RCC_HSE_IsEnabledDiv2>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80030ee:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x138>)
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e001      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80030f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x13c>)
 80030f6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f8:	f7ff f98b 	bl	8002412 <LL_RCC_GetSysClkSource>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d12f      	bne.n	8003162 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003102:	f7ff fa72 	bl	80025ea <LL_RCC_PLL_GetMainSource>
 8003106:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0xde>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d003      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xe4>
 8003114:	e00d      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003116:	4b16      	ldr	r3, [pc, #88]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x138>)
 8003118:	60fb      	str	r3, [r7, #12]
        break;
 800311a:	e00d      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800311c:	f7ff f83e 	bl	800219c <LL_RCC_HSE_IsEnabledDiv2>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003126:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x138>)
 8003128:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800312a:	e005      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x13c>)
 800312e:	60fb      	str	r3, [r7, #12]
        break;
 8003130:	e002      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	60fb      	str	r3, [r7, #12]
        break;
 8003136:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003138:	f7ff fa35 	bl	80025a6 <LL_RCC_PLL_GetN>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	fb03 f402 	mul.w	r4, r3, r2
 8003144:	f7ff fa46 	bl	80025d4 <LL_RCC_PLL_GetDivider>
 8003148:	4603      	mov	r3, r0
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	3301      	adds	r3, #1
 800314e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003152:	f7ff fa34 	bl	80025be <LL_RCC_PLL_GetR>
 8003156:	4603      	mov	r3, r0
 8003158:	0f5b      	lsrs	r3, r3, #29
 800315a:	3301      	adds	r3, #1
 800315c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003160:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003162:	697b      	ldr	r3, [r7, #20]
}
 8003164:	4618      	mov	r0, r3
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd90      	pop	{r4, r7, pc}
 800316c:	08005924 	.word	0x08005924
 8003170:	00f42400 	.word	0x00f42400
 8003174:	01e84800 	.word	0x01e84800

08003178 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b598      	push	{r3, r4, r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800317c:	f7ff ff5c 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8003180:	4604      	mov	r4, r0
 8003182:	f7ff f9b5 	bl	80024f0 <LL_RCC_GetAHBPrescaler>
 8003186:	4603      	mov	r3, r0
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a03      	ldr	r2, [pc, #12]	@ (800319c <HAL_RCC_GetHCLKFreq+0x24>)
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd98      	pop	{r3, r4, r7, pc}
 800319c:	080058c4 	.word	0x080058c4

080031a0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b598      	push	{r3, r4, r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031a4:	f7ff ffe8 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031a8:	4604      	mov	r4, r0
 80031aa:	f7ff f9b9 	bl	8002520 <LL_RCC_GetAPB1Prescaler>
 80031ae:	4603      	mov	r3, r0
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	4a03      	ldr	r2, [pc, #12]	@ (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd98      	pop	{r3, r4, r7, pc}
 80031c0:	08005904 	.word	0x08005904

080031c4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b598      	push	{r3, r4, r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80031c8:	f7ff ffd6 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031cc:	4604      	mov	r4, r0
 80031ce:	f7ff f9b2 	bl	8002536 <LL_RCC_GetAPB2Prescaler>
 80031d2:	4603      	mov	r3, r0
 80031d4:	0adb      	lsrs	r3, r3, #11
 80031d6:	4a03      	ldr	r2, [pc, #12]	@ (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd98      	pop	{r3, r4, r7, pc}
 80031e4:	08005904 	.word	0x08005904

080031e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	4a10      	ldr	r2, [pc, #64]	@ (800323c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003200:	f7ff f981 	bl	8002506 <LL_RCC_GetAHB3Prescaler>
 8003204:	4603      	mov	r3, r0
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	4a0c      	ldr	r2, [pc, #48]	@ (8003240 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800320e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0c9c      	lsrs	r4, r3, #18
 8003224:	f7fe ff80 	bl	8002128 <HAL_PWREx_GetVoltageRange>
 8003228:	4603      	mov	r3, r0
 800322a:	4619      	mov	r1, r3
 800322c:	4620      	mov	r0, r4
 800322e:	f000 f80b 	bl	8003248 <RCC_SetFlashLatency>
 8003232:	4603      	mov	r3, r0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	08005924 	.word	0x08005924
 8003240:	080058c4 	.word	0x080058c4
 8003244:	431bde83 	.word	0x431bde83

08003248 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003252:	4a3a      	ldr	r2, [pc, #232]	@ (800333c <RCC_SetFlashLatency+0xf4>)
 8003254:	f107 0320 	add.w	r3, r7, #32
 8003258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800325c:	6018      	str	r0, [r3, #0]
 800325e:	3304      	adds	r3, #4
 8003260:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003262:	4a37      	ldr	r2, [pc, #220]	@ (8003340 <RCC_SetFlashLatency+0xf8>)
 8003264:	f107 0318 	add.w	r3, r7, #24
 8003268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800326c:	6018      	str	r0, [r3, #0]
 800326e:	3304      	adds	r3, #4
 8003270:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003272:	4a34      	ldr	r2, [pc, #208]	@ (8003344 <RCC_SetFlashLatency+0xfc>)
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	ca07      	ldmia	r2, {r0, r1, r2}
 800327a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800327e:	2300      	movs	r3, #0
 8003280:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d11b      	bne.n	80032c2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800328a:	2300      	movs	r3, #0
 800328c:	633b      	str	r3, [r7, #48]	@ 0x30
 800328e:	e014      	b.n	80032ba <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	3338      	adds	r3, #56	@ 0x38
 8003296:	443b      	add	r3, r7
 8003298:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	3338      	adds	r3, #56	@ 0x38
 80032aa:	443b      	add	r3, r7
 80032ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032b2:	e021      	b.n	80032f8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	3301      	adds	r3, #1
 80032b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d9e7      	bls.n	8003290 <RCC_SetFlashLatency+0x48>
 80032c0:	e01a      	b.n	80032f8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c6:	e014      	b.n	80032f2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	3338      	adds	r3, #56	@ 0x38
 80032ce:	443b      	add	r3, r7
 80032d0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4293      	cmp	r3, r2
 80032da:	d807      	bhi.n	80032ec <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3338      	adds	r3, #56	@ 0x38
 80032e2:	443b      	add	r3, r7
 80032e4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032ea:	e005      	b.n	80032f8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	3301      	adds	r3, #1
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d9e7      	bls.n	80032c8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032f8:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <RCC_SetFlashLatency+0x100>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	4911      	ldr	r1, [pc, #68]	@ (8003348 <RCC_SetFlashLatency+0x100>)
 8003302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003308:	f7fe fc1c 	bl	8001b44 <HAL_GetTick>
 800330c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800330e:	e008      	b.n	8003322 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003310:	f7fe fc18 	bl	8001b44 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e007      	b.n	8003332 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <RCC_SetFlashLatency+0x100>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800332c:	429a      	cmp	r2, r3
 800332e:	d1ef      	bne.n	8003310 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3738      	adds	r7, #56	@ 0x38
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	08005878 	.word	0x08005878
 8003340:	08005880 	.word	0x08005880
 8003344:	08005888 	.word	0x08005888
 8003348:	58004000 	.word	0x58004000

0800334c <LL_RCC_LSE_IsReady>:
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d101      	bne.n	8003364 <LL_RCC_LSE_IsReady+0x18>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <LL_RCC_LSE_IsReady+0x1a>
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <LL_RCC_SetUSARTClockSource>:
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800337a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	43db      	mvns	r3, r3
 8003384:	401a      	ands	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <LL_RCC_SetI2SClockSource>:
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <LL_RCC_SetLPUARTClockSource>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <LL_RCC_SetI2CClockSource>:
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800340a:	43db      	mvns	r3, r3
 800340c:	401a      	ands	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <LL_RCC_SetLPTIMClockSource>:
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003436:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <LL_RCC_SetRNGClockSource>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <LL_RCC_SetADCClockSource>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800349a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <LL_RCC_SetRTCClockSource>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <LL_RCC_GetRTCClockSource>:
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <LL_RCC_ForceBackupDomainReset>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
	...

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003540:	2300      	movs	r3, #0
 8003542:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003544:	2300      	movs	r3, #0
 8003546:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d058      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003554:	f7fe fdda 	bl	800210c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003558:	f7fe faf4 	bl	8001b44 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800355e:	e009      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fe faf0 	bl	8001b44 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d902      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	74fb      	strb	r3, [r7, #19]
        break;
 8003572:	e006      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003574:	4b7b      	ldr	r3, [pc, #492]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003580:	d1ee      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d13c      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003588:	f7ff ffa7 	bl	80034da <LL_RCC_GetRTCClockSource>
 800358c:	4602      	mov	r2, r0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003592:	429a      	cmp	r2, r3
 8003594:	d00f      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	f7ff ffa5 	bl	80034f2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035a8:	f7ff ffb3 	bl	8003512 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d014      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fac0 	bl	8001b44 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80035c6:	e00b      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fe fabc 	bl	8001b44 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d902      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	74fb      	strb	r3, [r7, #19]
            break;
 80035de:	e004      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80035e0:	f7ff feb4 	bl	800334c <LL_RCC_LSE_IsReady>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d1ee      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff5b 	bl	80034b0 <LL_RCC_SetRTCClockSource>
 80035fa:	e004      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
 8003600:	e001      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fea9 	bl	800336e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fe9e 	bl	800336e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fec0 	bl	80033c8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fee6 	bl	800342a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fedb 	bl	800342a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fed0 	bl	800342a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fea9 	bl	80033f2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe9e 	bl	80033f2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe93 	bl	80033f2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d011      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fe5e 	bl	800339e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ea:	d107      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80036ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fea5 	bl	800345c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003724:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003728:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d011      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fea3 	bl	8003486 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003748:	d107      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003758:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800375a:	7cbb      	ldrb	r3, [r7, #18]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	58000400 	.word	0x58000400

08003768 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003770:	4b06      	ldr	r3, [pc, #24]	@ (800378c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003778:	4904      	ldr	r1, [pc, #16]	@ (800378c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	58000400 	.word	0x58000400

08003790 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003794:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	4a04      	ldr	r2, [pc, #16]	@ (80037ac <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800379c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	58000400 	.word	0x58000400

080037b0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80037bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	58000400 	.word	0x58000400

080037d0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80037d4:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80037d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037da:	619a      	str	r2, [r3, #24]
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	58000400 	.word	0x58000400

080037e8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d101      	bne.n	80037fc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	58000400 	.word	0x58000400

0800380c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b04      	cmp	r3, #4
 800381a:	d101      	bne.n	8003820 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	58000400 	.word	0x58000400

08003830 <LL_RCC_RF_DisableReset>:
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800383c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003840:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003844:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <LL_RCC_IsRFUnderReset>:
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003864:	d101      	bne.n	800386a <LL_RCC_IsRFUnderReset+0x1a>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <LL_RCC_IsRFUnderReset+0x1c>
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <LL_EXTI_EnableIT_32_63+0x24>)
 800387e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003882:	4905      	ldr	r1, [pc, #20]	@ (8003898 <LL_EXTI_EnableIT_32_63+0x24>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	58000800 	.word	0x58000800

0800389c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
    return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	e052      	b.n	8003958 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	799b      	ldrb	r3, [r3, #6]
 80038ba:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80038bc:	7bbb      	ldrb	r3, [r7, #14]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_SUBGHZ_Init+0x2c>
 80038c2:	7bbb      	ldrb	r3, [r7, #14]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d109      	bne.n	80038dc <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fc fef6 	bl	80006c0 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80038d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80038d8:	f7ff ffcc 	bl	8003874 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d126      	bne.n	8003930 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80038e8:	f7ff ffa2 	bl	8003830 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80038ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_SUBGHZ_Init+0xc4>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	0cdb      	lsrs	r3, r3, #19
 80038fa:	2264      	movs	r2, #100	@ 0x64
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
 8003900:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	609a      	str	r2, [r3, #8]
        break;
 8003912:	e007      	b.n	8003924 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	3b01      	subs	r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800391a:	f7ff ff99 	bl	8003850 <LL_RCC_IsRFUnderReset>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ee      	bne.n	8003902 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003924:	f7ff ff34 	bl	8003790 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003928:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800392c:	f7ff ff1c 	bl	8003768 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003930:	f7ff ff4e 	bl	80037d0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa58 	bl	8003df4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	719a      	strb	r2, [r3, #6]

  return status;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000000 	.word	0x20000000

08003964 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	461a      	mov	r2, r3
 8003970:	460b      	mov	r3, r1
 8003972:	817b      	strh	r3, [r7, #10]
 8003974:	4613      	mov	r3, r2
 8003976:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	799b      	ldrb	r3, [r3, #6]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d14a      	bne.n	8003a18 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	795b      	ldrb	r3, [r3, #5]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800398a:	2302      	movs	r3, #2
 800398c:	e045      	b.n	8003a1a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2202      	movs	r2, #2
 8003998:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 faf8 	bl	8003f90 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80039a0:	f7ff ff06 	bl	80037b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80039a4:	210d      	movs	r1, #13
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa44 	bl	8003e34 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80039ac:	897b      	ldrh	r3, [r7, #10]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fa3c 	bl	8003e34 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80039bc:	897b      	ldrh	r3, [r7, #10]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fa36 	bl	8003e34 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	82bb      	strh	r3, [r7, #20]
 80039cc:	e00a      	b.n	80039e4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80039ce:	8abb      	ldrh	r3, [r7, #20]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fa2b 	bl	8003e34 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80039de:	8abb      	ldrh	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	82bb      	strh	r3, [r7, #20]
 80039e4:	8aba      	ldrh	r2, [r7, #20]
 80039e6:	893b      	ldrh	r3, [r7, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d3f0      	bcc.n	80039ce <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80039ec:	f7ff fed0 	bl	8003790 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 faf1 	bl	8003fd8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
 8003a02:	e001      	b.n	8003a08 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	715a      	strb	r2, [r3, #5]

    return status;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	e000      	b.n	8003a1a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b088      	sub	sp, #32
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	460b      	mov	r3, r1
 8003a30:	817b      	strh	r3, [r7, #10]
 8003a32:	4613      	mov	r3, r2
 8003a34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	799b      	ldrb	r3, [r3, #6]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d14a      	bne.n	8003ada <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	795b      	ldrb	r3, [r3, #5]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e045      	b.n	8003adc <HAL_SUBGHZ_ReadRegisters+0xba>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa9a 	bl	8003f90 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a5c:	f7ff fea8 	bl	80037b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003a60:	211d      	movs	r1, #29
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f9e6 	bl	8003e34 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003a68:	897b      	ldrh	r3, [r7, #10]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4619      	mov	r1, r3
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f9de 	bl	8003e34 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003a78:	897b      	ldrh	r3, [r7, #10]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9d8 	bl	8003e34 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003a84:	2100      	movs	r1, #0
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f9d4 	bl	8003e34 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	82fb      	strh	r3, [r7, #22]
 8003a90:	e009      	b.n	8003aa6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fa23 	bl	8003ee0 <SUBGHZSPI_Receive>
      pData++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003aa0:	8afb      	ldrh	r3, [r7, #22]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	82fb      	strh	r3, [r7, #22]
 8003aa6:	8afa      	ldrh	r2, [r7, #22]
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d3f1      	bcc.n	8003a92 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003aae:	f7ff fe6f 	bl	8003790 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fa90 	bl	8003fd8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e001      	b.n	8003aca <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	715a      	strb	r2, [r3, #5]

    return status;
 8003ad6:	7ffb      	ldrb	r3, [r7, #31]
 8003ad8:	e000      	b.n	8003adc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	461a      	mov	r2, r3
 8003af0:	460b      	mov	r3, r1
 8003af2:	72fb      	strb	r3, [r7, #11]
 8003af4:	4613      	mov	r3, r2
 8003af6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	799b      	ldrb	r3, [r3, #6]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d14a      	bne.n	8003b98 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	795b      	ldrb	r3, [r3, #5]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e045      	b.n	8003b9a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fa3b 	bl	8003f90 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	2b84      	cmp	r3, #132	@ 0x84
 8003b1e:	d002      	beq.n	8003b26 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	2b94      	cmp	r3, #148	@ 0x94
 8003b24:	d103      	bne.n	8003b2e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	711a      	strb	r2, [r3, #4]
 8003b2c:	e002      	b.n	8003b34 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b34:	f7ff fe3c 	bl	80037b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003b38:	7afb      	ldrb	r3, [r7, #11]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f979 	bl	8003e34 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	82bb      	strh	r3, [r7, #20]
 8003b46:	e00a      	b.n	8003b5e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003b48:	8abb      	ldrh	r3, [r7, #20]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	4619      	mov	r1, r3
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f96e 	bl	8003e34 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003b58:	8abb      	ldrh	r3, [r7, #20]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	82bb      	strh	r3, [r7, #20]
 8003b5e:	8aba      	ldrh	r2, [r7, #20]
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3f0      	bcc.n	8003b48 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b66:	f7ff fe13 	bl	8003790 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	2b84      	cmp	r3, #132	@ 0x84
 8003b6e:	d002      	beq.n	8003b76 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fa31 	bl	8003fd8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
 8003b82:	e001      	b.n	8003b88 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	715a      	strb	r2, [r3, #5]

    return status;
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	e000      	b.n	8003b9a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b088      	sub	sp, #32
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	461a      	mov	r2, r3
 8003bae:	460b      	mov	r3, r1
 8003bb0:	72fb      	strb	r3, [r7, #11]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	799b      	ldrb	r3, [r3, #6]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d13d      	bne.n	8003c40 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	795b      	ldrb	r3, [r3, #5]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e038      	b.n	8003c42 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9da 	bl	8003f90 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bdc:	f7ff fde8 	bl	80037b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003be0:	7afb      	ldrb	r3, [r7, #11]
 8003be2:	4619      	mov	r1, r3
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f925 	bl	8003e34 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003bea:	2100      	movs	r1, #0
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f921 	bl	8003e34 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	82fb      	strh	r3, [r7, #22]
 8003bf6:	e009      	b.n	8003c0c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003bf8:	69b9      	ldr	r1, [r7, #24]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f970 	bl	8003ee0 <SUBGHZSPI_Receive>
      pData++;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	3301      	adds	r3, #1
 8003c04:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	82fb      	strh	r3, [r7, #22]
 8003c0c:	8afa      	ldrh	r2, [r7, #22]
 8003c0e:	893b      	ldrh	r3, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3f1      	bcc.n	8003bf8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c14:	f7ff fdbc 	bl	8003790 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f9dd 	bl	8003fd8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e001      	b.n	8003c30 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	715a      	strb	r2, [r3, #5]

    return status;
 8003c3c:	7ffb      	ldrb	r3, [r7, #31]
 8003c3e:	e000      	b.n	8003c42 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	461a      	mov	r2, r3
 8003c56:	460b      	mov	r3, r1
 8003c58:	72fb      	strb	r3, [r7, #11]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	799b      	ldrb	r3, [r3, #6]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d13e      	bne.n	8003ce6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	795b      	ldrb	r3, [r3, #5]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e039      	b.n	8003ce8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f988 	bl	8003f90 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c80:	f7ff fd96 	bl	80037b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003c84:	210e      	movs	r1, #14
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f8d4 	bl	8003e34 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f8cf 	bl	8003e34 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	82bb      	strh	r3, [r7, #20]
 8003c9a:	e00a      	b.n	8003cb2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003c9c:	8abb      	ldrh	r3, [r7, #20]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f8c4 	bl	8003e34 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003cac:	8abb      	ldrh	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	82bb      	strh	r3, [r7, #20]
 8003cb2:	8aba      	ldrh	r2, [r7, #20]
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3f0      	bcc.n	8003c9c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003cba:	f7ff fd69 	bl	8003790 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f98a 	bl	8003fd8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
 8003cd0:	e001      	b.n	8003cd6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	715a      	strb	r2, [r3, #5]

    return status;
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	e000      	b.n	8003ce8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003cfc:	f107 020c 	add.w	r2, r7, #12
 8003d00:	2302      	movs	r3, #2
 8003d02:	2112      	movs	r1, #18
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff4c 	bl	8003ba2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003d0a:	7b3b      	ldrb	r3, [r7, #12]
 8003d0c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	7b7b      	ldrb	r3, [r7, #13]
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003d1e:	f107 020c 	add.w	r2, r7, #12
 8003d22:	2302      	movs	r3, #2
 8003d24:	2102      	movs	r1, #2
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fedc 	bl	8003ae4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003d2c:	89fb      	ldrh	r3, [r7, #14]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fdd6 	bl	80018e8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003d3c:	89fb      	ldrh	r3, [r7, #14]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8003d46:	89fb      	ldrh	r3, [r7, #14]
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd fdd7 	bl	8001904 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003d56:	89fb      	ldrh	r3, [r7, #14]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fe27 	bl	80019b4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003d66:	89fb      	ldrh	r3, [r7, #14]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fd fe2d 	bl	80019d0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003d76:	89fb      	ldrh	r3, [r7, #14]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fd fe33 	bl	80019ec <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003d86:	89fb      	ldrh	r3, [r7, #14]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fd fe01 	bl	8001998 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003d96:	89fb      	ldrh	r3, [r7, #14]
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd fdbd 	bl	8001920 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003da6:	89fb      	ldrh	r3, [r7, #14]
 8003da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003db0:	89fb      	ldrh	r3, [r7, #14]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003dba:	2101      	movs	r1, #1
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd fdbd 	bl	800193c <HAL_SUBGHZ_CADStatusCallback>
 8003dc2:	e003      	b.n	8003dcc <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd fdb8 	bl	800193c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003dcc:	89fb      	ldrh	r3, [r7, #14]
 8003dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fdce 	bl	8001978 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003ddc:	89fb      	ldrh	r3, [r7, #14]
 8003dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd fe0e 	bl	8001a08 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <SUBGHZSPI_Init+0x3c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0b      	ldr	r2, [pc, #44]	@ (8003e30 <SUBGHZSPI_Init+0x3c>)
 8003e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e06:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003e08:	4a09      	ldr	r2, [pc, #36]	@ (8003e30 <SUBGHZSPI_Init+0x3c>)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003e10:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003e12:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <SUBGHZSPI_Init+0x3c>)
 8003e14:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003e18:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003e1a:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <SUBGHZSPI_Init+0x3c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <SUBGHZSPI_Init+0x3c>)
 8003e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e24:	6013      	str	r3, [r2, #0]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	58010000 	.word	0x58010000

08003e34 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e44:	4b23      	ldr	r3, [pc, #140]	@ (8003ed4 <SUBGHZSPI_Transmit+0xa0>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	0cdb      	lsrs	r3, r3, #19
 8003e52:	2264      	movs	r2, #100	@ 0x64
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	609a      	str	r2, [r3, #8]
      break;
 8003e6a:	e008      	b.n	8003e7e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003e72:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <SUBGHZSPI_Transmit+0xa4>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d1ed      	bne.n	8003e5a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003e7e:	4b17      	ldr	r3, [pc, #92]	@ (8003edc <SUBGHZSPI_Transmit+0xa8>)
 8003e80:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e88:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <SUBGHZSPI_Transmit+0xa0>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	0cdb      	lsrs	r3, r3, #19
 8003e96:	2264      	movs	r2, #100	@ 0x64
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	609a      	str	r2, [r3, #8]
      break;
 8003eae:	e008      	b.n	8003ec2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003eb6:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <SUBGHZSPI_Transmit+0xa4>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d1ed      	bne.n	8003e9e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003ec2:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <SUBGHZSPI_Transmit+0xa4>)
 8003ec4:	68db      	ldr	r3, [r3, #12]

  return status;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	58010000 	.word	0x58010000
 8003edc:	5801000c 	.word	0x5801000c

08003ee0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003eee:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <SUBGHZSPI_Receive+0xa4>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	0cdb      	lsrs	r3, r3, #19
 8003efc:	2264      	movs	r2, #100	@ 0x64
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d105      	bne.n	8003f16 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	609a      	str	r2, [r3, #8]
      break;
 8003f14:	e008      	b.n	8003f28 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <SUBGHZSPI_Receive+0xa8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d1ed      	bne.n	8003f04 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003f28:	4b18      	ldr	r3, [pc, #96]	@ (8003f8c <SUBGHZSPI_Receive+0xac>)
 8003f2a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	22ff      	movs	r2, #255	@ 0xff
 8003f30:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <SUBGHZSPI_Receive+0xa4>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	0cdb      	lsrs	r3, r3, #19
 8003f40:	2264      	movs	r2, #100	@ 0x64
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	609a      	str	r2, [r3, #8]
      break;
 8003f58:	e008      	b.n	8003f6c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <SUBGHZSPI_Receive+0xa8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d1ed      	bne.n	8003f48 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <SUBGHZSPI_Receive+0xa8>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	701a      	strb	r2, [r3, #0]

  return status;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000000 	.word	0x20000000
 8003f88:	58010000 	.word	0x58010000
 8003f8c:	5801000c 	.word	0x5801000c

08003f90 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d111      	bne.n	8003fc4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <SUBGHZ_CheckDeviceReady+0x44>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003fb0:	f7ff fbfe 	bl	80037b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f9      	bne.n	8003fb4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003fc0:	f7ff fbe6 	bl	8003790 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f807 	bl	8003fd8 <SUBGHZ_WaitOnBusy>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000000 	.word	0x20000000

08003fd8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003fe4:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <SUBGHZ_WaitOnBusy+0x58>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	0d1b      	lsrs	r3, r3, #20
 8003ff2:	2264      	movs	r2, #100	@ 0x64
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003ffa:	f7ff fc07 	bl	800380c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003ffe:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	609a      	str	r2, [r3, #8]
      break;
 8004010:	e009      	b.n	8004026 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b01      	subs	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004018:	f7ff fbe6 	bl	80037e8 <LL_PWR_IsActiveFlag_RFBUSYS>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	2b01      	cmp	r3, #1
 8004024:	d0e9      	beq.n	8003ffa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000000 	.word	0x20000000

08004034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e049      	b.n	80040da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fbb6 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 f97a 	bl	800436c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d001      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e036      	b.n	800416a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a16      	ldr	r2, [pc, #88]	@ (8004174 <HAL_TIM_Base_Start_IT+0x90>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x44>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d115      	bne.n	8004154 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <HAL_TIM_Base_Start_IT+0x94>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d015      	beq.n	8004166 <HAL_TIM_Base_Start_IT+0x82>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004140:	d011      	beq.n	8004166 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	e008      	b.n	8004166 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e000      	b.n	8004168 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr
 8004174:	40012c00 	.word	0x40012c00
 8004178:	00010007 	.word	0x00010007

0800417c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10f      	bne.n	80041c4 <HAL_TIM_Base_Stop_IT+0x48>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_Base_Stop_IT+0x48>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_ConfigClockSource+0x1c>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e0b6      	b.n	8004362 <HAL_TIM_ConfigClockSource+0x18a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004212:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800421e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004230:	d03e      	beq.n	80042b0 <HAL_TIM_ConfigClockSource+0xd8>
 8004232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004236:	f200 8087 	bhi.w	8004348 <HAL_TIM_ConfigClockSource+0x170>
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423e:	f000 8086 	beq.w	800434e <HAL_TIM_ConfigClockSource+0x176>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004246:	d87f      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
 8004248:	2b70      	cmp	r3, #112	@ 0x70
 800424a:	d01a      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xaa>
 800424c:	2b70      	cmp	r3, #112	@ 0x70
 800424e:	d87b      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
 8004250:	2b60      	cmp	r3, #96	@ 0x60
 8004252:	d050      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x11e>
 8004254:	2b60      	cmp	r3, #96	@ 0x60
 8004256:	d877      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
 8004258:	2b50      	cmp	r3, #80	@ 0x50
 800425a:	d03c      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0xfe>
 800425c:	2b50      	cmp	r3, #80	@ 0x50
 800425e:	d873      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
 8004260:	2b40      	cmp	r3, #64	@ 0x40
 8004262:	d058      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x13e>
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d86f      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
 8004268:	2b30      	cmp	r3, #48	@ 0x30
 800426a:	d064      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x15e>
 800426c:	2b30      	cmp	r3, #48	@ 0x30
 800426e:	d86b      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
 8004270:	2b20      	cmp	r3, #32
 8004272:	d060      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x15e>
 8004274:	2b20      	cmp	r3, #32
 8004276:	d867      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d05c      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x15e>
 800427c:	2b10      	cmp	r3, #16
 800427e:	d05a      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x15e>
 8004280:	e062      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	f000 f952 	bl	800453a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	609a      	str	r2, [r3, #8]
      break;
 80042ae:	e04f      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	f000 f93b 	bl	800453a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042d2:	609a      	str	r2, [r3, #8]
      break;
 80042d4:	e03c      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e2:	461a      	mov	r2, r3
 80042e4:	f000 f8b0 	bl	8004448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2150      	movs	r1, #80	@ 0x50
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f907 	bl	8004502 <TIM_ITRx_SetConfig>
      break;
 80042f4:	e02c      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004302:	461a      	mov	r2, r3
 8004304:	f000 f8ce 	bl	80044a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2160      	movs	r1, #96	@ 0x60
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f8f7 	bl	8004502 <TIM_ITRx_SetConfig>
      break;
 8004314:	e01c      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	461a      	mov	r2, r3
 8004324:	f000 f890 	bl	8004448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2140      	movs	r1, #64	@ 0x40
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f8e7 	bl	8004502 <TIM_ITRx_SetConfig>
      break;
 8004334:	e00c      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f000 f8de 	bl	8004502 <TIM_ITRx_SetConfig>
      break;
 8004346:	e003      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
      break;
 800434c:	e000      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800434e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a2f      	ldr	r2, [pc, #188]	@ (800443c <TIM_Base_SetConfig+0xd0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0x20>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438a:	d108      	bne.n	800439e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a26      	ldr	r2, [pc, #152]	@ (800443c <TIM_Base_SetConfig+0xd0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x52>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x52>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a23      	ldr	r2, [pc, #140]	@ (8004440 <TIM_Base_SetConfig+0xd4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x52>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a22      	ldr	r2, [pc, #136]	@ (8004444 <TIM_Base_SetConfig+0xd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a11      	ldr	r2, [pc, #68]	@ (800443c <TIM_Base_SetConfig+0xd0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_Base_SetConfig+0xa0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a10      	ldr	r2, [pc, #64]	@ (8004440 <TIM_Base_SetConfig+0xd4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0xa0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0f      	ldr	r2, [pc, #60]	@ (8004444 <TIM_Base_SetConfig+0xd8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d103      	bne.n	8004414 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]
  }
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800

08004448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0201 	bic.w	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 030a 	bic.w	r3, r3, #10
 8004484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0210 	bic.w	r2, r3, #16
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	031b      	lsls	r3, r3, #12
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr

08004502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	f043 0307 	orr.w	r3, r3, #7
 8004528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800453a:	b480      	push	{r7}
 800453c:	b087      	sub	sp, #28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004554:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	021a      	lsls	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	431a      	orrs	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4313      	orrs	r3, r2
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	609a      	str	r2, [r3, #8]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e04a      	b.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d108      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a11      	ldr	r2, [pc, #68]	@ (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f8:	d10c      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00

08004634 <LL_RCC_GetUSARTClockSource>:
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004640:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	401a      	ands	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	041b      	lsls	r3, r3, #16
 800464c:	4313      	orrs	r3, r2
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <LL_RCC_GetLPUARTClockSource>:
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004664:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4013      	ands	r3, r2
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e042      	b.n	800470e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc f98a 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	@ 0x24
 80046a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb23 	bl	8004d0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8ac 	bl	8004824 <UART_SetConfig>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e01b      	b.n	800470e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fba1 	bl	8004e4e <UART_CheckIdleState>
 800470c:	4603      	mov	r3, r0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b08a      	sub	sp, #40	@ 0x28
 800471a:	af02      	add	r7, sp, #8
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472c:	2b20      	cmp	r3, #32
 800472e:	d173      	bne.n	8004818 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_UART_Transmit+0x26>
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e06c      	b.n	800481a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2221      	movs	r2, #33	@ 0x21
 800474c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004750:	f7fd f9f8 	bl	8001b44 <HAL_GetTick>
 8004754:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	88fa      	ldrh	r2, [r7, #6]
 8004762:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476e:	d108      	bne.n	8004782 <HAL_UART_Transmit+0x6c>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e003      	b.n	800478a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800478a:	e02c      	b.n	80047e6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	2180      	movs	r1, #128	@ 0x80
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fba7 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e039      	b.n	800481a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	3302      	adds	r3, #2
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e007      	b.n	80047d4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3301      	adds	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1cc      	bne.n	800478c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2140      	movs	r1, #64	@ 0x40
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fb74 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e006      	b.n	800481a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004818:	2302      	movs	r3, #2
  }
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004828:	b08c      	sub	sp, #48	@ 0x30
 800482a:	af00      	add	r7, sp, #0
 800482c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	431a      	orrs	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4313      	orrs	r3, r2
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b94      	ldr	r3, [pc, #592]	@ (8004aa4 <UART_SetConfig+0x280>)
 8004854:	4013      	ands	r3, r2
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800485c:	430b      	orrs	r3, r1
 800485e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a89      	ldr	r2, [pc, #548]	@ (8004aa8 <UART_SetConfig+0x284>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800488c:	4313      	orrs	r3, r2
 800488e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800489a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	f023 010f 	bic.w	r1, r3, #15
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7a      	ldr	r2, [pc, #488]	@ (8004aac <UART_SetConfig+0x288>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d127      	bne.n	8004918 <UART_SetConfig+0xf4>
 80048c8:	2003      	movs	r0, #3
 80048ca:	f7ff feb3 	bl	8004634 <LL_RCC_GetUSARTClockSource>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d81b      	bhi.n	8004910 <UART_SetConfig+0xec>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <UART_SetConfig+0xbc>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	08004901 	.word	0x08004901
 80048e8:	080048f9 	.word	0x080048f9
 80048ec:	08004909 	.word	0x08004909
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f6:	e080      	b.n	80049fa <UART_SetConfig+0x1d6>
 80048f8:	2302      	movs	r3, #2
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fe:	e07c      	b.n	80049fa <UART_SetConfig+0x1d6>
 8004900:	2304      	movs	r3, #4
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004906:	e078      	b.n	80049fa <UART_SetConfig+0x1d6>
 8004908:	2308      	movs	r3, #8
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490e:	e074      	b.n	80049fa <UART_SetConfig+0x1d6>
 8004910:	2310      	movs	r3, #16
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004916:	e070      	b.n	80049fa <UART_SetConfig+0x1d6>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a64      	ldr	r2, [pc, #400]	@ (8004ab0 <UART_SetConfig+0x28c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d138      	bne.n	8004994 <UART_SetConfig+0x170>
 8004922:	200c      	movs	r0, #12
 8004924:	f7ff fe86 	bl	8004634 <LL_RCC_GetUSARTClockSource>
 8004928:	4603      	mov	r3, r0
 800492a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d82c      	bhi.n	800498c <UART_SetConfig+0x168>
 8004932:	a201      	add	r2, pc, #4	@ (adr r2, 8004938 <UART_SetConfig+0x114>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800496d 	.word	0x0800496d
 800493c:	0800498d 	.word	0x0800498d
 8004940:	0800498d 	.word	0x0800498d
 8004944:	0800498d 	.word	0x0800498d
 8004948:	0800497d 	.word	0x0800497d
 800494c:	0800498d 	.word	0x0800498d
 8004950:	0800498d 	.word	0x0800498d
 8004954:	0800498d 	.word	0x0800498d
 8004958:	08004975 	.word	0x08004975
 800495c:	0800498d 	.word	0x0800498d
 8004960:	0800498d 	.word	0x0800498d
 8004964:	0800498d 	.word	0x0800498d
 8004968:	08004985 	.word	0x08004985
 800496c:	2300      	movs	r3, #0
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e042      	b.n	80049fa <UART_SetConfig+0x1d6>
 8004974:	2302      	movs	r3, #2
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800497a:	e03e      	b.n	80049fa <UART_SetConfig+0x1d6>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004982:	e03a      	b.n	80049fa <UART_SetConfig+0x1d6>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800498a:	e036      	b.n	80049fa <UART_SetConfig+0x1d6>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004992:	e032      	b.n	80049fa <UART_SetConfig+0x1d6>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a43      	ldr	r2, [pc, #268]	@ (8004aa8 <UART_SetConfig+0x284>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d12a      	bne.n	80049f4 <UART_SetConfig+0x1d0>
 800499e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80049a2:	f7ff fe59 	bl	8004658 <LL_RCC_GetLPUARTClockSource>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049ac:	d01a      	beq.n	80049e4 <UART_SetConfig+0x1c0>
 80049ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049b2:	d81b      	bhi.n	80049ec <UART_SetConfig+0x1c8>
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b8:	d00c      	beq.n	80049d4 <UART_SetConfig+0x1b0>
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049be:	d815      	bhi.n	80049ec <UART_SetConfig+0x1c8>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <UART_SetConfig+0x1a8>
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c8:	d008      	beq.n	80049dc <UART_SetConfig+0x1b8>
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x1c8>
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d2:	e012      	b.n	80049fa <UART_SetConfig+0x1d6>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049da:	e00e      	b.n	80049fa <UART_SetConfig+0x1d6>
 80049dc:	2304      	movs	r3, #4
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e2:	e00a      	b.n	80049fa <UART_SetConfig+0x1d6>
 80049e4:	2308      	movs	r3, #8
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ea:	e006      	b.n	80049fa <UART_SetConfig+0x1d6>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e002      	b.n	80049fa <UART_SetConfig+0x1d6>
 80049f4:	2310      	movs	r3, #16
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa8 <UART_SetConfig+0x284>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	f040 80a4 	bne.w	8004b4e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d823      	bhi.n	8004a56 <UART_SetConfig+0x232>
 8004a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <UART_SetConfig+0x1f0>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a57 	.word	0x08004a57
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a57 	.word	0x08004a57
 8004a24:	08004a47 	.word	0x08004a47
 8004a28:	08004a57 	.word	0x08004a57
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	08004a57 	.word	0x08004a57
 8004a34:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe fbb2 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a3e:	e010      	b.n	8004a62 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a40:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab4 <UART_SetConfig+0x290>)
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a44:	e00d      	b.n	8004a62 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a46:	f7fe faf7 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8004a4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a4c:	e009      	b.n	8004a62 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a54:	e005      	b.n	8004a62 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8137 	beq.w	8004cd8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	4a12      	ldr	r2, [pc, #72]	@ (8004ab8 <UART_SetConfig+0x294>)
 8004a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4413      	add	r3, r2
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d305      	bcc.n	8004a9a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d910      	bls.n	8004abc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004aa0:	e11a      	b.n	8004cd8 <UART_SetConfig+0x4b4>
 8004aa2:	bf00      	nop
 8004aa4:	cfff69f3 	.word	0xcfff69f3
 8004aa8:	40008000 	.word	0x40008000
 8004aac:	40013800 	.word	0x40013800
 8004ab0:	40004400 	.word	0x40004400
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	08005964 	.word	0x08005964
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	2200      	movs	r2, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	60fa      	str	r2, [r7, #12]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	4a8e      	ldr	r2, [pc, #568]	@ (8004d04 <UART_SetConfig+0x4e0>)
 8004aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ade:	f7fb fb53 	bl	8000188 <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	020b      	lsls	r3, r1, #8
 8004af4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004af8:	0202      	lsls	r2, r0, #8
 8004afa:	6979      	ldr	r1, [r7, #20]
 8004afc:	6849      	ldr	r1, [r1, #4]
 8004afe:	0849      	lsrs	r1, r1, #1
 8004b00:	2000      	movs	r0, #0
 8004b02:	460c      	mov	r4, r1
 8004b04:	4605      	mov	r5, r0
 8004b06:	eb12 0804 	adds.w	r8, r2, r4
 8004b0a:	eb43 0905 	adc.w	r9, r3, r5
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	469a      	mov	sl, r3
 8004b16:	4693      	mov	fp, r2
 8004b18:	4652      	mov	r2, sl
 8004b1a:	465b      	mov	r3, fp
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	4649      	mov	r1, r9
 8004b20:	f7fb fb32 	bl	8000188 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b32:	d308      	bcc.n	8004b46 <UART_SetConfig+0x322>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b3a:	d204      	bcs.n	8004b46 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a3a      	ldr	r2, [r7, #32]
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	e0c8      	b.n	8004cd8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b4c:	e0c4      	b.n	8004cd8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b56:	d167      	bne.n	8004c28 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004b58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d828      	bhi.n	8004bb2 <UART_SetConfig+0x38e>
 8004b60:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <UART_SetConfig+0x344>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004b95 	.word	0x08004b95
 8004b70:	08004b9d 	.word	0x08004b9d
 8004b74:	08004bb3 	.word	0x08004bb3
 8004b78:	08004ba3 	.word	0x08004ba3
 8004b7c:	08004bb3 	.word	0x08004bb3
 8004b80:	08004bb3 	.word	0x08004bb3
 8004b84:	08004bb3 	.word	0x08004bb3
 8004b88:	08004bab 	.word	0x08004bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b8c:	f7fe fb08 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b92:	e014      	b.n	8004bbe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b94:	f7fe fb16 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8004b98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b9a:	e010      	b.n	8004bbe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8004d08 <UART_SetConfig+0x4e4>)
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ba0:	e00d      	b.n	8004bbe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba2:	f7fe fa49 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8004ba6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ba8:	e009      	b.n	8004bbe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bb0:	e005      	b.n	8004bbe <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8089 	beq.w	8004cd8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	4a4e      	ldr	r2, [pc, #312]	@ (8004d04 <UART_SetConfig+0x4e0>)
 8004bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bd8:	005a      	lsls	r2, r3, #1
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	441a      	add	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d916      	bls.n	8004c20 <UART_SetConfig+0x3fc>
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf8:	d212      	bcs.n	8004c20 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f023 030f 	bic.w	r3, r3, #15
 8004c02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	8bfb      	ldrh	r3, [r7, #30]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	8bfa      	ldrh	r2, [r7, #30]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	e05b      	b.n	8004cd8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c26:	e057      	b.n	8004cd8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d828      	bhi.n	8004c82 <UART_SetConfig+0x45e>
 8004c30:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <UART_SetConfig+0x414>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	08004c83 	.word	0x08004c83
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c83 	.word	0x08004c83
 8004c50:	08004c83 	.word	0x08004c83
 8004c54:	08004c83 	.word	0x08004c83
 8004c58:	08004c7b 	.word	0x08004c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5c:	f7fe faa0 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8004c60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c62:	e014      	b.n	8004c8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe faae 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8004c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c6a:	e010      	b.n	8004c8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b26      	ldr	r3, [pc, #152]	@ (8004d08 <UART_SetConfig+0x4e4>)
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c70:	e00d      	b.n	8004c8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7fe f9e1 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8004c76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c78:	e009      	b.n	8004c8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c80:	e005      	b.n	8004c8e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d021      	beq.n	8004cd8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	4a1a      	ldr	r2, [pc, #104]	@ (8004d04 <UART_SetConfig+0x4e0>)
 8004c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	441a      	add	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b0f      	cmp	r3, #15
 8004cbc:	d909      	bls.n	8004cd2 <UART_SetConfig+0x4ae>
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc4:	d205      	bcs.n	8004cd2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e002      	b.n	8004cd8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2200      	movs	r2, #0
 8004cec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004cf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3730      	adds	r7, #48	@ 0x30
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d02:	bf00      	nop
 8004d04:	08005964 	.word	0x08005964
 8004d08:	00f42400 	.word	0x00f42400

08004d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01a      	beq.n	8004e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e0a:	d10a      	bne.n	8004e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af02      	add	r7, sp, #8
 8004e54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e5e:	f7fc fe71 	bl	8001b44 <HAL_GetTick>
 8004e62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d10e      	bne.n	8004e90 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f832 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e028      	b.n	8004ee2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d10e      	bne.n	8004ebc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f81c 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e012      	b.n	8004ee2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b09c      	sub	sp, #112	@ 0x70
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efa:	e0af      	b.n	800505c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	f000 80ab 	beq.w	800505c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f06:	f7fc fe1d 	bl	8001b44 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d302      	bcc.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d140      	bne.n	8004f9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f2c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e6      	bne.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f6e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f70:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e5      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e06f      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d057      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x172>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d054      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x172>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b40      	cmp	r3, #64	@ 0x40
 8004fb6:	d051      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc6:	d149      	bne.n	800505c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3308      	adds	r3, #8
 800500a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	613b      	str	r3, [r7, #16]
   return(result);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f023 0301 	bic.w	r3, r3, #1
 800501a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005024:	623a      	str	r2, [r7, #32]
 8005026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	69f9      	ldr	r1, [r7, #28]
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	61bb      	str	r3, [r7, #24]
   return(result);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e5      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e010      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4013      	ands	r3, r2
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	429a      	cmp	r2, r3
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	429a      	cmp	r2, r3
 8005078:	f43f af40 	beq.w	8004efc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3770      	adds	r7, #112	@ 0x70
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_UARTEx_DisableFifoMode+0x16>
 8005098:	2302      	movs	r3, #2
 800509a:	e027      	b.n	80050ec <HAL_UARTEx_DisableFifoMode+0x66>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	@ 0x24
 80050a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800510a:	2302      	movs	r3, #2
 800510c:	e02d      	b.n	800516a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	@ 0x24
 800511a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f850 	bl	80051f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005186:	2302      	movs	r3, #2
 8005188:	e02d      	b.n	80051e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	@ 0x24
 8005196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f812 	bl	80051f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005210:	e031      	b.n	8005276 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005212:	2308      	movs	r3, #8
 8005214:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005216:	2308      	movs	r3, #8
 8005218:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	0e5b      	lsrs	r3, r3, #25
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	0f5b      	lsrs	r3, r3, #29
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	7b3a      	ldrb	r2, [r7, #12]
 800523e:	4910      	ldr	r1, [pc, #64]	@ (8005280 <UARTEx_SetNbDataToProcess+0x90>)
 8005240:	5c8a      	ldrb	r2, [r1, r2]
 8005242:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005246:	7b3a      	ldrb	r2, [r7, #12]
 8005248:	490e      	ldr	r1, [pc, #56]	@ (8005284 <UARTEx_SetNbDataToProcess+0x94>)
 800524a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800524c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	7b7a      	ldrb	r2, [r7, #13]
 800525c:	4908      	ldr	r1, [pc, #32]	@ (8005280 <UARTEx_SetNbDataToProcess+0x90>)
 800525e:	5c8a      	ldrb	r2, [r1, r2]
 8005260:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005264:	7b7a      	ldrb	r2, [r7, #13]
 8005266:	4907      	ldr	r1, [pc, #28]	@ (8005284 <UARTEx_SetNbDataToProcess+0x94>)
 8005268:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800526a:	fb93 f3f2 	sdiv	r3, r3, r2
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	0800597c 	.word	0x0800597c
 8005284:	08005984 	.word	0x08005984

08005288 <setStateMode>:

/*	Sitting operation mode
 *	0 = STATE_MASTER
 *  1 = STATE_SLAVE
 */
LoRaState setStateMode (uint8_t  mode) {
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
	if (mode == 0) return STATE_MASTER;
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <setStateMode+0x14>
 8005298:	2301      	movs	r3, #1
 800529a:	e005      	b.n	80052a8 <setStateMode+0x20>
	if (mode == 1) return STATE_SLAVE;
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <setStateMode+0x1e>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e000      	b.n	80052a8 <setStateMode+0x20>

	return STATE_NULL;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr
	...

080052b4 <getDefaultLoRaConfig>:

LoRaConfig getDefaultLoRaConfig (void) {
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	return (LoRaConfig){
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a04      	ldr	r2, [pc, #16]	@ (80052d0 <getDefaultLoRaConfig+0x1c>)
 80052c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80052c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.lora_spreading_factor =7,
		.lora_codingrate = 1,
		.lora_preamble_length = 8,
		.lora_symbol_timeout = 5,
	};
}
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr
 80052d0:	08005894 	.word	0x08005894

080052d4 <LoraInit>:
    if (conf.lora_symbol_timeout >= 0) config.lora_symbol_timeout = conf.lora_symbol_timeout;

    return config;
}

void LoraInit(LoRaConfig config) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08c      	sub	sp, #48	@ 0x30
 80052d8:	af00      	add	r7, sp, #0
 80052da:	1d3b      	adds	r3, r7, #4
 80052dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 80052e0:	4835      	ldr	r0, [pc, #212]	@ (80053b8 <LoraInit+0xe4>)
 80052e2:	f7fb fd19 	bl	8000d18 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 80052e6:	f640 1016 	movw	r0, #2326	@ 0x916
 80052ea:	f7fc fa27 	bl	800173c <SUBGRF_ReadRegister>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	f640 1016 	movw	r0, #2326	@ 0x916
 80052fc:	f7fc fa0a 	bl	8001714 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 8005300:	f7fb fe21 	bl	8000f46 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8005304:	2100      	movs	r1, #0
 8005306:	2000      	movs	r0, #0
 8005308:	f7fc f9ec 	bl	80016e4 <SUBGRF_SetBufferBaseAddress>

	//Set Operating Frequency and Transmission Power
	SUBGRF_SetRfFrequency(config.rf_frequency);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb ff3e 	bl	8001190 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(config.tx_output_power);
 8005314:	7a3b      	ldrb	r3, [r7, #8]
 8005316:	b25b      	sxtb	r3, r3
 8005318:	4618      	mov	r0, r3
 800531a:	f7fc fab1 	bl	8001880 <SUBGRF_SetRfTxPower>

	//Preamble Interrupt Timer Configuration
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 800531e:	2000      	movs	r0, #0
 8005320:	f7fb fe02 	bl	8000f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	//Set Packet Type to LoRa
	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8005324:	2001      	movs	r0, #1
 8005326:	f7fb ff79 	bl	800121c <SUBGRF_SetPacketType>

	//Sync Word Setup
	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800532a:	2114      	movs	r1, #20
 800532c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8005330:	f7fc f9f0 	bl	8001714 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005334:	2124      	movs	r1, #36	@ 0x24
 8005336:	f240 7041 	movw	r0, #1857	@ 0x741
 800533a:	f7fc f9eb 	bl	8001714 <SUBGRF_WriteRegister>
	 * Coding rate: Defined by config.lora_codingrate
	 * Spreading Factor: Defined by config.lora_spreading_factor
	 * Low Data Rate Optimization: Disabled with value 0x00
	 */
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 800533e:	2301      	movs	r3, #1
 8005340:	753b      	strb	r3, [r7, #20]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[config.lora_bandwidth];
 8005342:	7a7b      	ldrb	r3, [r7, #9]
 8005344:	461a      	mov	r2, r3
 8005346:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <LoraInit+0xe8>)
 8005348:	5c9b      	ldrb	r3, [r3, r2]
 800534a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)config.lora_codingrate;
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)config.lora_spreading_factor;
 800535a:	7abb      	ldrb	r3, [r7, #10]
 800535c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	SUBGRF_SetModulationParams(&modulationParams);
 8005360:	f107 0314 	add.w	r3, r7, #20
 8005364:	4618      	mov	r0, r3
 8005366:	f7fc f84d 	bl	8001404 <SUBGRF_SetModulationParams>
	 * CRC Mode: Enables cyclic redundancy checking (CRC) to ensure packet integrity
	 * HeaderType: Defines the packet header type as variable length
	 * InvertIQ: Sets the inversion of IQ polarity (normal)
	 * Preamble Length: Used the value from config.lora_preamble_length
	 */
	packetParams.PacketType = PACKET_TYPE_LORA;
 800536a:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <LoraInit+0xec>)
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8005370:	4b13      	ldr	r3, [pc, #76]	@ (80053c0 <LoraInit+0xec>)
 8005372:	2201      	movs	r2, #1
 8005374:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8005376:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <LoraInit+0xec>)
 8005378:	2200      	movs	r2, #0
 800537a:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 800537c:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <LoraInit+0xec>)
 800537e:	2200      	movs	r2, #0
 8005380:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8005382:	4b0f      	ldr	r3, [pc, #60]	@ (80053c0 <LoraInit+0xec>)
 8005384:	22ff      	movs	r2, #255	@ 0xff
 8005386:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = config.lora_preamble_length;
 8005388:	7b3b      	ldrb	r3, [r7, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <LoraInit+0xec>)
 800538e:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8005390:	480b      	ldr	r0, [pc, #44]	@ (80053c0 <LoraInit+0xec>)
 8005392:	f7fc f909 	bl	80015a8 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005396:	f240 7036 	movw	r0, #1846	@ 0x736
 800539a:	f7fc f9cf 	bl	800173c <SUBGRF_ReadRegister>
 800539e:	4603      	mov	r3, r0
 80053a0:	f043 0304 	orr.w	r3, r3, #4
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	f240 7036 	movw	r0, #1846	@ 0x736
 80053ac:	f7fc f9b2 	bl	8001714 <SUBGRF_WriteRegister>
}
 80053b0:	bf00      	nop
 80053b2:	3730      	adds	r7, #48	@ 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	080053c5 	.word	0x080053c5
 80053bc:	0800598c 	.word	0x0800598c
 80053c0:	200001b4 	.word	0x200001b4

080053c4 <RadioOnDioIrq>:

#include "LoRaEvents.h"

volatile LoRaIrqStatus lastEventStatus = IRQ_DEFAULT_RETURN_STATUS;

void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	80fb      	strh	r3, [r7, #6]
	lastEventStatus = LoRaEventHandler(radioIrq);
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f80b 	bl	80053ec <LoRaEventHandler>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	4b03      	ldr	r3, [pc, #12]	@ (80053e8 <RadioOnDioIrq+0x24>)
 80053dc:	701a      	strb	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000009 	.word	0x20000009

080053ec <LoRaEventHandler>:

LoRaIrqStatus LoRaEventHandler(RadioIrqMasks_t radioIrq) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq) {
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fc:	d00f      	beq.n	800541e <LoRaEventHandler+0x32>
 80053fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005402:	dc10      	bgt.n	8005426 <LoRaEventHandler+0x3a>
 8005404:	2b40      	cmp	r3, #64	@ 0x40
 8005406:	d00c      	beq.n	8005422 <LoRaEventHandler+0x36>
 8005408:	2b40      	cmp	r3, #64	@ 0x40
 800540a:	dc0c      	bgt.n	8005426 <LoRaEventHandler+0x3a>
 800540c:	2b01      	cmp	r3, #1
 800540e:	d002      	beq.n	8005416 <LoRaEventHandler+0x2a>
 8005410:	2b02      	cmp	r3, #2
 8005412:	d002      	beq.n	800541a <LoRaEventHandler+0x2e>
 8005414:	e007      	b.n	8005426 <LoRaEventHandler+0x3a>
        case IRQ_TX_DONE:
            return IRQ_TX_DONE_STATUS;
 8005416:	2300      	movs	r3, #0
 8005418:	e006      	b.n	8005428 <LoRaEventHandler+0x3c>
        case IRQ_RX_DONE:
            return IRQ_RX_DONE_STATUS;
 800541a:	2301      	movs	r3, #1
 800541c:	e004      	b.n	8005428 <LoRaEventHandler+0x3c>
        case IRQ_RX_TX_TIMEOUT:
            return IRQ_RX_TX_TIMEOUT_STATUS;
 800541e:	2302      	movs	r3, #2
 8005420:	e002      	b.n	8005428 <LoRaEventHandler+0x3c>
        case IRQ_CRC_ERROR:
            return IRQ_CRC_ERROR_STATUS;
 8005422:	2303      	movs	r3, #3
 8005424:	e000      	b.n	8005428 <LoRaEventHandler+0x3c>
        default:
            return IRQ_DEFAULT_RETURN_STATUS;
 8005426:	2399      	movs	r3, #153	@ 0x99
    }
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr
	...

08005434 <getLastLoRaEvent>:

LoRaIrqStatus getLastLoRaEvent(void) {
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
    return lastEventStatus;
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <getLastLoRaEvent+0x14>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
}
 800543e:	4618      	mov	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000009 	.word	0x20000009

0800544c <SendMessage>:
 *      Author: Luiz Fernando Silvério Felisbino
 */

#include "LoRaMessageHandler.h"

LoRaIrqStatus SendMessage(const char *message) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	if (message == NULL || strlen(message) == 0) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <SendMessage+0x16>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <SendMessage+0x1a>
		return IRQ_CRC_ERROR_STATUS;  // Invalid message
 8005462:	2303      	movs	r3, #3
 8005464:	e02f      	b.n	80054c6 <SendMessage+0x7a>
	}

	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8005466:	2300      	movs	r3, #0
 8005468:	2200      	movs	r2, #0
 800546a:	f240 2101 	movw	r1, #513	@ 0x201
 800546e:	f240 2001 	movw	r0, #513	@ 0x201
 8005472:	f7fb fe31 	bl	80010d8 <SUBGRF_SetDioIrqParams>
	                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8005476:	2101      	movs	r1, #1
 8005478:	2001      	movs	r0, #1
 800547a:	f7fc f9d9 	bl	8001830 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 800547e:	f640 0089 	movw	r0, #2185	@ 0x889
 8005482:	f7fc f95b 	bl	800173c <SUBGRF_ReadRegister>
 8005486:	4603      	mov	r3, r0
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	b2db      	uxtb	r3, r3
 800548e:	4619      	mov	r1, r3
 8005490:	f640 0089 	movw	r0, #2185	@ 0x889
 8005494:	f7fc f93e 	bl	8001714 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = strlen(message);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fa fe6d 	bl	8000178 <strlen>
 800549e:	4603      	mov	r3, r0
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <SendMessage+0x84>)
 80054a4:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 80054a6:	480a      	ldr	r0, [pc, #40]	@ (80054d0 <SendMessage+0x84>)
 80054a8:	f7fc f87e 	bl	80015a8 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t *)message, strlen(message), 0);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fa fe63 	bl	8000178 <strlen>
 80054b2:	4603      	mov	r3, r0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb fc84 	bl	8000dc8 <SUBGRF_SendPayload>

	return getLastLoRaEvent();
 80054c0:	f7ff ffb8 	bl	8005434 <getLastLoRaEvent>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200001b4 	.word	0x200001b4

080054d4 <mainLoRa>:
enum CarState car = STATE_NULL;
enum CarState LastState = STATE_NULL;
bool connected = false;
uint8_t elapse_time = 0;

void mainLoRa(void) {
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 80054da:	af40      	add	r7, sp, #256	@ 0x100
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80054dc:	2029      	movs	r0, #41	@ 0x29
 80054de:	f7fc fc82 	bl	8001de6 <HAL_NVIC_DisableIRQ>
    ConfigRES RES;
    LoraInit(getDefaultLoRaConfig());
 80054e2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fee4 	bl	80052b4 <getDefaultLoRaConfig>
 80054ec:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80054f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054f4:	f7ff feee 	bl	80052d4 <LoraInit>
    RES.rxTimeout = 3000;
 80054f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005500:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005504:	605a      	str	r2, [r3, #4]
    RES.rxMargin = 200;
 8005506:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800550a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800550e:	22c8      	movs	r2, #200	@ 0xc8
 8005510:	609a      	str	r2, [r3, #8]
    RES.state = setStateMode(STATE_MODE);
 8005512:	2001      	movs	r0, #1
 8005514:	f7ff feb8 	bl	8005288 <setStateMode>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005520:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005524:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 8005526:	2300      	movs	r3, #0
 8005528:	2200      	movs	r2, #0
 800552a:	f240 2142 	movw	r1, #578	@ 0x242
 800552e:	f240 2042 	movw	r0, #578	@ 0x242
 8005532:	f7fb fdd1 	bl	80010d8 <SUBGRF_SetDioIrqParams>
        IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
        IRQ_RADIO_NONE,
        IRQ_RADIO_NONE );
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8005536:	2100      	movs	r1, #0
 8005538:	2001      	movs	r0, #1
 800553a:	f7fc f979 	bl	8001830 <SUBGRF_SetSwitch>
    SUBGRF_SetRx(RES.rxTimeout << 6);
 800553e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005542:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	019b      	lsls	r3, r3, #6
 800554a:	4618      	mov	r0, r3
 800554c:	f7fb fccc 	bl	8000ee8 <SUBGRF_SetRx>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005550:	2029      	movs	r0, #41	@ 0x29
 8005552:	f7fc fc3a 	bl	8001dca <HAL_NVIC_EnableIRQ>
    HAL_TIM_Base_Stop_IT(&htim1);
 8005556:	481b      	ldr	r0, [pc, #108]	@ (80055c4 <mainLoRa+0xf0>)
 8005558:	f7fe fe10 	bl	800417c <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800555c:	4b19      	ldr	r3, [pc, #100]	@ (80055c4 <mainLoRa+0xf0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2200      	movs	r2, #0
 8005562:	625a      	str	r2, [r3, #36]	@ 0x24


    while(true){
    	if (RES.state == STATE_MASTER) MasterController(RES);
 8005564:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005568:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d110      	bne.n	8005594 <mainLoRa+0xc0>
 8005572:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005576:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 800557a:	4668      	mov	r0, sp
 800557c:	f104 0310 	add.w	r3, r4, #16
 8005580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005584:	4619      	mov	r1, r3
 8005586:	f000 f953 	bl	8005830 <memcpy>
 800558a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800558e:	f000 f8b5 	bl	80056fc <MasterController>
 8005592:	e7e7      	b.n	8005564 <mainLoRa+0x90>
    	else if (RES.state == STATE_SLAVE) SlaveController(RES);
 8005594:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005598:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d1e0      	bne.n	8005564 <mainLoRa+0x90>
 80055a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055a6:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 80055aa:	4668      	mov	r0, sp
 80055ac:	f104 0310 	add.w	r3, r4, #16
 80055b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055b4:	4619      	mov	r1, r3
 80055b6:	f000 f93b 	bl	8005830 <memcpy>
 80055ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80055be:	f000 f82d 	bl	800561c <SlaveController>
    	if (RES.state == STATE_MASTER) MasterController(RES);
 80055c2:	e7cf      	b.n	8005564 <mainLoRa+0x90>
 80055c4:	20000034 	.word	0x20000034

080055c8 <ChangeState>:

void HAL_Tim_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim == &htim1) elapse_time++;
}

void ChangeState (enum CarState state) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	71fb      	strb	r3, [r7, #7]
	switch (state){
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d00e      	beq.n	80055f6 <ChangeState+0x2e>
 80055d8:	2b03      	cmp	r3, #3
 80055da:	dc10      	bgt.n	80055fe <ChangeState+0x36>
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d002      	beq.n	80055e6 <ChangeState+0x1e>
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d004      	beq.n	80055ee <ChangeState+0x26>
 80055e4:	e00b      	b.n	80055fe <ChangeState+0x36>
		case READY:
			car = READY;
 80055e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <ChangeState+0x4c>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	701a      	strb	r2, [r3, #0]
			break;
 80055ec:	e007      	b.n	80055fe <ChangeState+0x36>
		case GO:
			car = GO;
 80055ee:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <ChangeState+0x4c>)
 80055f0:	2202      	movs	r2, #2
 80055f2:	701a      	strb	r2, [r3, #0]
			break;
 80055f4:	e003      	b.n	80055fe <ChangeState+0x36>
		case EMERGENCY:
			car = EMERGENCY;
 80055f6:	4b07      	ldr	r3, [pc, #28]	@ (8005614 <ChangeState+0x4c>)
 80055f8:	2203      	movs	r2, #3
 80055fa:	701a      	strb	r2, [r3, #0]
			break;
 80055fc:	bf00      	nop
	}
	HAL_UART_Transmit(&huart1, &car, 1, HAL_MAX_DELAY);
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	2201      	movs	r2, #1
 8005604:	4903      	ldr	r1, [pc, #12]	@ (8005614 <ChangeState+0x4c>)
 8005606:	4804      	ldr	r0, [pc, #16]	@ (8005618 <ChangeState+0x50>)
 8005608:	f7ff f885 	bl	8004716 <HAL_UART_Transmit>
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	200001c8 	.word	0x200001c8
 8005618:	20000080 	.word	0x20000080

0800561c <SlaveController>:

void SlaveController (ConfigRES RES) {
 800561c:	b084      	sub	sp, #16
 800561e:	b580      	push	{r7, lr}
 8005620:	b0c0      	sub	sp, #256	@ 0x100
 8005622:	af00      	add	r7, sp, #0
 8005624:	f507 7c84 	add.w	ip, r7, #264	@ 0x108
 8005628:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char uartBuff[255];
	while (true) {
		HAL_UART_Transmit(&huart1, &car, 1, HAL_MAX_DELAY);
 800562c:	f04f 33ff 	mov.w	r3, #4294967295
 8005630:	2201      	movs	r2, #1
 8005632:	4928      	ldr	r1, [pc, #160]	@ (80056d4 <SlaveController+0xb8>)
 8005634:	4828      	ldr	r0, [pc, #160]	@ (80056d8 <SlaveController+0xbc>)
 8005636:	f7ff f86e 	bl	8004716 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &car, 1, HAL_MAX_DELAY);
 800563a:	f04f 33ff 	mov.w	r3, #4294967295
 800563e:	2201      	movs	r2, #1
 8005640:	4924      	ldr	r1, [pc, #144]	@ (80056d4 <SlaveController+0xb8>)
 8005642:	4826      	ldr	r0, [pc, #152]	@ (80056dc <SlaveController+0xc0>)
 8005644:	f7ff f867 	bl	8004716 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800564c:	f7fc fa84 	bl	8001b58 <HAL_Delay>
		//receiveMessage(RES.rxBuffer, 20 , RES.rxTimeout);
		if (strncmp(RES.rxBuffer, "READY", strlen("READY")) == 0);
 8005650:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005654:	2205      	movs	r2, #5
 8005656:	4922      	ldr	r1, [pc, #136]	@ (80056e0 <SlaveController+0xc4>)
 8005658:	4618      	mov	r0, r3
 800565a:	f000 f8b3 	bl	80057c4 <strncmp>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d033      	beq.n	80056cc <SlaveController+0xb0>
		else if (strncmp(RES.rxBuffer, "GO", strlen("GO")) == 0) ChangeState(GO);
 8005664:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005668:	2202      	movs	r2, #2
 800566a:	491e      	ldr	r1, [pc, #120]	@ (80056e4 <SlaveController+0xc8>)
 800566c:	4618      	mov	r0, r3
 800566e:	f000 f8a9 	bl	80057c4 <strncmp>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <SlaveController+0x64>
 8005678:	2002      	movs	r0, #2
 800567a:	f7ff ffa5 	bl	80055c8 <ChangeState>
 800567e:	e025      	b.n	80056cc <SlaveController+0xb0>
		else if (strncmp(RES.rxBuffer, "EMERGENCY", strlen("EMERGENCY")) == 0) ChangeState(EMERGENCY);
 8005680:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005684:	2209      	movs	r2, #9
 8005686:	4918      	ldr	r1, [pc, #96]	@ (80056e8 <SlaveController+0xcc>)
 8005688:	4618      	mov	r0, r3
 800568a:	f000 f89b 	bl	80057c4 <strncmp>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <SlaveController+0x80>
 8005694:	2003      	movs	r0, #3
 8005696:	f7ff ff97 	bl	80055c8 <ChangeState>
 800569a:	e017      	b.n	80056cc <SlaveController+0xb0>
		else if (strncmp(RES.rxBuffer, "CONNECTED", strlen("CONNECTED")) == 0){
 800569c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80056a0:	2209      	movs	r2, #9
 80056a2:	4912      	ldr	r1, [pc, #72]	@ (80056ec <SlaveController+0xd0>)
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f88d 	bl	80057c4 <strncmp>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <SlaveController+0xa2>
			connected = true;
 80056b0:	4b0f      	ldr	r3, [pc, #60]	@ (80056f0 <SlaveController+0xd4>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 80056b6:	480f      	ldr	r0, [pc, #60]	@ (80056f4 <SlaveController+0xd8>)
 80056b8:	f7fe fd14 	bl	80040e4 <HAL_TIM_Base_Start_IT>
 80056bc:	e006      	b.n	80056cc <SlaveController+0xb0>
		}
		else if(elapse_time == 3){
 80056be:	4b0e      	ldr	r3, [pc, #56]	@ (80056f8 <SlaveController+0xdc>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d102      	bne.n	80056cc <SlaveController+0xb0>
		    HAL_TIM_Base_Stop_IT(&htim1);
 80056c6:	480b      	ldr	r0, [pc, #44]	@ (80056f4 <SlaveController+0xd8>)
 80056c8:	f7fe fd58 	bl	800417c <HAL_TIM_Base_Stop_IT>
			//sprintf(uartBuff, "Emergency\r\n");
			//HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
		}
		RES.rxBuffer[0] = '\0';
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
		HAL_UART_Transmit(&huart1, &car, 1, HAL_MAX_DELAY);
 80056d2:	e7ab      	b.n	800562c <SlaveController+0x10>
 80056d4:	200001c8 	.word	0x200001c8
 80056d8:	20000080 	.word	0x20000080
 80056dc:	20000114 	.word	0x20000114
 80056e0:	080058a0 	.word	0x080058a0
 80056e4:	080058a8 	.word	0x080058a8
 80056e8:	080058ac 	.word	0x080058ac
 80056ec:	080058b8 	.word	0x080058b8
 80056f0:	200001ca 	.word	0x200001ca
 80056f4:	20000034 	.word	0x20000034
 80056f8:	200001cb 	.word	0x200001cb

080056fc <MasterController>:
	}
}

void MasterController (ConfigRES RES) {
 80056fc:	b084      	sub	sp, #16
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	f107 0c10 	add.w	ip, r7, #16
 8005708:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t count = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	71fb      	strb	r3, [r7, #7]
	while (LastState == car) {
 8005710:	e002      	b.n	8005718 <MasterController+0x1c>
		SendMessage("CONNECTED");
 8005712:	4822      	ldr	r0, [pc, #136]	@ (800579c <MasterController+0xa0>)
 8005714:	f7ff fe9a 	bl	800544c <SendMessage>
	while (LastState == car) {
 8005718:	4b21      	ldr	r3, [pc, #132]	@ (80057a0 <MasterController+0xa4>)
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	4b21      	ldr	r3, [pc, #132]	@ (80057a4 <MasterController+0xa8>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d0f6      	beq.n	8005712 <MasterController+0x16>
	}
	if (car == READY) {
 8005724:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <MasterController+0xa8>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10e      	bne.n	800574a <MasterController+0x4e>
		while (count <= 10){
 800572c:	e005      	b.n	800573a <MasterController+0x3e>
			count++;
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	3301      	adds	r3, #1
 8005732:	71fb      	strb	r3, [r7, #7]
			SendMessage("READY");
 8005734:	481c      	ldr	r0, [pc, #112]	@ (80057a8 <MasterController+0xac>)
 8005736:	f7ff fe89 	bl	800544c <SendMessage>
		while (count <= 10){
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	2b0a      	cmp	r3, #10
 800573e:	d9f6      	bls.n	800572e <MasterController+0x32>
		}
		HAL_Delay(2000);
 8005740:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005744:	f7fc fa08 	bl	8001b58 <HAL_Delay>
 8005748:	e01c      	b.n	8005784 <MasterController+0x88>
	} else if (car == GO){
 800574a:	4b16      	ldr	r3, [pc, #88]	@ (80057a4 <MasterController+0xa8>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d10a      	bne.n	8005768 <MasterController+0x6c>
		while (count <= 10){
 8005752:	e005      	b.n	8005760 <MasterController+0x64>
			count++;
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	3301      	adds	r3, #1
 8005758:	71fb      	strb	r3, [r7, #7]
			SendMessage("GO");
 800575a:	4814      	ldr	r0, [pc, #80]	@ (80057ac <MasterController+0xb0>)
 800575c:	f7ff fe76 	bl	800544c <SendMessage>
		while (count <= 10){
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	2b0a      	cmp	r3, #10
 8005764:	d9f6      	bls.n	8005754 <MasterController+0x58>
 8005766:	e00d      	b.n	8005784 <MasterController+0x88>
		}
	} else if (car == EMERGENCY){
 8005768:	4b0e      	ldr	r3, [pc, #56]	@ (80057a4 <MasterController+0xa8>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d109      	bne.n	8005784 <MasterController+0x88>
		while (count <= 10){
 8005770:	e005      	b.n	800577e <MasterController+0x82>
			count++;
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	3301      	adds	r3, #1
 8005776:	71fb      	strb	r3, [r7, #7]
			SendMessage("EMERGENCY");
 8005778:	480d      	ldr	r0, [pc, #52]	@ (80057b0 <MasterController+0xb4>)
 800577a:	f7ff fe67 	bl	800544c <SendMessage>
		while (count <= 10){
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	2b0a      	cmp	r3, #10
 8005782:	d9f6      	bls.n	8005772 <MasterController+0x76>
		}
	}
	LastState = car;
 8005784:	4b07      	ldr	r3, [pc, #28]	@ (80057a4 <MasterController+0xa8>)
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <MasterController+0xa4>)
 800578a:	701a      	strb	r2, [r3, #0]
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005796:	b004      	add	sp, #16
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	080058b8 	.word	0x080058b8
 80057a0:	200001c9 	.word	0x200001c9
 80057a4:	200001c8 	.word	0x200001c8
 80057a8:	080058a0 	.word	0x080058a0
 80057ac:	080058a8 	.word	0x080058a8
 80057b0:	080058ac 	.word	0x080058ac

080057b4 <memset>:
 80057b4:	4402      	add	r2, r0
 80057b6:	4603      	mov	r3, r0
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d100      	bne.n	80057be <memset+0xa>
 80057bc:	4770      	bx	lr
 80057be:	f803 1b01 	strb.w	r1, [r3], #1
 80057c2:	e7f9      	b.n	80057b8 <memset+0x4>

080057c4 <strncmp>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	b16a      	cbz	r2, 80057e4 <strncmp+0x20>
 80057c8:	3901      	subs	r1, #1
 80057ca:	1884      	adds	r4, r0, r2
 80057cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d103      	bne.n	80057e0 <strncmp+0x1c>
 80057d8:	42a0      	cmp	r0, r4
 80057da:	d001      	beq.n	80057e0 <strncmp+0x1c>
 80057dc:	2a00      	cmp	r2, #0
 80057de:	d1f5      	bne.n	80057cc <strncmp+0x8>
 80057e0:	1ad0      	subs	r0, r2, r3
 80057e2:	bd10      	pop	{r4, pc}
 80057e4:	4610      	mov	r0, r2
 80057e6:	e7fc      	b.n	80057e2 <strncmp+0x1e>

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005820 <__libc_init_array+0x38>)
 80057ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005824 <__libc_init_array+0x3c>)
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	2600      	movs	r6, #0
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005828 <__libc_init_array+0x40>)
 80057fa:	4c0c      	ldr	r4, [pc, #48]	@ (800582c <__libc_init_array+0x44>)
 80057fc:	f000 f826 	bl	800584c <_init>
 8005800:	1b64      	subs	r4, r4, r5
 8005802:	10a4      	asrs	r4, r4, #2
 8005804:	2600      	movs	r6, #0
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08005998 	.word	0x08005998
 8005824:	08005998 	.word	0x08005998
 8005828:	08005998 	.word	0x08005998
 800582c:	0800599c 	.word	0x0800599c

08005830 <memcpy>:
 8005830:	440a      	add	r2, r1
 8005832:	4291      	cmp	r1, r2
 8005834:	f100 33ff 	add.w	r3, r0, #4294967295
 8005838:	d100      	bne.n	800583c <memcpy+0xc>
 800583a:	4770      	bx	lr
 800583c:	b510      	push	{r4, lr}
 800583e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005846:	4291      	cmp	r1, r2
 8005848:	d1f9      	bne.n	800583e <memcpy+0xe>
 800584a:	bd10      	pop	{r4, pc}

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr
