
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006304  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b8  080065b8  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080065b8  080065b8  000075b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c0  080065c0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c0  080065c0  000075c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065c4  080065c4  000075c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080065c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  08006624  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006624  00008368  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b92  00000000  00000000  00008086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db4  00000000  00000000  00021c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  000259d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001428  00000000  00000000  00027438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020295  00000000  00000000  00028860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d380  00000000  00000000  00048af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0e05  00000000  00000000  00065e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126c7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c4  00000000  00000000  00126cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012df84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000005c 	.word	0x2000005c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800642c 	.word	0x0800642c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000060 	.word	0x20000060
 800017c:	0800642c 	.word	0x0800642c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	2002      	movs	r0, #2
 8000566:	f7ff ffdb 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2004      	movs	r0, #4
 800056c:	f7ff ffd8 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff ffd5 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShutDown_Pin|EBS_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800057c:	4810      	ldr	r0, [pc, #64]	@ (80005c0 <MX_GPIO_Init+0x70>)
 800057e:	f001 fe37 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ShutDown_Pin EBS_Pin */
  GPIO_InitStruct.Pin = ShutDown_Pin|EBS_Pin;
 8000582:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000586:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4619      	mov	r1, r3
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <MX_GPIO_Init+0x70>)
 800059a:	f001 fcc9 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : NextState_Pin */
  GPIO_InitStruct.Pin = NextState_Pin;
 800059e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(NextState_GPIO_Port, &GPIO_InitStruct);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <MX_GPIO_Init+0x70>)
 80005b2:	f001 fcbd 	bl	8001f30 <HAL_GPIO_Init>

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	48000400 	.word	0x48000400

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 fada 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f80e 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f7ff ffbe 	bl	8000550 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005d4:	f000 f8b6 	bl	8000744 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 fa2a 	bl	8000a30 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005dc:	f000 f92c 	bl	8000838 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005e0:	f000 f9da 	bl	8000998 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainLoRa();
 80005e4:	f005 f8c4 	bl	8005770 <mainLoRa>
 80005e8:	e7fc      	b.n	80005e4 <main+0x20>
	...

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09a      	sub	sp, #104	@ 0x68
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2248      	movs	r2, #72	@ 0x48
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fa84 	bl	8005b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <SystemClock_Config+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800061a:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <SystemClock_Config+0xa0>)
 800061c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <SystemClock_Config+0xa0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800062e:	2320      	movs	r3, #32
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000636:	2300      	movs	r3, #0
 8000638:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800063a:	23b0      	movs	r3, #176	@ 0xb0
 800063c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063e:	2300      	movs	r3, #0
 8000640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f8bc 	bl	80027c4 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000652:	f000 f81d 	bl	8000690 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000656:	234f      	movs	r3, #79	@ 0x4f
 8000658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fc28 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 f807 	bl	8000690 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3768      	adds	r7, #104	@ 0x68
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	58000400 	.word	0x58000400

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <Error_Handler+0x8>

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <NMI_Handler+0x4>

080006b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <MemManage_Handler+0x4>

080006c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <UsageFault_Handler+0x4>

080006d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f8:	f001 fa9c 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000704:	4802      	ldr	r0, [pc, #8]	@ (8000710 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000706:	f003 fb7d 	bl	8003e04 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000078 	.word	0x20000078

08000714 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800071c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000720:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000722:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4313      	orrs	r3, r2
 800072a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800072c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000730:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000738:	68fb      	ldr	r3, [r7, #12]
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_SUBGHZ_Init+0x20>)
 800074a:	2210      	movs	r2, #16
 800074c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_SUBGHZ_Init+0x20>)
 8000750:	f003 f92e 	bl	80039b0 <HAL_SUBGHZ_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800075a:	f7ff ff99 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000078 	.word	0x20000078

08000768 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ffcf 	bl	8000714 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2032      	movs	r0, #50	@ 0x32
 800077c:	f001 fb95 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000780:	2032      	movs	r0, #50	@ 0x32
 8000782:	f001 fbac 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f005 f9bc 	bl	8005b3c <__errno>
 80007c4:	4603      	mov	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <_sbrk+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20010000 	.word	0x20010000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000084 	.word	0x20000084
 80007f8:	20000368 	.word	0x20000368

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <LL_APB2_GRP1_EnableClock>:
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000814:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4313      	orrs	r3, r2
 800081e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000824:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800082c:	68fb      	ldr	r3, [r7, #12]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 8000858:	4a20      	ldr	r2, [pc, #128]	@ (80008dc <MX_TIM1_Init+0xa4>)
 800085a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47999 + 1 ;
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 800086a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800086e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000882:	4815      	ldr	r0, [pc, #84]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 8000884:	f003 fc60 	bl	8004148 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800088e:	f7ff feff 	bl	8000690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	480e      	ldr	r0, [pc, #56]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 80008a0:	f003 fd24 	bl	80042ec <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80008aa:	f7ff fef1 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_TIM1_Init+0xa0>)
 80008c0:	f003 fee4 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008ca:	f7ff fee1 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000088 	.word	0x20000088
 80008dc:	40012c00 	.word	0x40012c00

080008e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <HAL_TIM_Base_MspInit+0x24>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d103      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008f2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80008f6:	f7ff ff87 	bl	8000808 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40012c00 	.word	0x40012c00

08000908 <LL_AHB2_GRP1_EnableClock>:
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000914:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000916:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000924:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092c:	68fb      	ldr	r3, [r7, #12]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <LL_APB1_GRP1_EnableClock>:
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000944:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4313      	orrs	r3, r2
 800094e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000954:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <LL_APB2_GRP1_EnableClock>:
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000974:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000984:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009e2:	f003 fed2 	bl	800478a <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f7ff fe50 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009f4:	f004 fccd 	bl	8005392 <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f7ff fe47 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 8000a06:	f004 fd02 	bl	800540e <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f7ff fe3e 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 8000a16:	f004 fc84 	bl	8005322 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f7ff fe36 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000d4 	.word	0x200000d4
 8000a2c:	40013800 	.word	0x40013800

08000a30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a7a:	f003 fe86 	bl	800478a <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f7ff fe04 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a8c:	f004 fc81 	bl	8005392 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f7ff fdfb 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a9e:	f004 fcb6 	bl	800540e <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f7ff fdf2 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000aae:	f004 fc38 	bl	8005322 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f7ff fdea 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000168 	.word	0x20000168
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b096      	sub	sp, #88	@ 0x58
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2238      	movs	r2, #56	@ 0x38
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 f80d 	bl	8005b08 <memset>
  if(uartHandle->Instance==USART1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a2d      	ldr	r2, [pc, #180]	@ (8000ba8 <HAL_UART_MspInit+0xe0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d126      	bne.n	8000b46 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000afc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000b00:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fd9e 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b12:	f7ff fdbd 	bl	8000690 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b16:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b1a:	f7ff ff25 	bl	8000968 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fef2 	bl	8000908 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b24:	23c0      	movs	r3, #192	@ 0xc0
 8000b26:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b34:	2307      	movs	r3, #7
 8000b36:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481b      	ldr	r0, [pc, #108]	@ (8000bac <HAL_UART_MspInit+0xe4>)
 8000b40:	f001 f9f6 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b44:	e02b      	b.n	8000b9e <HAL_UART_MspInit+0xd6>
  else if(uartHandle->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <HAL_UART_MspInit+0xe8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d126      	bne.n	8000b9e <HAL_UART_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000b58:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fd72 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_UART_MspInit+0xa6>
      Error_Handler();
 8000b6a:	f7ff fd91 	bl	8000690 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b72:	f7ff fee1 	bl	8000938 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff fec6 	bl	8000908 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9a:	f001 f9c9 	bl	8001f30 <HAL_GPIO_Init>
}
 8000b9e:	bf00      	nop
 8000ba0:	3758      	adds	r7, #88	@ 0x58
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	@ (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb8:	f7ff fe20 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be2:	f004 ffb1 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fced 	bl	80005c4 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bf8:	080065c8 	.word	0x080065c8
  ldr r2, =_sbss
 8000bfc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c00:	20000368 	.word	0x20000368

08000c04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>

08000c06 <LL_AHB2_GRP1_EnableClock>:
{
 8000c06:	b480      	push	{r7}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4013      	ands	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
	...

08000c38 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f7ff ffda 	bl	8000c06 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8000c52:	2310      	movs	r3, #16
 8000c54:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <BSP_RADIO_Init+0x78>)
 8000c68:	f001 f962 	bl	8001f30 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <BSP_RADIO_Init+0x78>)
 8000c76:	f001 f95b 	bl	8001f30 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	480b      	ldr	r0, [pc, #44]	@ (8000cb0 <BSP_RADIO_Init+0x78>)
 8000c84:	f001 f954 	bl	8001f30 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	4808      	ldr	r0, [pc, #32]	@ (8000cb0 <BSP_RADIO_Init+0x78>)
 8000c8e:	f001 faaf 	bl	80021f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000c92:	2200      	movs	r2, #0
 8000c94:	2110      	movs	r1, #16
 8000c96:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <BSP_RADIO_Init+0x78>)
 8000c98:	f001 faaa 	bl	80021f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <BSP_RADIO_Init+0x78>)
 8000ca2:	f001 faa5 	bl	80021f0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	48000800 	.word	0x48000800

08000cb4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d84b      	bhi.n	8000d5c <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ccc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cca:	bf00      	nop
 8000ccc:	08000cdd 	.word	0x08000cdd
 8000cd0:	08000cfd 	.word	0x08000cfd
 8000cd4:	08000d1d 	.word	0x08000d1d
 8000cd8:	08000d3d 	.word	0x08000d3d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4821      	ldr	r0, [pc, #132]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000ce2:	f001 fa85 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2110      	movs	r1, #16
 8000cea:	481f      	ldr	r0, [pc, #124]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000cec:	f001 fa80 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	481c      	ldr	r0, [pc, #112]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000cf6:	f001 fa7b 	bl	80021f0 <HAL_GPIO_WritePin>
      break;      
 8000cfa:	e030      	b.n	8000d5e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2108      	movs	r1, #8
 8000d00:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d02:	f001 fa75 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4817      	ldr	r0, [pc, #92]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d0c:	f001 fa70 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4814      	ldr	r0, [pc, #80]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d16:	f001 fa6b 	bl	80021f0 <HAL_GPIO_WritePin>
      break;
 8000d1a:	e020      	b.n	8000d5e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2108      	movs	r1, #8
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d22:	f001 fa65 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000d26:	2201      	movs	r2, #1
 8000d28:	2110      	movs	r1, #16
 8000d2a:	480f      	ldr	r0, [pc, #60]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d2c:	f001 fa60 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000d30:	2201      	movs	r2, #1
 8000d32:	2120      	movs	r1, #32
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d36:	f001 fa5b 	bl	80021f0 <HAL_GPIO_WritePin>
      break;
 8000d3a:	e010      	b.n	8000d5e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d42:	f001 fa55 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000d46:	2200      	movs	r2, #0
 8000d48:	2110      	movs	r1, #16
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d4c:	f001 fa50 	bl	80021f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000d50:	2201      	movs	r2, #1
 8000d52:	2120      	movs	r1, #32
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000d56:	f001 fa4b 	bl	80021f0 <HAL_GPIO_WritePin>
      break;
 8000d5a:	e000      	b.n	8000d5e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000d5c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000800 	.word	0x48000800

08000d6c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8000da6:	230f      	movs	r3, #15
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	e001      	b.n	8000db0 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8000dac:	2316      	movs	r3, #22
 8000dae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000db0:	68fb      	ldr	r3, [r7, #12]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8000dc0:	f7ff ff3a 	bl	8000c38 <BSP_RADIO_Init>
 8000dc4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff6c 	bl	8000cb4 <BSP_RADIO_ConfigRFSwitch>
 8000ddc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8000dea:	f7ff ffbf 	bl	8000d6c <BSP_RADIO_GetTxConfig>
 8000dee:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8000df8:	f7ff ffbf 	bl	8000d7a <BSP_RADIO_IsTCXO>
 8000dfc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8000e06:	f7ff ffbf 	bl	8000d88 <BSP_RADIO_IsDCDC>
 8000e0a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ffba 	bl	8000d96 <BSP_RADIO_GetRFOMaxPowerConfig>
 8000e22:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <SUBGRF_Init+0x84>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8000e40:	f7ff fc80 	bl	8000744 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f000 fe79 	bl	8001b3c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <SUBGRF_Init+0x88>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f897 	bl	8000f84 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8000e56:	f7ff ffcd 	bl	8000df4 <RBI_IsTCXO>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10e      	bne.n	8000e7e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8000e60:	2140      	movs	r1, #64	@ 0x40
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 f9fc 	bl	8001260 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f640 1011 	movw	r0, #2321	@ 0x911
 8000e6e:	f000 fcdb 	bl	8001828 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8000e72:	237f      	movs	r3, #127	@ 0x7f
 8000e74:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8000e76:	7b38      	ldrb	r0, [r7, #12]
 8000e78:	f000 f906 	bl	8001088 <SUBGRF_Calibrate>
 8000e7c:	e009      	b.n	8000e92 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000e7e:	2120      	movs	r1, #32
 8000e80:	f640 1011 	movw	r0, #2321	@ 0x911
 8000e84:	f000 fcd0 	bl	8001828 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000e88:	2120      	movs	r1, #32
 8000e8a:	f640 1012 	movw	r0, #2322	@ 0x912
 8000e8e:	f000 fccb 	bl	8001828 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8000e92:	210e      	movs	r1, #14
 8000e94:	f640 101f 	movw	r0, #2335	@ 0x91f
 8000e98:	f000 fcc6 	bl	8001828 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8000e9c:	f7ff ff8e 	bl	8000dbc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <SUBGRF_Init+0x8c>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000200 	.word	0x20000200
 8000eb4:	200001ff 	.word	0x200001ff
 8000eb8:	200001fc 	.word	0x200001fc

08000ebc <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 fcf4 	bl	80018bc <SUBGRF_WriteBuffer>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <SUBGRF_SendPayload>:

    return 0;
}

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8000eea:	7afb      	ldrb	r3, [r7, #11]
 8000eec:	4619      	mov	r1, r3
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff ffe4 	bl	8000ebc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f861 	bl	8000fbc <SUBGRF_SetTx>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000f1c:	f000 fa24 	bl	8001368 <SUBGRF_GetPacketType>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8000f32:	f000 fca1 	bl	8001878 <SUBGRF_WriteRegisters>
            break;
 8000f36:	e000      	b.n	8000f3a <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8000f38:	bf00      	nop
    }
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000f5c:	f000 fa04 	bl	8001368 <SUBGRF_GetPacketType>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d108      	bne.n	8000f78 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f240 60be 	movw	r0, #1726	@ 0x6be
 8000f72:	f000 fc81 	bl	8001878 <SUBGRF_WriteRegisters>
            break;
 8000f76:	e000      	b.n	8000f7a <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8000f78:	bf00      	nop
    }
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	2201      	movs	r2, #1
 8000f92:	4619      	mov	r1, r3
 8000f94:	2080      	movs	r0, #128	@ 0x80
 8000f96:	f000 fcb3 	bl	8001900 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d103      	bne.n	8000fa8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <SUBGRF_SetStandby+0x34>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8000fa6:	e002      	b.n	8000fae <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <SUBGRF_SetStandby+0x34>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001fc 	.word	0x200001fc

08000fbc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <SUBGRF_SetTx+0x3c>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0c1b      	lsrs	r3, r3, #16
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2083      	movs	r0, #131	@ 0x83
 8000fea:	f000 fc89 	bl	8001900 <SUBGRF_WriteCommand>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001fc 	.word	0x200001fc

08000ffc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <SUBGRF_SetRx+0x3c>)
 8001006:	2205      	movs	r2, #5
 8001008:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	b2db      	uxtb	r3, r3
 8001010:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b2db      	uxtb	r3, r3
 8001018:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2203      	movs	r2, #3
 8001026:	4619      	mov	r1, r3
 8001028:	2082      	movs	r0, #130	@ 0x82
 800102a:	f000 fc69 	bl	8001900 <SUBGRF_WriteCommand>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001fc 	.word	0x200001fc

0800103c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	209f      	movs	r0, #159	@ 0x9f
 800104e:	f000 fc57 	bl	8001900 <SUBGRF_WriteCommand>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8001060:	f7ff fecf 	bl	8000e02 <RBI_IsDCDC>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8001070:	2300      	movs	r3, #0
 8001072:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	2201      	movs	r2, #1
 8001078:	4619      	mov	r1, r3
 800107a:	2096      	movs	r0, #150	@ 0x96
 800107c:	f000 fc40 	bl	8001900 <SUBGRF_WriteCommand>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001090:	793b      	ldrb	r3, [r7, #4]
 8001092:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	019b      	lsls	r3, r3, #6
 800109a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800109c:	793b      	ldrb	r3, [r7, #4]
 800109e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80010ac:	793b      	ldrb	r3, [r7, #4]
 80010ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80010cc:	793b      	ldrb	r3, [r7, #4]
 80010ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80010dc:	793b      	ldrb	r3, [r7, #4]
 80010de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80010fc:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	2089      	movs	r0, #137	@ 0x89
 8001108:	f000 fbfa 	bl	8001900 <SUBGRF_WriteCommand>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <SUBGRF_CalibrateImage+0x80>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d904      	bls.n	800112e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001124:	23e1      	movs	r3, #225	@ 0xe1
 8001126:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001128:	23e9      	movs	r3, #233	@ 0xe9
 800112a:	737b      	strb	r3, [r7, #13]
 800112c:	e027      	b.n	800117e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <SUBGRF_CalibrateImage+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d904      	bls.n	8001140 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8001136:	23d7      	movs	r3, #215	@ 0xd7
 8001138:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800113a:	23db      	movs	r3, #219	@ 0xdb
 800113c:	737b      	strb	r3, [r7, #13]
 800113e:	e01e      	b.n	800117e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a16      	ldr	r2, [pc, #88]	@ (800119c <SUBGRF_CalibrateImage+0x88>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d904      	bls.n	8001152 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8001148:	23c1      	movs	r3, #193	@ 0xc1
 800114a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800114c:	23c5      	movs	r3, #197	@ 0xc5
 800114e:	737b      	strb	r3, [r7, #13]
 8001150:	e015      	b.n	800117e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <SUBGRF_CalibrateImage+0x8c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d904      	bls.n	8001164 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800115a:	2375      	movs	r3, #117	@ 0x75
 800115c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800115e:	2381      	movs	r3, #129	@ 0x81
 8001160:	737b      	strb	r3, [r7, #13]
 8001162:	e00c      	b.n	800117e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <SUBGRF_CalibrateImage+0x90>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d904      	bls.n	8001176 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800116c:	236b      	movs	r3, #107	@ 0x6b
 800116e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001170:	236f      	movs	r3, #111	@ 0x6f
 8001172:	737b      	strb	r3, [r7, #13]
 8001174:	e003      	b.n	800117e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8001176:	2329      	movs	r3, #41	@ 0x29
 8001178:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800117a:	232b      	movs	r3, #43	@ 0x2b
 800117c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2202      	movs	r2, #2
 8001184:	4619      	mov	r1, r3
 8001186:	2098      	movs	r0, #152	@ 0x98
 8001188:	f000 fbba 	bl	8001900 <SUBGRF_WriteCommand>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	35a4e900 	.word	0x35a4e900
 8001198:	32a9f880 	.word	0x32a9f880
 800119c:	2de54480 	.word	0x2de54480
 80011a0:	1b6b0b00 	.word	0x1b6b0b00
 80011a4:	1954fc40 	.word	0x1954fc40

080011a8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	4603      	mov	r3, r0
 80011bc:	71bb      	strb	r3, [r7, #6]
 80011be:	460b      	mov	r3, r1
 80011c0:	717b      	strb	r3, [r7, #5]
 80011c2:	4613      	mov	r3, r2
 80011c4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2204      	movs	r2, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	2095      	movs	r0, #149	@ 0x95
 80011e0:	f000 fb8e 	bl	8001900 <SUBGRF_WriteCommand>
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd90      	pop	{r4, r7, pc}

080011ec <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4604      	mov	r4, r0
 80011f4:	4608      	mov	r0, r1
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	4623      	mov	r3, r4
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	4603      	mov	r3, r0
 8001200:	80bb      	strh	r3, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29b      	uxth	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	b29b      	uxth	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800123a:	883b      	ldrh	r3, [r7, #0]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001244:	883b      	ldrh	r3, [r7, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2208      	movs	r2, #8
 8001250:	4619      	mov	r1, r3
 8001252:	2008      	movs	r0, #8
 8001254:	f000 fb54 	bl	8001900 <SUBGRF_WriteCommand>
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}

08001260 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	b2db      	uxtb	r3, r3
 8001274:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	0c1b      	lsrs	r3, r3, #16
 800127a:	b2db      	uxtb	r3, r3
 800127c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	b2db      	uxtb	r3, r3
 8001284:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2204      	movs	r2, #4
 8001292:	4619      	mov	r1, r3
 8001294:	2097      	movs	r0, #151	@ 0x97
 8001296:	f000 fb33 	bl	8001900 <SUBGRF_WriteCommand>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80012a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <SUBGRF_SetRfFrequency+0x84>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f083 0301 	eor.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff27 	bl	8001114 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <SUBGRF_SetRfFrequency+0x84>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	461c      	mov	r4, r3
 80012d2:	4615      	mov	r5, r2
 80012d4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80012d8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <SUBGRF_SetRfFrequency+0x88>)
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	4640      	mov	r0, r8
 80012e4:	4649      	mov	r1, r9
 80012e6:	f7fe ffa3 	bl	8000230 <__aeabi_uldivmod>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4613      	mov	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	0e1b      	lsrs	r3, r3, #24
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	0c1b      	lsrs	r3, r3, #16
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b2db      	uxtb	r3, r3
 8001308:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2204      	movs	r2, #4
 8001316:	4619      	mov	r1, r3
 8001318:	2086      	movs	r0, #134	@ 0x86
 800131a:	f000 faf1 	bl	8001900 <SUBGRF_WriteCommand>
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001328:	200001ff 	.word	0x200001ff
 800132c:	01e84800 	.word	0x01e84800

08001330 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <SUBGRF_SetPacketType+0x34>)
 800133e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d104      	bne.n	8001350 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8001346:	2100      	movs	r1, #0
 8001348:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800134c:	f000 fa6c 	bl	8001828 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	2201      	movs	r2, #1
 8001354:	4619      	mov	r1, r3
 8001356:	208a      	movs	r0, #138	@ 0x8a
 8001358:	f000 fad2 	bl	8001900 <SUBGRF_WriteCommand>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200001fd 	.word	0x200001fd

08001368 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
    return PacketType;
 800136c:	4b02      	ldr	r3, [pc, #8]	@ (8001378 <SUBGRF_GetPacketType+0x10>)
 800136e:	781b      	ldrb	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	200001fd 	.word	0x200001fd

0800137c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	460b      	mov	r3, r1
 8001388:	71bb      	strb	r3, [r7, #6]
 800138a:	4613      	mov	r3, r2
 800138c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d149      	bne.n	8001428 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fd3b 	bl	8000e10 <RBI_GetRFOMaxPowerConfig>
 800139a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800139c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	da01      	bge.n	80013aa <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b0e      	cmp	r3, #14
 80013ae:	d10e      	bne.n	80013ce <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80013b0:	2301      	movs	r3, #1
 80013b2:	2201      	movs	r2, #1
 80013b4:	2100      	movs	r1, #0
 80013b6:	2004      	movs	r0, #4
 80013b8:	f7ff fef6 	bl	80011a8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80013bc:	79ba      	ldrb	r2, [r7, #6]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	330e      	adds	r3, #14
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	71bb      	strb	r3, [r7, #6]
 80013cc:	e01f      	b.n	800140e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b0a      	cmp	r3, #10
 80013d2:	d10e      	bne.n	80013f2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80013d4:	2301      	movs	r3, #1
 80013d6:	2201      	movs	r2, #1
 80013d8:	2100      	movs	r1, #0
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff fee4 	bl	80011a8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	330d      	adds	r3, #13
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	71bb      	strb	r3, [r7, #6]
 80013f0:	e00d      	b.n	800140e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80013f2:	2301      	movs	r3, #1
 80013f4:	2201      	movs	r2, #1
 80013f6:	2100      	movs	r1, #0
 80013f8:	2007      	movs	r0, #7
 80013fa:	f7ff fed5 	bl	80011a8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80013fe:	79ba      	ldrb	r2, [r7, #6]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	330e      	adds	r3, #14
 800140a:	b2db      	uxtb	r3, r3
 800140c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800140e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001412:	f113 0f11 	cmn.w	r3, #17
 8001416:	da01      	bge.n	800141c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001418:	23ef      	movs	r3, #239	@ 0xef
 800141a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800141c:	2118      	movs	r1, #24
 800141e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001422:	f000 fa01 	bl	8001828 <SUBGRF_WriteRegister>
 8001426:	e067      	b.n	80014f8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001428:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800142c:	f000 fa10 	bl	8001850 <SUBGRF_ReadRegister>
 8001430:	4603      	mov	r3, r0
 8001432:	f043 031e 	orr.w	r3, r3, #30
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4619      	mov	r1, r3
 800143a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800143e:	f000 f9f3 	bl	8001828 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fce4 	bl	8000e10 <RBI_GetRFOMaxPowerConfig>
 8001448:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800144a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	da01      	bge.n	8001458 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b14      	cmp	r3, #20
 800145c:	d10e      	bne.n	800147c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800145e:	2301      	movs	r3, #1
 8001460:	2200      	movs	r2, #0
 8001462:	2105      	movs	r1, #5
 8001464:	2003      	movs	r0, #3
 8001466:	f7ff fe9f 	bl	80011a8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800146a:	79ba      	ldrb	r2, [r7, #6]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3316      	adds	r3, #22
 8001476:	b2db      	uxtb	r3, r3
 8001478:	71bb      	strb	r3, [r7, #6]
 800147a:	e031      	b.n	80014e0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b11      	cmp	r3, #17
 8001480:	d10e      	bne.n	80014a0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8001482:	2301      	movs	r3, #1
 8001484:	2200      	movs	r2, #0
 8001486:	2103      	movs	r1, #3
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff fe8d 	bl	80011a8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800148e:	79ba      	ldrb	r2, [r7, #6]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3316      	adds	r3, #22
 800149a:	b2db      	uxtb	r3, r3
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	e01f      	b.n	80014e0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b0e      	cmp	r3, #14
 80014a4:	d10e      	bne.n	80014c4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80014a6:	2301      	movs	r3, #1
 80014a8:	2200      	movs	r2, #0
 80014aa:	2102      	movs	r1, #2
 80014ac:	2002      	movs	r0, #2
 80014ae:	f7ff fe7b 	bl	80011a8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80014b2:	79ba      	ldrb	r2, [r7, #6]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	330e      	adds	r3, #14
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	71bb      	strb	r3, [r7, #6]
 80014c2:	e00d      	b.n	80014e0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80014c4:	2301      	movs	r3, #1
 80014c6:	2200      	movs	r2, #0
 80014c8:	2107      	movs	r1, #7
 80014ca:	2004      	movs	r0, #4
 80014cc:	f7ff fe6c 	bl	80011a8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80014d0:	79ba      	ldrb	r2, [r7, #6]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3316      	adds	r3, #22
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80014e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014e4:	f113 0f09 	cmn.w	r3, #9
 80014e8:	da01      	bge.n	80014ee <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80014ea:	23f7      	movs	r3, #247	@ 0xf7
 80014ec:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80014ee:	2138      	movs	r1, #56	@ 0x38
 80014f0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80014f4:	f000 f998 	bl	8001828 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80014fc:	797b      	ldrb	r3, [r7, #5]
 80014fe:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2202      	movs	r2, #2
 8001506:	4619      	mov	r1, r3
 8001508:	208e      	movs	r0, #142	@ 0x8e
 800150a:	f000 f9f9 	bl	8001900 <SUBGRF_WriteCommand>
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001526:	4a61      	ldr	r2, [pc, #388]	@ (80016ac <SUBGRF_SetModulationParams+0x194>)
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001530:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <SUBGRF_SetModulationParams+0x198>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d004      	beq.n	800154a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fef3 	bl	8001330 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b03      	cmp	r3, #3
 8001550:	f200 80a5 	bhi.w	800169e <SUBGRF_SetModulationParams+0x186>
 8001554:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <SUBGRF_SetModulationParams+0x44>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800156d 	.word	0x0800156d
 8001560:	0800162d 	.word	0x0800162d
 8001564:	080015ef 	.word	0x080015ef
 8001568:	0800165b 	.word	0x0800165b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800156c:	2308      	movs	r3, #8
 800156e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a4f      	ldr	r2, [pc, #316]	@ (80016b4 <SUBGRF_SetModulationParams+0x19c>)
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	0c1b      	lsrs	r3, r3, #16
 8001580:	b2db      	uxtb	r3, r3
 8001582:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	b2db      	uxtb	r3, r3
 800158a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7b1b      	ldrb	r3, [r3, #12]
 8001596:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7b5b      	ldrb	r3, [r3, #13]
 800159c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2200      	movs	r2, #0
 80015a4:	461c      	mov	r4, r3
 80015a6:	4615      	mov	r5, r2
 80015a8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80015ac:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80015b0:	4a41      	ldr	r2, [pc, #260]	@ (80016b8 <SUBGRF_SetModulationParams+0x1a0>)
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	4640      	mov	r0, r8
 80015b8:	4649      	mov	r1, r9
 80015ba:	f7fe fe39 	bl	8000230 <__aeabi_uldivmod>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4613      	mov	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80015dc:	7cfb      	ldrb	r3, [r7, #19]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	208b      	movs	r0, #139	@ 0x8b
 80015e8:	f000 f98a 	bl	8001900 <SUBGRF_WriteCommand>
        break;
 80015ec:	e058      	b.n	80016a0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80015ee:	2304      	movs	r3, #4
 80015f0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	4a2f      	ldr	r2, [pc, #188]	@ (80016b4 <SUBGRF_SetModulationParams+0x19c>)
 80015f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	b2db      	uxtb	r3, r3
 8001604:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	b2db      	uxtb	r3, r3
 800160c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7d1b      	ldrb	r3, [r3, #20]
 8001618:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800161a:	7cfb      	ldrb	r3, [r7, #19]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	208b      	movs	r0, #139	@ 0x8b
 8001626:	f000 f96b 	bl	8001900 <SUBGRF_WriteCommand>
        break;
 800162a:	e039      	b.n	80016a0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800162c:	2304      	movs	r3, #4
 800162e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e1b      	ldrb	r3, [r3, #24]
 8001634:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7e5b      	ldrb	r3, [r3, #25]
 800163a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e9b      	ldrb	r3, [r3, #26]
 8001640:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7edb      	ldrb	r3, [r3, #27]
 8001646:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001648:	7cfb      	ldrb	r3, [r7, #19]
 800164a:	b29a      	uxth	r2, r3
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4619      	mov	r1, r3
 8001652:	208b      	movs	r0, #139	@ 0x8b
 8001654:	f000 f954 	bl	8001900 <SUBGRF_WriteCommand>

        break;
 8001658:	e022      	b.n	80016a0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800165a:	2305      	movs	r3, #5
 800165c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <SUBGRF_SetModulationParams+0x19c>)
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	b2db      	uxtb	r3, r3
 8001670:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b2db      	uxtb	r3, r3
 8001678:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7b1b      	ldrb	r3, [r3, #12]
 8001684:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7b5b      	ldrb	r3, [r3, #13]
 800168a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4619      	mov	r1, r3
 8001696:	208b      	movs	r0, #139	@ 0x8b
 8001698:	f000 f932 	bl	8001900 <SUBGRF_WriteCommand>
        break;
 800169c:	e000      	b.n	80016a0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800169e:	bf00      	nop
    }
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016aa:	bf00      	nop
 80016ac:	08006444 	.word	0x08006444
 80016b0:	200001fd 	.word	0x200001fd
 80016b4:	3d090000 	.word	0x3d090000
 80016b8:	01e84800 	.word	0x01e84800

080016bc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80016c8:	4a48      	ldr	r2, [pc, #288]	@ (80017ec <SUBGRF_SetPacketParams+0x130>)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80016d0:	c303      	stmia	r3!, {r0, r1}
 80016d2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <SUBGRF_SetPacketParams+0x134>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d004      	beq.n	80016ea <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fe23 	bl	8001330 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d878      	bhi.n	80017e4 <SUBGRF_SetPacketParams+0x128>
 80016f2:	a201      	add	r2, pc, #4	@ (adr r2, 80016f8 <SUBGRF_SetPacketParams+0x3c>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001709 	.word	0x08001709
 80016fc:	08001799 	.word	0x08001799
 8001700:	0800178d 	.word	0x0800178d
 8001704:	08001709 	.word	0x08001709
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7a5b      	ldrb	r3, [r3, #9]
 800170c:	2bf1      	cmp	r3, #241	@ 0xf1
 800170e:	d10a      	bne.n	8001726 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001710:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001714:	f7ff fbf5 	bl	8000f02 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001718:	f248 0005 	movw	r0, #32773	@ 0x8005
 800171c:	f7ff fc11 	bl	8000f42 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001720:	2302      	movs	r3, #2
 8001722:	75bb      	strb	r3, [r7, #22]
 8001724:	e011      	b.n	800174a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7a5b      	ldrb	r3, [r3, #9]
 800172a:	2bf2      	cmp	r3, #242	@ 0xf2
 800172c:	d10a      	bne.n	8001744 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800172e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001732:	f7ff fbe6 	bl	8000f02 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001736:	f241 0021 	movw	r0, #4129	@ 0x1021
 800173a:	f7ff fc02 	bl	8000f42 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800173e:	2306      	movs	r3, #6
 8001740:	75bb      	strb	r3, [r7, #22]
 8001742:	e002      	b.n	800174a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7a5b      	ldrb	r3, [r3, #9]
 8001748:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800174a:	2309      	movs	r3, #9
 800174c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	885b      	ldrh	r3, [r3, #2]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29b      	uxth	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	791b      	ldrb	r3, [r3, #4]
 8001766:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	795b      	ldrb	r3, [r3, #5]
 800176c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	799b      	ldrb	r3, [r3, #6]
 8001772:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	79db      	ldrb	r3, [r3, #7]
 8001778:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7a1b      	ldrb	r3, [r3, #8]
 800177e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001780:	7dbb      	ldrb	r3, [r7, #22]
 8001782:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7a9b      	ldrb	r3, [r3, #10]
 8001788:	753b      	strb	r3, [r7, #20]
        break;
 800178a:	e022      	b.n	80017d2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800178c:	2301      	movs	r3, #1
 800178e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7b1b      	ldrb	r3, [r3, #12]
 8001794:	733b      	strb	r3, [r7, #12]
        break;
 8001796:	e01c      	b.n	80017d2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001798:	2306      	movs	r3, #6
 800179a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	89db      	ldrh	r3, [r3, #14]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	89db      	ldrh	r3, [r3, #14]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7c1a      	ldrb	r2, [r3, #16]
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <SUBGRF_SetPacketParams+0x138>)
 80017b6:	4611      	mov	r1, r2
 80017b8:	7019      	strb	r1, [r3, #0]
 80017ba:	4613      	mov	r3, r2
 80017bc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7c5b      	ldrb	r3, [r3, #17]
 80017c2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7c9b      	ldrb	r3, [r3, #18]
 80017c8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7cdb      	ldrb	r3, [r3, #19]
 80017ce:	747b      	strb	r3, [r7, #17]
        break;
 80017d0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	208c      	movs	r0, #140	@ 0x8c
 80017de:	f000 f88f 	bl	8001900 <SUBGRF_WriteCommand>
 80017e2:	e000      	b.n	80017e6 <SUBGRF_SetPacketParams+0x12a>
        return;
 80017e4:	bf00      	nop
}
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	0800644c 	.word	0x0800644c
 80017f0:	200001fd 	.word	0x200001fd
 80017f4:	200001fe 	.word	0x200001fe

080017f8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	460a      	mov	r2, r1
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	2202      	movs	r2, #2
 8001816:	4619      	mov	r1, r3
 8001818:	208f      	movs	r0, #143	@ 0x8f
 800181a:	f000 f871 	bl	8001900 <SUBGRF_WriteCommand>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	80fb      	strh	r3, [r7, #6]
 8001834:	4613      	mov	r3, r2
 8001836:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001838:	1d7a      	adds	r2, r7, #5
 800183a:	88f9      	ldrh	r1, [r7, #6]
 800183c:	2301      	movs	r3, #1
 800183e:	4803      	ldr	r0, [pc, #12]	@ (800184c <SUBGRF_WriteRegister+0x24>)
 8001840:	f002 f91a 	bl	8003a78 <HAL_SUBGHZ_WriteRegisters>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000078 	.word	0x20000078

08001850 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800185a:	f107 020f 	add.w	r2, r7, #15
 800185e:	88f9      	ldrh	r1, [r7, #6]
 8001860:	2301      	movs	r3, #1
 8001862:	4804      	ldr	r0, [pc, #16]	@ (8001874 <SUBGRF_ReadRegister+0x24>)
 8001864:	f002 f967 	bl	8003b36 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000078 	.word	0x20000078

08001878 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	80fb      	strh	r3, [r7, #6]
 8001884:	4613      	mov	r3, r2
 8001886:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001888:	f3ef 8310 	mrs	r3, PRIMASK
 800188c:	60fb      	str	r3, [r7, #12]
  return(result);
 800188e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001892:	b672      	cpsid	i
}
 8001894:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	88f9      	ldrh	r1, [r7, #6]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <SUBGRF_WriteRegisters+0x40>)
 800189e:	f002 f8eb 	bl	8003a78 <HAL_SUBGHZ_WriteRegisters>
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f383 8810 	msr	PRIMASK, r3
}
 80018ac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000078 	.word	0x20000078

080018bc <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018cc:	f3ef 8310 	mrs	r3, PRIMASK
 80018d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80018d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80018d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80018d6:	b672      	cpsid	i
}
 80018d8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	79f9      	ldrb	r1, [r7, #7]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4806      	ldr	r0, [pc, #24]	@ (80018fc <SUBGRF_WriteBuffer+0x40>)
 80018e4:	f002 fa3b 	bl	8003d5e <HAL_SUBGHZ_WriteBuffer>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f383 8810 	msr	PRIMASK, r3
}
 80018f2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000078 	.word	0x20000078

08001900 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	4613      	mov	r3, r2
 800190e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001910:	f3ef 8310 	mrs	r3, PRIMASK
 8001914:	60fb      	str	r3, [r7, #12]
  return(result);
 8001916:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800191a:	b672      	cpsid	i
}
 800191c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	79f9      	ldrb	r1, [r7, #7]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4806      	ldr	r0, [pc, #24]	@ (8001940 <SUBGRF_WriteCommand+0x40>)
 8001926:	f002 f967 	bl	8003bf8 <HAL_SUBGHZ_ExecSetCmd>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f383 8810 	msr	PRIMASK, r3
}
 8001934:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000078 	.word	0x20000078

08001944 <SUBGRF_SetSwitch>:
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
    CRITICAL_SECTION_END();
}

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d10d      	bne.n	800197a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d104      	bne.n	800196e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001964:	2302      	movs	r3, #2
 8001966:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001968:	2004      	movs	r0, #4
 800196a:	f000 f8e7 	bl	8001b3c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d107      	bne.n	8001984 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8001974:	2303      	movs	r3, #3
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e004      	b.n	8001984 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fa1f 	bl	8000dca <RBI_ConfigRFSwitch>
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80019a2:	f7ff fa20 	bl	8000de6 <RBI_GetTxConfig>
 80019a6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d016      	beq.n	80019dc <SUBGRF_SetRfTxPower+0x48>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	dc16      	bgt.n	80019e2 <SUBGRF_SetRfTxPower+0x4e>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <SUBGRF_SetRfTxPower+0x2e>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d00a      	beq.n	80019d6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80019c0:	e00f      	b.n	80019e2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	dd02      	ble.n	80019d0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	73fb      	strb	r3, [r7, #15]
            break;
 80019ce:	e009      	b.n	80019e4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
            break;
 80019d4:	e006      	b.n	80019e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
            break;
 80019da:	e003      	b.n	80019e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80019dc:	2302      	movs	r3, #2
 80019de:	73fb      	strb	r3, [r7, #15]
            break;
 80019e0:	e000      	b.n	80019e4 <SUBGRF_SetRfTxPower+0x50>
            break;
 80019e2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80019e4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fcc5 	bl	800137c <SUBGRF_SetTxParams>

    return paSelect;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2001      	movs	r0, #1
 8001a0a:	4798      	blx	r3
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000200 	.word	0x20000200

08001a18 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2002      	movs	r0, #2
 8001a26:	4798      	blx	r3
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000200 	.word	0x20000200

08001a34 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2040      	movs	r0, #64	@ 0x40
 8001a42:	4798      	blx	r3
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000200 	.word	0x20000200

08001a50 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8001a66:	e00a      	b.n	8001a7e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8001a68:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2080      	movs	r0, #128	@ 0x80
 8001a6e:	4798      	blx	r3
            break;
 8001a70:	e005      	b.n	8001a7e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a7a:	4798      	blx	r3
            break;
 8001a7c:	bf00      	nop
    }
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000200 	.word	0x20000200

08001a8c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8001a94:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a9c:	4798      	blx	r3
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000200 	.word	0x20000200

08001aac <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2020      	movs	r0, #32
 8001aba:	4798      	blx	r3
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000200 	.word	0x20000200

08001ac8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2004      	movs	r0, #4
 8001ad6:	4798      	blx	r3
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000200 	.word	0x20000200

08001ae4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2008      	movs	r0, #8
 8001af2:	4798      	blx	r3
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000200 	.word	0x20000200

08001b00 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2010      	movs	r0, #16
 8001b0e:	4798      	blx	r3
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000200 	.word	0x20000200

08001b1c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b2c:	4798      	blx	r3
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000200 	.word	0x20000200

08001b3c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8001b46:	f7ff f95c 	bl	8000e02 <RBI_IsDCDC>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d112      	bne.n	8001b76 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8001b50:	f640 1023 	movw	r0, #2339	@ 0x923
 8001b54:	f7ff fe7c 	bl	8001850 <SUBGRF_ReadRegister>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	f023 0306 	bic.w	r3, r3, #6
 8001b62:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f640 1023 	movw	r0, #2339	@ 0x923
 8001b72:	f7ff fe59 	bl	8001828 <SUBGRF_WriteRegister>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f000 f982 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b90:	f001 fb7c 	bl	800328c <HAL_RCC_GetHCLKFreq>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <HAL_Init+0x3c>)
 8001b98:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f810 	bl	8001bc0 <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	e001      	b.n	8001bb0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bac:	f7fe fd76 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_InitTick+0x6c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d024      	beq.n	8001c1e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd4:	f001 fb5a 	bl	800328c <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_InitTick+0x6c>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f992 	bl	8001f16 <HAL_SYSTICK_Config>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10f      	bne.n	8001c18 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	d809      	bhi.n	8001c12 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295
 8001c06:	f000 f950 	bl	8001eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <HAL_InitTick+0x70>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e007      	b.n	8001c22 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e004      	b.n	8001c22 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_IncTick+0x1c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a03      	ldr	r2, [pc, #12]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000204 	.word	0x20000204

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b02      	ldr	r3, [pc, #8]	@ (8001c68 <HAL_GetTick+0x10>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000204 	.word	0x20000204

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff fff0 	bl	8001c58 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d005      	beq.n	8001c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_Delay+0x44>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c92:	bf00      	nop
 8001c94:	f7ff ffe0 	bl	8001c58 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8f7      	bhi.n	8001c94 <HAL_Delay+0x28>
  {
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4906      	ldr	r1, [pc, #24]	@ (8001d4c <__NVIC_EnableIRQ+0x34>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db12      	blt.n	8001d88 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	490a      	ldr	r1, [pc, #40]	@ (8001d94 <__NVIC_DisableIRQ+0x44>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	3320      	adds	r3, #32
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7c:	f3bf 8f4f 	dsb	sy
}
 8001d80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d82:	f3bf 8f6f 	isb	sy
}
 8001d86:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	@ (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	@ (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	@ 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff90 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff09 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff20 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff92 	bl	8001dec <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff61 	bl	8001d98 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff13 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff21 	bl	8001d50 <__NVIC_DisableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff96 	bl	8001e50 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3e:	e140      	b.n	80021c2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8132 	beq.w	80021bc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d005      	beq.n	8001f70 <HAL_GPIO_Init+0x40>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d130      	bne.n	8001fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f003 0201 	and.w	r2, r3, #1
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d017      	beq.n	800200e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d123      	bne.n	8002062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	08da      	lsrs	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3208      	adds	r2, #8
 800205c:	6939      	ldr	r1, [r7, #16]
 800205e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0203 	and.w	r2, r3, #3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 808c 	beq.w	80021bc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80020a4:	4a4e      	ldr	r2, [pc, #312]	@ (80021e0 <HAL_GPIO_Init+0x2b0>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1bc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a44      	ldr	r2, [pc, #272]	@ (80021e4 <HAL_GPIO_Init+0x2b4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1b8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a43      	ldr	r2, [pc, #268]	@ (80021e8 <HAL_GPIO_Init+0x2b8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1b4>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e004      	b.n	80020ee <HAL_GPIO_Init+0x1be>
 80020e4:	2307      	movs	r3, #7
 80020e6:	e002      	b.n	80020ee <HAL_GPIO_Init+0x1be>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_GPIO_Init+0x1be>
 80020ec:	2300      	movs	r3, #0
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	f002 0203 	and.w	r2, r2, #3
 80020f4:	0092      	lsls	r2, r2, #2
 80020f6:	4093      	lsls	r3, r2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020fe:	4938      	ldr	r1, [pc, #224]	@ (80021e0 <HAL_GPIO_Init+0x2b0>)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800210c:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002130:	4a2e      	ldr	r2, [pc, #184]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002136:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800215a:	4a24      	ldr	r2, [pc, #144]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002160:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 8002162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002166:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002186:	4a19      	ldr	r2, [pc, #100]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 8002190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002194:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <HAL_GPIO_Init+0x2bc>)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3301      	adds	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f47f aeb7 	bne.w	8001f40 <HAL_GPIO_Init+0x10>
  }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	58000800 	.word	0x58000800

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800220c:	e002      	b.n	8002214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a03      	ldr	r2, [pc, #12]	@ (8002238 <HAL_PWR_EnableBkUpAccess+0x18>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	58000400 	.word	0x58000400

0800223c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_PWREx_GetVoltageRange+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	58000400 	.word	0x58000400

08002254 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002264:	d101      	bne.n	800226a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	58000400 	.word	0x58000400

08002278 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002286:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022c2:	d101      	bne.n	80022c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800231c:	d101      	bne.n	8002322 <LL_RCC_HSE_IsReady+0x18>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_RCC_HSE_IsReady+0x1a>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800233a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002356:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002376:	d101      	bne.n	800237c <LL_RCC_HSI_IsReady+0x18>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <LL_RCC_HSI_IsReady+0x1a>
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d101      	bne.n	80023c6 <LL_RCC_LSE_IsReady+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_RCC_LSE_IsReady+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d101      	bne.n	8002428 <LL_RCC_LSI_IsReady+0x18>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <LL_RCC_LSI_IsReady+0x1a>
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6013      	str	r3, [r2, #0]
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d101      	bne.n	8002480 <LL_RCC_MSI_IsReady+0x16>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <LL_RCC_MSI_IsReady+0x18>
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d101      	bne.n	80024a0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002572:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002576:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002598:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800259c:	f023 020f 	bic.w	r2, r3, #15
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80025c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80025e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002622:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800268a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026aa:	d101      	bne.n	80026b0 <LL_RCC_PLL_IsReady+0x18>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <LL_RCC_PLL_IsReady+0x1a>
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0303 	and.w	r3, r3, #3
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002726:	d101      	bne.n	800272c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800274a:	d101      	bne.n	8002750 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002762:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276e:	d101      	bne.n	8002774 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002790:	d101      	bne.n	8002796 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027b2:	d101      	bne.n	80027b8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e36f      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d6:	f7ff fea6 	bl	8002526 <LL_RCC_GetSysClkSource>
 80027da:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027dc:	f7ff ff8f 	bl	80026fe <LL_RCC_PLL_GetMainSource>
 80027e0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80c4 	beq.w	8002978 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x3e>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d176      	bne.n	80028ea <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d173      	bne.n	80028ea <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e353      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x68>
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800282a:	e006      	b.n	800283a <HAL_RCC_OscConfig+0x76>
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800283a:	4293      	cmp	r3, r2
 800283c:	d222      	bcs.n	8002884 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fd5a 	bl	80032fc <RCC_SetFlashLatencyFromMSIRange>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e331      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe2b 	bl	80024d8 <LL_RCC_MSI_SetCalibTrimming>
 8002882:	e021      	b.n	80028c8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800288e:	f043 0308 	orr.w	r3, r3, #8
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fe12 	bl	80024d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd1f 	bl	80032fc <RCC_SetFlashLatencyFromMSIRange>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e2f6      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028c8:	f000 fce0 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4aa7      	ldr	r2, [pc, #668]	@ (8002b6c <HAL_RCC_OscConfig+0x3a8>)
 80028d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80028d2:	4ba7      	ldr	r3, [pc, #668]	@ (8002b70 <HAL_RCC_OscConfig+0x3ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f972 	bl	8001bc0 <HAL_InitTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d047      	beq.n	8002976 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	e2e5      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02c      	beq.n	800294c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028f2:	f7ff fd9e 	bl	8002432 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f6:	f7ff f9af 	bl	8001c58 <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fe:	f7ff f9ab 	bl	8001c58 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e2d2      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002910:	f7ff fdab 	bl	800246a <LL_RCC_MSI_IsReady>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f1      	beq.n	80028fe <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002938:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fdc7 	bl	80024d8 <LL_RCC_MSI_SetCalibTrimming>
 800294a:	e015      	b.n	8002978 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800294c:	f7ff fd7f 	bl	800244e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002950:	f7ff f982 	bl	8001c58 <HAL_GetTick>
 8002954:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002958:	f7ff f97e 	bl	8001c58 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e2a5      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800296a:	f7ff fd7e 	bl	800246a <LL_RCC_MSI_IsReady>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f1      	bne.n	8002958 <HAL_RCC_OscConfig+0x194>
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002976:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d058      	beq.n	8002a36 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b08      	cmp	r3, #8
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x1d2>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d108      	bne.n	80029a2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d14b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e289      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d102      	bne.n	80029c8 <HAL_RCC_OscConfig+0x204>
 80029c2:	f7ff fc86 	bl	80022d2 <LL_RCC_HSE_Enable>
 80029c6:	e00d      	b.n	80029e4 <HAL_RCC_OscConfig+0x220>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80029d0:	d104      	bne.n	80029dc <HAL_RCC_OscConfig+0x218>
 80029d2:	f7ff fc51 	bl	8002278 <LL_RCC_HSE_EnableTcxo>
 80029d6:	f7ff fc7c 	bl	80022d2 <LL_RCC_HSE_Enable>
 80029da:	e003      	b.n	80029e4 <HAL_RCC_OscConfig+0x220>
 80029dc:	f7ff fc87 	bl	80022ee <LL_RCC_HSE_Disable>
 80029e0:	f7ff fc58 	bl	8002294 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d012      	beq.n	8002a12 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff f934 	bl	8001c58 <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7ff f930 	bl	8001c58 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e257      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a06:	f7ff fc80 	bl	800230a <LL_RCC_HSE_IsReady>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f1      	beq.n	80029f4 <HAL_RCC_OscConfig+0x230>
 8002a10:	e011      	b.n	8002a36 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7ff f921 	bl	8001c58 <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1a:	f7ff f91d 	bl	8001c58 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	@ 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e244      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a2c:	f7ff fc6d 	bl	800230a <LL_RCC_HSE_IsReady>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f1      	bne.n	8002a1a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d046      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x290>
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d10e      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d10b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e22a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fc8e 	bl	8002386 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a6a:	e031      	b.n	8002ad0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d019      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a74:	f7ff fc5a 	bl	800232c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff f8ee 	bl	8001c58 <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7ff f8ea 	bl	8001c58 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e211      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a92:	f7ff fc67 	bl	8002364 <LL_RCC_HSI_IsReady>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f1      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fc70 	bl	8002386 <LL_RCC_HSI_SetCalibTrimming>
 8002aa6:	e013      	b.n	8002ad0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa8:	f7ff fc4e 	bl	8002348 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff f8d4 	bl	8001c58 <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7ff f8d0 	bl	8001c58 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1f7      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ac6:	f7ff fc4d 	bl	8002364 <LL_RCC_HSI_IsReady>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f1      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d06e      	beq.n	8002bba <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d056      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aec:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d031      	beq.n	8002b60 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e1d0      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002b1e:	f7ff fc67 	bl	80023f0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b22:	f7ff f899 	bl	8001c58 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2a:	f7ff f895 	bl	8001c58 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b11      	cmp	r3, #17
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e1bc      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002b3c:	f7ff fc68 	bl	8002410 <LL_RCC_LSI_IsReady>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f1      	bne.n	8002b2a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	f023 0210 	bic.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b60:	f7ff fc36 	bl	80023d0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7ff f878 	bl	8001c58 <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002b6a:	e00c      	b.n	8002b86 <HAL_RCC_OscConfig+0x3c2>
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7ff f870 	bl	8001c58 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b11      	cmp	r3, #17
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e197      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002b86:	f7ff fc43 	bl	8002410 <LL_RCC_LSI_IsReady>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f1      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3b0>
 8002b90:	e013      	b.n	8002bba <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	f7ff fc2d 	bl	80023f0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7ff f85f 	bl	8001c58 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7ff f85b 	bl	8001c58 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b11      	cmp	r3, #17
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e182      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002bb0:	f7ff fc2e 	bl	8002410 <LL_RCC_LSI_IsReady>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f1      	bne.n	8002b9e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80d8 	beq.w	8002d78 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002bc8:	f7ff fb44 	bl	8002254 <LL_PWR_IsEnabledBkUpAccess>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d113      	bne.n	8002bfa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002bd2:	f7ff fb25 	bl	8002220 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7ff f83f 	bl	8001c58 <HAL_GetTick>
 8002bda:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7ff f83b 	bl	8001c58 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e162      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002bf0:	f7ff fb30 	bl	8002254 <LL_PWR_IsEnabledBkUpAccess>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f1      	beq.n	8002bde <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d07b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b85      	cmp	r3, #133	@ 0x85
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7ff f817 	bl	8001c58 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7ff f809 	bl	8001c58 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e12e      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c58:	f7ff fba9 	bl	80023ae <LL_RCC_LSE_IsReady>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ef      	beq.n	8002c42 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b81      	cmp	r3, #129	@ 0x81
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b85      	cmp	r3, #133	@ 0x85
 8002c70:	d121      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fff1 	bl	8001c58 <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe ffe3 	bl	8001c58 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e108      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ec      	beq.n	8002c8e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002cb4:	e060      	b.n	8002d78 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe ffcf 	bl	8001c58 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe ffc1 	bl	8001c58 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0e6      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ec      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x50e>
 8002cf8:	e03e      	b.n	8002d78 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe ffad 	bl	8001c58 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe ff9f 	bl	8001c58 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0c4      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ec      	bne.n	8002d16 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe ff8c 	bl	8001c58 <HAL_GetTick>
 8002d40:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe ff7e 	bl	8001c58 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0a3      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d6e:	f7ff fb1e 	bl	80023ae <LL_RCC_LSE_IsReady>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ef      	bne.n	8002d58 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8099 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b0c      	cmp	r3, #12
 8002d86:	d06c      	beq.n	8002e62 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d14b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	f7ff fc74 	bl	800267c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe ff60 	bl	8001c58 <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe ff5c 	bl	8001c58 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b0a      	cmp	r3, #10
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e083      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002dae:	f7ff fc73 	bl	8002698 <LL_RCC_PLL_IsReady>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f1      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	4b40      	ldr	r3, [pc, #256]	@ (8002ec0 <HAL_RCC_OscConfig+0x6fc>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dd0:	0212      	lsls	r2, r2, #8
 8002dd2:	4311      	orrs	r1, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002de4:	430a      	orrs	r2, r1
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dee:	f7ff fc37 	bl	8002660 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe ff29 	bl	8001c58 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7fe ff25 	bl	8001c58 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b0a      	cmp	r3, #10
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e04c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002e1c:	f7ff fc3c 	bl	8002698 <LL_RCC_PLL_IsReady>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f1      	beq.n	8002e0a <HAL_RCC_OscConfig+0x646>
 8002e26:	e045      	b.n	8002eb4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	f7ff fc28 	bl	800267c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe ff14 	bl	8001c58 <HAL_GetTick>
 8002e30:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe ff10 	bl	8001c58 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b0a      	cmp	r3, #10
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e037      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e46:	f7ff fc27 	bl	8002698 <LL_RCC_PLL_IsReady>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f1      	bne.n	8002e34 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_RCC_OscConfig+0x700>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
 8002e60:	e028      	b.n	8002eb4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e023      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10e      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	11c1808c 	.word	0x11c1808c
 8002ec4:	eefefffc 	.word	0xeefefffc

08002ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e12c      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b98      	ldr	r3, [pc, #608]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d91b      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b95      	ldr	r3, [pc, #596]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	4993      	ldr	r1, [pc, #588]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002efa:	f7fe fead 	bl	8001c58 <HAL_GetTick>
 8002efe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f02:	f7fe fea9 	bl	8001c58 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e110      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f14:	4b8a      	ldr	r3, [pc, #552]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d1ef      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fb02 	bl	800253c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f38:	f7fe fe8e 	bl	8001c58 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f40:	f7fe fe8a 	bl	8001c58 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0f1      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f52:	f7ff fbdf 	bl	8002714 <LL_RCC_IsActiveFlag_HPRE>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f1      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d016      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff faf8 	bl	8002562 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f72:	f7fe fe71 	bl	8001c58 <HAL_GetTick>
 8002f76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f7a:	f7fe fe6d 	bl	8001c58 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0d4      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f8c:	f7ff fbd3 	bl	8002736 <LL_RCC_IsActiveFlag_C2HPRE>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f1      	beq.n	8002f7a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff faf0 	bl	800258c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fac:	f7fe fe54 	bl	8001c58 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fb4:	f7fe fe50 	bl	8001c58 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e0b7      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002fc6:	f7ff fbc8 	bl	800275a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f1      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fae9 	bl	80025b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fe6:	f7fe fe37 	bl	8001c58 <HAL_GetTick>
 8002fea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fee:	f7fe fe33 	bl	8001c58 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e09a      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003000:	f7ff fbbd 	bl	800277e <LL_RCC_IsActiveFlag_PPRE1>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f1      	beq.n	8002fee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d017      	beq.n	8003046 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fade 	bl	80025de <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003022:	f7fe fe19 	bl	8001c58 <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800302a:	f7fe fe15 	bl	8001c58 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e07c      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800303c:	f7ff fbb0 	bl	80027a0 <LL_RCC_IsActiveFlag_PPRE2>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f1      	beq.n	800302a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d043      	beq.n	80030da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d106      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800305a:	f7ff f956 	bl	800230a <LL_RCC_HSE_IsReady>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11e      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e066      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d106      	bne.n	800307e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003070:	f7ff fb12 	bl	8002698 <LL_RCC_PLL_IsReady>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d113      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e05b      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003086:	f7ff f9f0 	bl	800246a <LL_RCC_MSI_IsReady>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d108      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e050      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003094:	f7ff f966 	bl	8002364 <LL_RCC_HSI_IsReady>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e049      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fa2a 	bl	8002500 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fdd4 	bl	8001c58 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fe fdd0 	bl	8001c58 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e035      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	f7ff fa2c 	bl	8002526 <LL_RCC_GetSysClkSource>
 80030ce:	4602      	mov	r2, r0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d1ec      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030da:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d21b      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e8:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 0207 	bic.w	r2, r3, #7
 80030f0:	4913      	ldr	r1, [pc, #76]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fdae 	bl	8001c58 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003100:	f7fe fdaa 	bl	8001c58 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e011      	b.n	8003136 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_ClockConfig+0x278>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d1ef      	bne.n	8003100 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003120:	f000 f8b4 	bl	800328c <HAL_RCC_GetHCLKFreq>
 8003124:	4603      	mov	r3, r0
 8003126:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <HAL_RCC_ClockConfig+0x27c>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800312a:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <HAL_RCC_ClockConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fd46 	bl	8001bc0 <HAL_InitTick>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	58004000 	.word	0x58004000
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315a:	f7ff f9e4 	bl	8002526 <LL_RCC_GetSysClkSource>
 800315e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003160:	f7ff facd 	bl	80026fe <LL_RCC_PLL_GetMainSource>
 8003164:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x2c>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d139      	bne.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d136      	bne.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003178:	f7ff f987 	bl	800248a <LL_RCC_MSI_IsEnabledRangeSelect>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x62>
 8003182:	f7ff f982 	bl	800248a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_GetSysClockFreq+0x4e>
 800318c:	f7ff f98d 	bl	80024aa <LL_RCC_MSI_GetRange>
 8003190:	4603      	mov	r3, r0
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	e005      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x5a>
 800319a:	f7ff f991 	bl	80024c0 <LL_RCC_MSI_GetRangeAfterStandby>
 800319e:	4603      	mov	r3, r0
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	4a36      	ldr	r2, [pc, #216]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x134>)
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x8c>
 80031ae:	f7ff f96c 	bl	800248a <LL_RCC_MSI_IsEnabledRangeSelect>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x7a>
 80031b8:	f7ff f977 	bl	80024aa <LL_RCC_MSI_GetRange>
 80031bc:	4603      	mov	r3, r0
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	e005      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x86>
 80031c6:	f7ff f97b 	bl	80024c0 <LL_RCC_MSI_GetRangeAfterStandby>
 80031ca:	4603      	mov	r3, r0
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x134>)
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d115      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80031e4:	e012      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031ec:	4b25      	ldr	r3, [pc, #148]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x138>)
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e00c      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d109      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80031f8:	f7ff f85a 	bl	80022b0 <LL_RCC_HSE_IsEnabledDiv2>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003202:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x138>)
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e001      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x13c>)
 800320a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320c:	f7ff f98b 	bl	8002526 <LL_RCC_GetSysClkSource>
 8003210:	4603      	mov	r3, r0
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d12f      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003216:	f7ff fa72 	bl	80026fe <LL_RCC_PLL_GetMainSource>
 800321a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0xde>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d003      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0xe4>
 8003228:	e00d      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800322a:	4b16      	ldr	r3, [pc, #88]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x138>)
 800322c:	60fb      	str	r3, [r7, #12]
        break;
 800322e:	e00d      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003230:	f7ff f83e 	bl	80022b0 <LL_RCC_HSE_IsEnabledDiv2>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800323a:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x138>)
 800323c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800323e:	e005      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003242:	60fb      	str	r3, [r7, #12]
        break;
 8003244:	e002      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	60fb      	str	r3, [r7, #12]
        break;
 800324a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800324c:	f7ff fa35 	bl	80026ba <LL_RCC_PLL_GetN>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	fb03 f402 	mul.w	r4, r3, r2
 8003258:	f7ff fa46 	bl	80026e8 <LL_RCC_PLL_GetDivider>
 800325c:	4603      	mov	r3, r0
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	3301      	adds	r3, #1
 8003262:	fbb4 f4f3 	udiv	r4, r4, r3
 8003266:	f7ff fa34 	bl	80026d2 <LL_RCC_PLL_GetR>
 800326a:	4603      	mov	r3, r0
 800326c:	0f5b      	lsrs	r3, r3, #29
 800326e:	3301      	adds	r3, #1
 8003270:	fbb4 f3f3 	udiv	r3, r4, r3
 8003274:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003276:	697b      	ldr	r3, [r7, #20]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	08006518 	.word	0x08006518
 8003284:	00f42400 	.word	0x00f42400
 8003288:	01e84800 	.word	0x01e84800

0800328c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b598      	push	{r3, r4, r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003290:	f7ff ff5c 	bl	800314c <HAL_RCC_GetSysClockFreq>
 8003294:	4604      	mov	r4, r0
 8003296:	f7ff f9b5 	bl	8002604 <LL_RCC_GetAHBPrescaler>
 800329a:	4603      	mov	r3, r0
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	4a03      	ldr	r2, [pc, #12]	@ (80032b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80032a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd98      	pop	{r3, r4, r7, pc}
 80032b0:	080064b8 	.word	0x080064b8

080032b4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b598      	push	{r3, r4, r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80032b8:	f7ff ffe8 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032bc:	4604      	mov	r4, r0
 80032be:	f7ff f9b9 	bl	8002634 <LL_RCC_GetAPB1Prescaler>
 80032c2:	4603      	mov	r3, r0
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	4a03      	ldr	r2, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd98      	pop	{r3, r4, r7, pc}
 80032d4:	080064f8 	.word	0x080064f8

080032d8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b598      	push	{r3, r4, r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80032dc:	f7ff ffd6 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032e0:	4604      	mov	r4, r0
 80032e2:	f7ff f9b2 	bl	800264a <LL_RCC_GetAPB2Prescaler>
 80032e6:	4603      	mov	r3, r0
 80032e8:	0adb      	lsrs	r3, r3, #11
 80032ea:	4a03      	ldr	r2, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd98      	pop	{r3, r4, r7, pc}
 80032f8:	080064f8 	.word	0x080064f8

080032fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	4a10      	ldr	r2, [pc, #64]	@ (8003350 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003312:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003314:	f7ff f981 	bl	800261a <LL_RCC_GetAHB3Prescaler>
 8003318:	4603      	mov	r3, r0
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	4a0c      	ldr	r2, [pc, #48]	@ (8003354 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9c      	lsrs	r4, r3, #18
 8003338:	f7fe ff80 	bl	800223c <HAL_PWREx_GetVoltageRange>
 800333c:	4603      	mov	r3, r0
 800333e:	4619      	mov	r1, r3
 8003340:	4620      	mov	r0, r4
 8003342:	f000 f80b 	bl	800335c <RCC_SetFlashLatency>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	08006518 	.word	0x08006518
 8003354:	080064b8 	.word	0x080064b8
 8003358:	431bde83 	.word	0x431bde83

0800335c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	@ 0x38
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003366:	4a3a      	ldr	r2, [pc, #232]	@ (8003450 <RCC_SetFlashLatency+0xf4>)
 8003368:	f107 0320 	add.w	r3, r7, #32
 800336c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003370:	6018      	str	r0, [r3, #0]
 8003372:	3304      	adds	r3, #4
 8003374:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003376:	4a37      	ldr	r2, [pc, #220]	@ (8003454 <RCC_SetFlashLatency+0xf8>)
 8003378:	f107 0318 	add.w	r3, r7, #24
 800337c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003380:	6018      	str	r0, [r3, #0]
 8003382:	3304      	adds	r3, #4
 8003384:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003386:	4a34      	ldr	r2, [pc, #208]	@ (8003458 <RCC_SetFlashLatency+0xfc>)
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	ca07      	ldmia	r2, {r0, r1, r2}
 800338e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003392:	2300      	movs	r3, #0
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800339c:	d11b      	bne.n	80033d6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800339e:	2300      	movs	r3, #0
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a2:	e014      	b.n	80033ce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	3338      	adds	r3, #56	@ 0x38
 80033aa:	443b      	add	r3, r7
 80033ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80033b0:	461a      	mov	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d807      	bhi.n	80033c8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	3338      	adds	r3, #56	@ 0x38
 80033be:	443b      	add	r3, r7
 80033c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033c6:	e021      	b.n	800340c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	3301      	adds	r3, #1
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d9e7      	bls.n	80033a4 <RCC_SetFlashLatency+0x48>
 80033d4:	e01a      	b.n	800340c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033da:	e014      	b.n	8003406 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80033dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	3338      	adds	r3, #56	@ 0x38
 80033e2:	443b      	add	r3, r7
 80033e4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80033e8:	461a      	mov	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d807      	bhi.n	8003400 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80033f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3338      	adds	r3, #56	@ 0x38
 80033f6:	443b      	add	r3, r7
 80033f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80033fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033fe:	e005      	b.n	800340c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	3301      	adds	r3, #1
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	2b02      	cmp	r3, #2
 800340a:	d9e7      	bls.n	80033dc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800340c:	4b13      	ldr	r3, [pc, #76]	@ (800345c <RCC_SetFlashLatency+0x100>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 0207 	bic.w	r2, r3, #7
 8003414:	4911      	ldr	r1, [pc, #68]	@ (800345c <RCC_SetFlashLatency+0x100>)
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800341c:	f7fe fc1c 	bl	8001c58 <HAL_GetTick>
 8003420:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003422:	e008      	b.n	8003436 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003424:	f7fe fc18 	bl	8001c58 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e007      	b.n	8003446 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <RCC_SetFlashLatency+0x100>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003440:	429a      	cmp	r2, r3
 8003442:	d1ef      	bne.n	8003424 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3738      	adds	r7, #56	@ 0x38
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	08006458 	.word	0x08006458
 8003454:	08006460 	.word	0x08006460
 8003458:	08006468 	.word	0x08006468
 800345c:	58004000 	.word	0x58004000

08003460 <LL_RCC_LSE_IsReady>:
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d101      	bne.n	8003478 <LL_RCC_LSE_IsReady+0x18>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <LL_RCC_LSE_IsReady+0x1a>
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <LL_RCC_SetUSARTClockSource>:
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	43db      	mvns	r3, r3
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <LL_RCC_SetI2SClockSource>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <LL_RCC_SetLPUARTClockSource>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80034e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <LL_RCC_SetI2CClockSource>:
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003512:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800351e:	43db      	mvns	r3, r3
 8003520:	401a      	ands	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800352a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <LL_RCC_SetLPTIMClockSource>:
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800354a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	43db      	mvns	r3, r3
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <LL_RCC_SetRNGClockSource>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003580:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003584:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <LL_RCC_SetADCClockSource>:
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80035a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <LL_RCC_SetRTCClockSource>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <LL_RCC_GetRTCClockSource>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <LL_RCC_ForceBackupDomainReset>:
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800360a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800363e:	bf00      	nop
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
	...

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003654:	2300      	movs	r3, #0
 8003656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003658:	2300      	movs	r3, #0
 800365a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d058      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003668:	f7fe fdda 	bl	8002220 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800366c:	f7fe faf4 	bl	8001c58 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003672:	e009      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fe faf0 	bl	8001c58 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d902      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	74fb      	strb	r3, [r7, #19]
        break;
 8003686:	e006      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003688:	4b7b      	ldr	r3, [pc, #492]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003694:	d1ee      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d13c      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800369c:	f7ff ffa7 	bl	80035ee <LL_RCC_GetRTCClockSource>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d00f      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036b8:	f7ff ffa5 	bl	8003606 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036bc:	f7ff ffb3 	bl	8003626 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d014      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fac0 	bl	8001c58 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80036da:	e00b      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe fabc 	bl	8001c58 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d902      	bls.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	74fb      	strb	r3, [r7, #19]
            break;
 80036f2:	e004      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80036f4:	f7ff feb4 	bl	8003460 <LL_RCC_LSE_IsReady>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d1ee      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5b 	bl	80035c4 <LL_RCC_SetRTCClockSource>
 800370e:	e004      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
 8003714:	e001      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fea9 	bl	8003482 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe9e 	bl	8003482 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fec0 	bl	80034dc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fee6 	bl	800353e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fedb 	bl	800353e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fed0 	bl	800353e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fea9 	bl	8003506 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fe9e 	bl	8003506 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fe93 	bl	8003506 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fe5e 	bl	80034b2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fe:	d107      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800380a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800380e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fea5 	bl	8003570 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003838:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800383c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d011      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fea3 	bl	800359a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385c:	d107      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800386e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	58000400 	.word	0x58000400

0800387c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800388c:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	58000400 	.word	0x58000400

080038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80038b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	58000400 	.word	0x58000400

080038c4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80038d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	58000400 	.word	0x58000400

080038e4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80038e8:	4b03      	ldr	r3, [pc, #12]	@ (80038f8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80038ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038ee:	619a      	str	r2, [r3, #24]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	58000400 	.word	0x58000400

080038fc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d101      	bne.n	8003910 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	58000400 	.word	0x58000400

08003920 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d101      	bne.n	8003934 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	58000400 	.word	0x58000400

08003944 <LL_RCC_RF_DisableReset>:
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003950:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003954:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003958:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <LL_RCC_IsRFUnderReset>:
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003978:	d101      	bne.n	800397e <LL_RCC_IsRFUnderReset+0x1a>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <LL_RCC_IsRFUnderReset+0x1c>
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <LL_EXTI_EnableIT_32_63+0x24>)
 8003992:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003996:	4905      	ldr	r1, [pc, #20]	@ (80039ac <LL_EXTI_EnableIT_32_63+0x24>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	58000800 	.word	0x58000800

080039b0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
    return status;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	e052      	b.n	8003a6c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	799b      	ldrb	r3, [r3, #6]
 80039ce:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_SUBGHZ_Init+0x2c>
 80039d6:	7bbb      	ldrb	r3, [r7, #14]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d109      	bne.n	80039f0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fc fec0 	bl	8000768 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80039e8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80039ec:	f7ff ffcc 	bl	8003988 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d126      	bne.n	8003a44 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80039fc:	f7ff ffa2 	bl	8003944 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a00:	4b1c      	ldr	r3, [pc, #112]	@ (8003a74 <HAL_SUBGHZ_Init+0xc4>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	0cdb      	lsrs	r3, r3, #19
 8003a0e:	2264      	movs	r2, #100	@ 0x64
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	609a      	str	r2, [r3, #8]
        break;
 8003a26:	e007      	b.n	8003a38 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003a2e:	f7ff ff99 	bl	8003964 <LL_RCC_IsRFUnderReset>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ee      	bne.n	8003a16 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a38:	f7ff ff34 	bl	80038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003a3c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003a40:	f7ff ff1c 	bl	800387c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003a44:	f7ff ff4e 	bl	80038e4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fa58 	bl	8003f08 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	719a      	strb	r2, [r3, #6]

  return status;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	461a      	mov	r2, r3
 8003a84:	460b      	mov	r3, r1
 8003a86:	817b      	strh	r3, [r7, #10]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	799b      	ldrb	r3, [r3, #6]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d14a      	bne.n	8003b2c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	795b      	ldrb	r3, [r3, #5]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e045      	b.n	8003b2e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 faf8 	bl	80040a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ab4:	f7ff ff06 	bl	80038c4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003ab8:	210d      	movs	r1, #13
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fa44 	bl	8003f48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003ac0:	897b      	ldrh	r3, [r7, #10]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4619      	mov	r1, r3
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fa3c 	bl	8003f48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa36 	bl	8003f48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	82bb      	strh	r3, [r7, #20]
 8003ae0:	e00a      	b.n	8003af8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ae2:	8abb      	ldrh	r3, [r7, #20]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fa2b 	bl	8003f48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003af2:	8abb      	ldrh	r3, [r7, #20]
 8003af4:	3301      	adds	r3, #1
 8003af6:	82bb      	strh	r3, [r7, #20]
 8003af8:	8aba      	ldrh	r2, [r7, #20]
 8003afa:	893b      	ldrh	r3, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d3f0      	bcc.n	8003ae2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b00:	f7ff fed0 	bl	80038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 faf1 	bl	80040ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
 8003b16:	e001      	b.n	8003b1c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	715a      	strb	r2, [r3, #5]

    return status;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	e000      	b.n	8003b2e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b088      	sub	sp, #32
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	461a      	mov	r2, r3
 8003b42:	460b      	mov	r3, r1
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	4613      	mov	r3, r2
 8003b48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	799b      	ldrb	r3, [r3, #6]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d14a      	bne.n	8003bee <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	795b      	ldrb	r3, [r3, #5]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e045      	b.n	8003bf0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fa9a 	bl	80040a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b70:	f7ff fea8 	bl	80038c4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003b74:	211d      	movs	r1, #29
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f9e6 	bl	8003f48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003b7c:	897b      	ldrh	r3, [r7, #10]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f9de 	bl	8003f48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003b8c:	897b      	ldrh	r3, [r7, #10]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9d8 	bl	8003f48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003b98:	2100      	movs	r1, #0
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f9d4 	bl	8003f48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	82fb      	strh	r3, [r7, #22]
 8003ba4:	e009      	b.n	8003bba <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fa23 	bl	8003ff4 <SUBGHZSPI_Receive>
      pData++;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	82fb      	strh	r3, [r7, #22]
 8003bba:	8afa      	ldrh	r2, [r7, #22]
 8003bbc:	893b      	ldrh	r3, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3f1      	bcc.n	8003ba6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bc2:	f7ff fe6f 	bl	80038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa90 	bl	80040ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e001      	b.n	8003bde <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	715a      	strb	r2, [r3, #5]

    return status;
 8003bea:	7ffb      	ldrb	r3, [r7, #31]
 8003bec:	e000      	b.n	8003bf0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	461a      	mov	r2, r3
 8003c04:	460b      	mov	r3, r1
 8003c06:	72fb      	strb	r3, [r7, #11]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	799b      	ldrb	r3, [r3, #6]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d14a      	bne.n	8003cac <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	795b      	ldrb	r3, [r3, #5]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e045      	b.n	8003cae <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fa3b 	bl	80040a4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	2b84      	cmp	r3, #132	@ 0x84
 8003c32:	d002      	beq.n	8003c3a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	2b94      	cmp	r3, #148	@ 0x94
 8003c38:	d103      	bne.n	8003c42 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	711a      	strb	r2, [r3, #4]
 8003c40:	e002      	b.n	8003c48 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c48:	f7ff fe3c 	bl	80038c4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f979 	bl	8003f48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	82bb      	strh	r3, [r7, #20]
 8003c5a:	e00a      	b.n	8003c72 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003c5c:	8abb      	ldrh	r3, [r7, #20]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f96e 	bl	8003f48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003c6c:	8abb      	ldrh	r3, [r7, #20]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	82bb      	strh	r3, [r7, #20]
 8003c72:	8aba      	ldrh	r2, [r7, #20]
 8003c74:	893b      	ldrh	r3, [r7, #8]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3f0      	bcc.n	8003c5c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c7a:	f7ff fe13 	bl	80038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	2b84      	cmp	r3, #132	@ 0x84
 8003c82:	d002      	beq.n	8003c8a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fa31 	bl	80040ec <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
 8003c96:	e001      	b.n	8003c9c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	715a      	strb	r2, [r3, #5]

    return status;
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	e000      	b.n	8003cae <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b088      	sub	sp, #32
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	72fb      	strb	r3, [r7, #11]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	799b      	ldrb	r3, [r3, #6]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d13d      	bne.n	8003d54 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	795b      	ldrb	r3, [r3, #5]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e038      	b.n	8003d56 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f9da 	bl	80040a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cf0:	f7ff fde8 	bl	80038c4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003cf4:	7afb      	ldrb	r3, [r7, #11]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f925 	bl	8003f48 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003cfe:	2100      	movs	r1, #0
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f921 	bl	8003f48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	82fb      	strh	r3, [r7, #22]
 8003d0a:	e009      	b.n	8003d20 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f970 	bl	8003ff4 <SUBGHZSPI_Receive>
      pData++;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003d1a:	8afb      	ldrh	r3, [r7, #22]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	82fb      	strh	r3, [r7, #22]
 8003d20:	8afa      	ldrh	r2, [r7, #22]
 8003d22:	893b      	ldrh	r3, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3f1      	bcc.n	8003d0c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d28:	f7ff fdbc 	bl	80038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f9dd 	bl	80040ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e001      	b.n	8003d44 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	715a      	strb	r2, [r3, #5]

    return status;
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	e000      	b.n	8003d56 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	72fb      	strb	r3, [r7, #11]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	799b      	ldrb	r3, [r3, #6]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d13e      	bne.n	8003dfa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	795b      	ldrb	r3, [r3, #5]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e039      	b.n	8003dfc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f988 	bl	80040a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d94:	f7ff fd96 	bl	80038c4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003d98:	210e      	movs	r1, #14
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f8d4 	bl	8003f48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	4619      	mov	r1, r3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f8cf 	bl	8003f48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	82bb      	strh	r3, [r7, #20]
 8003dae:	e00a      	b.n	8003dc6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003db0:	8abb      	ldrh	r3, [r7, #20]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f8c4 	bl	8003f48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003dc0:	8abb      	ldrh	r3, [r7, #20]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	82bb      	strh	r3, [r7, #20]
 8003dc6:	8aba      	ldrh	r2, [r7, #20]
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3f0      	bcc.n	8003db0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dce:	f7ff fd69 	bl	80038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f98a 	bl	80040ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
 8003de4:	e001      	b.n	8003dea <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	715a      	strb	r2, [r3, #5]

    return status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	e000      	b.n	8003dfc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003e10:	f107 020c 	add.w	r2, r7, #12
 8003e14:	2302      	movs	r3, #2
 8003e16:	2112      	movs	r1, #18
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff4c 	bl	8003cb6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003e1e:	7b3b      	ldrb	r3, [r7, #12]
 8003e20:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003e22:	89fb      	ldrh	r3, [r7, #14]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	b21a      	sxth	r2, r3
 8003e28:	7b7b      	ldrb	r3, [r7, #13]
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003e32:	f107 020c 	add.w	r2, r7, #12
 8003e36:	2302      	movs	r3, #2
 8003e38:	2102      	movs	r1, #2
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fedc 	bl	8003bf8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003e40:	89fb      	ldrh	r3, [r7, #14]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fdd6 	bl	80019fc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8003e5a:	89fb      	ldrh	r3, [r7, #14]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fd fdd7 	bl	8001a18 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fd fe27 	bl	8001ac8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003e7a:	89fb      	ldrh	r3, [r7, #14]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fd fe2d 	bl	8001ae4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fd fe33 	bl	8001b00 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fd fe01 	bl	8001aac <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003eaa:	89fb      	ldrh	r3, [r7, #14]
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7fd fdbd 	bl	8001a34 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003eba:	89fb      	ldrh	r3, [r7, #14]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003ec4:	89fb      	ldrh	r3, [r7, #14]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003ece:	2101      	movs	r1, #1
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fd fdbd 	bl	8001a50 <HAL_SUBGHZ_CADStatusCallback>
 8003ed6:	e003      	b.n	8003ee0 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003ed8:	2100      	movs	r1, #0
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fdb8 	bl	8001a50 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003ee0:	89fb      	ldrh	r3, [r7, #14]
 8003ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd fdce 	bl	8001a8c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fe0e 	bl	8001b1c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f10:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <SUBGHZSPI_Init+0x3c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0b      	ldr	r2, [pc, #44]	@ (8003f44 <SUBGHZSPI_Init+0x3c>)
 8003f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f1a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003f1c:	4a09      	ldr	r2, [pc, #36]	@ (8003f44 <SUBGHZSPI_Init+0x3c>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003f24:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003f26:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <SUBGHZSPI_Init+0x3c>)
 8003f28:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <SUBGHZSPI_Init+0x3c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a04      	ldr	r2, [pc, #16]	@ (8003f44 <SUBGHZSPI_Init+0x3c>)
 8003f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f38:	6013      	str	r3, [r2, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	58010000 	.word	0x58010000

08003f48 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f58:	4b23      	ldr	r3, [pc, #140]	@ (8003fe8 <SUBGHZSPI_Transmit+0xa0>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	0cdb      	lsrs	r3, r3, #19
 8003f66:	2264      	movs	r2, #100	@ 0x64
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	609a      	str	r2, [r3, #8]
      break;
 8003f7e:	e008      	b.n	8003f92 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003f86:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <SUBGHZSPI_Transmit+0xa4>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d1ed      	bne.n	8003f6e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003f92:	4b17      	ldr	r3, [pc, #92]	@ (8003ff0 <SUBGHZSPI_Transmit+0xa8>)
 8003f94:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f9c:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <SUBGHZSPI_Transmit+0xa0>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	0cdb      	lsrs	r3, r3, #19
 8003faa:	2264      	movs	r2, #100	@ 0x64
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	609a      	str	r2, [r3, #8]
      break;
 8003fc2:	e008      	b.n	8003fd6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <SUBGHZSPI_Transmit+0xa4>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d1ed      	bne.n	8003fb2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <SUBGHZSPI_Transmit+0xa4>)
 8003fd8:	68db      	ldr	r3, [r3, #12]

  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	58010000 	.word	0x58010000
 8003ff0:	5801000c 	.word	0x5801000c

08003ff4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004002:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <SUBGHZSPI_Receive+0xa4>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	0cdb      	lsrs	r3, r3, #19
 8004010:	2264      	movs	r2, #100	@ 0x64
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	609a      	str	r2, [r3, #8]
      break;
 8004028:	e008      	b.n	800403c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b01      	subs	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <SUBGHZSPI_Receive+0xa8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d1ed      	bne.n	8004018 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800403c:	4b18      	ldr	r3, [pc, #96]	@ (80040a0 <SUBGHZSPI_Receive+0xac>)
 800403e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	22ff      	movs	r2, #255	@ 0xff
 8004044:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004046:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <SUBGHZSPI_Receive+0xa4>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	0cdb      	lsrs	r3, r3, #19
 8004054:	2264      	movs	r2, #100	@ 0x64
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d105      	bne.n	800406e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	609a      	str	r2, [r3, #8]
      break;
 800406c:	e008      	b.n	8004080 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b01      	subs	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004074:	4b09      	ldr	r3, [pc, #36]	@ (800409c <SUBGHZSPI_Receive+0xa8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d1ed      	bne.n	800405c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004080:	4b06      	ldr	r3, [pc, #24]	@ (800409c <SUBGHZSPI_Receive+0xa8>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	701a      	strb	r2, [r3, #0]

  return status;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000000 	.word	0x20000000
 800409c:	58010000 	.word	0x58010000
 80040a0:	5801000c 	.word	0x5801000c

080040a4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	791b      	ldrb	r3, [r3, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d111      	bne.n	80040d8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80040b4:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <SUBGHZ_CheckDeviceReady+0x44>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80040c4:	f7ff fbfe 	bl	80038c4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f9      	bne.n	80040c8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80040d4:	f7ff fbe6 	bl	80038a4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f807 	bl	80040ec <SUBGHZ_WaitOnBusy>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000000 	.word	0x20000000

080040ec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80040f8:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <SUBGHZ_WaitOnBusy+0x58>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	0d1b      	lsrs	r3, r3, #20
 8004106:	2264      	movs	r2, #100	@ 0x64
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800410e:	f7ff fc07 	bl	8003920 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004112:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	609a      	str	r2, [r3, #8]
      break;
 8004124:	e009      	b.n	800413a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b01      	subs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800412c:	f7ff fbe6 	bl	80038fc <LL_PWR_IsActiveFlag_RFBUSYS>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	2b01      	cmp	r3, #1
 8004138:	d0e9      	beq.n	800410e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e049      	b.n	80041ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fbb6 	bl	80008e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 f97a 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e036      	b.n	800427e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <HAL_TIM_Base_Start_IT+0x90>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x44>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423a:	d115      	bne.n	8004268 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4b12      	ldr	r3, [pc, #72]	@ (800428c <HAL_TIM_Base_Start_IT+0x94>)
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b06      	cmp	r3, #6
 800424c:	d015      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x82>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004254:	d011      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	e008      	b.n	800427a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e000      	b.n	800427c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	40012c00 	.word	0x40012c00
 800428c:	00010007 	.word	0x00010007

08004290 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <HAL_TIM_Base_Stop_IT+0x48>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	f240 4344 	movw	r3, #1092	@ 0x444
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_Base_Stop_IT+0x48>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_TIM_ConfigClockSource+0x1c>
 8004304:	2302      	movs	r3, #2
 8004306:	e0b6      	b.n	8004476 <HAL_TIM_ConfigClockSource+0x18a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004326:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004344:	d03e      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0xd8>
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434a:	f200 8087 	bhi.w	800445c <HAL_TIM_ConfigClockSource+0x170>
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004352:	f000 8086 	beq.w	8004462 <HAL_TIM_ConfigClockSource+0x176>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435a:	d87f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x170>
 800435c:	2b70      	cmp	r3, #112	@ 0x70
 800435e:	d01a      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0xaa>
 8004360:	2b70      	cmp	r3, #112	@ 0x70
 8004362:	d87b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x170>
 8004364:	2b60      	cmp	r3, #96	@ 0x60
 8004366:	d050      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x11e>
 8004368:	2b60      	cmp	r3, #96	@ 0x60
 800436a:	d877      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x170>
 800436c:	2b50      	cmp	r3, #80	@ 0x50
 800436e:	d03c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xfe>
 8004370:	2b50      	cmp	r3, #80	@ 0x50
 8004372:	d873      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x170>
 8004374:	2b40      	cmp	r3, #64	@ 0x40
 8004376:	d058      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x13e>
 8004378:	2b40      	cmp	r3, #64	@ 0x40
 800437a:	d86f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x170>
 800437c:	2b30      	cmp	r3, #48	@ 0x30
 800437e:	d064      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15e>
 8004380:	2b30      	cmp	r3, #48	@ 0x30
 8004382:	d86b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x170>
 8004384:	2b20      	cmp	r3, #32
 8004386:	d060      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15e>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d867      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x170>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05c      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15e>
 8004390:	2b10      	cmp	r3, #16
 8004392:	d05a      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15e>
 8004394:	e062      	b.n	800445c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043a6:	f000 f952 	bl	800464e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
      break;
 80043c2:	e04f      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	f000 f93b 	bl	800464e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043e6:	609a      	str	r2, [r3, #8]
      break;
 80043e8:	e03c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 f8b0 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2150      	movs	r1, #80	@ 0x50
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f907 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8004408:	e02c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f8ce 	bl	80045b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2160      	movs	r1, #96	@ 0x60
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f8f7 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8004428:	e01c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	461a      	mov	r2, r3
 8004438:	f000 f890 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2140      	movs	r1, #64	@ 0x40
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f8e7 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8004448:	e00c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 f8de 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 800445a:	e003      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      break;
 8004460:	e000      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a2f      	ldr	r2, [pc, #188]	@ (8004550 <TIM_Base_SetConfig+0xd0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0x20>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449e:	d108      	bne.n	80044b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a26      	ldr	r2, [pc, #152]	@ (8004550 <TIM_Base_SetConfig+0xd0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <TIM_Base_SetConfig+0x52>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c0:	d007      	beq.n	80044d2 <TIM_Base_SetConfig+0x52>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a23      	ldr	r2, [pc, #140]	@ (8004554 <TIM_Base_SetConfig+0xd4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_Base_SetConfig+0x52>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <TIM_Base_SetConfig+0xd8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d108      	bne.n	80044e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a11      	ldr	r2, [pc, #68]	@ (8004550 <TIM_Base_SetConfig+0xd0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0xa0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a10      	ldr	r2, [pc, #64]	@ (8004554 <TIM_Base_SetConfig+0xd4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0xa0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a0f      	ldr	r2, [pc, #60]	@ (8004558 <TIM_Base_SetConfig+0xd8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]
  }
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 030a 	bic.w	r3, r3, #10
 8004598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f023 0210 	bic.w	r2, r3, #16
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	031b      	lsls	r3, r3, #12
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800462c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	431a      	orrs	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4313      	orrs	r3, r2
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	609a      	str	r2, [r3, #8]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e04a      	b.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470c:	d10c      	bne.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	4313      	orrs	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00

08004748 <LL_RCC_GetUSARTClockSource>:
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004754:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	401a      	ands	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	4313      	orrs	r3, r2
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <LL_RCC_GetLPUARTClockSource>:
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004778:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4013      	ands	r3, r2
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e042      	b.n	8004822 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc f98a 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	@ 0x24
 80047b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fbe7 	bl	8004fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f970 	bl	8004ac0 <UART_SetConfig>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e01b      	b.n	8004822 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004808:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fc65 	bl	80050ea <UART_CheckIdleState>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08a      	sub	sp, #40	@ 0x28
 800482e:	af02      	add	r7, sp, #8
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004840:	2b20      	cmp	r3, #32
 8004842:	d173      	bne.n	800492c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UART_Transmit+0x26>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e06c      	b.n	800492e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2221      	movs	r2, #33	@ 0x21
 8004860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004864:	f7fd f9f8 	bl	8001c58 <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004882:	d108      	bne.n	8004896 <HAL_UART_Transmit+0x6c>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e003      	b.n	800489e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800489e:	e02c      	b.n	80048fa <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2180      	movs	r1, #128	@ 0x80
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fc6b 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e039      	b.n	800492e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	3302      	adds	r3, #2
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	e007      	b.n	80048e8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1cc      	bne.n	80048a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	2140      	movs	r1, #64	@ 0x40
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fc38 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e006      	b.n	800492e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b08a      	sub	sp, #40	@ 0x28
 800493a:	af02      	add	r7, sp, #8
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800494c:	2b20      	cmp	r3, #32
 800494e:	f040 80b1 	bne.w	8004ab4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_UART_Receive+0x28>
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0a9      	b.n	8004ab6 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2222      	movs	r2, #34	@ 0x22
 800496e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004978:	f7fd f96e 	bl	8001c58 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	88fa      	ldrh	r2, [r7, #6]
 8004982:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004996:	d10e      	bne.n	80049b6 <HAL_UART_Receive+0x80>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_UART_Receive+0x76>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80049a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049aa:	e02d      	b.n	8004a08 <HAL_UART_Receive+0xd2>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	22ff      	movs	r2, #255	@ 0xff
 80049b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049b4:	e028      	b.n	8004a08 <HAL_UART_Receive+0xd2>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10d      	bne.n	80049da <HAL_UART_Receive+0xa4>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <HAL_UART_Receive+0x9a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	22ff      	movs	r2, #255	@ 0xff
 80049ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049ce:	e01b      	b.n	8004a08 <HAL_UART_Receive+0xd2>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	227f      	movs	r2, #127	@ 0x7f
 80049d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049d8:	e016      	b.n	8004a08 <HAL_UART_Receive+0xd2>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049e2:	d10d      	bne.n	8004a00 <HAL_UART_Receive+0xca>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_UART_Receive+0xc0>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	227f      	movs	r2, #127	@ 0x7f
 80049f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049f4:	e008      	b.n	8004a08 <HAL_UART_Receive+0xd2>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	223f      	movs	r2, #63	@ 0x3f
 80049fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049fe:	e003      	b.n	8004a08 <HAL_UART_Receive+0xd2>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004a0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a18:	d108      	bne.n	8004a2c <HAL_UART_Receive+0xf6>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e003      	b.n	8004a34 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a34:	e032      	b.n	8004a9c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2120      	movs	r1, #32
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fba0 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e032      	b.n	8004ab6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10c      	bne.n	8004a70 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	8a7b      	ldrh	r3, [r7, #18]
 8004a60:	4013      	ands	r3, r2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e00c      	b.n	8004a8a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	8a7b      	ldrh	r3, [r7, #18]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3301      	adds	r3, #1
 8004a88:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1c6      	bne.n	8004a36 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b08c      	sub	sp, #48	@ 0x30
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b94      	ldr	r3, [pc, #592]	@ (8004d40 <UART_SetConfig+0x280>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a89      	ldr	r2, [pc, #548]	@ (8004d44 <UART_SetConfig+0x284>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f023 010f 	bic.w	r1, r3, #15
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7a      	ldr	r2, [pc, #488]	@ (8004d48 <UART_SetConfig+0x288>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d127      	bne.n	8004bb4 <UART_SetConfig+0xf4>
 8004b64:	2003      	movs	r0, #3
 8004b66:	f7ff fdef 	bl	8004748 <LL_RCC_GetUSARTClockSource>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d81b      	bhi.n	8004bac <UART_SetConfig+0xec>
 8004b74:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <UART_SetConfig+0xbc>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	e080      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9a:	e07c      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba2:	e078      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004baa:	e074      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb2:	e070      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a64      	ldr	r2, [pc, #400]	@ (8004d4c <UART_SetConfig+0x28c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d138      	bne.n	8004c30 <UART_SetConfig+0x170>
 8004bbe:	200c      	movs	r0, #12
 8004bc0:	f7ff fdc2 	bl	8004748 <LL_RCC_GetUSARTClockSource>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d82c      	bhi.n	8004c28 <UART_SetConfig+0x168>
 8004bce:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <UART_SetConfig+0x114>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c29 	.word	0x08004c29
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c29 	.word	0x08004c29
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c11 	.word	0x08004c11
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0e:	e042      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c16:	e03e      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e03a      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	e036      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2e:	e032      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a43      	ldr	r2, [pc, #268]	@ (8004d44 <UART_SetConfig+0x284>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d12a      	bne.n	8004c90 <UART_SetConfig+0x1d0>
 8004c3a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004c3e:	f7ff fd95 	bl	800476c <LL_RCC_GetLPUARTClockSource>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c48:	d01a      	beq.n	8004c80 <UART_SetConfig+0x1c0>
 8004c4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c4e:	d81b      	bhi.n	8004c88 <UART_SetConfig+0x1c8>
 8004c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c54:	d00c      	beq.n	8004c70 <UART_SetConfig+0x1b0>
 8004c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c5a:	d815      	bhi.n	8004c88 <UART_SetConfig+0x1c8>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <UART_SetConfig+0x1a8>
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c64:	d008      	beq.n	8004c78 <UART_SetConfig+0x1b8>
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x1c8>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e012      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e00e      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c86:	e006      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c8e:	e002      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d44 <UART_SetConfig+0x284>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	f040 80a4 	bne.w	8004dea <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d823      	bhi.n	8004cf2 <UART_SetConfig+0x232>
 8004caa:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb0 <UART_SetConfig+0x1f0>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004ce3 	.word	0x08004ce3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004cf3 	.word	0x08004cf3
 8004cd0:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fe faee 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cda:	e010      	b.n	8004cfe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <UART_SetConfig+0x290>)
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ce0:	e00d      	b.n	8004cfe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe fa33 	bl	800314c <HAL_RCC_GetSysClockFreq>
 8004ce6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ce8:	e009      	b.n	8004cfe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cf0:	e005      	b.n	8004cfe <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8137 	beq.w	8004f74 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	4a12      	ldr	r2, [pc, #72]	@ (8004d54 <UART_SetConfig+0x294>)
 8004d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d305      	bcc.n	8004d36 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d910      	bls.n	8004d58 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d3c:	e11a      	b.n	8004f74 <UART_SetConfig+0x4b4>
 8004d3e:	bf00      	nop
 8004d40:	cfff69f3 	.word	0xcfff69f3
 8004d44:	40008000 	.word	0x40008000
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40004400 	.word	0x40004400
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	08006558 	.word	0x08006558
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	4a8e      	ldr	r2, [pc, #568]	@ (8004fa0 <UART_SetConfig+0x4e0>)
 8004d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d7a:	f7fb fa59 	bl	8000230 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	020b      	lsls	r3, r1, #8
 8004d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d94:	0202      	lsls	r2, r0, #8
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	6849      	ldr	r1, [r1, #4]
 8004d9a:	0849      	lsrs	r1, r1, #1
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	4605      	mov	r5, r0
 8004da2:	eb12 0804 	adds.w	r8, r2, r4
 8004da6:	eb43 0905 	adc.w	r9, r3, r5
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	469a      	mov	sl, r3
 8004db2:	4693      	mov	fp, r2
 8004db4:	4652      	mov	r2, sl
 8004db6:	465b      	mov	r3, fp
 8004db8:	4640      	mov	r0, r8
 8004dba:	4649      	mov	r1, r9
 8004dbc:	f7fb fa38 	bl	8000230 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dce:	d308      	bcc.n	8004de2 <UART_SetConfig+0x322>
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dd6:	d204      	bcs.n	8004de2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e0c8      	b.n	8004f74 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004de8:	e0c4      	b.n	8004f74 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df2:	d167      	bne.n	8004ec4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004df4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d828      	bhi.n	8004e4e <UART_SetConfig+0x38e>
 8004dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <UART_SetConfig+0x344>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe fa44 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e2e:	e014      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fe fa52 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004e34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e36:	e010      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa4 <UART_SetConfig+0x4e4>)
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e3c:	e00d      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe f985 	bl	800314c <HAL_RCC_GetSysClockFreq>
 8004e42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e44:	e009      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e4c:	e005      	b.n	8004e5a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8089 	beq.w	8004f74 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	4a4e      	ldr	r2, [pc, #312]	@ (8004fa0 <UART_SetConfig+0x4e0>)
 8004e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e74:	005a      	lsls	r2, r3, #1
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	441a      	add	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d916      	bls.n	8004ebc <UART_SetConfig+0x3fc>
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d212      	bcs.n	8004ebc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f023 030f 	bic.w	r3, r3, #15
 8004e9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	8bfb      	ldrh	r3, [r7, #30]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	8bfa      	ldrh	r2, [r7, #30]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	e05b      	b.n	8004f74 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ec2:	e057      	b.n	8004f74 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ec4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d828      	bhi.n	8004f1e <UART_SetConfig+0x45e>
 8004ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <UART_SetConfig+0x414>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	08004f1f 	.word	0x08004f1f
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f1f 	.word	0x08004f1f
 8004eec:	08004f1f 	.word	0x08004f1f
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fe f9dc 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004efc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004efe:	e014      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f00:	f7fe f9ea 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f06:	e010      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <UART_SetConfig+0x4e4>)
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f0c:	e00d      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7fe f91d 	bl	800314c <HAL_RCC_GetSysClockFreq>
 8004f12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f14:	e009      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f1c:	e005      	b.n	8004f2a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f28:	bf00      	nop
    }

    if (pclk != 0U)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d021      	beq.n	8004f74 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa0 <UART_SetConfig+0x4e0>)
 8004f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	441a      	add	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d909      	bls.n	8004f6e <UART_SetConfig+0x4ae>
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f60:	d205      	bcs.n	8004f6e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e002      	b.n	8004f74 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3730      	adds	r7, #48	@ 0x30
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	08006558 	.word	0x08006558
 8004fa4:	00f42400 	.word	0x00f42400

08004fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01a      	beq.n	80050be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a6:	d10a      	bne.n	80050be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
  }
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050fa:	f7fc fdad 	bl	8001c58 <HAL_GetTick>
 80050fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b08      	cmp	r3, #8
 800510c:	d10e      	bne.n	800512c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f832 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e028      	b.n	800517e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d10e      	bne.n	8005158 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f81c 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e012      	b.n	800517e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b09c      	sub	sp, #112	@ 0x70
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	e0af      	b.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	f000 80ab 	beq.w	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fc fd59 	bl	8001c58 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d140      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80051cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80051dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80051e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e6      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	663b      	str	r3, [r7, #96]	@ 0x60
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800520a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800520c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e06f      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d057      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b80      	cmp	r3, #128	@ 0x80
 800524c:	d054      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	d051      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005262:	d149      	bne.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800526c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005282:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
 800528e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	613b      	str	r3, [r7, #16]
   return(result);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052c0:	623a      	str	r2, [r7, #32]
 80052c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e010      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	f43f af40 	beq.w	8005198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3770      	adds	r7, #112	@ 0x70
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_UARTEx_DisableFifoMode+0x16>
 8005334:	2302      	movs	r3, #2
 8005336:	e027      	b.n	8005388 <HAL_UARTEx_DisableFifoMode+0x66>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	@ 0x24
 8005344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005366:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr

08005392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e02d      	b.n	8005406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2224      	movs	r2, #36	@ 0x24
 80053b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f850 	bl	800548c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005422:	2302      	movs	r3, #2
 8005424:	e02d      	b.n	8005482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2224      	movs	r2, #36	@ 0x24
 8005432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f812 	bl	800548c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054ac:	e031      	b.n	8005512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054ae:	2308      	movs	r3, #8
 80054b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054b2:	2308      	movs	r3, #8
 80054b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	0e5b      	lsrs	r3, r3, #25
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	0f5b      	lsrs	r3, r3, #29
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	7b3a      	ldrb	r2, [r7, #12]
 80054da:	4910      	ldr	r1, [pc, #64]	@ (800551c <UARTEx_SetNbDataToProcess+0x90>)
 80054dc:	5c8a      	ldrb	r2, [r1, r2]
 80054de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054e2:	7b3a      	ldrb	r2, [r7, #12]
 80054e4:	490e      	ldr	r1, [pc, #56]	@ (8005520 <UARTEx_SetNbDataToProcess+0x94>)
 80054e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	7b7a      	ldrb	r2, [r7, #13]
 80054f8:	4908      	ldr	r1, [pc, #32]	@ (800551c <UARTEx_SetNbDataToProcess+0x90>)
 80054fa:	5c8a      	ldrb	r2, [r1, r2]
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005500:	7b7a      	ldrb	r2, [r7, #13]
 8005502:	4907      	ldr	r1, [pc, #28]	@ (8005520 <UARTEx_SetNbDataToProcess+0x94>)
 8005504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005506:	fb93 f3f2 	sdiv	r3, r3, r2
 800550a:	b29a      	uxth	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr
 800551c:	08006570 	.word	0x08006570
 8005520:	08006578 	.word	0x08006578

08005524 <setStateMode>:

/*	Sitting operation mode
 *	0 = STATE_MASTER
 *  1 = STATE_SLAVE
 */
LoRaState setStateMode (uint8_t  mode) {
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	71fb      	strb	r3, [r7, #7]
	if (mode == 0) return STATE_MASTER;
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <setStateMode+0x14>
 8005534:	2301      	movs	r3, #1
 8005536:	e005      	b.n	8005544 <setStateMode+0x20>
	if (mode == 1) return STATE_SLAVE;
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <setStateMode+0x1e>
 800553e:	2302      	movs	r3, #2
 8005540:	e000      	b.n	8005544 <setStateMode+0x20>

	return STATE_NULL;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
	...

08005550 <getDefaultLoRaConfig>:

LoRaConfig getDefaultLoRaConfig (void) {
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	return (LoRaConfig){
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a04      	ldr	r2, [pc, #16]	@ (800556c <getDefaultLoRaConfig+0x1c>)
 800555c:	ca07      	ldmia	r2, {r0, r1, r2}
 800555e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.lora_spreading_factor =7,
		.lora_codingrate = 1,
		.lora_preamble_length = 8,
		.lora_symbol_timeout = 5,
	};
}
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr
 800556c:	08006474 	.word	0x08006474

08005570 <LoraInit>:
    if (conf.lora_symbol_timeout >= 0) config.lora_symbol_timeout = conf.lora_symbol_timeout;

    return config;
}

void LoraInit(LoRaConfig config) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	@ 0x30
 8005574:	af00      	add	r7, sp, #0
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 800557c:	4835      	ldr	r0, [pc, #212]	@ (8005654 <LoraInit+0xe4>)
 800557e:	f7fb fc55 	bl	8000e2c <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8005582:	f640 1016 	movw	r0, #2326	@ 0x916
 8005586:	f7fc f963 	bl	8001850 <SUBGRF_ReadRegister>
 800558a:	4603      	mov	r3, r0
 800558c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005590:	b2db      	uxtb	r3, r3
 8005592:	4619      	mov	r1, r3
 8005594:	f640 1016 	movw	r0, #2326	@ 0x916
 8005598:	f7fc f946 	bl	8001828 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 800559c:	f7fb fd5d 	bl	800105a <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80055a0:	2100      	movs	r1, #0
 80055a2:	2000      	movs	r0, #0
 80055a4:	f7fc f928 	bl	80017f8 <SUBGRF_SetBufferBaseAddress>

	//Set Operating Frequency and Transmission Power
	SUBGRF_SetRfFrequency(config.rf_frequency);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb fe7a 	bl	80012a4 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(config.tx_output_power);
 80055b0:	7a3b      	ldrb	r3, [r7, #8]
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fc f9ed 	bl	8001994 <SUBGRF_SetRfTxPower>

	//Preamble Interrupt Timer Configuration
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 80055ba:	2000      	movs	r0, #0
 80055bc:	f7fb fd3e 	bl	800103c <SUBGRF_SetStopRxTimerOnPreambleDetect>

	//Set Packet Type to LoRa
	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 80055c0:	2001      	movs	r0, #1
 80055c2:	f7fb feb5 	bl	8001330 <SUBGRF_SetPacketType>

	//Sync Word Setup
	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80055c6:	2114      	movs	r1, #20
 80055c8:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80055cc:	f7fc f92c 	bl	8001828 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80055d0:	2124      	movs	r1, #36	@ 0x24
 80055d2:	f240 7041 	movw	r0, #1857	@ 0x741
 80055d6:	f7fc f927 	bl	8001828 <SUBGRF_WriteRegister>
	 * Coding rate: Defined by config.lora_codingrate
	 * Spreading Factor: Defined by config.lora_spreading_factor
	 * Low Data Rate Optimization: Disabled with value 0x00
	 */
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 80055da:	2301      	movs	r3, #1
 80055dc:	753b      	strb	r3, [r7, #20]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[config.lora_bandwidth];
 80055de:	7a7b      	ldrb	r3, [r7, #9]
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <LoraInit+0xe8>)
 80055e4:	5c9b      	ldrb	r3, [r3, r2]
 80055e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)config.lora_codingrate;
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)config.lora_spreading_factor;
 80055f6:	7abb      	ldrb	r3, [r7, #10]
 80055f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	SUBGRF_SetModulationParams(&modulationParams);
 80055fc:	f107 0314 	add.w	r3, r7, #20
 8005600:	4618      	mov	r0, r3
 8005602:	f7fb ff89 	bl	8001518 <SUBGRF_SetModulationParams>
	 * CRC Mode: Enables cyclic redundancy checking (CRC) to ensure packet integrity
	 * HeaderType: Defines the packet header type as variable length
	 * InvertIQ: Sets the inversion of IQ polarity (normal)
	 * Preamble Length: Used the value from config.lora_preamble_length
	 */
	packetParams.PacketType = PACKET_TYPE_LORA;
 8005606:	4b15      	ldr	r3, [pc, #84]	@ (800565c <LoraInit+0xec>)
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 800560c:	4b13      	ldr	r3, [pc, #76]	@ (800565c <LoraInit+0xec>)
 800560e:	2201      	movs	r2, #1
 8005610:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8005612:	4b12      	ldr	r3, [pc, #72]	@ (800565c <LoraInit+0xec>)
 8005614:	2200      	movs	r2, #0
 8005616:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8005618:	4b10      	ldr	r3, [pc, #64]	@ (800565c <LoraInit+0xec>)
 800561a:	2200      	movs	r2, #0
 800561c:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 800561e:	4b0f      	ldr	r3, [pc, #60]	@ (800565c <LoraInit+0xec>)
 8005620:	22ff      	movs	r2, #255	@ 0xff
 8005622:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = config.lora_preamble_length;
 8005624:	7b3b      	ldrb	r3, [r7, #12]
 8005626:	461a      	mov	r2, r3
 8005628:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <LoraInit+0xec>)
 800562a:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 800562c:	480b      	ldr	r0, [pc, #44]	@ (800565c <LoraInit+0xec>)
 800562e:	f7fc f845 	bl	80016bc <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005632:	f240 7036 	movw	r0, #1846	@ 0x736
 8005636:	f7fc f90b 	bl	8001850 <SUBGRF_ReadRegister>
 800563a:	4603      	mov	r3, r0
 800563c:	f043 0304 	orr.w	r3, r3, #4
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	f240 7036 	movw	r0, #1846	@ 0x736
 8005648:	f7fc f8ee 	bl	8001828 <SUBGRF_WriteRegister>
}
 800564c:	bf00      	nop
 800564e:	3730      	adds	r7, #48	@ 0x30
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	08005661 	.word	0x08005661
 8005658:	08006580 	.word	0x08006580
 800565c:	20000208 	.word	0x20000208

08005660 <RadioOnDioIrq>:

#include "LoRaEvents.h"

volatile LoRaIrqStatus lastEventStatus = IRQ_DEFAULT_RETURN_STATUS;

void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	80fb      	strh	r3, [r7, #6]
	lastEventStatus = LoRaEventHandler(radioIrq);
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 f80b 	bl	8005688 <LoRaEventHandler>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	4b03      	ldr	r3, [pc, #12]	@ (8005684 <RadioOnDioIrq+0x24>)
 8005678:	701a      	strb	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000009 	.word	0x20000009

08005688 <LoRaEventHandler>:

LoRaIrqStatus LoRaEventHandler(RadioIrqMasks_t radioIrq) {
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq) {
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005698:	d00f      	beq.n	80056ba <LoRaEventHandler+0x32>
 800569a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800569e:	dc10      	bgt.n	80056c2 <LoRaEventHandler+0x3a>
 80056a0:	2b40      	cmp	r3, #64	@ 0x40
 80056a2:	d00c      	beq.n	80056be <LoRaEventHandler+0x36>
 80056a4:	2b40      	cmp	r3, #64	@ 0x40
 80056a6:	dc0c      	bgt.n	80056c2 <LoRaEventHandler+0x3a>
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d002      	beq.n	80056b2 <LoRaEventHandler+0x2a>
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d002      	beq.n	80056b6 <LoRaEventHandler+0x2e>
 80056b0:	e007      	b.n	80056c2 <LoRaEventHandler+0x3a>
        case IRQ_TX_DONE:
            return IRQ_TX_DONE_STATUS;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e006      	b.n	80056c4 <LoRaEventHandler+0x3c>
        case IRQ_RX_DONE:
            return IRQ_RX_DONE_STATUS;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e004      	b.n	80056c4 <LoRaEventHandler+0x3c>
        case IRQ_RX_TX_TIMEOUT:
            return IRQ_RX_TX_TIMEOUT_STATUS;
 80056ba:	2302      	movs	r3, #2
 80056bc:	e002      	b.n	80056c4 <LoRaEventHandler+0x3c>
        case IRQ_CRC_ERROR:
            return IRQ_CRC_ERROR_STATUS;
 80056be:	2303      	movs	r3, #3
 80056c0:	e000      	b.n	80056c4 <LoRaEventHandler+0x3c>
        default:
            return IRQ_DEFAULT_RETURN_STATUS;
 80056c2:	2399      	movs	r3, #153	@ 0x99
    }
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr
	...

080056d0 <getLastLoRaEvent>:

LoRaIrqStatus getLastLoRaEvent(void) {
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
    return lastEventStatus;
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <getLastLoRaEvent+0x14>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
}
 80056da:	4618      	mov	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000009 	.word	0x20000009

080056e8 <SendMessage>:
 *      Author: Luiz Fernando Silvério Felisbino
 */

#include "LoRaMessageHandler.h"

LoRaIrqStatus SendMessage(const char *message) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	if (message == NULL || strlen(message) == 0) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <SendMessage+0x16>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <SendMessage+0x1a>
		return IRQ_CRC_ERROR_STATUS;  // Invalid message
 80056fe:	2303      	movs	r3, #3
 8005700:	e02f      	b.n	8005762 <SendMessage+0x7a>
	}

	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8005702:	2300      	movs	r3, #0
 8005704:	2200      	movs	r2, #0
 8005706:	f240 2101 	movw	r1, #513	@ 0x201
 800570a:	f240 2001 	movw	r0, #513	@ 0x201
 800570e:	f7fb fd6d 	bl	80011ec <SUBGRF_SetDioIrqParams>
	                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8005712:	2101      	movs	r1, #1
 8005714:	2001      	movs	r0, #1
 8005716:	f7fc f915 	bl	8001944 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 800571a:	f640 0089 	movw	r0, #2185	@ 0x889
 800571e:	f7fc f897 	bl	8001850 <SUBGRF_ReadRegister>
 8005722:	4603      	mov	r3, r0
 8005724:	f043 0304 	orr.w	r3, r3, #4
 8005728:	b2db      	uxtb	r3, r3
 800572a:	4619      	mov	r1, r3
 800572c:	f640 0089 	movw	r0, #2185	@ 0x889
 8005730:	f7fc f87a 	bl	8001828 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = strlen(message);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fa fd23 	bl	8000180 <strlen>
 800573a:	4603      	mov	r3, r0
 800573c:	b2da      	uxtb	r2, r3
 800573e:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <SendMessage+0x84>)
 8005740:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8005742:	480a      	ldr	r0, [pc, #40]	@ (800576c <SendMessage+0x84>)
 8005744:	f7fb ffba 	bl	80016bc <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t *)message, strlen(message), 0);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fa fd19 	bl	8000180 <strlen>
 800574e:	4603      	mov	r3, r0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2200      	movs	r2, #0
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fb fbc0 	bl	8000edc <SUBGRF_SendPayload>

	return getLastLoRaEvent();
 800575c:	f7ff ffb8 	bl	80056d0 <getLastLoRaEvent>
 8005760:	4603      	mov	r3, r0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000208 	.word	0x20000208

08005770 <mainLoRa>:
enum CarState car = STATE_NULL;
enum CarState LastState = STATE_NULL;
bool connected = false;
uint8_t elapse_time = 0;

void mainLoRa(void) {
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8005776:	af40      	add	r7, sp, #256	@ 0x100
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8005778:	2029      	movs	r0, #41	@ 0x29
 800577a:	f7fc fbbe 	bl	8001efa <HAL_NVIC_DisableIRQ>
    ConfigRES RES;
    LoraInit(getDefaultLoRaConfig());
 800577e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff fee4 	bl	8005550 <getDefaultLoRaConfig>
 8005788:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800578c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005790:	f7ff feee 	bl	8005570 <LoraInit>
    RES.rxTimeout = 3000;
 8005794:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005798:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800579c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80057a0:	605a      	str	r2, [r3, #4]
    RES.rxMargin = 200;
 80057a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80057aa:	22c8      	movs	r2, #200	@ 0xc8
 80057ac:	609a      	str	r2, [r3, #8]
    RES.state = setStateMode(STATE_MODE);
 80057ae:	2001      	movs	r0, #1
 80057b0:	f7ff feb8 	bl	8005524 <setStateMode>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057bc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80057c0:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 80057c2:	2300      	movs	r3, #0
 80057c4:	2200      	movs	r2, #0
 80057c6:	f240 2142 	movw	r1, #578	@ 0x242
 80057ca:	f240 2042 	movw	r0, #578	@ 0x242
 80057ce:	f7fb fd0d 	bl	80011ec <SUBGRF_SetDioIrqParams>
        IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
        IRQ_RADIO_NONE,
        IRQ_RADIO_NONE );
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80057d2:	2100      	movs	r1, #0
 80057d4:	2001      	movs	r0, #1
 80057d6:	f7fc f8b5 	bl	8001944 <SUBGRF_SetSwitch>
    SUBGRF_SetRx(RES.rxTimeout << 6);
 80057da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fb fc08 	bl	8000ffc <SUBGRF_SetRx>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057ec:	2029      	movs	r0, #41	@ 0x29
 80057ee:	f7fc fb76 	bl	8001ede <HAL_NVIC_EnableIRQ>
    HAL_TIM_Base_Stop_IT(&htim1);
 80057f2:	481b      	ldr	r0, [pc, #108]	@ (8005860 <mainLoRa+0xf0>)
 80057f4:	f7fe fd4c 	bl	8004290 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80057f8:	4b19      	ldr	r3, [pc, #100]	@ (8005860 <mainLoRa+0xf0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2200      	movs	r2, #0
 80057fe:	625a      	str	r2, [r3, #36]	@ 0x24


    while(true){
    	if (RES.state == STATE_MASTER) MasterController(RES);
 8005800:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005804:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d110      	bne.n	8005830 <mainLoRa+0xc0>
 800580e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005812:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 8005816:	4668      	mov	r0, sp
 8005818:	f104 0310 	add.w	r3, r4, #16
 800581c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005820:	4619      	mov	r1, r3
 8005822:	f000 f9b7 	bl	8005b94 <memcpy>
 8005826:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800582a:	f000 f8f1 	bl	8005a10 <MasterController>
 800582e:	e7e7      	b.n	8005800 <mainLoRa+0x90>
    	else if (RES.state == STATE_SLAVE) SlaveController(RES);
 8005830:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005834:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d1e0      	bne.n	8005800 <mainLoRa+0x90>
 800583e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005842:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 8005846:	4668      	mov	r0, sp
 8005848:	f104 0310 	add.w	r3, r4, #16
 800584c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005850:	4619      	mov	r1, r3
 8005852:	f000 f99f 	bl	8005b94 <memcpy>
 8005856:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800585a:	f000 f859 	bl	8005910 <SlaveController>
    	if (RES.state == STATE_MASTER) MasterController(RES);
 800585e:	e7cf      	b.n	8005800 <mainLoRa+0x90>
 8005860:	20000088 	.word	0x20000088

08005864 <ChangeState>:

void HAL_Tim_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim == &htim1) elapse_time++;
}

void ChangeState (enum CarState state) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b0c2      	sub	sp, #264	@ 0x108
 8005868:	af00      	add	r7, sp, #0
 800586a:	4602      	mov	r2, r0
 800586c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005870:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8005874:	701a      	strb	r2, [r3, #0]
	char uartBuff[255];
	switch (state){
 8005876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d024      	beq.n	80058ce <ChangeState+0x6a>
 8005884:	2b03      	cmp	r3, #3
 8005886:	dc37      	bgt.n	80058f8 <ChangeState+0x94>
 8005888:	2b01      	cmp	r3, #1
 800588a:	d002      	beq.n	8005892 <ChangeState+0x2e>
 800588c:	2b02      	cmp	r3, #2
 800588e:	d009      	beq.n	80058a4 <ChangeState+0x40>
		case EMERGENCY:
			sprintf(uartBuff, "Emergency\r\n");
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
			break;
	}
}
 8005890:	e032      	b.n	80058f8 <ChangeState+0x94>
			HAL_UART_Receive(&huart1, (uartBuff), 1, HAL_MAX_DELAY);
 8005892:	f107 0108 	add.w	r1, r7, #8
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	2201      	movs	r2, #1
 800589c:	4819      	ldr	r0, [pc, #100]	@ (8005904 <ChangeState+0xa0>)
 800589e:	f7ff f84a 	bl	8004936 <HAL_UART_Receive>
			break;
 80058a2:	e029      	b.n	80058f8 <ChangeState+0x94>
			sprintf(uartBuff, "GO\r\n");
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	4917      	ldr	r1, [pc, #92]	@ (8005908 <ChangeState+0xa4>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f90c 	bl	8005ac8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80058b0:	f107 0308 	add.w	r3, r7, #8
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fa fc63 	bl	8000180 <strlen>
 80058ba:	4603      	mov	r3, r0
 80058bc:	b29a      	uxth	r2, r3
 80058be:	f107 0108 	add.w	r1, r7, #8
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
 80058c6:	480f      	ldr	r0, [pc, #60]	@ (8005904 <ChangeState+0xa0>)
 80058c8:	f7fe ffaf 	bl	800482a <HAL_UART_Transmit>
			break;
 80058cc:	e014      	b.n	80058f8 <ChangeState+0x94>
			sprintf(uartBuff, "Emergency\r\n");
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	490e      	ldr	r1, [pc, #56]	@ (800590c <ChangeState+0xa8>)
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 f8f7 	bl	8005ac8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fa fc4e 	bl	8000180 <strlen>
 80058e4:	4603      	mov	r3, r0
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	f107 0108 	add.w	r1, r7, #8
 80058ec:	f04f 33ff 	mov.w	r3, #4294967295
 80058f0:	4804      	ldr	r0, [pc, #16]	@ (8005904 <ChangeState+0xa0>)
 80058f2:	f7fe ff9a 	bl	800482a <HAL_UART_Transmit>
			break;
 80058f6:	bf00      	nop
}
 80058f8:	bf00      	nop
 80058fa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	200000d4 	.word	0x200000d4
 8005908:	08006480 	.word	0x08006480
 800590c:	08006488 	.word	0x08006488

08005910 <SlaveController>:

void SlaveController (ConfigRES RES) {
 8005910:	b084      	sub	sp, #16
 8005912:	b580      	push	{r7, lr}
 8005914:	b0c0      	sub	sp, #256	@ 0x100
 8005916:	af00      	add	r7, sp, #0
 8005918:	f507 7c84 	add.w	ip, r7, #264	@ 0x108
 800591c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char uartBuff[255];
	while (true) {
		sprintf(uartBuff, "GO\r\n");
 8005920:	463b      	mov	r3, r7
 8005922:	4931      	ldr	r1, [pc, #196]	@ (80059e8 <SlaveController+0xd8>)
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f8cf 	bl	8005ac8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 800592a:	463b      	mov	r3, r7
 800592c:	4618      	mov	r0, r3
 800592e:	f7fa fc27 	bl	8000180 <strlen>
 8005932:	4603      	mov	r3, r0
 8005934:	b29a      	uxth	r2, r3
 8005936:	4639      	mov	r1, r7
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	482b      	ldr	r0, [pc, #172]	@ (80059ec <SlaveController+0xdc>)
 800593e:	f7fe ff74 	bl	800482a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8005942:	463b      	mov	r3, r7
 8005944:	4618      	mov	r0, r3
 8005946:	f7fa fc1b 	bl	8000180 <strlen>
 800594a:	4603      	mov	r3, r0
 800594c:	b29a      	uxth	r2, r3
 800594e:	4639      	mov	r1, r7
 8005950:	f04f 33ff 	mov.w	r3, #4294967295
 8005954:	4826      	ldr	r0, [pc, #152]	@ (80059f0 <SlaveController+0xe0>)
 8005956:	f7fe ff68 	bl	800482a <HAL_UART_Transmit>
		HAL_Delay(1000);
 800595a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800595e:	f7fc f985 	bl	8001c6c <HAL_Delay>
		//receiveMessage(RES.rxBuffer, 20 , RES.rxTimeout);
		if (strncmp(RES.rxBuffer, "READY", strlen("READY")) == 0);
 8005962:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005966:	2205      	movs	r2, #5
 8005968:	4922      	ldr	r1, [pc, #136]	@ (80059f4 <SlaveController+0xe4>)
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f8d4 	bl	8005b18 <strncmp>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d033      	beq.n	80059de <SlaveController+0xce>
		else if (strncmp(RES.rxBuffer, "GO", strlen("GO")) == 0) ChangeState(GO);
 8005976:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800597a:	2202      	movs	r2, #2
 800597c:	491e      	ldr	r1, [pc, #120]	@ (80059f8 <SlaveController+0xe8>)
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f8ca 	bl	8005b18 <strncmp>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <SlaveController+0x82>
 800598a:	2002      	movs	r0, #2
 800598c:	f7ff ff6a 	bl	8005864 <ChangeState>
 8005990:	e025      	b.n	80059de <SlaveController+0xce>
		else if (strncmp(RES.rxBuffer, "EMERGENCY", strlen("EMERGENCY")) == 0) ChangeState(EMERGENCY);
 8005992:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005996:	2209      	movs	r2, #9
 8005998:	4918      	ldr	r1, [pc, #96]	@ (80059fc <SlaveController+0xec>)
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f8bc 	bl	8005b18 <strncmp>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <SlaveController+0x9e>
 80059a6:	2003      	movs	r0, #3
 80059a8:	f7ff ff5c 	bl	8005864 <ChangeState>
 80059ac:	e017      	b.n	80059de <SlaveController+0xce>
		else if (strncmp(RES.rxBuffer, "CONNECTED", strlen("CONNECTED")) == 0){
 80059ae:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80059b2:	2209      	movs	r2, #9
 80059b4:	4912      	ldr	r1, [pc, #72]	@ (8005a00 <SlaveController+0xf0>)
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f8ae 	bl	8005b18 <strncmp>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <SlaveController+0xc0>
			connected = true;
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <SlaveController+0xf4>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 80059c8:	480f      	ldr	r0, [pc, #60]	@ (8005a08 <SlaveController+0xf8>)
 80059ca:	f7fe fc15 	bl	80041f8 <HAL_TIM_Base_Start_IT>
 80059ce:	e006      	b.n	80059de <SlaveController+0xce>
		}
		else if(elapse_time == 3){
 80059d0:	4b0e      	ldr	r3, [pc, #56]	@ (8005a0c <SlaveController+0xfc>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d102      	bne.n	80059de <SlaveController+0xce>
		    HAL_TIM_Base_Stop_IT(&htim1);
 80059d8:	480b      	ldr	r0, [pc, #44]	@ (8005a08 <SlaveController+0xf8>)
 80059da:	f7fe fc59 	bl	8004290 <HAL_TIM_Base_Stop_IT>
			//sprintf(uartBuff, "Emergency\r\n");
			//HAL_UART_Transmit(&huart1, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
		}
		RES.rxBuffer[0] = '\0';
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
		sprintf(uartBuff, "GO\r\n");
 80059e4:	e79c      	b.n	8005920 <SlaveController+0x10>
 80059e6:	bf00      	nop
 80059e8:	08006480 	.word	0x08006480
 80059ec:	200000d4 	.word	0x200000d4
 80059f0:	20000168 	.word	0x20000168
 80059f4:	08006494 	.word	0x08006494
 80059f8:	0800649c 	.word	0x0800649c
 80059fc:	080064a0 	.word	0x080064a0
 8005a00:	080064ac 	.word	0x080064ac
 8005a04:	2000021e 	.word	0x2000021e
 8005a08:	20000088 	.word	0x20000088
 8005a0c:	2000021f 	.word	0x2000021f

08005a10 <MasterController>:
	}
}

void MasterController (ConfigRES RES) {
 8005a10:	b084      	sub	sp, #16
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	f107 0c10 	add.w	ip, r7, #16
 8005a1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t count = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	71fb      	strb	r3, [r7, #7]
	while (LastState == car) {
 8005a24:	e002      	b.n	8005a2c <MasterController+0x1c>
		SendMessage("CONNECTED");
 8005a26:	4822      	ldr	r0, [pc, #136]	@ (8005ab0 <MasterController+0xa0>)
 8005a28:	f7ff fe5e 	bl	80056e8 <SendMessage>
	while (LastState == car) {
 8005a2c:	4b21      	ldr	r3, [pc, #132]	@ (8005ab4 <MasterController+0xa4>)
 8005a2e:	781a      	ldrb	r2, [r3, #0]
 8005a30:	4b21      	ldr	r3, [pc, #132]	@ (8005ab8 <MasterController+0xa8>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d0f6      	beq.n	8005a26 <MasterController+0x16>
	}
	if (car == READY) {
 8005a38:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab8 <MasterController+0xa8>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d10e      	bne.n	8005a5e <MasterController+0x4e>
		while (count <= 10){
 8005a40:	e005      	b.n	8005a4e <MasterController+0x3e>
			count++;
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	3301      	adds	r3, #1
 8005a46:	71fb      	strb	r3, [r7, #7]
			SendMessage("READY");
 8005a48:	481c      	ldr	r0, [pc, #112]	@ (8005abc <MasterController+0xac>)
 8005a4a:	f7ff fe4d 	bl	80056e8 <SendMessage>
		while (count <= 10){
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	2b0a      	cmp	r3, #10
 8005a52:	d9f6      	bls.n	8005a42 <MasterController+0x32>
		}
		HAL_Delay(2000);
 8005a54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005a58:	f7fc f908 	bl	8001c6c <HAL_Delay>
 8005a5c:	e01c      	b.n	8005a98 <MasterController+0x88>
	} else if (car == GO){
 8005a5e:	4b16      	ldr	r3, [pc, #88]	@ (8005ab8 <MasterController+0xa8>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d10a      	bne.n	8005a7c <MasterController+0x6c>
		while (count <= 10){
 8005a66:	e005      	b.n	8005a74 <MasterController+0x64>
			count++;
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	71fb      	strb	r3, [r7, #7]
			SendMessage("GO");
 8005a6e:	4814      	ldr	r0, [pc, #80]	@ (8005ac0 <MasterController+0xb0>)
 8005a70:	f7ff fe3a 	bl	80056e8 <SendMessage>
		while (count <= 10){
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	2b0a      	cmp	r3, #10
 8005a78:	d9f6      	bls.n	8005a68 <MasterController+0x58>
 8005a7a:	e00d      	b.n	8005a98 <MasterController+0x88>
		}
	} else if (car == EMERGENCY){
 8005a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab8 <MasterController+0xa8>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d109      	bne.n	8005a98 <MasterController+0x88>
		while (count <= 10){
 8005a84:	e005      	b.n	8005a92 <MasterController+0x82>
			count++;
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	71fb      	strb	r3, [r7, #7]
			SendMessage("EMERGENCY");
 8005a8c:	480d      	ldr	r0, [pc, #52]	@ (8005ac4 <MasterController+0xb4>)
 8005a8e:	f7ff fe2b 	bl	80056e8 <SendMessage>
		while (count <= 10){
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b0a      	cmp	r3, #10
 8005a96:	d9f6      	bls.n	8005a86 <MasterController+0x76>
		}
	}
	LastState = car;
 8005a98:	4b07      	ldr	r3, [pc, #28]	@ (8005ab8 <MasterController+0xa8>)
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <MasterController+0xa4>)
 8005a9e:	701a      	strb	r2, [r3, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aaa:	b004      	add	sp, #16
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	080064ac 	.word	0x080064ac
 8005ab4:	2000021d 	.word	0x2000021d
 8005ab8:	2000021c 	.word	0x2000021c
 8005abc:	08006494 	.word	0x08006494
 8005ac0:	0800649c 	.word	0x0800649c
 8005ac4:	080064a0 	.word	0x080064a0

08005ac8 <siprintf>:
 8005ac8:	b40e      	push	{r1, r2, r3}
 8005aca:	b500      	push	{lr}
 8005acc:	b09c      	sub	sp, #112	@ 0x70
 8005ace:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ad0:	9002      	str	r0, [sp, #8]
 8005ad2:	9006      	str	r0, [sp, #24]
 8005ad4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ad8:	4809      	ldr	r0, [pc, #36]	@ (8005b00 <siprintf+0x38>)
 8005ada:	9107      	str	r1, [sp, #28]
 8005adc:	9104      	str	r1, [sp, #16]
 8005ade:	4909      	ldr	r1, [pc, #36]	@ (8005b04 <siprintf+0x3c>)
 8005ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae4:	9105      	str	r1, [sp, #20]
 8005ae6:	6800      	ldr	r0, [r0, #0]
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	a902      	add	r1, sp, #8
 8005aec:	f000 f9b4 	bl	8005e58 <_svfiprintf_r>
 8005af0:	9b02      	ldr	r3, [sp, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	b01c      	add	sp, #112	@ 0x70
 8005af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005afc:	b003      	add	sp, #12
 8005afe:	4770      	bx	lr
 8005b00:	2000000c 	.word	0x2000000c
 8005b04:	ffff0208 	.word	0xffff0208

08005b08 <memset>:
 8005b08:	4402      	add	r2, r0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d100      	bne.n	8005b12 <memset+0xa>
 8005b10:	4770      	bx	lr
 8005b12:	f803 1b01 	strb.w	r1, [r3], #1
 8005b16:	e7f9      	b.n	8005b0c <memset+0x4>

08005b18 <strncmp>:
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	b16a      	cbz	r2, 8005b38 <strncmp+0x20>
 8005b1c:	3901      	subs	r1, #1
 8005b1e:	1884      	adds	r4, r0, r2
 8005b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d103      	bne.n	8005b34 <strncmp+0x1c>
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d001      	beq.n	8005b34 <strncmp+0x1c>
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d1f5      	bne.n	8005b20 <strncmp+0x8>
 8005b34:	1ad0      	subs	r0, r2, r3
 8005b36:	bd10      	pop	{r4, pc}
 8005b38:	4610      	mov	r0, r2
 8005b3a:	e7fc      	b.n	8005b36 <strncmp+0x1e>

08005b3c <__errno>:
 8005b3c:	4b01      	ldr	r3, [pc, #4]	@ (8005b44 <__errno+0x8>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	2000000c 	.word	0x2000000c

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	@ (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 fc66 	bl	800642c <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	080065c0 	.word	0x080065c0
 8005b84:	080065c0 	.word	0x080065c0
 8005b88:	080065c0 	.word	0x080065c0
 8005b8c:	080065c4 	.word	0x080065c4

08005b90 <__retarget_lock_acquire_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_release_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <memcpy>:
 8005b94:	440a      	add	r2, r1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b9c:	d100      	bne.n	8005ba0 <memcpy+0xc>
 8005b9e:	4770      	bx	lr
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005baa:	4291      	cmp	r1, r2
 8005bac:	d1f9      	bne.n	8005ba2 <memcpy+0xe>
 8005bae:	bd10      	pop	{r4, pc}

08005bb0 <_free_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d041      	beq.n	8005c3c <_free_r+0x8c>
 8005bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bbc:	1f0c      	subs	r4, r1, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfb8      	it	lt
 8005bc2:	18e4      	addlt	r4, r4, r3
 8005bc4:	f000 f8e0 	bl	8005d88 <__malloc_lock>
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c40 <_free_r+0x90>)
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	b933      	cbnz	r3, 8005bdc <_free_r+0x2c>
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	6014      	str	r4, [r2, #0]
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd8:	f000 b8dc 	b.w	8005d94 <__malloc_unlock>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d908      	bls.n	8005bf2 <_free_r+0x42>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	1821      	adds	r1, r4, r0
 8005be4:	428b      	cmp	r3, r1
 8005be6:	bf01      	itttt	eq
 8005be8:	6819      	ldreq	r1, [r3, #0]
 8005bea:	685b      	ldreq	r3, [r3, #4]
 8005bec:	1809      	addeq	r1, r1, r0
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	e7ed      	b.n	8005bce <_free_r+0x1e>
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b10b      	cbz	r3, 8005bfc <_free_r+0x4c>
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d9fa      	bls.n	8005bf2 <_free_r+0x42>
 8005bfc:	6811      	ldr	r1, [r2, #0]
 8005bfe:	1850      	adds	r0, r2, r1
 8005c00:	42a0      	cmp	r0, r4
 8005c02:	d10b      	bne.n	8005c1c <_free_r+0x6c>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	4401      	add	r1, r0
 8005c08:	1850      	adds	r0, r2, r1
 8005c0a:	4283      	cmp	r3, r0
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	d1e0      	bne.n	8005bd2 <_free_r+0x22>
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	4408      	add	r0, r1
 8005c18:	6010      	str	r0, [r2, #0]
 8005c1a:	e7da      	b.n	8005bd2 <_free_r+0x22>
 8005c1c:	d902      	bls.n	8005c24 <_free_r+0x74>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	602b      	str	r3, [r5, #0]
 8005c22:	e7d6      	b.n	8005bd2 <_free_r+0x22>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	1821      	adds	r1, r4, r0
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf04      	itt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	bf04      	itt	eq
 8005c34:	1809      	addeq	r1, r1, r0
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	6054      	str	r4, [r2, #4]
 8005c3a:	e7ca      	b.n	8005bd2 <_free_r+0x22>
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000364 	.word	0x20000364

08005c44 <sbrk_aligned>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4e0f      	ldr	r6, [pc, #60]	@ (8005c84 <sbrk_aligned+0x40>)
 8005c48:	460c      	mov	r4, r1
 8005c4a:	6831      	ldr	r1, [r6, #0]
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	b911      	cbnz	r1, 8005c56 <sbrk_aligned+0x12>
 8005c50:	f000 fba6 	bl	80063a0 <_sbrk_r>
 8005c54:	6030      	str	r0, [r6, #0]
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 fba1 	bl	80063a0 <_sbrk_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d103      	bne.n	8005c6a <sbrk_aligned+0x26>
 8005c62:	f04f 34ff 	mov.w	r4, #4294967295
 8005c66:	4620      	mov	r0, r4
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	1cc4      	adds	r4, r0, #3
 8005c6c:	f024 0403 	bic.w	r4, r4, #3
 8005c70:	42a0      	cmp	r0, r4
 8005c72:	d0f8      	beq.n	8005c66 <sbrk_aligned+0x22>
 8005c74:	1a21      	subs	r1, r4, r0
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 fb92 	bl	80063a0 <_sbrk_r>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d1f2      	bne.n	8005c66 <sbrk_aligned+0x22>
 8005c80:	e7ef      	b.n	8005c62 <sbrk_aligned+0x1e>
 8005c82:	bf00      	nop
 8005c84:	20000360 	.word	0x20000360

08005c88 <_malloc_r>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	1ccd      	adds	r5, r1, #3
 8005c8e:	f025 0503 	bic.w	r5, r5, #3
 8005c92:	3508      	adds	r5, #8
 8005c94:	2d0c      	cmp	r5, #12
 8005c96:	bf38      	it	cc
 8005c98:	250c      	movcc	r5, #12
 8005c9a:	2d00      	cmp	r5, #0
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	db01      	blt.n	8005ca4 <_malloc_r+0x1c>
 8005ca0:	42a9      	cmp	r1, r5
 8005ca2:	d904      	bls.n	8005cae <_malloc_r+0x26>
 8005ca4:	230c      	movs	r3, #12
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d84 <_malloc_r+0xfc>
 8005cb2:	f000 f869 	bl	8005d88 <__malloc_lock>
 8005cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cba:	461c      	mov	r4, r3
 8005cbc:	bb44      	cbnz	r4, 8005d10 <_malloc_r+0x88>
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff ffbf 	bl	8005c44 <sbrk_aligned>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	4604      	mov	r4, r0
 8005cca:	d158      	bne.n	8005d7e <_malloc_r+0xf6>
 8005ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8005cd0:	4627      	mov	r7, r4
 8005cd2:	2f00      	cmp	r7, #0
 8005cd4:	d143      	bne.n	8005d5e <_malloc_r+0xd6>
 8005cd6:	2c00      	cmp	r4, #0
 8005cd8:	d04b      	beq.n	8005d72 <_malloc_r+0xea>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	4639      	mov	r1, r7
 8005cde:	4630      	mov	r0, r6
 8005ce0:	eb04 0903 	add.w	r9, r4, r3
 8005ce4:	f000 fb5c 	bl	80063a0 <_sbrk_r>
 8005ce8:	4581      	cmp	r9, r0
 8005cea:	d142      	bne.n	8005d72 <_malloc_r+0xea>
 8005cec:	6821      	ldr	r1, [r4, #0]
 8005cee:	1a6d      	subs	r5, r5, r1
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff ffa6 	bl	8005c44 <sbrk_aligned>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d03a      	beq.n	8005d72 <_malloc_r+0xea>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	442b      	add	r3, r5
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	f8d8 3000 	ldr.w	r3, [r8]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	bb62      	cbnz	r2, 8005d64 <_malloc_r+0xdc>
 8005d0a:	f8c8 7000 	str.w	r7, [r8]
 8005d0e:	e00f      	b.n	8005d30 <_malloc_r+0xa8>
 8005d10:	6822      	ldr	r2, [r4, #0]
 8005d12:	1b52      	subs	r2, r2, r5
 8005d14:	d420      	bmi.n	8005d58 <_malloc_r+0xd0>
 8005d16:	2a0b      	cmp	r2, #11
 8005d18:	d917      	bls.n	8005d4a <_malloc_r+0xc2>
 8005d1a:	1961      	adds	r1, r4, r5
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	6025      	str	r5, [r4, #0]
 8005d20:	bf18      	it	ne
 8005d22:	6059      	strne	r1, [r3, #4]
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	bf08      	it	eq
 8005d28:	f8c8 1000 	streq.w	r1, [r8]
 8005d2c:	5162      	str	r2, [r4, r5]
 8005d2e:	604b      	str	r3, [r1, #4]
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 f82f 	bl	8005d94 <__malloc_unlock>
 8005d36:	f104 000b 	add.w	r0, r4, #11
 8005d3a:	1d23      	adds	r3, r4, #4
 8005d3c:	f020 0007 	bic.w	r0, r0, #7
 8005d40:	1ac2      	subs	r2, r0, r3
 8005d42:	bf1c      	itt	ne
 8005d44:	1a1b      	subne	r3, r3, r0
 8005d46:	50a3      	strne	r3, [r4, r2]
 8005d48:	e7af      	b.n	8005caa <_malloc_r+0x22>
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	bf0c      	ite	eq
 8005d50:	f8c8 2000 	streq.w	r2, [r8]
 8005d54:	605a      	strne	r2, [r3, #4]
 8005d56:	e7eb      	b.n	8005d30 <_malloc_r+0xa8>
 8005d58:	4623      	mov	r3, r4
 8005d5a:	6864      	ldr	r4, [r4, #4]
 8005d5c:	e7ae      	b.n	8005cbc <_malloc_r+0x34>
 8005d5e:	463c      	mov	r4, r7
 8005d60:	687f      	ldr	r7, [r7, #4]
 8005d62:	e7b6      	b.n	8005cd2 <_malloc_r+0x4a>
 8005d64:	461a      	mov	r2, r3
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	d1fb      	bne.n	8005d64 <_malloc_r+0xdc>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6053      	str	r3, [r2, #4]
 8005d70:	e7de      	b.n	8005d30 <_malloc_r+0xa8>
 8005d72:	230c      	movs	r3, #12
 8005d74:	6033      	str	r3, [r6, #0]
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f80c 	bl	8005d94 <__malloc_unlock>
 8005d7c:	e794      	b.n	8005ca8 <_malloc_r+0x20>
 8005d7e:	6005      	str	r5, [r0, #0]
 8005d80:	e7d6      	b.n	8005d30 <_malloc_r+0xa8>
 8005d82:	bf00      	nop
 8005d84:	20000364 	.word	0x20000364

08005d88 <__malloc_lock>:
 8005d88:	4801      	ldr	r0, [pc, #4]	@ (8005d90 <__malloc_lock+0x8>)
 8005d8a:	f7ff bf01 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 8005d8e:	bf00      	nop
 8005d90:	2000035c 	.word	0x2000035c

08005d94 <__malloc_unlock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	@ (8005d9c <__malloc_unlock+0x8>)
 8005d96:	f7ff befc 	b.w	8005b92 <__retarget_lock_release_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	2000035c 	.word	0x2000035c

08005da0 <__ssputs_r>:
 8005da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da4:	688e      	ldr	r6, [r1, #8]
 8005da6:	461f      	mov	r7, r3
 8005da8:	42be      	cmp	r6, r7
 8005daa:	680b      	ldr	r3, [r1, #0]
 8005dac:	4682      	mov	sl, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	4690      	mov	r8, r2
 8005db2:	d82d      	bhi.n	8005e10 <__ssputs_r+0x70>
 8005db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005dbc:	d026      	beq.n	8005e0c <__ssputs_r+0x6c>
 8005dbe:	6965      	ldr	r5, [r4, #20]
 8005dc0:	6909      	ldr	r1, [r1, #16]
 8005dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dc6:	eba3 0901 	sub.w	r9, r3, r1
 8005dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dce:	1c7b      	adds	r3, r7, #1
 8005dd0:	444b      	add	r3, r9
 8005dd2:	106d      	asrs	r5, r5, #1
 8005dd4:	429d      	cmp	r5, r3
 8005dd6:	bf38      	it	cc
 8005dd8:	461d      	movcc	r5, r3
 8005dda:	0553      	lsls	r3, r2, #21
 8005ddc:	d527      	bpl.n	8005e2e <__ssputs_r+0x8e>
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7ff ff52 	bl	8005c88 <_malloc_r>
 8005de4:	4606      	mov	r6, r0
 8005de6:	b360      	cbz	r0, 8005e42 <__ssputs_r+0xa2>
 8005de8:	6921      	ldr	r1, [r4, #16]
 8005dea:	464a      	mov	r2, r9
 8005dec:	f7ff fed2 	bl	8005b94 <memcpy>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	6126      	str	r6, [r4, #16]
 8005dfe:	6165      	str	r5, [r4, #20]
 8005e00:	444e      	add	r6, r9
 8005e02:	eba5 0509 	sub.w	r5, r5, r9
 8005e06:	6026      	str	r6, [r4, #0]
 8005e08:	60a5      	str	r5, [r4, #8]
 8005e0a:	463e      	mov	r6, r7
 8005e0c:	42be      	cmp	r6, r7
 8005e0e:	d900      	bls.n	8005e12 <__ssputs_r+0x72>
 8005e10:	463e      	mov	r6, r7
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	4632      	mov	r2, r6
 8005e16:	4641      	mov	r1, r8
 8005e18:	f000 faa8 	bl	800636c <memmove>
 8005e1c:	68a3      	ldr	r3, [r4, #8]
 8005e1e:	1b9b      	subs	r3, r3, r6
 8005e20:	60a3      	str	r3, [r4, #8]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	4433      	add	r3, r6
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	462a      	mov	r2, r5
 8005e30:	f000 fac6 	bl	80063c0 <_realloc_r>
 8005e34:	4606      	mov	r6, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d1e0      	bne.n	8005dfc <__ssputs_r+0x5c>
 8005e3a:	6921      	ldr	r1, [r4, #16]
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	f7ff feb7 	bl	8005bb0 <_free_r>
 8005e42:	230c      	movs	r3, #12
 8005e44:	f8ca 3000 	str.w	r3, [sl]
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	e7e9      	b.n	8005e2a <__ssputs_r+0x8a>
	...

08005e58 <_svfiprintf_r>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	4698      	mov	r8, r3
 8005e5e:	898b      	ldrh	r3, [r1, #12]
 8005e60:	061b      	lsls	r3, r3, #24
 8005e62:	b09d      	sub	sp, #116	@ 0x74
 8005e64:	4607      	mov	r7, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	d510      	bpl.n	8005e8e <_svfiprintf_r+0x36>
 8005e6c:	690b      	ldr	r3, [r1, #16]
 8005e6e:	b973      	cbnz	r3, 8005e8e <_svfiprintf_r+0x36>
 8005e70:	2140      	movs	r1, #64	@ 0x40
 8005e72:	f7ff ff09 	bl	8005c88 <_malloc_r>
 8005e76:	6028      	str	r0, [r5, #0]
 8005e78:	6128      	str	r0, [r5, #16]
 8005e7a:	b930      	cbnz	r0, 8005e8a <_svfiprintf_r+0x32>
 8005e7c:	230c      	movs	r3, #12
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b01d      	add	sp, #116	@ 0x74
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8a:	2340      	movs	r3, #64	@ 0x40
 8005e8c:	616b      	str	r3, [r5, #20]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e92:	2320      	movs	r3, #32
 8005e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e9c:	2330      	movs	r3, #48	@ 0x30
 8005e9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800603c <_svfiprintf_r+0x1e4>
 8005ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ea6:	f04f 0901 	mov.w	r9, #1
 8005eaa:	4623      	mov	r3, r4
 8005eac:	469a      	mov	sl, r3
 8005eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb2:	b10a      	cbz	r2, 8005eb8 <_svfiprintf_r+0x60>
 8005eb4:	2a25      	cmp	r2, #37	@ 0x25
 8005eb6:	d1f9      	bne.n	8005eac <_svfiprintf_r+0x54>
 8005eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8005ebc:	d00b      	beq.n	8005ed6 <_svfiprintf_r+0x7e>
 8005ebe:	465b      	mov	r3, fp
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff ff6b 	bl	8005da0 <__ssputs_r>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f000 80a7 	beq.w	800601e <_svfiprintf_r+0x1c6>
 8005ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed2:	445a      	add	r2, fp
 8005ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 809f 	beq.w	800601e <_svfiprintf_r+0x1c6>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eea:	f10a 0a01 	add.w	sl, sl, #1
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	9307      	str	r3, [sp, #28]
 8005ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ef8:	4654      	mov	r4, sl
 8005efa:	2205      	movs	r2, #5
 8005efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f00:	484e      	ldr	r0, [pc, #312]	@ (800603c <_svfiprintf_r+0x1e4>)
 8005f02:	f7fa f945 	bl	8000190 <memchr>
 8005f06:	9a04      	ldr	r2, [sp, #16]
 8005f08:	b9d8      	cbnz	r0, 8005f42 <_svfiprintf_r+0xea>
 8005f0a:	06d0      	lsls	r0, r2, #27
 8005f0c:	bf44      	itt	mi
 8005f0e:	2320      	movmi	r3, #32
 8005f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f14:	0711      	lsls	r1, r2, #28
 8005f16:	bf44      	itt	mi
 8005f18:	232b      	movmi	r3, #43	@ 0x2b
 8005f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f24:	d015      	beq.n	8005f52 <_svfiprintf_r+0xfa>
 8005f26:	9a07      	ldr	r2, [sp, #28]
 8005f28:	4654      	mov	r4, sl
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f04f 0c0a 	mov.w	ip, #10
 8005f30:	4621      	mov	r1, r4
 8005f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f36:	3b30      	subs	r3, #48	@ 0x30
 8005f38:	2b09      	cmp	r3, #9
 8005f3a:	d94b      	bls.n	8005fd4 <_svfiprintf_r+0x17c>
 8005f3c:	b1b0      	cbz	r0, 8005f6c <_svfiprintf_r+0x114>
 8005f3e:	9207      	str	r2, [sp, #28]
 8005f40:	e014      	b.n	8005f6c <_svfiprintf_r+0x114>
 8005f42:	eba0 0308 	sub.w	r3, r0, r8
 8005f46:	fa09 f303 	lsl.w	r3, r9, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	46a2      	mov	sl, r4
 8005f50:	e7d2      	b.n	8005ef8 <_svfiprintf_r+0xa0>
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	1d19      	adds	r1, r3, #4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	9103      	str	r1, [sp, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bfbb      	ittet	lt
 8005f5e:	425b      	neglt	r3, r3
 8005f60:	f042 0202 	orrlt.w	r2, r2, #2
 8005f64:	9307      	strge	r3, [sp, #28]
 8005f66:	9307      	strlt	r3, [sp, #28]
 8005f68:	bfb8      	it	lt
 8005f6a:	9204      	strlt	r2, [sp, #16]
 8005f6c:	7823      	ldrb	r3, [r4, #0]
 8005f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f70:	d10a      	bne.n	8005f88 <_svfiprintf_r+0x130>
 8005f72:	7863      	ldrb	r3, [r4, #1]
 8005f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f76:	d132      	bne.n	8005fde <_svfiprintf_r+0x186>
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	9203      	str	r2, [sp, #12]
 8005f80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f84:	3402      	adds	r4, #2
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006040 <_svfiprintf_r+0x1e8>
 8005f8c:	7821      	ldrb	r1, [r4, #0]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	4650      	mov	r0, sl
 8005f92:	f7fa f8fd 	bl	8000190 <memchr>
 8005f96:	b138      	cbz	r0, 8005fa8 <_svfiprintf_r+0x150>
 8005f98:	9b04      	ldr	r3, [sp, #16]
 8005f9a:	eba0 000a 	sub.w	r0, r0, sl
 8005f9e:	2240      	movs	r2, #64	@ 0x40
 8005fa0:	4082      	lsls	r2, r0
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	3401      	adds	r4, #1
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fac:	4825      	ldr	r0, [pc, #148]	@ (8006044 <_svfiprintf_r+0x1ec>)
 8005fae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fb2:	2206      	movs	r2, #6
 8005fb4:	f7fa f8ec 	bl	8000190 <memchr>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d036      	beq.n	800602a <_svfiprintf_r+0x1d2>
 8005fbc:	4b22      	ldr	r3, [pc, #136]	@ (8006048 <_svfiprintf_r+0x1f0>)
 8005fbe:	bb1b      	cbnz	r3, 8006008 <_svfiprintf_r+0x1b0>
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	3307      	adds	r3, #7
 8005fc4:	f023 0307 	bic.w	r3, r3, #7
 8005fc8:	3308      	adds	r3, #8
 8005fca:	9303      	str	r3, [sp, #12]
 8005fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fce:	4433      	add	r3, r6
 8005fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd2:	e76a      	b.n	8005eaa <_svfiprintf_r+0x52>
 8005fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fd8:	460c      	mov	r4, r1
 8005fda:	2001      	movs	r0, #1
 8005fdc:	e7a8      	b.n	8005f30 <_svfiprintf_r+0xd8>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	3401      	adds	r4, #1
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f04f 0c0a 	mov.w	ip, #10
 8005fea:	4620      	mov	r0, r4
 8005fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff0:	3a30      	subs	r2, #48	@ 0x30
 8005ff2:	2a09      	cmp	r2, #9
 8005ff4:	d903      	bls.n	8005ffe <_svfiprintf_r+0x1a6>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0c6      	beq.n	8005f88 <_svfiprintf_r+0x130>
 8005ffa:	9105      	str	r1, [sp, #20]
 8005ffc:	e7c4      	b.n	8005f88 <_svfiprintf_r+0x130>
 8005ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006002:	4604      	mov	r4, r0
 8006004:	2301      	movs	r3, #1
 8006006:	e7f0      	b.n	8005fea <_svfiprintf_r+0x192>
 8006008:	ab03      	add	r3, sp, #12
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	462a      	mov	r2, r5
 800600e:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <_svfiprintf_r+0x1f4>)
 8006010:	a904      	add	r1, sp, #16
 8006012:	4638      	mov	r0, r7
 8006014:	f3af 8000 	nop.w
 8006018:	1c42      	adds	r2, r0, #1
 800601a:	4606      	mov	r6, r0
 800601c:	d1d6      	bne.n	8005fcc <_svfiprintf_r+0x174>
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	065b      	lsls	r3, r3, #25
 8006022:	f53f af2d 	bmi.w	8005e80 <_svfiprintf_r+0x28>
 8006026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006028:	e72c      	b.n	8005e84 <_svfiprintf_r+0x2c>
 800602a:	ab03      	add	r3, sp, #12
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	462a      	mov	r2, r5
 8006030:	4b06      	ldr	r3, [pc, #24]	@ (800604c <_svfiprintf_r+0x1f4>)
 8006032:	a904      	add	r1, sp, #16
 8006034:	4638      	mov	r0, r7
 8006036:	f000 f879 	bl	800612c <_printf_i>
 800603a:	e7ed      	b.n	8006018 <_svfiprintf_r+0x1c0>
 800603c:	08006583 	.word	0x08006583
 8006040:	08006589 	.word	0x08006589
 8006044:	0800658d 	.word	0x0800658d
 8006048:	00000000 	.word	0x00000000
 800604c:	08005da1 	.word	0x08005da1

08006050 <_printf_common>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	4616      	mov	r6, r2
 8006056:	4698      	mov	r8, r3
 8006058:	688a      	ldr	r2, [r1, #8]
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006060:	4293      	cmp	r3, r2
 8006062:	bfb8      	it	lt
 8006064:	4613      	movlt	r3, r2
 8006066:	6033      	str	r3, [r6, #0]
 8006068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800606c:	4607      	mov	r7, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b10a      	cbz	r2, 8006076 <_printf_common+0x26>
 8006072:	3301      	adds	r3, #1
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	0699      	lsls	r1, r3, #26
 800607a:	bf42      	ittt	mi
 800607c:	6833      	ldrmi	r3, [r6, #0]
 800607e:	3302      	addmi	r3, #2
 8006080:	6033      	strmi	r3, [r6, #0]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d106      	bne.n	8006098 <_printf_common+0x48>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	6832      	ldr	r2, [r6, #0]
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	42ab      	cmp	r3, r5
 8006096:	dc26      	bgt.n	80060e6 <_printf_common+0x96>
 8006098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	3b00      	subs	r3, #0
 80060a0:	bf18      	it	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	0692      	lsls	r2, r2, #26
 80060a6:	d42b      	bmi.n	8006100 <_printf_common+0xb0>
 80060a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060ac:	4641      	mov	r1, r8
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c8      	blx	r9
 80060b2:	3001      	adds	r0, #1
 80060b4:	d01e      	beq.n	80060f4 <_printf_common+0xa4>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	6922      	ldr	r2, [r4, #16]
 80060ba:	f003 0306 	and.w	r3, r3, #6
 80060be:	2b04      	cmp	r3, #4
 80060c0:	bf02      	ittt	eq
 80060c2:	68e5      	ldreq	r5, [r4, #12]
 80060c4:	6833      	ldreq	r3, [r6, #0]
 80060c6:	1aed      	subeq	r5, r5, r3
 80060c8:	68a3      	ldr	r3, [r4, #8]
 80060ca:	bf0c      	ite	eq
 80060cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d0:	2500      	movne	r5, #0
 80060d2:	4293      	cmp	r3, r2
 80060d4:	bfc4      	itt	gt
 80060d6:	1a9b      	subgt	r3, r3, r2
 80060d8:	18ed      	addgt	r5, r5, r3
 80060da:	2600      	movs	r6, #0
 80060dc:	341a      	adds	r4, #26
 80060de:	42b5      	cmp	r5, r6
 80060e0:	d11a      	bne.n	8006118 <_printf_common+0xc8>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e008      	b.n	80060f8 <_printf_common+0xa8>
 80060e6:	2301      	movs	r3, #1
 80060e8:	4652      	mov	r2, sl
 80060ea:	4641      	mov	r1, r8
 80060ec:	4638      	mov	r0, r7
 80060ee:	47c8      	blx	r9
 80060f0:	3001      	adds	r0, #1
 80060f2:	d103      	bne.n	80060fc <_printf_common+0xac>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	3501      	adds	r5, #1
 80060fe:	e7c6      	b.n	800608e <_printf_common+0x3e>
 8006100:	18e1      	adds	r1, r4, r3
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	2030      	movs	r0, #48	@ 0x30
 8006106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800610a:	4422      	add	r2, r4
 800610c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006114:	3302      	adds	r3, #2
 8006116:	e7c7      	b.n	80060a8 <_printf_common+0x58>
 8006118:	2301      	movs	r3, #1
 800611a:	4622      	mov	r2, r4
 800611c:	4641      	mov	r1, r8
 800611e:	4638      	mov	r0, r7
 8006120:	47c8      	blx	r9
 8006122:	3001      	adds	r0, #1
 8006124:	d0e6      	beq.n	80060f4 <_printf_common+0xa4>
 8006126:	3601      	adds	r6, #1
 8006128:	e7d9      	b.n	80060de <_printf_common+0x8e>
	...

0800612c <_printf_i>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	7e0f      	ldrb	r7, [r1, #24]
 8006132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006134:	2f78      	cmp	r7, #120	@ 0x78
 8006136:	4691      	mov	r9, r2
 8006138:	4680      	mov	r8, r0
 800613a:	460c      	mov	r4, r1
 800613c:	469a      	mov	sl, r3
 800613e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006142:	d807      	bhi.n	8006154 <_printf_i+0x28>
 8006144:	2f62      	cmp	r7, #98	@ 0x62
 8006146:	d80a      	bhi.n	800615e <_printf_i+0x32>
 8006148:	2f00      	cmp	r7, #0
 800614a:	f000 80d2 	beq.w	80062f2 <_printf_i+0x1c6>
 800614e:	2f58      	cmp	r7, #88	@ 0x58
 8006150:	f000 80b9 	beq.w	80062c6 <_printf_i+0x19a>
 8006154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800615c:	e03a      	b.n	80061d4 <_printf_i+0xa8>
 800615e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006162:	2b15      	cmp	r3, #21
 8006164:	d8f6      	bhi.n	8006154 <_printf_i+0x28>
 8006166:	a101      	add	r1, pc, #4	@ (adr r1, 800616c <_printf_i+0x40>)
 8006168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061d9 	.word	0x080061d9
 8006174:	08006155 	.word	0x08006155
 8006178:	08006155 	.word	0x08006155
 800617c:	08006155 	.word	0x08006155
 8006180:	08006155 	.word	0x08006155
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006155 	.word	0x08006155
 800618c:	08006155 	.word	0x08006155
 8006190:	08006155 	.word	0x08006155
 8006194:	08006155 	.word	0x08006155
 8006198:	080062d9 	.word	0x080062d9
 800619c:	08006203 	.word	0x08006203
 80061a0:	08006293 	.word	0x08006293
 80061a4:	08006155 	.word	0x08006155
 80061a8:	08006155 	.word	0x08006155
 80061ac:	080062fb 	.word	0x080062fb
 80061b0:	08006155 	.word	0x08006155
 80061b4:	08006203 	.word	0x08006203
 80061b8:	08006155 	.word	0x08006155
 80061bc:	08006155 	.word	0x08006155
 80061c0:	0800629b 	.word	0x0800629b
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6032      	str	r2, [r6, #0]
 80061cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e09d      	b.n	8006314 <_printf_i+0x1e8>
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	6031      	str	r1, [r6, #0]
 80061e0:	0606      	lsls	r6, r0, #24
 80061e2:	d501      	bpl.n	80061e8 <_printf_i+0xbc>
 80061e4:	681d      	ldr	r5, [r3, #0]
 80061e6:	e003      	b.n	80061f0 <_printf_i+0xc4>
 80061e8:	0645      	lsls	r5, r0, #25
 80061ea:	d5fb      	bpl.n	80061e4 <_printf_i+0xb8>
 80061ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	da03      	bge.n	80061fc <_printf_i+0xd0>
 80061f4:	232d      	movs	r3, #45	@ 0x2d
 80061f6:	426d      	negs	r5, r5
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061fc:	4859      	ldr	r0, [pc, #356]	@ (8006364 <_printf_i+0x238>)
 80061fe:	230a      	movs	r3, #10
 8006200:	e011      	b.n	8006226 <_printf_i+0xfa>
 8006202:	6821      	ldr	r1, [r4, #0]
 8006204:	6833      	ldr	r3, [r6, #0]
 8006206:	0608      	lsls	r0, r1, #24
 8006208:	f853 5b04 	ldr.w	r5, [r3], #4
 800620c:	d402      	bmi.n	8006214 <_printf_i+0xe8>
 800620e:	0649      	lsls	r1, r1, #25
 8006210:	bf48      	it	mi
 8006212:	b2ad      	uxthmi	r5, r5
 8006214:	2f6f      	cmp	r7, #111	@ 0x6f
 8006216:	4853      	ldr	r0, [pc, #332]	@ (8006364 <_printf_i+0x238>)
 8006218:	6033      	str	r3, [r6, #0]
 800621a:	bf14      	ite	ne
 800621c:	230a      	movne	r3, #10
 800621e:	2308      	moveq	r3, #8
 8006220:	2100      	movs	r1, #0
 8006222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006226:	6866      	ldr	r6, [r4, #4]
 8006228:	60a6      	str	r6, [r4, #8]
 800622a:	2e00      	cmp	r6, #0
 800622c:	bfa2      	ittt	ge
 800622e:	6821      	ldrge	r1, [r4, #0]
 8006230:	f021 0104 	bicge.w	r1, r1, #4
 8006234:	6021      	strge	r1, [r4, #0]
 8006236:	b90d      	cbnz	r5, 800623c <_printf_i+0x110>
 8006238:	2e00      	cmp	r6, #0
 800623a:	d04b      	beq.n	80062d4 <_printf_i+0x1a8>
 800623c:	4616      	mov	r6, r2
 800623e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006242:	fb03 5711 	mls	r7, r3, r1, r5
 8006246:	5dc7      	ldrb	r7, [r0, r7]
 8006248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800624c:	462f      	mov	r7, r5
 800624e:	42bb      	cmp	r3, r7
 8006250:	460d      	mov	r5, r1
 8006252:	d9f4      	bls.n	800623e <_printf_i+0x112>
 8006254:	2b08      	cmp	r3, #8
 8006256:	d10b      	bne.n	8006270 <_printf_i+0x144>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	07df      	lsls	r7, r3, #31
 800625c:	d508      	bpl.n	8006270 <_printf_i+0x144>
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	4299      	cmp	r1, r3
 8006264:	bfde      	ittt	le
 8006266:	2330      	movle	r3, #48	@ 0x30
 8006268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800626c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006270:	1b92      	subs	r2, r2, r6
 8006272:	6122      	str	r2, [r4, #16]
 8006274:	f8cd a000 	str.w	sl, [sp]
 8006278:	464b      	mov	r3, r9
 800627a:	aa03      	add	r2, sp, #12
 800627c:	4621      	mov	r1, r4
 800627e:	4640      	mov	r0, r8
 8006280:	f7ff fee6 	bl	8006050 <_printf_common>
 8006284:	3001      	adds	r0, #1
 8006286:	d14a      	bne.n	800631e <_printf_i+0x1f2>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	b004      	add	sp, #16
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f043 0320 	orr.w	r3, r3, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	4833      	ldr	r0, [pc, #204]	@ (8006368 <_printf_i+0x23c>)
 800629c:	2778      	movs	r7, #120	@ 0x78
 800629e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	6831      	ldr	r1, [r6, #0]
 80062a6:	061f      	lsls	r7, r3, #24
 80062a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80062ac:	d402      	bmi.n	80062b4 <_printf_i+0x188>
 80062ae:	065f      	lsls	r7, r3, #25
 80062b0:	bf48      	it	mi
 80062b2:	b2ad      	uxthmi	r5, r5
 80062b4:	6031      	str	r1, [r6, #0]
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	bf44      	itt	mi
 80062ba:	f043 0320 	orrmi.w	r3, r3, #32
 80062be:	6023      	strmi	r3, [r4, #0]
 80062c0:	b11d      	cbz	r5, 80062ca <_printf_i+0x19e>
 80062c2:	2310      	movs	r3, #16
 80062c4:	e7ac      	b.n	8006220 <_printf_i+0xf4>
 80062c6:	4827      	ldr	r0, [pc, #156]	@ (8006364 <_printf_i+0x238>)
 80062c8:	e7e9      	b.n	800629e <_printf_i+0x172>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f023 0320 	bic.w	r3, r3, #32
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	e7f6      	b.n	80062c2 <_printf_i+0x196>
 80062d4:	4616      	mov	r6, r2
 80062d6:	e7bd      	b.n	8006254 <_printf_i+0x128>
 80062d8:	6833      	ldr	r3, [r6, #0]
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	6961      	ldr	r1, [r4, #20]
 80062de:	1d18      	adds	r0, r3, #4
 80062e0:	6030      	str	r0, [r6, #0]
 80062e2:	062e      	lsls	r6, r5, #24
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	d501      	bpl.n	80062ec <_printf_i+0x1c0>
 80062e8:	6019      	str	r1, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <_printf_i+0x1c6>
 80062ec:	0668      	lsls	r0, r5, #25
 80062ee:	d5fb      	bpl.n	80062e8 <_printf_i+0x1bc>
 80062f0:	8019      	strh	r1, [r3, #0]
 80062f2:	2300      	movs	r3, #0
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	4616      	mov	r6, r2
 80062f8:	e7bc      	b.n	8006274 <_printf_i+0x148>
 80062fa:	6833      	ldr	r3, [r6, #0]
 80062fc:	1d1a      	adds	r2, r3, #4
 80062fe:	6032      	str	r2, [r6, #0]
 8006300:	681e      	ldr	r6, [r3, #0]
 8006302:	6862      	ldr	r2, [r4, #4]
 8006304:	2100      	movs	r1, #0
 8006306:	4630      	mov	r0, r6
 8006308:	f7f9 ff42 	bl	8000190 <memchr>
 800630c:	b108      	cbz	r0, 8006312 <_printf_i+0x1e6>
 800630e:	1b80      	subs	r0, r0, r6
 8006310:	6060      	str	r0, [r4, #4]
 8006312:	6863      	ldr	r3, [r4, #4]
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	2300      	movs	r3, #0
 8006318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631c:	e7aa      	b.n	8006274 <_printf_i+0x148>
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d0ad      	beq.n	8006288 <_printf_i+0x15c>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	079b      	lsls	r3, r3, #30
 8006330:	d413      	bmi.n	800635a <_printf_i+0x22e>
 8006332:	68e0      	ldr	r0, [r4, #12]
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	4298      	cmp	r0, r3
 8006338:	bfb8      	it	lt
 800633a:	4618      	movlt	r0, r3
 800633c:	e7a6      	b.n	800628c <_printf_i+0x160>
 800633e:	2301      	movs	r3, #1
 8006340:	4632      	mov	r2, r6
 8006342:	4649      	mov	r1, r9
 8006344:	4640      	mov	r0, r8
 8006346:	47d0      	blx	sl
 8006348:	3001      	adds	r0, #1
 800634a:	d09d      	beq.n	8006288 <_printf_i+0x15c>
 800634c:	3501      	adds	r5, #1
 800634e:	68e3      	ldr	r3, [r4, #12]
 8006350:	9903      	ldr	r1, [sp, #12]
 8006352:	1a5b      	subs	r3, r3, r1
 8006354:	42ab      	cmp	r3, r5
 8006356:	dcf2      	bgt.n	800633e <_printf_i+0x212>
 8006358:	e7eb      	b.n	8006332 <_printf_i+0x206>
 800635a:	2500      	movs	r5, #0
 800635c:	f104 0619 	add.w	r6, r4, #25
 8006360:	e7f5      	b.n	800634e <_printf_i+0x222>
 8006362:	bf00      	nop
 8006364:	08006594 	.word	0x08006594
 8006368:	080065a5 	.word	0x080065a5

0800636c <memmove>:
 800636c:	4288      	cmp	r0, r1
 800636e:	b510      	push	{r4, lr}
 8006370:	eb01 0402 	add.w	r4, r1, r2
 8006374:	d902      	bls.n	800637c <memmove+0x10>
 8006376:	4284      	cmp	r4, r0
 8006378:	4623      	mov	r3, r4
 800637a:	d807      	bhi.n	800638c <memmove+0x20>
 800637c:	1e43      	subs	r3, r0, #1
 800637e:	42a1      	cmp	r1, r4
 8006380:	d008      	beq.n	8006394 <memmove+0x28>
 8006382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800638a:	e7f8      	b.n	800637e <memmove+0x12>
 800638c:	4402      	add	r2, r0
 800638e:	4601      	mov	r1, r0
 8006390:	428a      	cmp	r2, r1
 8006392:	d100      	bne.n	8006396 <memmove+0x2a>
 8006394:	bd10      	pop	{r4, pc}
 8006396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800639a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800639e:	e7f7      	b.n	8006390 <memmove+0x24>

080063a0 <_sbrk_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	@ (80063bc <_sbrk_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fa f9f0 	bl	8000790 <_sbrk>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_sbrk_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_sbrk_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20000358 	.word	0x20000358

080063c0 <_realloc_r>:
 80063c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	4680      	mov	r8, r0
 80063c6:	4615      	mov	r5, r2
 80063c8:	460c      	mov	r4, r1
 80063ca:	b921      	cbnz	r1, 80063d6 <_realloc_r+0x16>
 80063cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	4611      	mov	r1, r2
 80063d2:	f7ff bc59 	b.w	8005c88 <_malloc_r>
 80063d6:	b92a      	cbnz	r2, 80063e4 <_realloc_r+0x24>
 80063d8:	f7ff fbea 	bl	8005bb0 <_free_r>
 80063dc:	2400      	movs	r4, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e4:	f000 f81a 	bl	800641c <_malloc_usable_size_r>
 80063e8:	4285      	cmp	r5, r0
 80063ea:	4606      	mov	r6, r0
 80063ec:	d802      	bhi.n	80063f4 <_realloc_r+0x34>
 80063ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063f2:	d8f4      	bhi.n	80063de <_realloc_r+0x1e>
 80063f4:	4629      	mov	r1, r5
 80063f6:	4640      	mov	r0, r8
 80063f8:	f7ff fc46 	bl	8005c88 <_malloc_r>
 80063fc:	4607      	mov	r7, r0
 80063fe:	2800      	cmp	r0, #0
 8006400:	d0ec      	beq.n	80063dc <_realloc_r+0x1c>
 8006402:	42b5      	cmp	r5, r6
 8006404:	462a      	mov	r2, r5
 8006406:	4621      	mov	r1, r4
 8006408:	bf28      	it	cs
 800640a:	4632      	movcs	r2, r6
 800640c:	f7ff fbc2 	bl	8005b94 <memcpy>
 8006410:	4621      	mov	r1, r4
 8006412:	4640      	mov	r0, r8
 8006414:	f7ff fbcc 	bl	8005bb0 <_free_r>
 8006418:	463c      	mov	r4, r7
 800641a:	e7e0      	b.n	80063de <_realloc_r+0x1e>

0800641c <_malloc_usable_size_r>:
 800641c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006420:	1f18      	subs	r0, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	bfbc      	itt	lt
 8006426:	580b      	ldrlt	r3, [r1, r0]
 8006428:	18c0      	addlt	r0, r0, r3
 800642a:	4770      	bx	lr

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
