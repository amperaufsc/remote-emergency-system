
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005ba0  08005ba0  00006ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d8c  08005d8c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d94  08005d94  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d94  08005d94  00006d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  08005df8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005df8  0000728c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014422  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003628  00000000  00000000  0001b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0001ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f84  00000000  00000000  0001ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f10f  00000000  00000000  00020f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172e7  00000000  00000000  0004001b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6238  00000000  00000000  00057302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d53a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005854  00000000  00000000  0010d580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00112dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000005c 	.word	0x2000005c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b88 	.word	0x08005b88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000060 	.word	0x20000060
 800017c:	08005b88 	.word	0x08005b88

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffe3 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}

0800055e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 faa5 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f809 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f7ff fff1 	bl	8000550 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 800056e:	f000 f8b1 	bl	80006d4 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f941 	bl	80007f8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    mainLoRa();
 8000576:	f004 fd53 	bl	8005020 <mainLoRa>
 800057a:	e7fc      	b.n	8000576 <main+0x18>

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09a      	sub	sp, #104	@ 0x68
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2248      	movs	r2, #72	@ 0x48
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fe7c 	bl	8005288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <SystemClock_Config+0xa0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005aa:	4a1c      	ldr	r2, [pc, #112]	@ (800061c <SystemClock_Config+0xa0>)
 80005ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	4b1a      	ldr	r3, [pc, #104]	@ (800061c <SystemClock_Config+0xa0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005be:	2320      	movs	r3, #32
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005ca:	23b0      	movs	r3, #176	@ 0xb0
 80005cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f836 	bl	8002648 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005e2:	f000 f81d 	bl	8000620 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005e6:	234f      	movs	r3, #79	@ 0x4f
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fba2 	bl	8002d4c <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060e:	f000 f807 	bl	8000620 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3768      	adds	r7, #104	@ 0x68
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	58000400 	.word	0x58000400

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <NMI_Handler+0x4>

08000640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <MemManage_Handler+0x4>

08000650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <UsageFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f001 fa6c 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000696:	f003 fb4f 	bl	8003d38 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078

080006a4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80006ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80006b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c8:	68fb      	ldr	r3, [r7, #12]
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SUBGHZ_Init+0x20>)
 80006da:	2210      	movs	r2, #16
 80006dc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_SUBGHZ_Init+0x20>)
 80006e0:	f003 f8a8 	bl	8003834 <HAL_SUBGHZ_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80006ea:	f7ff ff99 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000078 	.word	0x20000078

080006f8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ffcf 	bl	80006a4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2032      	movs	r0, #50	@ 0x32
 800070c:	f001 fb1d 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000710:	2032      	movs	r0, #50	@ 0x32
 8000712:	f001 fb34 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000728:	4a14      	ldr	r2, [pc, #80]	@ (800077c <_sbrk+0x5c>)
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <_sbrk+0x60>)
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <_sbrk+0x64>)
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <_sbrk+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d207      	bcs.n	8000760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000750:	f004 fda2 	bl	8005298 <__errno>
 8000754:	4603      	mov	r3, r0
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e009      	b.n	8000774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <_sbrk+0x64>)
 8000770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20010000 	.word	0x20010000
 8000780:	00000400 	.word	0x00000400
 8000784:	20000084 	.word	0x20000084
 8000788:	20000290 	.word	0x20000290

0800078c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <LL_AHB2_GRP1_EnableClock>:
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007bc:	68fb      	ldr	r3, [r7, #12]
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <LL_APB1_GRP1_EnableClock>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ec:	68fb      	ldr	r3, [r7, #12]
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 80007fe:	4a23      	ldr	r2, [pc, #140]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000840:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000842:	f003 fc3c 	bl	80040be <HAL_UART_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800084c:	f7ff fee8 	bl	8000620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000854:	f004 f973 	bl	8004b3e <HAL_UARTEx_SetTxFifoThreshold>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800085e:	f7ff fedf 	bl	8000620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000866:	f004 f9a8 	bl	8004bba <HAL_UARTEx_SetRxFifoThreshold>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000870:	f7ff fed6 	bl	8000620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000876:	f004 f92a 	bl	8004ace <HAL_UARTEx_DisableFifoMode>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000880:	f7ff fece 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000088 	.word	0x20000088
 800088c:	40004400 	.word	0x40004400

08000890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b096      	sub	sp, #88	@ 0x58
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2238      	movs	r2, #56	@ 0x38
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 fce9 	bl	8005288 <memset>
  if(uartHandle->Instance==USART2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d126      	bne.n	800090e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c4:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80008c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fdfc 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008da:	f7ff fea1 	bl	8000620 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80008e2:	f7ff ff71 	bl	80007c8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff56 	bl	8000798 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80008ec:	230c      	movs	r3, #12
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fc:	2307      	movs	r3, #7
 80008fe:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f001 fa53 	bl	8001db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800090e:	bf00      	nop
 8000910:	3758      	adds	r7, #88	@ 0x58
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400

0800091c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800091c:	480d      	ldr	r0, [pc, #52]	@ (8000954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000920:	f7ff ff34 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	@ (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	@ (8000960 <LoopForever+0xe>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	@ (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094a:	f004 fcab 	bl	80052a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fe06 	bl	800055e <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   r0, =_estack
 8000954:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000960:	08005d9c 	.word	0x08005d9c
  ldr r2, =_sbss
 8000964:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000968:	2000028c 	.word	0x2000028c

0800096c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>

0800096e <LL_AHB2_GRP1_EnableClock>:
{
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800097c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4313      	orrs	r3, r2
 8000984:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80009b4:	2004      	movs	r0, #4
 80009b6:	f7ff ffda 	bl	800096e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80009ba:	2310      	movs	r3, #16
 80009bc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009d0:	f001 f9f0 	bl	8001db4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80009d4:	2320      	movs	r3, #32
 80009d6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009de:	f001 f9e9 	bl	8001db4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80009e2:	2308      	movs	r3, #8
 80009e4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009ec:	f001 f9e2 	bl	8001db4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80009f0:	2200      	movs	r2, #0
 80009f2:	2120      	movs	r1, #32
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009f6:	f001 fb3d 	bl	8002074 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80009fa:	2200      	movs	r2, #0
 80009fc:	2110      	movs	r1, #16
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 8000a00:	f001 fb38 	bl	8002074 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000a04:	2200      	movs	r2, #0
 8000a06:	2108      	movs	r1, #8
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 8000a0a:	f001 fb33 	bl	8002074 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	48000800 	.word	0x48000800

08000a1c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d84b      	bhi.n	8000ac4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a34 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000a45 	.word	0x08000a45
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	08000a85 	.word	0x08000a85
 8000a40:	08000aa5 	.word	0x08000aa5
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2108      	movs	r1, #8
 8000a48:	4821      	ldr	r0, [pc, #132]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a4a:	f001 fb13 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2110      	movs	r1, #16
 8000a52:	481f      	ldr	r0, [pc, #124]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a54:	f001 fb0e 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	481c      	ldr	r0, [pc, #112]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a5e:	f001 fb09 	bl	8002074 <HAL_GPIO_WritePin>
      break;      
 8000a62:	e030      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a6a:	f001 fb03 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2110      	movs	r1, #16
 8000a72:	4817      	ldr	r0, [pc, #92]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a74:	f001 fafe 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a7e:	f001 faf9 	bl	8002074 <HAL_GPIO_WritePin>
      break;
 8000a82:	e020      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2108      	movs	r1, #8
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a8a:	f001 faf3 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2110      	movs	r1, #16
 8000a92:	480f      	ldr	r0, [pc, #60]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a94:	f001 faee 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a9e:	f001 fae9 	bl	8002074 <HAL_GPIO_WritePin>
      break;
 8000aa2:	e010      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000aaa:	f001 fae3 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000ab4:	f001 fade 	bl	8002074 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2120      	movs	r1, #32
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000abe:	f001 fad9 	bl	8002074 <HAL_GPIO_WritePin>
      break;
 8000ac2:	e000      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000ac4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	48000800 	.word	0x48000800

08000ad4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e001      	b.n	8000b18 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8000b14:	2316      	movs	r3, #22
 8000b16:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000b18:	68fb      	ldr	r3, [r7, #12]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8000b28:	f7ff ff3a 	bl	80009a0 <BSP_RADIO_Init>
 8000b2c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff6c 	bl	8000a1c <BSP_RADIO_ConfigRFSwitch>
 8000b44:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8000b52:	f7ff ffbf 	bl	8000ad4 <BSP_RADIO_GetTxConfig>
 8000b56:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8000b60:	f7ff ffbf 	bl	8000ae2 <BSP_RADIO_IsTCXO>
 8000b64:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8000b6e:	f7ff ffbf 	bl	8000af0 <BSP_RADIO_IsDCDC>
 8000b72:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ffba 	bl	8000afe <BSP_RADIO_GetRFOMaxPowerConfig>
 8000b8a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8000ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <SUBGRF_Init+0x84>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8000ba8:	f7ff fd94 	bl	80006d4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f000 ff5d 	bl	8001a6c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <SUBGRF_Init+0x88>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f8b9 	bl	8000d30 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8000bbe:	f7ff ffcd 	bl	8000b5c <RBI_IsTCXO>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d10e      	bne.n	8000be6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 fa1e 	bl	800100c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f640 1011 	movw	r0, #2321	@ 0x911
 8000bd6:	f000 fd7b 	bl	80016d0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8000bda:	237f      	movs	r3, #127	@ 0x7f
 8000bdc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8000bde:	7b38      	ldrb	r0, [r7, #12]
 8000be0:	f000 f928 	bl	8000e34 <SUBGRF_Calibrate>
 8000be4:	e009      	b.n	8000bfa <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000be6:	2120      	movs	r1, #32
 8000be8:	f640 1011 	movw	r0, #2321	@ 0x911
 8000bec:	f000 fd70 	bl	80016d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	f640 1012 	movw	r0, #2322	@ 0x912
 8000bf6:	f000 fd6b 	bl	80016d0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8000bfa:	210e      	movs	r1, #14
 8000bfc:	f640 101f 	movw	r0, #2335	@ 0x91f
 8000c00:	f000 fd66 	bl	80016d0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8000c04:	f7ff ff8e 	bl	8000b24 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <SUBGRF_Init+0x8c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000128 	.word	0x20000128
 8000c1c:	20000124 	.word	0x20000124
 8000c20:	2000011c 	.word	0x2000011c

08000c24 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	461a      	mov	r2, r3
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 fd94 	bl	8001764 <SUBGRF_WriteBuffer>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8000c56:	f107 0317 	add.w	r3, r7, #23
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f000 fcb9 	bl	80015d4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d201      	bcs.n	8000c70 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e007      	b.n	8000c80 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8000c70:	7df8      	ldrb	r0, [r7, #23]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	f000 fd95 	bl	80017a8 <SUBGRF_ReadBuffer>

    return 0;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8000c96:	7afb      	ldrb	r3, [r7, #11]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff ffc2 	bl	8000c24 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f861 	bl	8000d68 <SUBGRF_SetTx>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000cc8:	f000 fa24 	bl	8001114 <SUBGRF_GetPacketType>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d108      	bne.n	8000ce4 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8000cde:	f000 fd1f 	bl	8001720 <SUBGRF_WriteRegisters>
            break;
 8000ce2:	e000      	b.n	8000ce6 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8000ce4:	bf00      	nop
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000d08:	f000 fa04 	bl	8001114 <SUBGRF_GetPacketType>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d108      	bne.n	8000d24 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	2202      	movs	r2, #2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f240 60be 	movw	r0, #1726	@ 0x6be
 8000d1e:	f000 fcff 	bl	8001720 <SUBGRF_WriteRegisters>
            break;
 8000d22:	e000      	b.n	8000d26 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8000d24:	bf00      	nop
    }
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2080      	movs	r0, #128	@ 0x80
 8000d42:	f000 fd53 	bl	80017ec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d103      	bne.n	8000d54 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SUBGRF_SetStandby+0x34>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8000d52:	e002      	b.n	8000d5a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <SUBGRF_SetStandby+0x34>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000011c 	.word	0x2000011c

08000d68 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <SUBGRF_SetTx+0x3c>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2203      	movs	r2, #3
 8000d92:	4619      	mov	r1, r3
 8000d94:	2083      	movs	r0, #131	@ 0x83
 8000d96:	f000 fd29 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000011c 	.word	0x2000011c

08000da8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <SUBGRF_SetRx+0x3c>)
 8000db2:	2205      	movs	r2, #5
 8000db4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0c1b      	lsrs	r3, r3, #16
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	2082      	movs	r0, #130	@ 0x82
 8000dd6:	f000 fd09 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000011c 	.word	0x2000011c

08000de8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	209f      	movs	r0, #159	@ 0x9f
 8000dfa:	f000 fcf7 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8000e0c:	f7ff fead 	bl	8000b6a <RBI_IsDCDC>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	2201      	movs	r2, #1
 8000e24:	4619      	mov	r1, r3
 8000e26:	2096      	movs	r0, #150	@ 0x96
 8000e28:	f000 fce0 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000e3c:	793b      	ldrb	r3, [r7, #4]
 8000e3e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000e68:	793b      	ldrb	r3, [r7, #4]
 8000e6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000e88:	793b      	ldrb	r3, [r7, #4]
 8000e8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8000e98:	793b      	ldrb	r3, [r7, #4]
 8000e9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000ea8:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8000eaa:	f107 030f 	add.w	r3, r7, #15
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2089      	movs	r0, #137	@ 0x89
 8000eb4:	f000 fc9a 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <SUBGRF_CalibrateImage+0x80>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d904      	bls.n	8000eda <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8000ed0:	23e1      	movs	r3, #225	@ 0xe1
 8000ed2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8000ed4:	23e9      	movs	r3, #233	@ 0xe9
 8000ed6:	737b      	strb	r3, [r7, #13]
 8000ed8:	e027      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <SUBGRF_CalibrateImage+0x84>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d904      	bls.n	8000eec <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8000ee2:	23d7      	movs	r3, #215	@ 0xd7
 8000ee4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8000ee6:	23db      	movs	r3, #219	@ 0xdb
 8000ee8:	737b      	strb	r3, [r7, #13]
 8000eea:	e01e      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <SUBGRF_CalibrateImage+0x88>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d904      	bls.n	8000efe <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8000ef4:	23c1      	movs	r3, #193	@ 0xc1
 8000ef6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8000ef8:	23c5      	movs	r3, #197	@ 0xc5
 8000efa:	737b      	strb	r3, [r7, #13]
 8000efc:	e015      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <SUBGRF_CalibrateImage+0x8c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d904      	bls.n	8000f10 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8000f06:	2375      	movs	r3, #117	@ 0x75
 8000f08:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8000f0a:	2381      	movs	r3, #129	@ 0x81
 8000f0c:	737b      	strb	r3, [r7, #13]
 8000f0e:	e00c      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <SUBGRF_CalibrateImage+0x90>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d904      	bls.n	8000f22 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8000f18:	236b      	movs	r3, #107	@ 0x6b
 8000f1a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8000f1c:	236f      	movs	r3, #111	@ 0x6f
 8000f1e:	737b      	strb	r3, [r7, #13]
 8000f20:	e003      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8000f22:	2329      	movs	r3, #41	@ 0x29
 8000f24:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8000f26:	232b      	movs	r3, #43	@ 0x2b
 8000f28:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4619      	mov	r1, r3
 8000f32:	2098      	movs	r0, #152	@ 0x98
 8000f34:	f000 fc5a 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	35a4e900 	.word	0x35a4e900
 8000f44:	32a9f880 	.word	0x32a9f880
 8000f48:	2de54480 	.word	0x2de54480
 8000f4c:	1b6b0b00 	.word	0x1b6b0b00
 8000f50:	1954fc40 	.word	0x1954fc40

08000f54 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	4611      	mov	r1, r2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4623      	mov	r3, r4
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	4603      	mov	r3, r0
 8000f68:	71bb      	strb	r3, [r7, #6]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	717b      	strb	r3, [r7, #5]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2204      	movs	r2, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2095      	movs	r0, #149	@ 0x95
 8000f8c:	f000 fc2e 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd90      	pop	{r4, r7, pc}

08000f98 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	4603      	mov	r3, r0
 8000fac:	80bb      	strh	r3, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	807b      	strh	r3, [r7, #2]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8000fe6:	883b      	ldrh	r3, [r7, #0]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8000ff0:	883b      	ldrh	r3, [r7, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2008      	movs	r0, #8
 8001000:	f000 fbf4 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	b2db      	uxtb	r3, r3
 8001028:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b2db      	uxtb	r3, r3
 8001030:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2204      	movs	r2, #4
 800103e:	4619      	mov	r1, r3
 8001040:	2097      	movs	r0, #151	@ 0x97
 8001042:	f000 fbd3 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800105e:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <SUBGRF_SetRfFrequency+0x84>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff27 	bl	8000ec0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <SUBGRF_SetRfFrequency+0x84>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	461c      	mov	r4, r3
 800107e:	4615      	mov	r5, r2
 8001080:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001084:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <SUBGRF_SetRfFrequency+0x88>)
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	4640      	mov	r0, r8
 8001090:	4649      	mov	r1, r9
 8001092:	f7ff f8cd 	bl	8000230 <__aeabi_uldivmod>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4613      	mov	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	0e1b      	lsrs	r3, r3, #24
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	2204      	movs	r2, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	2086      	movs	r0, #134	@ 0x86
 80010c6:	f000 fb91 	bl	80017ec <SUBGRF_WriteCommand>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010d4:	20000124 	.word	0x20000124
 80010d8:	01e84800 	.word	0x01e84800

080010dc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <SUBGRF_SetPacketType+0x34>)
 80010ea:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80010f2:	2100      	movs	r1, #0
 80010f4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80010f8:	f000 faea 	bl	80016d0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	208a      	movs	r0, #138	@ 0x8a
 8001104:	f000 fb72 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000011d 	.word	0x2000011d

08001114 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    return PacketType;
 8001118:	4b02      	ldr	r3, [pc, #8]	@ (8001124 <SUBGRF_GetPacketType+0x10>)
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	2000011d 	.word	0x2000011d

08001128 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	460b      	mov	r3, r1
 8001134:	71bb      	strb	r3, [r7, #6]
 8001136:	4613      	mov	r3, r2
 8001138:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d149      	bne.n	80011d4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fd19 	bl	8000b78 <RBI_GetRFOMaxPowerConfig>
 8001146:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001148:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	429a      	cmp	r2, r3
 8001150:	da01      	bge.n	8001156 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b0e      	cmp	r3, #14
 800115a:	d10e      	bne.n	800117a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800115c:	2301      	movs	r3, #1
 800115e:	2201      	movs	r2, #1
 8001160:	2100      	movs	r1, #0
 8001162:	2004      	movs	r0, #4
 8001164:	f7ff fef6 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	330e      	adds	r3, #14
 8001174:	b2db      	uxtb	r3, r3
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	e01f      	b.n	80011ba <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	d10e      	bne.n	800119e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001180:	2301      	movs	r3, #1
 8001182:	2201      	movs	r2, #1
 8001184:	2100      	movs	r1, #0
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff fee4 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800118c:	79ba      	ldrb	r2, [r7, #6]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	330d      	adds	r3, #13
 8001198:	b2db      	uxtb	r3, r3
 800119a:	71bb      	strb	r3, [r7, #6]
 800119c:	e00d      	b.n	80011ba <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800119e:	2301      	movs	r3, #1
 80011a0:	2201      	movs	r2, #1
 80011a2:	2100      	movs	r1, #0
 80011a4:	2007      	movs	r0, #7
 80011a6:	f7ff fed5 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80011aa:	79ba      	ldrb	r2, [r7, #6]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	330e      	adds	r3, #14
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80011ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011be:	f113 0f11 	cmn.w	r3, #17
 80011c2:	da01      	bge.n	80011c8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80011c4:	23ef      	movs	r3, #239	@ 0xef
 80011c6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80011c8:	2118      	movs	r1, #24
 80011ca:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80011ce:	f000 fa7f 	bl	80016d0 <SUBGRF_WriteRegister>
 80011d2:	e067      	b.n	80012a4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80011d4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80011d8:	f000 fa8e 	bl	80016f8 <SUBGRF_ReadRegister>
 80011dc:	4603      	mov	r3, r0
 80011de:	f043 031e 	orr.w	r3, r3, #30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4619      	mov	r1, r3
 80011e6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80011ea:	f000 fa71 	bl	80016d0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fcc2 	bl	8000b78 <RBI_GetRFOMaxPowerConfig>
 80011f4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80011f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	da01      	bge.n	8001204 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b14      	cmp	r3, #20
 8001208:	d10e      	bne.n	8001228 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800120a:	2301      	movs	r3, #1
 800120c:	2200      	movs	r2, #0
 800120e:	2105      	movs	r1, #5
 8001210:	2003      	movs	r0, #3
 8001212:	f7ff fe9f 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001216:	79ba      	ldrb	r2, [r7, #6]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3316      	adds	r3, #22
 8001222:	b2db      	uxtb	r3, r3
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	e031      	b.n	800128c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b11      	cmp	r3, #17
 800122c:	d10e      	bne.n	800124c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2103      	movs	r1, #3
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff fe8d 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3316      	adds	r3, #22
 8001246:	b2db      	uxtb	r3, r3
 8001248:	71bb      	strb	r3, [r7, #6]
 800124a:	e01f      	b.n	800128c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b0e      	cmp	r3, #14
 8001250:	d10e      	bne.n	8001270 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001252:	2301      	movs	r3, #1
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff fe7b 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800125e:	79ba      	ldrb	r2, [r7, #6]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	330e      	adds	r3, #14
 800126a:	b2db      	uxtb	r3, r3
 800126c:	71bb      	strb	r3, [r7, #6]
 800126e:	e00d      	b.n	800128c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001270:	2301      	movs	r3, #1
 8001272:	2200      	movs	r2, #0
 8001274:	2107      	movs	r1, #7
 8001276:	2004      	movs	r0, #4
 8001278:	f7ff fe6c 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800127c:	79ba      	ldrb	r2, [r7, #6]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3316      	adds	r3, #22
 8001288:	b2db      	uxtb	r3, r3
 800128a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800128c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001290:	f113 0f09 	cmn.w	r3, #9
 8001294:	da01      	bge.n	800129a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001296:	23f7      	movs	r3, #247	@ 0xf7
 8001298:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800129a:	2138      	movs	r1, #56	@ 0x38
 800129c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80012a0:	f000 fa16 	bl	80016d0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2202      	movs	r2, #2
 80012b2:	4619      	mov	r1, r3
 80012b4:	208e      	movs	r0, #142	@ 0x8e
 80012b6:	f000 fa99 	bl	80017ec <SUBGRF_WriteCommand>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80012c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80012d2:	4a61      	ldr	r2, [pc, #388]	@ (8001458 <SUBGRF_SetModulationParams+0x194>)
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012dc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b5d      	ldr	r3, [pc, #372]	@ (800145c <SUBGRF_SetModulationParams+0x198>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d004      	beq.n	80012f6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fef3 	bl	80010dc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	f200 80a5 	bhi.w	800144a <SUBGRF_SetModulationParams+0x186>
 8001300:	a201      	add	r2, pc, #4	@ (adr r2, 8001308 <SUBGRF_SetModulationParams+0x44>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001319 	.word	0x08001319
 800130c:	080013d9 	.word	0x080013d9
 8001310:	0800139b 	.word	0x0800139b
 8001314:	08001407 	.word	0x08001407
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001318:	2308      	movs	r3, #8
 800131a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	@ (8001460 <SUBGRF_SetModulationParams+0x19c>)
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	b2db      	uxtb	r3, r3
 800132e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b2db      	uxtb	r3, r3
 8001336:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7b1b      	ldrb	r3, [r3, #12]
 8001342:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7b5b      	ldrb	r3, [r3, #13]
 8001348:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2200      	movs	r2, #0
 8001350:	461c      	mov	r4, r3
 8001352:	4615      	mov	r5, r2
 8001354:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001358:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800135c:	4a41      	ldr	r2, [pc, #260]	@ (8001464 <SUBGRF_SetModulationParams+0x1a0>)
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	4640      	mov	r0, r8
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff63 	bl	8000230 <__aeabi_uldivmod>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	b2db      	uxtb	r3, r3
 8001378:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b2db      	uxtb	r3, r3
 8001380:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001388:	7cfb      	ldrb	r3, [r7, #19]
 800138a:	b29a      	uxth	r2, r3
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	208b      	movs	r0, #139	@ 0x8b
 8001394:	f000 fa2a 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 8001398:	e058      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800139a:	2304      	movs	r3, #4
 800139c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001460 <SUBGRF_SetModulationParams+0x19c>)
 80013a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7d1b      	ldrb	r3, [r3, #20]
 80013c4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80013c6:	7cfb      	ldrb	r3, [r7, #19]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	208b      	movs	r0, #139	@ 0x8b
 80013d2:	f000 fa0b 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 80013d6:	e039      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e1b      	ldrb	r3, [r3, #24]
 80013e0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7e5b      	ldrb	r3, [r3, #25]
 80013e6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7e9b      	ldrb	r3, [r3, #26]
 80013ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7edb      	ldrb	r3, [r3, #27]
 80013f2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80013f4:	7cfb      	ldrb	r3, [r7, #19]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	208b      	movs	r0, #139	@ 0x8b
 8001400:	f000 f9f4 	bl	80017ec <SUBGRF_WriteCommand>

        break;
 8001404:	e022      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001406:	2305      	movs	r3, #5
 8001408:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <SUBGRF_SetModulationParams+0x19c>)
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	b2db      	uxtb	r3, r3
 800141c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	b2db      	uxtb	r3, r3
 8001424:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7b5b      	ldrb	r3, [r3, #13]
 8001436:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001438:	7cfb      	ldrb	r3, [r7, #19]
 800143a:	b29a      	uxth	r2, r3
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4619      	mov	r1, r3
 8001442:	208b      	movs	r0, #139	@ 0x8b
 8001444:	f000 f9d2 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 8001448:	e000      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800144a:	bf00      	nop
    }
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001456:	bf00      	nop
 8001458:	08005ba0 	.word	0x08005ba0
 800145c:	2000011d 	.word	0x2000011d
 8001460:	3d090000 	.word	0x3d090000
 8001464:	01e84800 	.word	0x01e84800

08001468 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001474:	4a48      	ldr	r2, [pc, #288]	@ (8001598 <SUBGRF_SetPacketParams+0x130>)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	ca07      	ldmia	r2, {r0, r1, r2}
 800147c:	c303      	stmia	r3!, {r0, r1}
 800147e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b45      	ldr	r3, [pc, #276]	@ (800159c <SUBGRF_SetPacketParams+0x134>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d004      	beq.n	8001496 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe23 	bl	80010dc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d878      	bhi.n	8001590 <SUBGRF_SetPacketParams+0x128>
 800149e:	a201      	add	r2, pc, #4	@ (adr r2, 80014a4 <SUBGRF_SetPacketParams+0x3c>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014b5 	.word	0x080014b5
 80014a8:	08001545 	.word	0x08001545
 80014ac:	08001539 	.word	0x08001539
 80014b0:	080014b5 	.word	0x080014b5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7a5b      	ldrb	r3, [r3, #9]
 80014b8:	2bf1      	cmp	r3, #241	@ 0xf1
 80014ba:	d10a      	bne.n	80014d2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80014bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014c0:	f7ff fbf5 	bl	8000cae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80014c4:	f248 0005 	movw	r0, #32773	@ 0x8005
 80014c8:	f7ff fc11 	bl	8000cee <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80014cc:	2302      	movs	r3, #2
 80014ce:	75bb      	strb	r3, [r7, #22]
 80014d0:	e011      	b.n	80014f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7a5b      	ldrb	r3, [r3, #9]
 80014d6:	2bf2      	cmp	r3, #242	@ 0xf2
 80014d8:	d10a      	bne.n	80014f0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80014da:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80014de:	f7ff fbe6 	bl	8000cae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80014e2:	f241 0021 	movw	r0, #4129	@ 0x1021
 80014e6:	f7ff fc02 	bl	8000cee <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80014ea:	2306      	movs	r3, #6
 80014ec:	75bb      	strb	r3, [r7, #22]
 80014ee:	e002      	b.n	80014f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7a5b      	ldrb	r3, [r3, #9]
 80014f4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80014f6:	2309      	movs	r3, #9
 80014f8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	885b      	ldrh	r3, [r3, #2]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	885b      	ldrh	r3, [r3, #2]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	795b      	ldrb	r3, [r3, #5]
 8001518:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	79db      	ldrb	r3, [r3, #7]
 8001524:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7a1b      	ldrb	r3, [r3, #8]
 800152a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800152c:	7dbb      	ldrb	r3, [r7, #22]
 800152e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7a9b      	ldrb	r3, [r3, #10]
 8001534:	753b      	strb	r3, [r7, #20]
        break;
 8001536:	e022      	b.n	800157e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7b1b      	ldrb	r3, [r3, #12]
 8001540:	733b      	strb	r3, [r7, #12]
        break;
 8001542:	e01c      	b.n	800157e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001544:	2306      	movs	r3, #6
 8001546:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	89db      	ldrh	r3, [r3, #14]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	89db      	ldrh	r3, [r3, #14]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7c1a      	ldrb	r2, [r3, #16]
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <SUBGRF_SetPacketParams+0x138>)
 8001562:	4611      	mov	r1, r2
 8001564:	7019      	strb	r1, [r3, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7c5b      	ldrb	r3, [r3, #17]
 800156e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7c9b      	ldrb	r3, [r3, #18]
 8001574:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7cdb      	ldrb	r3, [r3, #19]
 800157a:	747b      	strb	r3, [r7, #17]
        break;
 800157c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	208c      	movs	r0, #140	@ 0x8c
 800158a:	f000 f92f 	bl	80017ec <SUBGRF_WriteCommand>
 800158e:	e000      	b.n	8001592 <SUBGRF_SetPacketParams+0x12a>
        return;
 8001590:	bf00      	nop
}
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	08005ba8 	.word	0x08005ba8
 800159c:	2000011d 	.word	0x2000011d
 80015a0:	2000011e 	.word	0x2000011e

080015a4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2202      	movs	r2, #2
 80015c2:	4619      	mov	r1, r3
 80015c4:	208f      	movs	r0, #143	@ 0x8f
 80015c6:	f000 f911 	bl	80017ec <SUBGRF_WriteCommand>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2202      	movs	r2, #2
 80015e4:	4619      	mov	r1, r3
 80015e6:	2013      	movs	r0, #19
 80015e8:	f000 f922 	bl	8001830 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80015ec:	f7ff fd92 	bl	8001114 <SUBGRF_GetPacketType>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d10d      	bne.n	8001612 <SUBGRF_GetRxBufferStatus+0x3e>
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <SUBGRF_GetRxBufferStatus+0x54>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8001600:	f240 7002 	movw	r0, #1794	@ 0x702
 8001604:	f000 f878 	bl	80016f8 <SUBGRF_ReadRegister>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e002      	b.n	8001618 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8001612:	7b3a      	ldrb	r2, [r7, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8001618:	7b7a      	ldrb	r2, [r7, #13]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	701a      	strb	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000011e 	.word	0x2000011e

0800162c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2203      	movs	r2, #3
 800163a:	4619      	mov	r1, r3
 800163c:	2014      	movs	r0, #20
 800163e:	f000 f8f7 	bl	8001830 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8001642:	f7ff fd67 	bl	8001114 <SUBGRF_GetPacketType>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <SUBGRF_GetPacketStatus+0x30>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d013      	beq.n	8001682 <SUBGRF_GetPacketStatus+0x56>
 800165a:	e02a      	b.n	80016b2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800165c:	7b3a      	ldrb	r2, [r7, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	425b      	negs	r3, r3
 8001666:	105b      	asrs	r3, r3, #1
 8001668:	b25a      	sxtb	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800166e:	7bbb      	ldrb	r3, [r7, #14]
 8001670:	425b      	negs	r3, r3
 8001672:	105b      	asrs	r3, r3, #1
 8001674:	b25a      	sxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
            break;
 8001680:	e020      	b.n	80016c4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8001682:	7b3b      	ldrb	r3, [r7, #12]
 8001684:	425b      	negs	r3, r3
 8001686:	105b      	asrs	r3, r3, #1
 8001688:	b25a      	sxtb	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	b25b      	sxtb	r3, r3
 8001692:	3302      	adds	r3, #2
 8001694:	109b      	asrs	r3, r3, #2
 8001696:	b25a      	sxtb	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	425b      	negs	r3, r3
 80016a0:	105b      	asrs	r3, r3, #1
 80016a2:	b25a      	sxtb	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <SUBGRF_GetPacketStatus+0xa0>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
            break;
 80016b0:	e008      	b.n	80016c4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80016b2:	2214      	movs	r2, #20
 80016b4:	2100      	movs	r1, #0
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f003 fdaa 	bl	8005210 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	220f      	movs	r2, #15
 80016c0:	701a      	strb	r2, [r3, #0]
            break;
 80016c2:	bf00      	nop
    }
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000120 	.word	0x20000120

080016d0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	80fb      	strh	r3, [r7, #6]
 80016dc:	4613      	mov	r3, r2
 80016de:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80016e0:	1d7a      	adds	r2, r7, #5
 80016e2:	88f9      	ldrh	r1, [r7, #6]
 80016e4:	2301      	movs	r3, #1
 80016e6:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <SUBGRF_WriteRegister+0x24>)
 80016e8:	f002 f908 	bl	80038fc <HAL_SUBGHZ_WriteRegisters>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000078 	.word	0x20000078

080016f8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001702:	f107 020f 	add.w	r2, r7, #15
 8001706:	88f9      	ldrh	r1, [r7, #6]
 8001708:	2301      	movs	r3, #1
 800170a:	4804      	ldr	r0, [pc, #16]	@ (800171c <SUBGRF_ReadRegister+0x24>)
 800170c:	f002 f955 	bl	80039ba <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000078 	.word	0x20000078

08001720 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	4613      	mov	r3, r2
 800172e:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001730:	f3ef 8310 	mrs	r3, PRIMASK
 8001734:	60fb      	str	r3, [r7, #12]
  return(result);
 8001736:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800173a:	b672      	cpsid	i
}
 800173c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	88f9      	ldrh	r1, [r7, #6]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4806      	ldr	r0, [pc, #24]	@ (8001760 <SUBGRF_WriteRegisters+0x40>)
 8001746:	f002 f8d9 	bl	80038fc <HAL_SUBGHZ_WriteRegisters>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f383 8810 	msr	PRIMASK, r3
}
 8001754:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000078 	.word	0x20000078

08001764 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001774:	f3ef 8310 	mrs	r3, PRIMASK
 8001778:	60fb      	str	r3, [r7, #12]
  return(result);
 800177a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800177c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800177e:	b672      	cpsid	i
}
 8001780:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	b29b      	uxth	r3, r3
 8001786:	79f9      	ldrb	r1, [r7, #7]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <SUBGRF_WriteBuffer+0x40>)
 800178c:	f002 fa29 	bl	8003be2 <HAL_SUBGHZ_WriteBuffer>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f383 8810 	msr	PRIMASK, r3
}
 800179a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000078 	.word	0x20000078

080017a8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017b8:	f3ef 8310 	mrs	r3, PRIMASK
 80017bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80017be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80017c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017c2:	b672      	cpsid	i
}
 80017c4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	79f9      	ldrb	r1, [r7, #7]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <SUBGRF_ReadBuffer+0x40>)
 80017d0:	f002 fa5a 	bl	8003c88 <HAL_SUBGHZ_ReadBuffer>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f383 8810 	msr	PRIMASK, r3
}
 80017de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000078 	.word	0x20000078

080017ec <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001800:	60fb      	str	r3, [r7, #12]
  return(result);
 8001802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001806:	b672      	cpsid	i
}
 8001808:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	79f9      	ldrb	r1, [r7, #7]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	4806      	ldr	r0, [pc, #24]	@ (800182c <SUBGRF_WriteCommand+0x40>)
 8001812:	f002 f933 	bl	8003a7c <HAL_SUBGHZ_ExecSetCmd>
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f383 8810 	msr	PRIMASK, r3
}
 8001820:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000078 	.word	0x20000078

08001830 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001840:	f3ef 8310 	mrs	r3, PRIMASK
 8001844:	60fb      	str	r3, [r7, #12]
  return(result);
 8001846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800184a:	b672      	cpsid	i
}
 800184c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800184e:	88bb      	ldrh	r3, [r7, #4]
 8001850:	79f9      	ldrb	r1, [r7, #7]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	4806      	ldr	r0, [pc, #24]	@ (8001870 <SUBGRF_ReadCommand+0x40>)
 8001856:	f002 f970 	bl	8003b3a <HAL_SUBGHZ_ExecGetCmd>
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f383 8810 	msr	PRIMASK, r3
}
 8001864:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000078 	.word	0x20000078

08001874 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	460a      	mov	r2, r1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10d      	bne.n	80018aa <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d104      	bne.n	800189e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001894:	2302      	movs	r3, #2
 8001896:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001898:	2004      	movs	r0, #4
 800189a:	f000 f8e7 	bl	8001a6c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d107      	bne.n	80018b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80018a4:	2303      	movs	r3, #3
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e004      	b.n	80018b4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f93b 	bl	8000b32 <RBI_ConfigRFSwitch>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80018d2:	f7ff f93c 	bl	8000b4e <RBI_GetTxConfig>
 80018d6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d016      	beq.n	800190c <SUBGRF_SetRfTxPower+0x48>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	dc16      	bgt.n	8001912 <SUBGRF_SetRfTxPower+0x4e>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <SUBGRF_SetRfTxPower+0x2e>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d00a      	beq.n	8001906 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80018f0:	e00f      	b.n	8001912 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	dd02      	ble.n	8001900 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	73fb      	strb	r3, [r7, #15]
            break;
 80018fe:	e009      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
            break;
 8001904:	e006      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
            break;
 800190a:	e003      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800190c:	2302      	movs	r3, #2
 800190e:	73fb      	strb	r3, [r7, #15]
            break;
 8001910:	e000      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
            break;
 8001912:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8001914:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2202      	movs	r2, #2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fc03 	bl	8001128 <SUBGRF_SetTxParams>

    return paSelect;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2001      	movs	r0, #1
 800193a:	4798      	blx	r3
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000128 	.word	0x20000128

08001948 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2002      	movs	r0, #2
 8001956:	4798      	blx	r3
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000128 	.word	0x20000128

08001964 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2040      	movs	r0, #64	@ 0x40
 8001972:	4798      	blx	r3
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000128 	.word	0x20000128

08001980 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8001996:	e00a      	b.n	80019ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2080      	movs	r0, #128	@ 0x80
 800199e:	4798      	blx	r3
            break;
 80019a0:	e005      	b.n	80019ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019aa:	4798      	blx	r3
            break;
 80019ac:	bf00      	nop
    }
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000128 	.word	0x20000128

080019bc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019cc:	4798      	blx	r3
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000128 	.word	0x20000128

080019dc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2020      	movs	r0, #32
 80019ea:	4798      	blx	r3
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000128 	.word	0x20000128

080019f8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2004      	movs	r0, #4
 8001a06:	4798      	blx	r3
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000128 	.word	0x20000128

08001a14 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2008      	movs	r0, #8
 8001a22:	4798      	blx	r3
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000128 	.word	0x20000128

08001a30 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2010      	movs	r0, #16
 8001a3e:	4798      	blx	r3
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000128 	.word	0x20000128

08001a4c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a5c:	4798      	blx	r3
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000128 	.word	0x20000128

08001a6c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8001a76:	f7ff f878 	bl	8000b6a <RBI_IsDCDC>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d112      	bne.n	8001aa6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8001a80:	f640 1023 	movw	r0, #2339	@ 0x923
 8001a84:	f7ff fe38 	bl	80016f8 <SUBGRF_ReadRegister>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	f023 0306 	bic.w	r3, r3, #6
 8001a92:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f640 1023 	movw	r0, #2339	@ 0x923
 8001aa2:	f7ff fe15 	bl	80016d0 <SUBGRF_WriteRegister>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f000 f93a 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ac0:	f001 fb26 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a09      	ldr	r2, [pc, #36]	@ (8001aec <HAL_Init+0x3c>)
 8001ac8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aca:	200f      	movs	r0, #15
 8001acc:	f000 f810 	bl	8001af0 <HAL_InitTick>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	e001      	b.n	8001ae0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001adc:	f7fe fda6 	bl	800062c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000000 	.word	0x20000000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_InitTick+0x6c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d024      	beq.n	8001b4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b04:	f001 fb04 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <HAL_InitTick+0x6c>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f93c 	bl	8001d9a <HAL_SYSTICK_Config>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10f      	bne.n	8001b48 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d809      	bhi.n	8001b42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	f000 f908 	bl	8001d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_InitTick+0x70>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e007      	b.n	8001b52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e004      	b.n	8001b52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a03      	ldr	r2, [pc, #12]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000008 	.word	0x20000008
 8001b84:	2000012c 	.word	0x2000012c

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	@ (8001b98 <HAL_GetTick+0x10>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	2000012c 	.word	0x2000012c

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4906      	ldr	r1, [pc, #24]	@ (8001c34 <__NVIC_EnableIRQ+0x34>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	@ (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	@ 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff90 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff2d 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff44 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff92 	bl	8001c8c <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff61 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff37 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa4 	bl	8001cf0 <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e140      	b.n	8002046 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8132 	beq.w	8002040 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d005      	beq.n	8001df4 <HAL_GPIO_Init+0x40>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d130      	bne.n	8001e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 0201 	and.w	r2, r3, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d017      	beq.n	8001e92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d123      	bne.n	8001ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	6939      	ldr	r1, [r7, #16]
 8001ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0203 	and.w	r2, r3, #3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 808c 	beq.w	8002040 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f28:	4a4e      	ldr	r2, [pc, #312]	@ (8002064 <HAL_GPIO_Init+0x2b0>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	2207      	movs	r2, #7
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f52:	d00d      	beq.n	8001f70 <HAL_GPIO_Init+0x1bc>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a44      	ldr	r2, [pc, #272]	@ (8002068 <HAL_GPIO_Init+0x2b4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <HAL_GPIO_Init+0x1b8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a43      	ldr	r2, [pc, #268]	@ (800206c <HAL_GPIO_Init+0x2b8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_GPIO_Init+0x1b4>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e004      	b.n	8001f72 <HAL_GPIO_Init+0x1be>
 8001f68:	2307      	movs	r3, #7
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x1be>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_GPIO_Init+0x1be>
 8001f70:	2300      	movs	r3, #0
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	f002 0203 	and.w	r2, r2, #3
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f82:	4938      	ldr	r1, [pc, #224]	@ (8002064 <HAL_GPIO_Init+0x2b0>)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f90:	4b37      	ldr	r3, [pc, #220]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fde:	4a24      	ldr	r2, [pc, #144]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fea:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800200a:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8002014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002018:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	f47f aeb7 	bne.w	8001dc4 <HAL_GPIO_Init+0x10>
  }
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	48000400 	.word	0x48000400
 800206c:	48000800 	.word	0x48000800
 8002070:	58000800 	.word	0x58000800

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002090:	e002      	b.n	8002098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a03      	ldr	r2, [pc, #12]	@ (80020bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	58000400 	.word	0x58000400

080020c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <HAL_PWREx_GetVoltageRange+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	58000400 	.word	0x58000400

080020d8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e8:	d101      	bne.n	80020ee <LL_PWR_IsEnabledBkUpAccess+0x16>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	58000400 	.word	0x58000400

080020fc <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800210a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002126:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002146:	d101      	bne.n	800214c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002184:	6013      	str	r3, [r2, #0]
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021a0:	d101      	bne.n	80021a6 <LL_RCC_HSE_IsReady+0x18>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_RCC_HSE_IsReady+0x1a>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fa:	d101      	bne.n	8002200 <LL_RCC_HSI_IsReady+0x18>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <LL_RCC_HSI_IsReady+0x1a>
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	061b      	lsls	r3, r3, #24
 8002220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d101      	bne.n	800224a <LL_RCC_LSE_IsReady+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_RCC_LSE_IsReady+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800225c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002260:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d101      	bne.n	80022ac <LL_RCC_LSI_IsReady+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_RCC_LSI_IsReady+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6013      	str	r3, [r2, #0]
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6013      	str	r3, [r2, #0]
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d101      	bne.n	8002304 <LL_RCC_MSI_IsReady+0x16>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <LL_RCC_MSI_IsReady+0x18>
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b08      	cmp	r3, #8
 800231e:	d101      	bne.n	8002324 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002350:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002420:	f023 020f 	bic.w	r2, r3, #15
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800244e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800250e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800252e:	d101      	bne.n	8002534 <LL_RCC_PLL_IsReady+0x18>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <LL_RCC_PLL_IsReady+0x1a>
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0303 	and.w	r3, r3, #3
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025aa:	d101      	bne.n	80025b0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025ce:	d101      	bne.n	80025d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80025ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f2:	d101      	bne.n	80025f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002614:	d101      	bne.n	800261a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002636:	d101      	bne.n	800263c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
	...

08002648 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e36f      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265a:	f7ff fea6 	bl	80023aa <LL_RCC_GetSysClkSource>
 800265e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002660:	f7ff ff8f 	bl	8002582 <LL_RCC_PLL_GetMainSource>
 8002664:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80c4 	beq.w	80027fc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_RCC_OscConfig+0x3e>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	d176      	bne.n	800276e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d173      	bne.n	800276e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e353      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x68>
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ae:	e006      	b.n	80026be <HAL_RCC_OscConfig+0x76>
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026be:	4293      	cmp	r3, r2
 80026c0:	d222      	bcs.n	8002708 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fd5a 	bl	8003180 <RCC_SetFlashLatencyFromMSIRange>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e331      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fe2b 	bl	800235c <LL_RCC_MSI_SetCalibTrimming>
 8002706:	e021      	b.n	800274c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fe12 	bl	800235c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fd1f 	bl	8003180 <RCC_SetFlashLatencyFromMSIRange>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e2f6      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800274c:	f000 fce0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8002750:	4603      	mov	r3, r0
 8002752:	4aa7      	ldr	r2, [pc, #668]	@ (80029f0 <HAL_RCC_OscConfig+0x3a8>)
 8002754:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002756:	4ba7      	ldr	r3, [pc, #668]	@ (80029f4 <HAL_RCC_OscConfig+0x3ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f9c8 	bl	8001af0 <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
 8002762:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d047      	beq.n	80027fa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	e2e5      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002776:	f7ff fd9e 	bl	80022b6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800277a:	f7ff fa05 	bl	8001b88 <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002782:	f7ff fa01 	bl	8001b88 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e2d2      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002794:	f7ff fdab 	bl	80022ee <LL_RCC_MSI_IsReady>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f1      	beq.n	8002782 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fdc7 	bl	800235c <LL_RCC_MSI_SetCalibTrimming>
 80027ce:	e015      	b.n	80027fc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027d0:	f7ff fd7f 	bl	80022d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d4:	f7ff f9d8 	bl	8001b88 <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027dc:	f7ff f9d4 	bl	8001b88 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e2a5      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027ee:	f7ff fd7e 	bl	80022ee <LL_RCC_MSI_IsReady>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f1      	bne.n	80027dc <HAL_RCC_OscConfig+0x194>
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027fa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d058      	beq.n	80028ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x1d2>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d108      	bne.n	8002826 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d105      	bne.n	8002826 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d14b      	bne.n	80028ba <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e289      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0x204>
 8002846:	f7ff fc86 	bl	8002156 <LL_RCC_HSE_Enable>
 800284a:	e00d      	b.n	8002868 <HAL_RCC_OscConfig+0x220>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002854:	d104      	bne.n	8002860 <HAL_RCC_OscConfig+0x218>
 8002856:	f7ff fc51 	bl	80020fc <LL_RCC_HSE_EnableTcxo>
 800285a:	f7ff fc7c 	bl	8002156 <LL_RCC_HSE_Enable>
 800285e:	e003      	b.n	8002868 <HAL_RCC_OscConfig+0x220>
 8002860:	f7ff fc87 	bl	8002172 <LL_RCC_HSE_Disable>
 8002864:	f7ff fc58 	bl	8002118 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff f98a 	bl	8001b88 <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff f986 	bl	8001b88 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e257      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800288a:	f7ff fc80 	bl	800218e <LL_RCC_HSE_IsReady>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f1      	beq.n	8002878 <HAL_RCC_OscConfig+0x230>
 8002894:	e011      	b.n	80028ba <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7ff f977 	bl	8001b88 <HAL_GetTick>
 800289a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289e:	f7ff f973 	bl	8001b88 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	@ 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e244      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80028b0:	f7ff fc6d 	bl	800218e <LL_RCC_HSE_IsReady>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f1      	bne.n	800289e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d046      	beq.n	8002954 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x290>
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d10e      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e22a      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fc8e 	bl	800220a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028ee:	e031      	b.n	8002954 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d019      	beq.n	800292c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f8:	f7ff fc5a 	bl	80021b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7ff f944 	bl	8001b88 <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002904:	f7ff f940 	bl	8001b88 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e211      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002916:	f7ff fc67 	bl	80021e8 <LL_RCC_HSI_IsReady>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f1      	beq.n	8002904 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fc70 	bl	800220a <LL_RCC_HSI_SetCalibTrimming>
 800292a:	e013      	b.n	8002954 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292c:	f7ff fc4e 	bl	80021cc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7ff f92a 	bl	8001b88 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002938:	f7ff f926 	bl	8001b88 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1f7      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800294a:	f7ff fc4d 	bl	80021e8 <LL_RCC_HSI_IsReady>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f1      	bne.n	8002938 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d06e      	beq.n	8002a3e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d056      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002970:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	429a      	cmp	r2, r3
 800297e:	d031      	beq.n	80029e4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e1d0      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d013      	beq.n	80029ca <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80029a2:	f7ff fc67 	bl	8002274 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a6:	f7ff f8ef 	bl	8001b88 <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ae:	f7ff f8eb 	bl	8001b88 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b11      	cmp	r3, #17
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1bc      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80029c0:	f7ff fc68 	bl	8002294 <LL_RCC_LSI_IsReady>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f1      	bne.n	80029ae <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d2:	f023 0210 	bic.w	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e4:	f7ff fc36 	bl	8002254 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7ff f8ce 	bl	8001b88 <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80029ee:	e00c      	b.n	8002a0a <HAL_RCC_OscConfig+0x3c2>
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff f8c6 	bl	8001b88 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b11      	cmp	r3, #17
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e197      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002a0a:	f7ff fc43 	bl	8002294 <LL_RCC_LSI_IsReady>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f1      	beq.n	80029f8 <HAL_RCC_OscConfig+0x3b0>
 8002a14:	e013      	b.n	8002a3e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a16:	f7ff fc2d 	bl	8002274 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7ff f8b5 	bl	8001b88 <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7ff f8b1 	bl	8001b88 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b11      	cmp	r3, #17
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e182      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002a34:	f7ff fc2e 	bl	8002294 <LL_RCC_LSI_IsReady>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80d8 	beq.w	8002bfc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a4c:	f7ff fb44 	bl	80020d8 <LL_PWR_IsEnabledBkUpAccess>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a56:	f7ff fb25 	bl	80020a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f895 	bl	8001b88 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7ff f891 	bl	8001b88 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e162      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a74:	f7ff fb30 	bl	80020d8 <LL_PWR_IsEnabledBkUpAccess>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f1      	beq.n	8002a62 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d07b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b85      	cmp	r3, #133	@ 0x85
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff f86d 	bl	8001b88 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7ff f85f 	bl	8001b88 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e12e      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002adc:	f7ff fba9 	bl	8002232 <LL_RCC_LSE_IsReady>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ef      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b81      	cmp	r3, #129	@ 0x81
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b85      	cmp	r3, #133	@ 0x85
 8002af4:	d121      	bne.n	8002b3a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7ff f847 	bl	8001b88 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7ff f839 	bl	8001b88 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e108      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ec      	beq.n	8002b12 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002b38:	e060      	b.n	8002bfc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7ff f825 	bl	8001b88 <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff f817 	bl	8001b88 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0e6      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ec      	bne.n	8002b56 <HAL_RCC_OscConfig+0x50e>
 8002b7c:	e03e      	b.n	8002bfc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff f803 	bl	8001b88 <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fff5 	bl	8001b88 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0c4      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ec      	bne.n	8002b9a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe ffe2 	bl	8001b88 <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe ffd4 	bl	8001b88 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0a3      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bf2:	f7ff fb1e 	bl	8002232 <LL_RCC_LSE_IsReady>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ef      	bne.n	8002bdc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8099 	beq.w	8002d38 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d06c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d14b      	bne.n	8002cac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	f7ff fc74 	bl	8002500 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe ffb6 	bl	8001b88 <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe ffb2 	bl	8001b88 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b0a      	cmp	r3, #10
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e083      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c32:	f7ff fc73 	bl	800251c <LL_RCC_PLL_IsReady>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f1      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_RCC_OscConfig+0x6fc>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c54:	0212      	lsls	r2, r2, #8
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c72:	f7ff fc37 	bl	80024e4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe ff7f 	bl	8001b88 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe ff7b 	bl	8001b88 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b0a      	cmp	r3, #10
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e04c      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002ca0:	f7ff fc3c 	bl	800251c <LL_RCC_PLL_IsReady>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f1      	beq.n	8002c8e <HAL_RCC_OscConfig+0x646>
 8002caa:	e045      	b.n	8002d38 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	f7ff fc28 	bl	8002500 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe ff6a 	bl	8001b88 <HAL_GetTick>
 8002cb4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe ff66 	bl	8001b88 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b0a      	cmp	r3, #10
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e037      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002cca:	f7ff fc27 	bl	800251c <LL_RCC_PLL_IsReady>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f1      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cde:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_RCC_OscConfig+0x700>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60cb      	str	r3, [r1, #12]
 8002ce4:	e028      	b.n	8002d38 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e023      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0203 	and.w	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d115      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10e      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	11c1808c 	.word	0x11c1808c
 8002d48:	eefefffc 	.word	0xeefefffc

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e12c      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b98      	ldr	r3, [pc, #608]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d91b      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b95      	ldr	r3, [pc, #596]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 0207 	bic.w	r2, r3, #7
 8002d76:	4993      	ldr	r1, [pc, #588]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d7e:	f7fe ff03 	bl	8001b88 <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d86:	f7fe feff 	bl	8001b88 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e110      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	4b8a      	ldr	r3, [pc, #552]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d1ef      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fb02 	bl	80023c0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe fee4 	bl	8001b88 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dc4:	f7fe fee0 	bl	8001b88 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0f1      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dd6:	f7ff fbdf 	bl	8002598 <LL_RCC_IsActiveFlag_HPRE>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f1      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff faf8 	bl	80023e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002df6:	f7fe fec7 	bl	8001b88 <HAL_GetTick>
 8002dfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dfe:	f7fe fec3 	bl	8001b88 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0d4      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e10:	f7ff fbd3 	bl	80025ba <LL_RCC_IsActiveFlag_C2HPRE>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f1      	beq.n	8002dfe <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff faf0 	bl	8002410 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e30:	f7fe feaa 	bl	8001b88 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e38:	f7fe fea6 	bl	8001b88 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0b7      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e4a:	f7ff fbc8 	bl	80025de <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f1      	beq.n	8002e38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d016      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fae9 	bl	800243c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fe8d 	bl	8001b88 <HAL_GetTick>
 8002e6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e72:	f7fe fe89 	bl	8001b88 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e09a      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e84:	f7ff fbbd 	bl	8002602 <LL_RCC_IsActiveFlag_PPRE1>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f1      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d017      	beq.n	8002eca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fade 	bl	8002462 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ea6:	f7fe fe6f 	bl	8001b88 <HAL_GetTick>
 8002eaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eae:	f7fe fe6b 	bl	8001b88 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e07c      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ec0:	f7ff fbb0 	bl	8002624 <LL_RCC_IsActiveFlag_PPRE2>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f1      	beq.n	8002eae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d043      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d106      	bne.n	8002eec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ede:	f7ff f956 	bl	800218e <LL_RCC_HSE_IsReady>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d11e      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e066      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ef4:	f7ff fb12 	bl	800251c <LL_RCC_PLL_IsReady>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d113      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e05b      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f0a:	f7ff f9f0 	bl	80022ee <LL_RCC_MSI_IsReady>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e050      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f18:	f7ff f966 	bl	80021e8 <LL_RCC_HSI_IsReady>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e049      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fa2a 	bl	8002384 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fe2a 	bl	8001b88 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fe fe26 	bl	8001b88 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e035      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	f7ff fa2c 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d1ec      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5e:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d21b      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6c:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 0207 	bic.w	r2, r3, #7
 8002f74:	4913      	ldr	r1, [pc, #76]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fe04 	bl	8001b88 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f84:	f7fe fe00 	bl	8001b88 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e011      	b.n	8002fba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_RCC_ClockConfig+0x278>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1ef      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fa4:	f000 f8b4 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4a07      	ldr	r2, [pc, #28]	@ (8002fc8 <HAL_RCC_ClockConfig+0x27c>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <HAL_RCC_ClockConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fd9c 	bl	8001af0 <HAL_InitTick>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	58004000 	.word	0x58004000
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fde:	f7ff f9e4 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002fe2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	f7ff facd 	bl	8002582 <LL_RCC_PLL_GetMainSource>
 8002fe8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x2c>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d139      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d136      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ffc:	f7ff f987 	bl	800230e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_GetSysClockFreq+0x62>
 8003006:	f7ff f982 	bl	800230e <LL_RCC_MSI_IsEnabledRangeSelect>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_RCC_GetSysClockFreq+0x4e>
 8003010:	f7ff f98d 	bl	800232e <LL_RCC_MSI_GetRange>
 8003014:	4603      	mov	r3, r0
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	e005      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x5a>
 800301e:	f7ff f991 	bl	8002344 <LL_RCC_MSI_GetRangeAfterStandby>
 8003022:	4603      	mov	r3, r0
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a36      	ldr	r2, [pc, #216]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x134>)
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	e014      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x8c>
 8003032:	f7ff f96c 	bl	800230e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003036:	4603      	mov	r3, r0
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x7a>
 800303c:	f7ff f977 	bl	800232e <LL_RCC_MSI_GetRange>
 8003040:	4603      	mov	r3, r0
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	e005      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x86>
 800304a:	f7ff f97b 	bl	8002344 <LL_RCC_MSI_GetRangeAfterStandby>
 800304e:	4603      	mov	r3, r0
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	4a2b      	ldr	r2, [pc, #172]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x134>)
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d115      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003068:	e012      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d102      	bne.n	8003076 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003070:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x138>)
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e00c      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d109      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800307c:	f7ff f85a 	bl	8002134 <LL_RCC_HSE_IsEnabledDiv2>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x138>)
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e001      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800308c:	4b1f      	ldr	r3, [pc, #124]	@ (800310c <HAL_RCC_GetSysClockFreq+0x13c>)
 800308e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	f7ff f98b 	bl	80023aa <LL_RCC_GetSysClkSource>
 8003094:	4603      	mov	r3, r0
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d12f      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800309a:	f7ff fa72 	bl	8002582 <LL_RCC_PLL_GetMainSource>
 800309e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0xde>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d003      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0xe4>
 80030ac:	e00d      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80030ae:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x138>)
 80030b0:	60fb      	str	r3, [r7, #12]
        break;
 80030b2:	e00d      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030b4:	f7ff f83e 	bl	8002134 <LL_RCC_HSE_IsEnabledDiv2>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80030be:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x138>)
 80030c0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80030c2:	e005      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <HAL_RCC_GetSysClockFreq+0x13c>)
 80030c6:	60fb      	str	r3, [r7, #12]
        break;
 80030c8:	e002      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	60fb      	str	r3, [r7, #12]
        break;
 80030ce:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80030d0:	f7ff fa35 	bl	800253e <LL_RCC_PLL_GetN>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	fb03 f402 	mul.w	r4, r3, r2
 80030dc:	f7ff fa46 	bl	800256c <LL_RCC_PLL_GetDivider>
 80030e0:	4603      	mov	r3, r0
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	3301      	adds	r3, #1
 80030e6:	fbb4 f4f3 	udiv	r4, r4, r3
 80030ea:	f7ff fa34 	bl	8002556 <LL_RCC_PLL_GetR>
 80030ee:	4603      	mov	r3, r0
 80030f0:	0f5b      	lsrs	r3, r3, #29
 80030f2:	3301      	adds	r3, #1
 80030f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80030f8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80030fa:	697b      	ldr	r3, [r7, #20]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd90      	pop	{r4, r7, pc}
 8003104:	08005cec 	.word	0x08005cec
 8003108:	00f42400 	.word	0x00f42400
 800310c:	01e84800 	.word	0x01e84800

08003110 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b598      	push	{r3, r4, r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003114:	f7ff ff5c 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8003118:	4604      	mov	r4, r0
 800311a:	f7ff f9b5 	bl	8002488 <LL_RCC_GetAHBPrescaler>
 800311e:	4603      	mov	r3, r0
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	4a03      	ldr	r2, [pc, #12]	@ (8003134 <HAL_RCC_GetHCLKFreq+0x24>)
 8003128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd98      	pop	{r3, r4, r7, pc}
 8003134:	08005c8c 	.word	0x08005c8c

08003138 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b598      	push	{r3, r4, r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800313c:	f7ff ffe8 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003140:	4604      	mov	r4, r0
 8003142:	f7ff f9b9 	bl	80024b8 <LL_RCC_GetAPB1Prescaler>
 8003146:	4603      	mov	r3, r0
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	4a03      	ldr	r2, [pc, #12]	@ (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd98      	pop	{r3, r4, r7, pc}
 8003158:	08005ccc 	.word	0x08005ccc

0800315c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b598      	push	{r3, r4, r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003160:	f7ff ffd6 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003164:	4604      	mov	r4, r0
 8003166:	f7ff f9b2 	bl	80024ce <LL_RCC_GetAPB2Prescaler>
 800316a:	4603      	mov	r3, r0
 800316c:	0adb      	lsrs	r3, r3, #11
 800316e:	4a03      	ldr	r2, [pc, #12]	@ (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd98      	pop	{r3, r4, r7, pc}
 800317c:	08005ccc 	.word	0x08005ccc

08003180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	4a10      	ldr	r2, [pc, #64]	@ (80031d4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003196:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003198:	f7ff f981 	bl	800249e <LL_RCC_GetAHB3Prescaler>
 800319c:	4603      	mov	r3, r0
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	4a0c      	ldr	r2, [pc, #48]	@ (80031d8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0c9c      	lsrs	r4, r3, #18
 80031bc:	f7fe ff80 	bl	80020c0 <HAL_PWREx_GetVoltageRange>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 f80b 	bl	80031e0 <RCC_SetFlashLatency>
 80031ca:	4603      	mov	r3, r0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	08005cec 	.word	0x08005cec
 80031d8:	08005c8c 	.word	0x08005c8c
 80031dc:	431bde83 	.word	0x431bde83

080031e0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08e      	sub	sp, #56	@ 0x38
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80031ea:	4a3a      	ldr	r2, [pc, #232]	@ (80032d4 <RCC_SetFlashLatency+0xf4>)
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f4:	6018      	str	r0, [r3, #0]
 80031f6:	3304      	adds	r3, #4
 80031f8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80031fa:	4a37      	ldr	r2, [pc, #220]	@ (80032d8 <RCC_SetFlashLatency+0xf8>)
 80031fc:	f107 0318 	add.w	r3, r7, #24
 8003200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003204:	6018      	str	r0, [r3, #0]
 8003206:	3304      	adds	r3, #4
 8003208:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800320a:	4a34      	ldr	r2, [pc, #208]	@ (80032dc <RCC_SetFlashLatency+0xfc>)
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	ca07      	ldmia	r2, {r0, r1, r2}
 8003212:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003216:	2300      	movs	r3, #0
 8003218:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003220:	d11b      	bne.n	800325a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003222:	2300      	movs	r3, #0
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
 8003226:	e014      	b.n	8003252 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	3338      	adds	r3, #56	@ 0x38
 800322e:	443b      	add	r3, r7
 8003230:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003234:	461a      	mov	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4293      	cmp	r3, r2
 800323a:	d807      	bhi.n	800324c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	3338      	adds	r3, #56	@ 0x38
 8003242:	443b      	add	r3, r7
 8003244:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800324a:	e021      	b.n	8003290 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324e:	3301      	adds	r3, #1
 8003250:	633b      	str	r3, [r7, #48]	@ 0x30
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	2b02      	cmp	r3, #2
 8003256:	d9e7      	bls.n	8003228 <RCC_SetFlashLatency+0x48>
 8003258:	e01a      	b.n	8003290 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800325a:	2300      	movs	r3, #0
 800325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800325e:	e014      	b.n	800328a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	3338      	adds	r3, #56	@ 0x38
 8003266:	443b      	add	r3, r7
 8003268:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800326c:	461a      	mov	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4293      	cmp	r3, r2
 8003272:	d807      	bhi.n	8003284 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	3338      	adds	r3, #56	@ 0x38
 800327a:	443b      	add	r3, r7
 800327c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003282:	e005      	b.n	8003290 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003286:	3301      	adds	r3, #1
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800328a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328c:	2b02      	cmp	r3, #2
 800328e:	d9e7      	bls.n	8003260 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003290:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <RCC_SetFlashLatency+0x100>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 0207 	bic.w	r2, r3, #7
 8003298:	4911      	ldr	r1, [pc, #68]	@ (80032e0 <RCC_SetFlashLatency+0x100>)
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032a0:	f7fe fc72 	bl	8001b88 <HAL_GetTick>
 80032a4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032a6:	e008      	b.n	80032ba <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032a8:	f7fe fc6e 	bl	8001b88 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e007      	b.n	80032ca <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032ba:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <RCC_SetFlashLatency+0x100>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1ef      	bne.n	80032a8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3738      	adds	r7, #56	@ 0x38
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	08005bb4 	.word	0x08005bb4
 80032d8:	08005bbc 	.word	0x08005bbc
 80032dc:	08005bc4 	.word	0x08005bc4
 80032e0:	58004000 	.word	0x58004000

080032e4 <LL_RCC_LSE_IsReady>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d101      	bne.n	80032fc <LL_RCC_LSE_IsReady+0x18>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <LL_RCC_LSE_IsReady+0x1a>
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <LL_RCC_SetUSARTClockSource>:
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003312:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	43db      	mvns	r3, r3
 800331c:	401a      	ands	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <LL_RCC_SetI2SClockSource>:
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <LL_RCC_SetLPUARTClockSource>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <LL_RCC_SetI2CClockSource>:
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003396:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80033a2:	43db      	mvns	r3, r3
 80033a4:	401a      	ands	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80033ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <LL_RCC_SetLPTIMClockSource>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <LL_RCC_SetRNGClockSource>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <LL_RCC_SetADCClockSource>:
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <LL_RCC_SetRTCClockSource>:
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800345c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <LL_RCC_GetRTCClockSource>:
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <LL_RCC_ForceBackupDomainReset>:
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <LL_RCC_ReleaseBackupDomainReset>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80034d8:	2300      	movs	r3, #0
 80034da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80034dc:	2300      	movs	r3, #0
 80034de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d058      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80034ec:	f7fe fdda 	bl	80020a4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f0:	f7fe fb4a 	bl	8001b88 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034f6:	e009      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f8:	f7fe fb46 	bl	8001b88 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d902      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	74fb      	strb	r3, [r7, #19]
        break;
 800350a:	e006      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800350c:	4b7b      	ldr	r3, [pc, #492]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003518:	d1ee      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d13c      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003520:	f7ff ffa7 	bl	8003472 <LL_RCC_GetRTCClockSource>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	429a      	cmp	r2, r3
 800352c:	d00f      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800352e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800353c:	f7ff ffa5 	bl	800348a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003540:	f7ff ffb3 	bl	80034aa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003544:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d014      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fb16 	bl	8001b88 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800355e:	e00b      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe fb12 	bl	8001b88 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d902      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	74fb      	strb	r3, [r7, #19]
            break;
 8003576:	e004      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003578:	f7ff feb4 	bl	80032e4 <LL_RCC_LSE_IsReady>
 800357c:	4603      	mov	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d1ee      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff5b 	bl	8003448 <LL_RCC_SetRTCClockSource>
 8003592:	e004      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
 8003598:	e001      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fea9 	bl	8003306 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fe9e 	bl	8003306 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fec0 	bl	8003360 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fee6 	bl	80033c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fedb 	bl	80033c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fed0 	bl	80033c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d004      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fea9 	bl	800338a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fe9e 	bl	800338a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fe93 	bl	800338a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d011      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fe5e 	bl	8003336 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003682:	d107      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003692:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fea5 	bl	80033f4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d011      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fea3 	bl	800341e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e0:	d107      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80036f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	58000400 	.word	0x58000400

08003700 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003710:	4904      	ldr	r1, [pc, #16]	@ (8003724 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	58000400 	.word	0x58000400

08003728 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003732:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	58000400 	.word	0x58000400

08003748 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	4a04      	ldr	r2, [pc, #16]	@ (8003764 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003754:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	58000400 	.word	0x58000400

08003768 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800376c:	4b03      	ldr	r3, [pc, #12]	@ (800377c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800376e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003772:	619a      	str	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	58000400 	.word	0x58000400

08003780 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d101      	bne.n	8003794 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	58000400 	.word	0x58000400

080037a4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d101      	bne.n	80037b8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	58000400 	.word	0x58000400

080037c8 <LL_RCC_RF_DisableReset>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80037cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <LL_RCC_IsRFUnderReset>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037fc:	d101      	bne.n	8003802 <LL_RCC_IsRFUnderReset+0x1a>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <LL_RCC_IsRFUnderReset+0x1c>
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003814:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <LL_EXTI_EnableIT_32_63+0x24>)
 8003816:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800381a:	4905      	ldr	r1, [pc, #20]	@ (8003830 <LL_EXTI_EnableIT_32_63+0x24>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	58000800 	.word	0x58000800

08003834 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
    return status;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	e052      	b.n	80038f0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	799b      	ldrb	r3, [r3, #6]
 8003852:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003854:	7bbb      	ldrb	r3, [r7, #14]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_SUBGHZ_Init+0x2c>
 800385a:	7bbb      	ldrb	r3, [r7, #14]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d109      	bne.n	8003874 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fc ff46 	bl	80006f8 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800386c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003870:	f7ff ffcc 	bl	800380c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003874:	7bbb      	ldrb	r3, [r7, #14]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d126      	bne.n	80038c8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003880:	f7ff ffa2 	bl	80037c8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003884:	4b1c      	ldr	r3, [pc, #112]	@ (80038f8 <HAL_SUBGHZ_Init+0xc4>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	0cdb      	lsrs	r3, r3, #19
 8003892:	2264      	movs	r2, #100	@ 0x64
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	609a      	str	r2, [r3, #8]
        break;
 80038aa:	e007      	b.n	80038bc <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80038b2:	f7ff ff99 	bl	80037e8 <LL_RCC_IsRFUnderReset>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ee      	bne.n	800389a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80038bc:	f7ff ff34 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80038c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80038c4:	f7ff ff1c 	bl	8003700 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80038c8:	f7ff ff4e 	bl	8003768 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fab0 	bl	8003e3c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	719a      	strb	r2, [r3, #6]

  return status;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000000 	.word	0x20000000

080038fc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	461a      	mov	r2, r3
 8003908:	460b      	mov	r3, r1
 800390a:	817b      	strh	r3, [r7, #10]
 800390c:	4613      	mov	r3, r2
 800390e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	799b      	ldrb	r3, [r3, #6]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d14a      	bne.n	80039b0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	795b      	ldrb	r3, [r3, #5]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003922:	2302      	movs	r3, #2
 8003924:	e045      	b.n	80039b2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2202      	movs	r2, #2
 8003930:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fb50 	bl	8003fd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003938:	f7ff ff06 	bl	8003748 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800393c:	210d      	movs	r1, #13
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fa9c 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003944:	897b      	ldrh	r3, [r7, #10]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	b29b      	uxth	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	4619      	mov	r1, r3
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa94 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	4619      	mov	r1, r3
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa8e 	bl	8003e7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003960:	2300      	movs	r3, #0
 8003962:	82bb      	strh	r3, [r7, #20]
 8003964:	e00a      	b.n	800397c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003966:	8abb      	ldrh	r3, [r7, #20]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fa83 	bl	8003e7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003976:	8abb      	ldrh	r3, [r7, #20]
 8003978:	3301      	adds	r3, #1
 800397a:	82bb      	strh	r3, [r7, #20]
 800397c:	8aba      	ldrh	r2, [r7, #20]
 800397e:	893b      	ldrh	r3, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	d3f0      	bcc.n	8003966 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003984:	f7ff fed0 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fb49 	bl	8004020 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
 800399a:	e001      	b.n	80039a0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	715a      	strb	r2, [r3, #5]

    return status;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	e000      	b.n	80039b2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b088      	sub	sp, #32
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	461a      	mov	r2, r3
 80039c6:	460b      	mov	r3, r1
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	4613      	mov	r3, r2
 80039cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	799b      	ldrb	r3, [r3, #6]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d14a      	bne.n	8003a72 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	795b      	ldrb	r3, [r3, #5]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e045      	b.n	8003a74 <HAL_SUBGHZ_ReadRegisters+0xba>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 faf2 	bl	8003fd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80039f4:	f7ff fea8 	bl	8003748 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80039f8:	211d      	movs	r1, #29
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fa3e 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fa36 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003a10:	897b      	ldrh	r3, [r7, #10]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4619      	mov	r1, r3
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa30 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fa2c 	bl	8003e7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	82fb      	strh	r3, [r7, #22]
 8003a28:	e009      	b.n	8003a3e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fa7b 	bl	8003f28 <SUBGHZSPI_Receive>
      pData++;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	3301      	adds	r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003a38:	8afb      	ldrh	r3, [r7, #22]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	82fb      	strh	r3, [r7, #22]
 8003a3e:	8afa      	ldrh	r2, [r7, #22]
 8003a40:	893b      	ldrh	r3, [r7, #8]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d3f1      	bcc.n	8003a2a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a46:	f7ff fe6f 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fae8 	bl	8004020 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e001      	b.n	8003a62 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	715a      	strb	r2, [r3, #5]

    return status;
 8003a6e:	7ffb      	ldrb	r3, [r7, #31]
 8003a70:	e000      	b.n	8003a74 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	461a      	mov	r2, r3
 8003a88:	460b      	mov	r3, r1
 8003a8a:	72fb      	strb	r3, [r7, #11]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	799b      	ldrb	r3, [r3, #6]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d14a      	bne.n	8003b30 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	795b      	ldrb	r3, [r3, #5]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e045      	b.n	8003b32 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fa93 	bl	8003fd8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
 8003ab4:	2b84      	cmp	r3, #132	@ 0x84
 8003ab6:	d002      	beq.n	8003abe <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	2b94      	cmp	r3, #148	@ 0x94
 8003abc:	d103      	bne.n	8003ac6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	711a      	strb	r2, [r3, #4]
 8003ac4:	e002      	b.n	8003acc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003acc:	f7ff fe3c 	bl	8003748 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003ad0:	7afb      	ldrb	r3, [r7, #11]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f9d1 	bl	8003e7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	82bb      	strh	r3, [r7, #20]
 8003ade:	e00a      	b.n	8003af6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ae0:	8abb      	ldrh	r3, [r7, #20]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f9c6 	bl	8003e7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003af0:	8abb      	ldrh	r3, [r7, #20]
 8003af2:	3301      	adds	r3, #1
 8003af4:	82bb      	strh	r3, [r7, #20]
 8003af6:	8aba      	ldrh	r2, [r7, #20]
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3f0      	bcc.n	8003ae0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003afe:	f7ff fe13 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	2b84      	cmp	r3, #132	@ 0x84
 8003b06:	d002      	beq.n	8003b0e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fa89 	bl	8004020 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
 8003b1a:	e001      	b.n	8003b20 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	715a      	strb	r2, [r3, #5]

    return status;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	e000      	b.n	8003b32 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b088      	sub	sp, #32
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	461a      	mov	r2, r3
 8003b46:	460b      	mov	r3, r1
 8003b48:	72fb      	strb	r3, [r7, #11]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	799b      	ldrb	r3, [r3, #6]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d13d      	bne.n	8003bd8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	795b      	ldrb	r3, [r3, #5]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e038      	b.n	8003bda <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fa32 	bl	8003fd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b74:	f7ff fde8 	bl	8003748 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003b78:	7afb      	ldrb	r3, [r7, #11]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f97d 	bl	8003e7c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003b82:	2100      	movs	r1, #0
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f979 	bl	8003e7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	82fb      	strh	r3, [r7, #22]
 8003b8e:	e009      	b.n	8003ba4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9c8 	bl	8003f28 <SUBGHZSPI_Receive>
      pData++;
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003b9e:	8afb      	ldrh	r3, [r7, #22]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	82fb      	strh	r3, [r7, #22]
 8003ba4:	8afa      	ldrh	r2, [r7, #22]
 8003ba6:	893b      	ldrh	r3, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d3f1      	bcc.n	8003b90 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bac:	f7ff fdbc 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fa35 	bl	8004020 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e001      	b.n	8003bc8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	715a      	strb	r2, [r3, #5]

    return status;
 8003bd4:	7ffb      	ldrb	r3, [r7, #31]
 8003bd6:	e000      	b.n	8003bda <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	461a      	mov	r2, r3
 8003bee:	460b      	mov	r3, r1
 8003bf0:	72fb      	strb	r3, [r7, #11]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	799b      	ldrb	r3, [r3, #6]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d13e      	bne.n	8003c7e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	795b      	ldrb	r3, [r3, #5]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e039      	b.n	8003c80 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f9e0 	bl	8003fd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c18:	f7ff fd96 	bl	8003748 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003c1c:	210e      	movs	r1, #14
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f92c 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	4619      	mov	r1, r3
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f927 	bl	8003e7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	82bb      	strh	r3, [r7, #20]
 8003c32:	e00a      	b.n	8003c4a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003c34:	8abb      	ldrh	r3, [r7, #20]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f91c 	bl	8003e7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003c44:	8abb      	ldrh	r3, [r7, #20]
 8003c46:	3301      	adds	r3, #1
 8003c48:	82bb      	strh	r3, [r7, #20]
 8003c4a:	8aba      	ldrh	r2, [r7, #20]
 8003c4c:	893b      	ldrh	r3, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d3f0      	bcc.n	8003c34 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c52:	f7ff fd69 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f9e2 	bl	8004020 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	75fb      	strb	r3, [r7, #23]
 8003c68:	e001      	b.n	8003c6e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	715a      	strb	r2, [r3, #5]

    return status;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	e000      	b.n	8003c80 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	461a      	mov	r2, r3
 8003c94:	460b      	mov	r3, r1
 8003c96:	72fb      	strb	r3, [r7, #11]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	799b      	ldrb	r3, [r3, #6]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d141      	bne.n	8003d2e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	795b      	ldrb	r3, [r3, #5]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e03c      	b.n	8003d30 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f98b 	bl	8003fd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cc2:	f7ff fd41 	bl	8003748 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003cc6:	211e      	movs	r1, #30
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f8d7 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f8d2 	bl	8003e7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003cd8:	2100      	movs	r1, #0
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f8ce 	bl	8003e7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	82fb      	strh	r3, [r7, #22]
 8003ce4:	e009      	b.n	8003cfa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003ce6:	69b9      	ldr	r1, [r7, #24]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f91d 	bl	8003f28 <SUBGHZSPI_Receive>
      pData++;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003cf4:	8afb      	ldrh	r3, [r7, #22]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	82fb      	strh	r3, [r7, #22]
 8003cfa:	8afa      	ldrh	r2, [r7, #22]
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3f1      	bcc.n	8003ce6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d02:	f7ff fd11 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f98a 	bl	8004020 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e001      	b.n	8003d1e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	715a      	strb	r2, [r3, #5]

    return status;
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
 8003d2c:	e000      	b.n	8003d30 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003d40:	2300      	movs	r3, #0
 8003d42:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003d44:	f107 020c 	add.w	r2, r7, #12
 8003d48:	2302      	movs	r3, #2
 8003d4a:	2112      	movs	r1, #18
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fef4 	bl	8003b3a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003d52:	7b3b      	ldrb	r3, [r7, #12]
 8003d54:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003d56:	89fb      	ldrh	r3, [r7, #14]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	b21a      	sxth	r2, r3
 8003d5c:	7b7b      	ldrb	r3, [r7, #13]
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003d66:	f107 020c 	add.w	r2, r7, #12
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fe84 	bl	8003a7c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd fdd4 	bl	800192c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003d84:	89fb      	ldrh	r3, [r7, #14]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fd fdd5 	bl	8001948 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003d9e:	89fb      	ldrh	r3, [r7, #14]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fd fe25 	bl	80019f8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003dae:	89fb      	ldrh	r3, [r7, #14]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fd fe2b 	bl	8001a14 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003dbe:	89fb      	ldrh	r3, [r7, #14]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fd fe31 	bl	8001a30 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fd fdff 	bl	80019dc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fd fdbb 	bl	8001964 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003df8:	89fb      	ldrh	r3, [r7, #14]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003e02:	2101      	movs	r1, #1
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fd fdbb 	bl	8001980 <HAL_SUBGHZ_CADStatusCallback>
 8003e0a:	e003      	b.n	8003e14 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fdb6 	bl	8001980 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003e14:	89fb      	ldrh	r3, [r7, #14]
 8003e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fdcc 	bl	80019bc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003e24:	89fb      	ldrh	r3, [r7, #14]
 8003e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fe0c 	bl	8001a4c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <SUBGHZSPI_Init+0x3c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0b      	ldr	r2, [pc, #44]	@ (8003e78 <SUBGHZSPI_Init+0x3c>)
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e4e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003e50:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <SUBGHZSPI_Init+0x3c>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003e58:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003e5a:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <SUBGHZSPI_Init+0x3c>)
 8003e5c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003e60:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003e62:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <SUBGHZSPI_Init+0x3c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a04      	ldr	r2, [pc, #16]	@ (8003e78 <SUBGHZSPI_Init+0x3c>)
 8003e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e6c:	6013      	str	r3, [r2, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	58010000 	.word	0x58010000

08003e7c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e8c:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <SUBGHZSPI_Transmit+0xa0>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	0cdb      	lsrs	r3, r3, #19
 8003e9a:	2264      	movs	r2, #100	@ 0x64
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	609a      	str	r2, [r3, #8]
      break;
 8003eb2:	e008      	b.n	8003ec6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003eba:	4b19      	ldr	r3, [pc, #100]	@ (8003f20 <SUBGHZSPI_Transmit+0xa4>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d1ed      	bne.n	8003ea2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003ec6:	4b17      	ldr	r3, [pc, #92]	@ (8003f24 <SUBGHZSPI_Transmit+0xa8>)
 8003ec8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <SUBGHZSPI_Transmit+0xa0>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	0cdb      	lsrs	r3, r3, #19
 8003ede:	2264      	movs	r2, #100	@ 0x64
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	609a      	str	r2, [r3, #8]
      break;
 8003ef6:	e008      	b.n	8003f0a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003efe:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <SUBGHZSPI_Transmit+0xa4>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d1ed      	bne.n	8003ee6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003f0a:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <SUBGHZSPI_Transmit+0xa4>)
 8003f0c:	68db      	ldr	r3, [r3, #12]

  return status;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	58010000 	.word	0x58010000
 8003f24:	5801000c 	.word	0x5801000c

08003f28 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f36:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <SUBGHZSPI_Receive+0xa4>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	0cdb      	lsrs	r3, r3, #19
 8003f44:	2264      	movs	r2, #100	@ 0x64
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	609a      	str	r2, [r3, #8]
      break;
 8003f5c:	e008      	b.n	8003f70 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003f64:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd0 <SUBGHZSPI_Receive+0xa8>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d1ed      	bne.n	8003f4c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003f70:	4b18      	ldr	r3, [pc, #96]	@ (8003fd4 <SUBGHZSPI_Receive+0xac>)
 8003f72:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	22ff      	movs	r2, #255	@ 0xff
 8003f78:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f7a:	4b14      	ldr	r3, [pc, #80]	@ (8003fcc <SUBGHZSPI_Receive+0xa4>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	0cdb      	lsrs	r3, r3, #19
 8003f88:	2264      	movs	r2, #100	@ 0x64
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e008      	b.n	8003fb4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <SUBGHZSPI_Receive+0xa8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d1ed      	bne.n	8003f90 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <SUBGHZSPI_Receive+0xa8>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	701a      	strb	r2, [r3, #0]

  return status;
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	58010000 	.word	0x58010000
 8003fd4:	5801000c 	.word	0x5801000c

08003fd8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	791b      	ldrb	r3, [r3, #4]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d111      	bne.n	800400c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <SUBGHZ_CheckDeviceReady+0x44>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ff8:	f7ff fba6 	bl	8003748 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f9      	bne.n	8003ffc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004008:	f7ff fb8e 	bl	8003728 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f807 	bl	8004020 <SUBGHZ_WaitOnBusy>
 8004012:	4603      	mov	r3, r0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000000 	.word	0x20000000

08004020 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800402c:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <SUBGHZ_WaitOnBusy+0x58>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	0d1b      	lsrs	r3, r3, #20
 800403a:	2264      	movs	r2, #100	@ 0x64
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004042:	f7ff fbaf 	bl	80037a4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004046:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e009      	b.n	800406e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b01      	subs	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004060:	f7ff fb8e 	bl	8003780 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4013      	ands	r3, r2
 800406a:	2b01      	cmp	r3, #1
 800406c:	d0e9      	beq.n	8004042 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000000 	.word	0x20000000

0800407c <LL_RCC_GetUSARTClockSource>:
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004088:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	401a      	ands	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	4313      	orrs	r3, r2
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_GetLPUARTClockSource>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4013      	ands	r3, r2
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e042      	b.n	8004156 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fbd4 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	@ 0x24
 80040ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fb23 	bl	8004754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8ac 	bl	800426c <UART_SetConfig>
 8004114:	4603      	mov	r3, r0
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e01b      	b.n	8004156 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800412c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800413c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fba1 	bl	8004896 <UART_CheckIdleState>
 8004154:	4603      	mov	r3, r0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08a      	sub	sp, #40	@ 0x28
 8004162:	af02      	add	r7, sp, #8
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	2b20      	cmp	r3, #32
 8004176:	d173      	bne.n	8004260 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_UART_Transmit+0x26>
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e06c      	b.n	8004262 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2221      	movs	r2, #33	@ 0x21
 8004194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004198:	f7fd fcf6 	bl	8001b88 <HAL_GetTick>
 800419c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b6:	d108      	bne.n	80041ca <HAL_UART_Transmit+0x6c>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e003      	b.n	80041d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041d2:	e02c      	b.n	800422e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	2180      	movs	r1, #128	@ 0x80
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fba7 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e039      	b.n	8004262 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004202:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	3302      	adds	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e007      	b.n	800421c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1cc      	bne.n	80041d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2200      	movs	r2, #0
 8004242:	2140      	movs	r1, #64	@ 0x40
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fb74 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e006      	b.n	8004262 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	e000      	b.n	8004262 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004260:	2302      	movs	r3, #2
  }
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800426c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004270:	b08c      	sub	sp, #48	@ 0x30
 8004272:	af00      	add	r7, sp, #0
 8004274:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	431a      	orrs	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4313      	orrs	r3, r2
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b94      	ldr	r3, [pc, #592]	@ (80044ec <UART_SetConfig+0x280>)
 800429c:	4013      	ands	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a89      	ldr	r2, [pc, #548]	@ (80044f0 <UART_SetConfig+0x284>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d4:	4313      	orrs	r3, r2
 80042d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80042e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	f023 010f 	bic.w	r1, r3, #15
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7a      	ldr	r2, [pc, #488]	@ (80044f4 <UART_SetConfig+0x288>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d127      	bne.n	8004360 <UART_SetConfig+0xf4>
 8004310:	2003      	movs	r0, #3
 8004312:	f7ff feb3 	bl	800407c <LL_RCC_GetUSARTClockSource>
 8004316:	4603      	mov	r3, r0
 8004318:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800431c:	2b03      	cmp	r3, #3
 800431e:	d81b      	bhi.n	8004358 <UART_SetConfig+0xec>
 8004320:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <UART_SetConfig+0xbc>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	08004339 	.word	0x08004339
 800432c:	08004349 	.word	0x08004349
 8004330:	08004341 	.word	0x08004341
 8004334:	08004351 	.word	0x08004351
 8004338:	2301      	movs	r3, #1
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433e:	e080      	b.n	8004442 <UART_SetConfig+0x1d6>
 8004340:	2302      	movs	r3, #2
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004346:	e07c      	b.n	8004442 <UART_SetConfig+0x1d6>
 8004348:	2304      	movs	r3, #4
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434e:	e078      	b.n	8004442 <UART_SetConfig+0x1d6>
 8004350:	2308      	movs	r3, #8
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004356:	e074      	b.n	8004442 <UART_SetConfig+0x1d6>
 8004358:	2310      	movs	r3, #16
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435e:	e070      	b.n	8004442 <UART_SetConfig+0x1d6>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a64      	ldr	r2, [pc, #400]	@ (80044f8 <UART_SetConfig+0x28c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d138      	bne.n	80043dc <UART_SetConfig+0x170>
 800436a:	200c      	movs	r0, #12
 800436c:	f7ff fe86 	bl	800407c <LL_RCC_GetUSARTClockSource>
 8004370:	4603      	mov	r3, r0
 8004372:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d82c      	bhi.n	80043d4 <UART_SetConfig+0x168>
 800437a:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <UART_SetConfig+0x114>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043b5 	.word	0x080043b5
 8004384:	080043d5 	.word	0x080043d5
 8004388:	080043d5 	.word	0x080043d5
 800438c:	080043d5 	.word	0x080043d5
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043d5 	.word	0x080043d5
 8004398:	080043d5 	.word	0x080043d5
 800439c:	080043d5 	.word	0x080043d5
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	080043d5 	.word	0x080043d5
 80043a8:	080043d5 	.word	0x080043d5
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ba:	e042      	b.n	8004442 <UART_SetConfig+0x1d6>
 80043bc:	2302      	movs	r3, #2
 80043be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c2:	e03e      	b.n	8004442 <UART_SetConfig+0x1d6>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ca:	e03a      	b.n	8004442 <UART_SetConfig+0x1d6>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d2:	e036      	b.n	8004442 <UART_SetConfig+0x1d6>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043da:	e032      	b.n	8004442 <UART_SetConfig+0x1d6>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a43      	ldr	r2, [pc, #268]	@ (80044f0 <UART_SetConfig+0x284>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d12a      	bne.n	800443c <UART_SetConfig+0x1d0>
 80043e6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80043ea:	f7ff fe59 	bl	80040a0 <LL_RCC_GetLPUARTClockSource>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043f4:	d01a      	beq.n	800442c <UART_SetConfig+0x1c0>
 80043f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043fa:	d81b      	bhi.n	8004434 <UART_SetConfig+0x1c8>
 80043fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004400:	d00c      	beq.n	800441c <UART_SetConfig+0x1b0>
 8004402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004406:	d815      	bhi.n	8004434 <UART_SetConfig+0x1c8>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <UART_SetConfig+0x1a8>
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004410:	d008      	beq.n	8004424 <UART_SetConfig+0x1b8>
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x1c8>
 8004414:	2300      	movs	r3, #0
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e012      	b.n	8004442 <UART_SetConfig+0x1d6>
 800441c:	2302      	movs	r3, #2
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004422:	e00e      	b.n	8004442 <UART_SetConfig+0x1d6>
 8004424:	2304      	movs	r3, #4
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442a:	e00a      	b.n	8004442 <UART_SetConfig+0x1d6>
 800442c:	2308      	movs	r3, #8
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004432:	e006      	b.n	8004442 <UART_SetConfig+0x1d6>
 8004434:	2310      	movs	r3, #16
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443a:	e002      	b.n	8004442 <UART_SetConfig+0x1d6>
 800443c:	2310      	movs	r3, #16
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2a      	ldr	r2, [pc, #168]	@ (80044f0 <UART_SetConfig+0x284>)
 8004448:	4293      	cmp	r3, r2
 800444a:	f040 80a4 	bne.w	8004596 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800444e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004452:	2b08      	cmp	r3, #8
 8004454:	d823      	bhi.n	800449e <UART_SetConfig+0x232>
 8004456:	a201      	add	r2, pc, #4	@ (adr r2, 800445c <UART_SetConfig+0x1f0>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	08004481 	.word	0x08004481
 8004460:	0800449f 	.word	0x0800449f
 8004464:	08004489 	.word	0x08004489
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800448f 	.word	0x0800448f
 8004470:	0800449f 	.word	0x0800449f
 8004474:	0800449f 	.word	0x0800449f
 8004478:	0800449f 	.word	0x0800449f
 800447c:	08004497 	.word	0x08004497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004480:	f7fe fe5a 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8004484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004486:	e010      	b.n	80044aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b1c      	ldr	r3, [pc, #112]	@ (80044fc <UART_SetConfig+0x290>)
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe fd9f 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8004492:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004494:	e009      	b.n	80044aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800449c:	e005      	b.n	80044aa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8137 	beq.w	8004720 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	4a12      	ldr	r2, [pc, #72]	@ (8004500 <UART_SetConfig+0x294>)
 80044b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044bc:	461a      	mov	r2, r3
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d305      	bcc.n	80044e2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d910      	bls.n	8004504 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044e8:	e11a      	b.n	8004720 <UART_SetConfig+0x4b4>
 80044ea:	bf00      	nop
 80044ec:	cfff69f3 	.word	0xcfff69f3
 80044f0:	40008000 	.word	0x40008000
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40004400 	.word	0x40004400
 80044fc:	00f42400 	.word	0x00f42400
 8004500:	08005d2c 	.word	0x08005d2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	2200      	movs	r2, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	60fa      	str	r2, [r7, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	4a8e      	ldr	r2, [pc, #568]	@ (800474c <UART_SetConfig+0x4e0>)
 8004512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004516:	b29b      	uxth	r3, r3
 8004518:	2200      	movs	r2, #0
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004526:	f7fb fe83 	bl	8000230 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	020b      	lsls	r3, r1, #8
 800453c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004540:	0202      	lsls	r2, r0, #8
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	6849      	ldr	r1, [r1, #4]
 8004546:	0849      	lsrs	r1, r1, #1
 8004548:	2000      	movs	r0, #0
 800454a:	460c      	mov	r4, r1
 800454c:	4605      	mov	r5, r0
 800454e:	eb12 0804 	adds.w	r8, r2, r4
 8004552:	eb43 0905 	adc.w	r9, r3, r5
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	469a      	mov	sl, r3
 800455e:	4693      	mov	fp, r2
 8004560:	4652      	mov	r2, sl
 8004562:	465b      	mov	r3, fp
 8004564:	4640      	mov	r0, r8
 8004566:	4649      	mov	r1, r9
 8004568:	f7fb fe62 	bl	8000230 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800457a:	d308      	bcc.n	800458e <UART_SetConfig+0x322>
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004582:	d204      	bcs.n	800458e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e0c8      	b.n	8004720 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004594:	e0c4      	b.n	8004720 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459e:	d167      	bne.n	8004670 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80045a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d828      	bhi.n	80045fa <UART_SetConfig+0x38e>
 80045a8:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <UART_SetConfig+0x344>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045e5 	.word	0x080045e5
 80045bc:	080045fb 	.word	0x080045fb
 80045c0:	080045eb 	.word	0x080045eb
 80045c4:	080045fb 	.word	0x080045fb
 80045c8:	080045fb 	.word	0x080045fb
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	080045f3 	.word	0x080045f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe fdb0 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80045d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045da:	e014      	b.n	8004606 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe fdbe 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045e2:	e010      	b.n	8004606 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004750 <UART_SetConfig+0x4e4>)
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045e8:	e00d      	b.n	8004606 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fe fcf1 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 80045ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045f0:	e009      	b.n	8004606 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045f8:	e005      	b.n	8004606 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8089 	beq.w	8004720 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	4a4e      	ldr	r2, [pc, #312]	@ (800474c <UART_SetConfig+0x4e0>)
 8004614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004618:	461a      	mov	r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004620:	005a      	lsls	r2, r3, #1
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	441a      	add	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d916      	bls.n	8004668 <UART_SetConfig+0x3fc>
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004640:	d212      	bcs.n	8004668 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f023 030f 	bic.w	r3, r3, #15
 800464a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	b29b      	uxth	r3, r3
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	b29a      	uxth	r2, r3
 8004658:	8bfb      	ldrh	r3, [r7, #30]
 800465a:	4313      	orrs	r3, r2
 800465c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	8bfa      	ldrh	r2, [r7, #30]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e05b      	b.n	8004720 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800466e:	e057      	b.n	8004720 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004670:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004674:	2b08      	cmp	r3, #8
 8004676:	d828      	bhi.n	80046ca <UART_SetConfig+0x45e>
 8004678:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <UART_SetConfig+0x414>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	080046cb 	.word	0x080046cb
 8004690:	080046bb 	.word	0x080046bb
 8004694:	080046cb 	.word	0x080046cb
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046cb 	.word	0x080046cb
 80046a0:	080046c3 	.word	0x080046c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe fd48 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80046a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046aa:	e014      	b.n	80046d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7fe fd56 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046b2:	e010      	b.n	80046d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b26      	ldr	r3, [pc, #152]	@ (8004750 <UART_SetConfig+0x4e4>)
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046b8:	e00d      	b.n	80046d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ba:	f7fe fc89 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 80046be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046c0:	e009      	b.n	80046d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046c8:	e005      	b.n	80046d6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046d4:	bf00      	nop
    }

    if (pclk != 0U)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d021      	beq.n	8004720 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <UART_SetConfig+0x4e0>)
 80046e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	441a      	add	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d909      	bls.n	800471a <UART_SetConfig+0x4ae>
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470c:	d205      	bcs.n	800471a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	b29a      	uxth	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	e002      	b.n	8004720 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2201      	movs	r2, #1
 8004724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2201      	movs	r2, #1
 800472c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2200      	movs	r2, #0
 8004734:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800473c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	@ 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474a:	bf00      	nop
 800474c:	08005d2c 	.word	0x08005d2c
 8004750:	00f42400 	.word	0x00f42400

08004754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004852:	d10a      	bne.n	800486a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af02      	add	r7, sp, #8
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a6:	f7fd f96f 	bl	8001b88 <HAL_GetTick>
 80048aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d10e      	bne.n	80048d8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f832 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e028      	b.n	800492a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d10e      	bne.n	8004904 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f81c 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e012      	b.n	800492a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b09c      	sub	sp, #112	@ 0x70
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004942:	e0af      	b.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	f000 80ab 	beq.w	8004aa4 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fd f91b 	bl	8001b88 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <UART_WaitOnFlagUntilTimeout+0x32>
 800495e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004960:	2b00      	cmp	r3, #0
 8004962:	d140      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004974:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004978:	667b      	str	r3, [r7, #100]	@ 0x64
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004982:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004984:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004988:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80049b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80049bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80049c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e5      	bne.n	8004996 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e06f      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d057      	beq.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x172>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b80      	cmp	r3, #128	@ 0x80
 80049f8:	d054      	beq.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x172>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d051      	beq.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0e:	d149      	bne.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004a6c:	623a      	str	r2, [r7, #32]
 8004a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e010      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	f43f af40 	beq.w	8004944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3770      	adds	r7, #112	@ 0x70
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e027      	b.n	8004b34 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	@ 0x24
 8004af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e02d      	b.n	8004bb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2224      	movs	r2, #36	@ 0x24
 8004b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f850 	bl	8004c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e02d      	b.n	8004c2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2224      	movs	r2, #36	@ 0x24
 8004bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f812 	bl	8004c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c58:	e031      	b.n	8004cbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c5e:	2308      	movs	r3, #8
 8004c60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	0e5b      	lsrs	r3, r3, #25
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	0f5b      	lsrs	r3, r3, #29
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c82:	7bbb      	ldrb	r3, [r7, #14]
 8004c84:	7b3a      	ldrb	r2, [r7, #12]
 8004c86:	4910      	ldr	r1, [pc, #64]	@ (8004cc8 <UARTEx_SetNbDataToProcess+0x90>)
 8004c88:	5c8a      	ldrb	r2, [r1, r2]
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c8e:	7b3a      	ldrb	r2, [r7, #12]
 8004c90:	490e      	ldr	r1, [pc, #56]	@ (8004ccc <UARTEx_SetNbDataToProcess+0x94>)
 8004c92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	7b7a      	ldrb	r2, [r7, #13]
 8004ca4:	4908      	ldr	r1, [pc, #32]	@ (8004cc8 <UARTEx_SetNbDataToProcess+0x90>)
 8004ca6:	5c8a      	ldrb	r2, [r1, r2]
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cac:	7b7a      	ldrb	r2, [r7, #13]
 8004cae:	4907      	ldr	r1, [pc, #28]	@ (8004ccc <UARTEx_SetNbDataToProcess+0x94>)
 8004cb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	08005d44 	.word	0x08005d44
 8004ccc:	08005d4c 	.word	0x08005d4c

08004cd0 <setStateMode>:

/*	Sitting operation mode
 *	0 = STATE_MASTER
 *  1 = STATE_SLAVE
 */
LoRaState setStateMode (uint8_t  mode) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
	if (mode == 0) return STATE_MASTER;
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <setStateMode+0x14>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e005      	b.n	8004cf0 <setStateMode+0x20>
	if (mode == 1) return STATE_SLAVE;
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <setStateMode+0x1e>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e000      	b.n	8004cf0 <setStateMode+0x20>

	return STATE_NULL;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
	...

08004cfc <getDefaultLoRaConfig>:

LoRaConfig getDefaultLoRaConfig (void) {
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	return (LoRaConfig){
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a04      	ldr	r2, [pc, #16]	@ (8004d18 <getDefaultLoRaConfig+0x1c>)
 8004d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.lora_spreading_factor =7,
		.lora_codingrate = 1,
		.lora_preamble_length = 8,
		.lora_symbol_timeout = 5,
	};
}
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	08005bd0 	.word	0x08005bd0

08004d1c <LoraInit>:

    return config;
}


void LoraInit(LoRaConfig config) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	@ 0x30
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 8004d28:	4835      	ldr	r0, [pc, #212]	@ (8004e00 <LoraInit+0xe4>)
 8004d2a:	f7fb ff33 	bl	8000b94 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8004d2e:	f640 1016 	movw	r0, #2326	@ 0x916
 8004d32:	f7fc fce1 	bl	80016f8 <SUBGRF_ReadRegister>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f640 1016 	movw	r0, #2326	@ 0x916
 8004d44:	f7fc fcc4 	bl	80016d0 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 8004d48:	f7fc f85d 	bl	8000e06 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7fc fc28 	bl	80015a4 <SUBGRF_SetBufferBaseAddress>

	//Set Operating Frequency and Transmission Power
	SUBGRF_SetRfFrequency(config.rf_frequency);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fc f97a 	bl	8001050 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(config.tx_output_power);
 8004d5c:	7a3b      	ldrb	r3, [r7, #8]
 8004d5e:	b25b      	sxtb	r3, r3
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fc fdaf 	bl	80018c4 <SUBGRF_SetRfTxPower>

	//Preamble Interrupt Timer Configuration
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7fc f83e 	bl	8000de8 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	//Set Packet Type to LoRa
	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f7fc f9b5 	bl	80010dc <SUBGRF_SetPacketType>

	//Sync Word Setup
	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8004d72:	2114      	movs	r1, #20
 8004d74:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8004d78:	f7fc fcaa 	bl	80016d0 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8004d7c:	2124      	movs	r1, #36	@ 0x24
 8004d7e:	f240 7041 	movw	r0, #1857	@ 0x741
 8004d82:	f7fc fca5 	bl	80016d0 <SUBGRF_WriteRegister>
	 * Coding rate: Defined by config.lora_codingrate
	 * Spreading Factor: Defined by config.lora_spreading_factor
	 * Low Data Rate Optimization: Disabled with value 0x00
	 */
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8004d86:	2301      	movs	r3, #1
 8004d88:	753b      	strb	r3, [r7, #20]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[config.lora_bandwidth];
 8004d8a:	7a7b      	ldrb	r3, [r7, #9]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e04 <LoraInit+0xe8>)
 8004d90:	5c9b      	ldrb	r3, [r3, r2]
 8004d92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)config.lora_codingrate;
 8004d96:	7afb      	ldrb	r3, [r7, #11]
 8004d98:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)config.lora_spreading_factor;
 8004da2:	7abb      	ldrb	r3, [r7, #10]
 8004da4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	SUBGRF_SetModulationParams(&modulationParams);
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fc fa89 	bl	80012c4 <SUBGRF_SetModulationParams>
	 * CRC Mode: Enables cyclic redundancy checking (CRC) to ensure packet integrity
	 * HeaderType: Defines the packet header type as variable length
	 * InvertIQ: Sets the inversion of IQ polarity (normal)
	 * Preamble Length: Used the value from config.lora_preamble_length
	 */
	packetParams.PacketType = PACKET_TYPE_LORA;
 8004db2:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <LoraInit+0xec>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8004db8:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <LoraInit+0xec>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8004dbe:	4b12      	ldr	r3, [pc, #72]	@ (8004e08 <LoraInit+0xec>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8004dc4:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <LoraInit+0xec>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8004dca:	4b0f      	ldr	r3, [pc, #60]	@ (8004e08 <LoraInit+0xec>)
 8004dcc:	22ff      	movs	r2, #255	@ 0xff
 8004dce:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = config.lora_preamble_length;
 8004dd0:	7b3b      	ldrb	r3, [r7, #12]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <LoraInit+0xec>)
 8004dd6:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8004dd8:	480b      	ldr	r0, [pc, #44]	@ (8004e08 <LoraInit+0xec>)
 8004dda:	f7fc fb45 	bl	8001468 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8004dde:	f240 7036 	movw	r0, #1846	@ 0x736
 8004de2:	f7fc fc89 	bl	80016f8 <SUBGRF_ReadRegister>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	4619      	mov	r1, r3
 8004df0:	f240 7036 	movw	r0, #1846	@ 0x736
 8004df4:	f7fc fc6c 	bl	80016d0 <SUBGRF_WriteRegister>
}
 8004df8:	bf00      	nop
 8004dfa:	3730      	adds	r7, #48	@ 0x30
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	08004e0d 	.word	0x08004e0d
 8004e04:	08005d54 	.word	0x08005d54
 8004e08:	20000130 	.word	0x20000130

08004e0c <RadioOnDioIrq>:

#include "LoRaEvents.h"

volatile LoRaIrqStatus lastEventStatus = IRQ_DEFAULT_RETURN_STATUS;

void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	80fb      	strh	r3, [r7, #6]
	lastEventStatus = LoRaEventHandler(radioIrq);
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f80b 	bl	8004e34 <LoRaEventHandler>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <RadioOnDioIrq+0x24>)
 8004e24:	701a      	strb	r2, [r3, #0]
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000009 	.word	0x20000009

08004e34 <LoRaEventHandler>:

LoRaIrqStatus LoRaEventHandler(RadioIrqMasks_t radioIrq) {
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq) {
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e44:	d00f      	beq.n	8004e66 <LoRaEventHandler+0x32>
 8004e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e4a:	dc10      	bgt.n	8004e6e <LoRaEventHandler+0x3a>
 8004e4c:	2b40      	cmp	r3, #64	@ 0x40
 8004e4e:	d00c      	beq.n	8004e6a <LoRaEventHandler+0x36>
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	dc0c      	bgt.n	8004e6e <LoRaEventHandler+0x3a>
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d002      	beq.n	8004e5e <LoRaEventHandler+0x2a>
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d002      	beq.n	8004e62 <LoRaEventHandler+0x2e>
 8004e5c:	e007      	b.n	8004e6e <LoRaEventHandler+0x3a>
        case IRQ_TX_DONE:
            return IRQ_TX_DONE_STATUS;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e006      	b.n	8004e70 <LoRaEventHandler+0x3c>
        case IRQ_RX_DONE:
            return IRQ_RX_DONE_STATUS;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e004      	b.n	8004e70 <LoRaEventHandler+0x3c>
        case IRQ_RX_TX_TIMEOUT:
            return IRQ_RX_TX_TIMEOUT_STATUS;
 8004e66:	2302      	movs	r3, #2
 8004e68:	e002      	b.n	8004e70 <LoRaEventHandler+0x3c>
        case IRQ_CRC_ERROR:
            return IRQ_CRC_ERROR_STATUS;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e000      	b.n	8004e70 <LoRaEventHandler+0x3c>
        default:
            return IRQ_DEFAULT_RETURN_STATUS;
 8004e6e:	2399      	movs	r3, #153	@ 0x99
    }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr
	...

08004e7c <getLastLoRaEvent>:

LoRaIrqStatus getLastLoRaEvent(void) {
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
    return lastEventStatus;
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <getLastLoRaEvent+0x14>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	b2db      	uxtb	r3, r3
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000009 	.word	0x20000009

08004e94 <SendMessage>:

#include "LoRaMessageHandler.h"

#define LORA_MAX_PAYLOAD_SIZE 255

LoRaIrqStatus SendMessage(const char *message) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	if (message == NULL || strlen(message) == 0) {
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <SendMessage+0x16>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <SendMessage+0x1a>
		return IRQ_CRC_ERROR_STATUS;  // Invalid message
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e02f      	b.n	8004f0e <SendMessage+0x7a>
	}

	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f240 2101 	movw	r1, #513	@ 0x201
 8004eb6:	f240 2001 	movw	r0, #513	@ 0x201
 8004eba:	f7fc f86d 	bl	8000f98 <SUBGRF_SetDioIrqParams>
	                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7fc fcd7 	bl	8001874 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8004ec6:	f640 0089 	movw	r0, #2185	@ 0x889
 8004eca:	f7fc fc15 	bl	80016f8 <SUBGRF_ReadRegister>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f640 0089 	movw	r0, #2185	@ 0x889
 8004edc:	f7fc fbf8 	bl	80016d0 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = strlen(message);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fb f94d 	bl	8000180 <strlen>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <SendMessage+0x84>)
 8004eec:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8004eee:	480a      	ldr	r0, [pc, #40]	@ (8004f18 <SendMessage+0x84>)
 8004ef0:	f7fc faba 	bl	8001468 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t *)message, strlen(message), 0);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fb f943 	bl	8000180 <strlen>
 8004efa:	4603      	mov	r3, r0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2200      	movs	r2, #0
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fb fec0 	bl	8000c88 <SUBGRF_SendPayload>

	//while (getLastLoRaEvent() == IRQ_DEFAULT_RETURN_STATUS);
	return getLastLoRaEvent();
 8004f08:	f7ff ffb8 	bl	8004e7c <getLastLoRaEvent>
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000130 	.word	0x20000130

08004f1c <receiveMessage>:

LoRaIrqStatus receiveMessage(char *buffer, uint8_t bufferSize, uint16_t Timeout) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	803b      	strh	r3, [r7, #0]
    if (buffer == NULL || bufferSize == 0) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <receiveMessage+0x1c>
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <receiveMessage+0x20>
        return IRQ_CRC_ERROR_STATUS;  // Invalid buffer
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e027      	b.n	8004f8c <receiveMessage+0x70>
    }

    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f240 2162 	movw	r1, #610	@ 0x262
 8004f44:	f240 2062 	movw	r0, #610	@ 0x262
 8004f48:	f7fc f826 	bl	8000f98 <SUBGRF_SetDioIrqParams>
                           IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE);
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2001      	movs	r0, #1
 8004f50:	f7fc fc90 	bl	8001874 <SUBGRF_SetSwitch>
    SUBGRF_SetRx(Timeout << 6);
 8004f54:	883b      	ldrh	r3, [r7, #0]
 8004f56:	019b      	lsls	r3, r3, #6
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb ff25 	bl	8000da8 <SUBGRF_SetRx>

    LoRaIrqStatus event = getLastLoRaEvent();
 8004f5e:	f7ff ff8d 	bl	8004e7c <getLastLoRaEvent>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]

    if (event == IRQ_RX_DONE_STATUS) {
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d10e      	bne.n	8004f8a <receiveMessage+0x6e>
    	uint8_t rxSize = SUBGRF_GetPayload((uint8_t *)buffer, (uint8_t)bufferSize, 255);
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	22ff      	movs	r2, #255	@ 0xff
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb fe66 	bl	8000c44 <SUBGRF_GetPayload>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	73bb      	strb	r3, [r7, #14]
        buffer[rxSize] = '\0';
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
        return IRQ_RX_DONE_STATUS;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <receiveMessage+0x70>
    }

    return event;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <transitionRxDone>:
#define STATE_MODE 1

extern UART_HandleTypeDef huart2;

void transitionRxDone(ConfigRES *const RES)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b094      	sub	sp, #80	@ 0x50
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  PacketStatus_t packetStatus;
  char uartBuff[50];

  // Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
  SUBGRF_WriteRegister(0x0920, 0x00);
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8004fa2:	f7fc fb95 	bl	80016d0 <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8004fa6:	f640 1044 	movw	r0, #2372	@ 0x944
 8004faa:	f7fc fba5 	bl	80016f8 <SUBGRF_ReadRegister>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f640 1044 	movw	r0, #2372	@ 0x944
 8004fbc:	f7fc fb88 	bl	80016d0 <SUBGRF_WriteRegister>

  SUBGRF_GetPayload((uint8_t *)RES->rxBuffer, &RES->rxSize, 0xFF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f103 000c 	add.w	r0, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004fcc:	22ff      	movs	r2, #255	@ 0xff
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7fb fe38 	bl	8000c44 <SUBGRF_GetPayload>
  SUBGRF_GetPacketStatus(&packetStatus);
 8004fd4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fc fb27 	bl	800162c <SUBGRF_GetPacketStatus>

  sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8004fde:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8004fe8:	f107 0008 	add.w	r0, r7, #8
 8004fec:	490a      	ldr	r1, [pc, #40]	@ (8005018 <transitionRxDone+0x84>)
 8004fee:	f000 f92b 	bl	8005248 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fb f8c2 	bl	8000180 <strlen>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	f107 0108 	add.w	r1, r7, #8
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	4804      	ldr	r0, [pc, #16]	@ (800501c <transitionRxDone+0x88>)
 800500a:	f7ff f8a8 	bl	800415e <HAL_UART_Transmit>
}
 800500e:	bf00      	nop
 8005010:	3750      	adds	r7, #80	@ 0x50
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	08005bdc 	.word	0x08005bdc
 800501c:	20000088 	.word	0x20000088

08005020 <mainLoRa>:

void mainLoRa(void) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b0d6      	sub	sp, #344	@ 0x158
 8005024:	af00      	add	r7, sp, #0
    ConfigRES RES;
    LoraInit(getDefaultLoRaConfig());
 8005026:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fe66 	bl	8004cfc <getDefaultLoRaConfig>
 8005030:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005034:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005038:	f7ff fe70 	bl	8004d1c <LoraInit>
    RES.state = setStateMode(STATE_MODE);
 800503c:	2001      	movs	r0, #1
 800503e:	f7ff fe47 	bl	8004cd0 <setStateMode>
 8005042:	4603      	mov	r3, r0
 8005044:	461a      	mov	r2, r3
 8005046:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800504a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800504e:	701a      	strb	r2, [r3, #0]
    RES.rxTimeout = 3000;
 8005050:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005054:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005058:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800505c:	605a      	str	r2, [r3, #4]
    RES.rxMargin = 200;
 800505e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005062:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005066:	22c8      	movs	r2, #200	@ 0xc8
 8005068:	609a      	str	r2, [r3, #8]

    SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 800506a:	2300      	movs	r3, #0
 800506c:	2200      	movs	r2, #0
 800506e:	f240 2142 	movw	r1, #578	@ 0x242
 8005072:	f240 2042 	movw	r0, #578	@ 0x242
 8005076:	f7fb ff8f 	bl	8000f98 <SUBGRF_SetDioIrqParams>
        IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
        IRQ_RADIO_NONE,
        IRQ_RADIO_NONE );
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800507a:	2100      	movs	r1, #0
 800507c:	2001      	movs	r0, #1
 800507e:	f7fc fbf9 	bl	8001874 <SUBGRF_SetSwitch>
    SUBGRF_SetRx(RES.rxTimeout << 6);
 8005082:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005086:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb fe8a 	bl	8000da8 <SUBGRF_SetRx>

    if (RES.state == STATE_MASTER){
 8005094:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005098:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d13c      	bne.n	800511c <mainLoRa+0xfc>
    	uint8_t result = SendMessage("ping");
 80050a2:	4851      	ldr	r0, [pc, #324]	@ (80051e8 <mainLoRa+0x1c8>)
 80050a4:	f7ff fef6 	bl	8004e94 <SendMessage>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
        switch (result) {
 80050ae:	f897 3156 	ldrb.w	r3, [r7, #342]	@ 0x156
 80050b2:	2b99      	cmp	r3, #153	@ 0x99
 80050b4:	d022      	beq.n	80050fc <mainLoRa+0xdc>
 80050b6:	2b99      	cmp	r3, #153	@ 0x99
 80050b8:	dc28      	bgt.n	800510c <mainLoRa+0xec>
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d016      	beq.n	80050ec <mainLoRa+0xcc>
 80050be:	2b03      	cmp	r3, #3
 80050c0:	dc24      	bgt.n	800510c <mainLoRa+0xec>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <mainLoRa+0xac>
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d008      	beq.n	80050dc <mainLoRa+0xbc>
 80050ca:	e01f      	b.n	800510c <mainLoRa+0xec>
            case IRQ_TX_DONE_STATUS:
                HAL_UART_Transmit(&huart2, (uint8_t *)"TX done\r\n", 18, HAL_MAX_DELAY);
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	2212      	movs	r2, #18
 80050d2:	4946      	ldr	r1, [pc, #280]	@ (80051ec <mainLoRa+0x1cc>)
 80050d4:	4846      	ldr	r0, [pc, #280]	@ (80051f0 <mainLoRa+0x1d0>)
 80050d6:	f7ff f842 	bl	800415e <HAL_UART_Transmit>
                break;
 80050da:	e080      	b.n	80051de <mainLoRa+0x1be>
            case IRQ_RX_TX_TIMEOUT_STATUS:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Timeout\r\n", 18, HAL_MAX_DELAY);
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	2212      	movs	r2, #18
 80050e2:	4944      	ldr	r1, [pc, #272]	@ (80051f4 <mainLoRa+0x1d4>)
 80050e4:	4842      	ldr	r0, [pc, #264]	@ (80051f0 <mainLoRa+0x1d0>)
 80050e6:	f7ff f83a 	bl	800415e <HAL_UART_Transmit>
                break;
 80050ea:	e078      	b.n	80051de <mainLoRa+0x1be>
            case IRQ_CRC_ERROR_STATUS:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Error\r\n", 18, HAL_MAX_DELAY);
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
 80050f0:	2212      	movs	r2, #18
 80050f2:	4941      	ldr	r1, [pc, #260]	@ (80051f8 <mainLoRa+0x1d8>)
 80050f4:	483e      	ldr	r0, [pc, #248]	@ (80051f0 <mainLoRa+0x1d0>)
 80050f6:	f7ff f832 	bl	800415e <HAL_UART_Transmit>
                break;
 80050fa:	e070      	b.n	80051de <mainLoRa+0x1be>
            case IRQ_DEFAULT_RETURN_STATUS:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Return\r\n", 18, HAL_MAX_DELAY);
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005100:	2212      	movs	r2, #18
 8005102:	493e      	ldr	r1, [pc, #248]	@ (80051fc <mainLoRa+0x1dc>)
 8005104:	483a      	ldr	r0, [pc, #232]	@ (80051f0 <mainLoRa+0x1d0>)
 8005106:	f7ff f82a 	bl	800415e <HAL_UART_Transmit>
                break;
 800510a:	e068      	b.n	80051de <mainLoRa+0x1be>
            default:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Master\r\n", 18, HAL_MAX_DELAY);
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
 8005110:	2212      	movs	r2, #18
 8005112:	493b      	ldr	r1, [pc, #236]	@ (8005200 <mainLoRa+0x1e0>)
 8005114:	4836      	ldr	r0, [pc, #216]	@ (80051f0 <mainLoRa+0x1d0>)
 8005116:	f7ff f822 	bl	800415e <HAL_UART_Transmit>
                break;
 800511a:	e060      	b.n	80051de <mainLoRa+0x1be>
        }
    } else if (RES.state == STATE_SLAVE){
 800511c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005120:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d159      	bne.n	80051de <mainLoRa+0x1be>
    	uint8_t result = receiveMessage(RES.rxBuffer, 255, RES.rxTimeout);
 800512a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800512e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	b29a      	uxth	r2, r3
 8005136:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800513a:	330c      	adds	r3, #12
 800513c:	21ff      	movs	r1, #255	@ 0xff
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff feec 	bl	8004f1c <receiveMessage>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
        switch (result) {
 800514a:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800514e:	2b99      	cmp	r3, #153	@ 0x99
 8005150:	d035      	beq.n	80051be <mainLoRa+0x19e>
 8005152:	2b99      	cmp	r3, #153	@ 0x99
 8005154:	dc3b      	bgt.n	80051ce <mainLoRa+0x1ae>
 8005156:	2b03      	cmp	r3, #3
 8005158:	d029      	beq.n	80051ae <mainLoRa+0x18e>
 800515a:	2b03      	cmp	r3, #3
 800515c:	dc37      	bgt.n	80051ce <mainLoRa+0x1ae>
 800515e:	2b01      	cmp	r3, #1
 8005160:	d002      	beq.n	8005168 <mainLoRa+0x148>
 8005162:	2b02      	cmp	r3, #2
 8005164:	d01b      	beq.n	800519e <mainLoRa+0x17e>
 8005166:	e032      	b.n	80051ce <mainLoRa+0x1ae>
            case IRQ_RX_DONE_STATUS:
            	transitionRxDone(&RES);
 8005168:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff ff11 	bl	8004f94 <transitionRxDone>
                char msg[50];
                sprintf(msg, "TX done: %c\r\n", RES.rxBuffer);
 8005172:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005176:	f103 020c 	add.w	r2, r3, #12
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	4921      	ldr	r1, [pc, #132]	@ (8005204 <mainLoRa+0x1e4>)
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f862 	bl	8005248 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f7fa fffa 	bl	8000180 <strlen>
 800518c:	4603      	mov	r3, r0
 800518e:	b29a      	uxth	r2, r3
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	4816      	ldr	r0, [pc, #88]	@ (80051f0 <mainLoRa+0x1d0>)
 8005198:	f7fe ffe1 	bl	800415e <HAL_UART_Transmit>
                break;
 800519c:	e01f      	b.n	80051de <mainLoRa+0x1be>
            case IRQ_RX_TX_TIMEOUT_STATUS:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Timeout\r\n", 18, HAL_MAX_DELAY);
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	2212      	movs	r2, #18
 80051a4:	4918      	ldr	r1, [pc, #96]	@ (8005208 <mainLoRa+0x1e8>)
 80051a6:	4812      	ldr	r0, [pc, #72]	@ (80051f0 <mainLoRa+0x1d0>)
 80051a8:	f7fe ffd9 	bl	800415e <HAL_UART_Transmit>
                break;
 80051ac:	e017      	b.n	80051de <mainLoRa+0x1be>
            case IRQ_CRC_ERROR_STATUS:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Error\r\n", 18, HAL_MAX_DELAY);
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	2212      	movs	r2, #18
 80051b4:	4910      	ldr	r1, [pc, #64]	@ (80051f8 <mainLoRa+0x1d8>)
 80051b6:	480e      	ldr	r0, [pc, #56]	@ (80051f0 <mainLoRa+0x1d0>)
 80051b8:	f7fe ffd1 	bl	800415e <HAL_UART_Transmit>
                break;
 80051bc:	e00f      	b.n	80051de <mainLoRa+0x1be>
            case IRQ_DEFAULT_RETURN_STATUS:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Return\r\n", 18, HAL_MAX_DELAY);
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	2212      	movs	r2, #18
 80051c4:	490d      	ldr	r1, [pc, #52]	@ (80051fc <mainLoRa+0x1dc>)
 80051c6:	480a      	ldr	r0, [pc, #40]	@ (80051f0 <mainLoRa+0x1d0>)
 80051c8:	f7fe ffc9 	bl	800415e <HAL_UART_Transmit>
                break;
 80051cc:	e007      	b.n	80051de <mainLoRa+0x1be>
            default:
                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Slave\r\n", 18, HAL_MAX_DELAY);
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	2212      	movs	r2, #18
 80051d4:	490d      	ldr	r1, [pc, #52]	@ (800520c <mainLoRa+0x1ec>)
 80051d6:	4806      	ldr	r0, [pc, #24]	@ (80051f0 <mainLoRa+0x1d0>)
 80051d8:	f7fe ffc1 	bl	800415e <HAL_UART_Transmit>
                break;
 80051dc:	bf00      	nop
        }
    }
}
 80051de:	bf00      	nop
 80051e0:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	08005c00 	.word	0x08005c00
 80051ec:	08005c08 	.word	0x08005c08
 80051f0:	20000088 	.word	0x20000088
 80051f4:	08005c14 	.word	0x08005c14
 80051f8:	08005c28 	.word	0x08005c28
 80051fc:	08005c30 	.word	0x08005c30
 8005200:	08005c44 	.word	0x08005c44
 8005204:	08005c58 	.word	0x08005c58
 8005208:	08005c68 	.word	0x08005c68
 800520c:	08005c7c 	.word	0x08005c7c

08005210 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
 800521c:	4613      	mov	r3, r2
 800521e:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8005224:	e004      	b.n	8005230 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	60fa      	str	r2, [r7, #12]
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8005230:	883b      	ldrh	r3, [r7, #0]
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	803a      	strh	r2, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f5      	bne.n	8005226 <UTIL_MEM_set_8+0x16>
  }
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr
	...

08005248 <siprintf>:
 8005248:	b40e      	push	{r1, r2, r3}
 800524a:	b500      	push	{lr}
 800524c:	b09c      	sub	sp, #112	@ 0x70
 800524e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005250:	9002      	str	r0, [sp, #8]
 8005252:	9006      	str	r0, [sp, #24]
 8005254:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005258:	4809      	ldr	r0, [pc, #36]	@ (8005280 <siprintf+0x38>)
 800525a:	9107      	str	r1, [sp, #28]
 800525c:	9104      	str	r1, [sp, #16]
 800525e:	4909      	ldr	r1, [pc, #36]	@ (8005284 <siprintf+0x3c>)
 8005260:	f853 2b04 	ldr.w	r2, [r3], #4
 8005264:	9105      	str	r1, [sp, #20]
 8005266:	6800      	ldr	r0, [r0, #0]
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	a902      	add	r1, sp, #8
 800526c:	f000 f994 	bl	8005598 <_svfiprintf_r>
 8005270:	9b02      	ldr	r3, [sp, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	b01c      	add	sp, #112	@ 0x70
 8005278:	f85d eb04 	ldr.w	lr, [sp], #4
 800527c:	b003      	add	sp, #12
 800527e:	4770      	bx	lr
 8005280:	2000000c 	.word	0x2000000c
 8005284:	ffff0208 	.word	0xffff0208

08005288 <memset>:
 8005288:	4402      	add	r2, r0
 800528a:	4603      	mov	r3, r0
 800528c:	4293      	cmp	r3, r2
 800528e:	d100      	bne.n	8005292 <memset+0xa>
 8005290:	4770      	bx	lr
 8005292:	f803 1b01 	strb.w	r1, [r3], #1
 8005296:	e7f9      	b.n	800528c <memset+0x4>

08005298 <__errno>:
 8005298:	4b01      	ldr	r3, [pc, #4]	@ (80052a0 <__errno+0x8>)
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	2000000c 	.word	0x2000000c

080052a4 <__libc_init_array>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4d0d      	ldr	r5, [pc, #52]	@ (80052dc <__libc_init_array+0x38>)
 80052a8:	4c0d      	ldr	r4, [pc, #52]	@ (80052e0 <__libc_init_array+0x3c>)
 80052aa:	1b64      	subs	r4, r4, r5
 80052ac:	10a4      	asrs	r4, r4, #2
 80052ae:	2600      	movs	r6, #0
 80052b0:	42a6      	cmp	r6, r4
 80052b2:	d109      	bne.n	80052c8 <__libc_init_array+0x24>
 80052b4:	4d0b      	ldr	r5, [pc, #44]	@ (80052e4 <__libc_init_array+0x40>)
 80052b6:	4c0c      	ldr	r4, [pc, #48]	@ (80052e8 <__libc_init_array+0x44>)
 80052b8:	f000 fc66 	bl	8005b88 <_init>
 80052bc:	1b64      	subs	r4, r4, r5
 80052be:	10a4      	asrs	r4, r4, #2
 80052c0:	2600      	movs	r6, #0
 80052c2:	42a6      	cmp	r6, r4
 80052c4:	d105      	bne.n	80052d2 <__libc_init_array+0x2e>
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052cc:	4798      	blx	r3
 80052ce:	3601      	adds	r6, #1
 80052d0:	e7ee      	b.n	80052b0 <__libc_init_array+0xc>
 80052d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d6:	4798      	blx	r3
 80052d8:	3601      	adds	r6, #1
 80052da:	e7f2      	b.n	80052c2 <__libc_init_array+0x1e>
 80052dc:	08005d94 	.word	0x08005d94
 80052e0:	08005d94 	.word	0x08005d94
 80052e4:	08005d94 	.word	0x08005d94
 80052e8:	08005d98 	.word	0x08005d98

080052ec <__retarget_lock_acquire_recursive>:
 80052ec:	4770      	bx	lr

080052ee <__retarget_lock_release_recursive>:
 80052ee:	4770      	bx	lr

080052f0 <_free_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4605      	mov	r5, r0
 80052f4:	2900      	cmp	r1, #0
 80052f6:	d041      	beq.n	800537c <_free_r+0x8c>
 80052f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fc:	1f0c      	subs	r4, r1, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfb8      	it	lt
 8005302:	18e4      	addlt	r4, r4, r3
 8005304:	f000 f8e0 	bl	80054c8 <__malloc_lock>
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <_free_r+0x90>)
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	b933      	cbnz	r3, 800531c <_free_r+0x2c>
 800530e:	6063      	str	r3, [r4, #4]
 8005310:	6014      	str	r4, [r2, #0]
 8005312:	4628      	mov	r0, r5
 8005314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005318:	f000 b8dc 	b.w	80054d4 <__malloc_unlock>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d908      	bls.n	8005332 <_free_r+0x42>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	1821      	adds	r1, r4, r0
 8005324:	428b      	cmp	r3, r1
 8005326:	bf01      	itttt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	1809      	addeq	r1, r1, r0
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	e7ed      	b.n	800530e <_free_r+0x1e>
 8005332:	461a      	mov	r2, r3
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b10b      	cbz	r3, 800533c <_free_r+0x4c>
 8005338:	42a3      	cmp	r3, r4
 800533a:	d9fa      	bls.n	8005332 <_free_r+0x42>
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	1850      	adds	r0, r2, r1
 8005340:	42a0      	cmp	r0, r4
 8005342:	d10b      	bne.n	800535c <_free_r+0x6c>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	4401      	add	r1, r0
 8005348:	1850      	adds	r0, r2, r1
 800534a:	4283      	cmp	r3, r0
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	d1e0      	bne.n	8005312 <_free_r+0x22>
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	6053      	str	r3, [r2, #4]
 8005356:	4408      	add	r0, r1
 8005358:	6010      	str	r0, [r2, #0]
 800535a:	e7da      	b.n	8005312 <_free_r+0x22>
 800535c:	d902      	bls.n	8005364 <_free_r+0x74>
 800535e:	230c      	movs	r3, #12
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	e7d6      	b.n	8005312 <_free_r+0x22>
 8005364:	6820      	ldr	r0, [r4, #0]
 8005366:	1821      	adds	r1, r4, r0
 8005368:	428b      	cmp	r3, r1
 800536a:	bf04      	itt	eq
 800536c:	6819      	ldreq	r1, [r3, #0]
 800536e:	685b      	ldreq	r3, [r3, #4]
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	bf04      	itt	eq
 8005374:	1809      	addeq	r1, r1, r0
 8005376:	6021      	streq	r1, [r4, #0]
 8005378:	6054      	str	r4, [r2, #4]
 800537a:	e7ca      	b.n	8005312 <_free_r+0x22>
 800537c:	bd38      	pop	{r3, r4, r5, pc}
 800537e:	bf00      	nop
 8005380:	20000288 	.word	0x20000288

08005384 <sbrk_aligned>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4e0f      	ldr	r6, [pc, #60]	@ (80053c4 <sbrk_aligned+0x40>)
 8005388:	460c      	mov	r4, r1
 800538a:	6831      	ldr	r1, [r6, #0]
 800538c:	4605      	mov	r5, r0
 800538e:	b911      	cbnz	r1, 8005396 <sbrk_aligned+0x12>
 8005390:	f000 fba6 	bl	8005ae0 <_sbrk_r>
 8005394:	6030      	str	r0, [r6, #0]
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 fba1 	bl	8005ae0 <_sbrk_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d103      	bne.n	80053aa <sbrk_aligned+0x26>
 80053a2:	f04f 34ff 	mov.w	r4, #4294967295
 80053a6:	4620      	mov	r0, r4
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	1cc4      	adds	r4, r0, #3
 80053ac:	f024 0403 	bic.w	r4, r4, #3
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d0f8      	beq.n	80053a6 <sbrk_aligned+0x22>
 80053b4:	1a21      	subs	r1, r4, r0
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 fb92 	bl	8005ae0 <_sbrk_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	d1f2      	bne.n	80053a6 <sbrk_aligned+0x22>
 80053c0:	e7ef      	b.n	80053a2 <sbrk_aligned+0x1e>
 80053c2:	bf00      	nop
 80053c4:	20000284 	.word	0x20000284

080053c8 <_malloc_r>:
 80053c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053cc:	1ccd      	adds	r5, r1, #3
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	3508      	adds	r5, #8
 80053d4:	2d0c      	cmp	r5, #12
 80053d6:	bf38      	it	cc
 80053d8:	250c      	movcc	r5, #12
 80053da:	2d00      	cmp	r5, #0
 80053dc:	4606      	mov	r6, r0
 80053de:	db01      	blt.n	80053e4 <_malloc_r+0x1c>
 80053e0:	42a9      	cmp	r1, r5
 80053e2:	d904      	bls.n	80053ee <_malloc_r+0x26>
 80053e4:	230c      	movs	r3, #12
 80053e6:	6033      	str	r3, [r6, #0]
 80053e8:	2000      	movs	r0, #0
 80053ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054c4 <_malloc_r+0xfc>
 80053f2:	f000 f869 	bl	80054c8 <__malloc_lock>
 80053f6:	f8d8 3000 	ldr.w	r3, [r8]
 80053fa:	461c      	mov	r4, r3
 80053fc:	bb44      	cbnz	r4, 8005450 <_malloc_r+0x88>
 80053fe:	4629      	mov	r1, r5
 8005400:	4630      	mov	r0, r6
 8005402:	f7ff ffbf 	bl	8005384 <sbrk_aligned>
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	4604      	mov	r4, r0
 800540a:	d158      	bne.n	80054be <_malloc_r+0xf6>
 800540c:	f8d8 4000 	ldr.w	r4, [r8]
 8005410:	4627      	mov	r7, r4
 8005412:	2f00      	cmp	r7, #0
 8005414:	d143      	bne.n	800549e <_malloc_r+0xd6>
 8005416:	2c00      	cmp	r4, #0
 8005418:	d04b      	beq.n	80054b2 <_malloc_r+0xea>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	4639      	mov	r1, r7
 800541e:	4630      	mov	r0, r6
 8005420:	eb04 0903 	add.w	r9, r4, r3
 8005424:	f000 fb5c 	bl	8005ae0 <_sbrk_r>
 8005428:	4581      	cmp	r9, r0
 800542a:	d142      	bne.n	80054b2 <_malloc_r+0xea>
 800542c:	6821      	ldr	r1, [r4, #0]
 800542e:	1a6d      	subs	r5, r5, r1
 8005430:	4629      	mov	r1, r5
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff ffa6 	bl	8005384 <sbrk_aligned>
 8005438:	3001      	adds	r0, #1
 800543a:	d03a      	beq.n	80054b2 <_malloc_r+0xea>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	442b      	add	r3, r5
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	f8d8 3000 	ldr.w	r3, [r8]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	bb62      	cbnz	r2, 80054a4 <_malloc_r+0xdc>
 800544a:	f8c8 7000 	str.w	r7, [r8]
 800544e:	e00f      	b.n	8005470 <_malloc_r+0xa8>
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	1b52      	subs	r2, r2, r5
 8005454:	d420      	bmi.n	8005498 <_malloc_r+0xd0>
 8005456:	2a0b      	cmp	r2, #11
 8005458:	d917      	bls.n	800548a <_malloc_r+0xc2>
 800545a:	1961      	adds	r1, r4, r5
 800545c:	42a3      	cmp	r3, r4
 800545e:	6025      	str	r5, [r4, #0]
 8005460:	bf18      	it	ne
 8005462:	6059      	strne	r1, [r3, #4]
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	bf08      	it	eq
 8005468:	f8c8 1000 	streq.w	r1, [r8]
 800546c:	5162      	str	r2, [r4, r5]
 800546e:	604b      	str	r3, [r1, #4]
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f82f 	bl	80054d4 <__malloc_unlock>
 8005476:	f104 000b 	add.w	r0, r4, #11
 800547a:	1d23      	adds	r3, r4, #4
 800547c:	f020 0007 	bic.w	r0, r0, #7
 8005480:	1ac2      	subs	r2, r0, r3
 8005482:	bf1c      	itt	ne
 8005484:	1a1b      	subne	r3, r3, r0
 8005486:	50a3      	strne	r3, [r4, r2]
 8005488:	e7af      	b.n	80053ea <_malloc_r+0x22>
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	42a3      	cmp	r3, r4
 800548e:	bf0c      	ite	eq
 8005490:	f8c8 2000 	streq.w	r2, [r8]
 8005494:	605a      	strne	r2, [r3, #4]
 8005496:	e7eb      	b.n	8005470 <_malloc_r+0xa8>
 8005498:	4623      	mov	r3, r4
 800549a:	6864      	ldr	r4, [r4, #4]
 800549c:	e7ae      	b.n	80053fc <_malloc_r+0x34>
 800549e:	463c      	mov	r4, r7
 80054a0:	687f      	ldr	r7, [r7, #4]
 80054a2:	e7b6      	b.n	8005412 <_malloc_r+0x4a>
 80054a4:	461a      	mov	r2, r3
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	d1fb      	bne.n	80054a4 <_malloc_r+0xdc>
 80054ac:	2300      	movs	r3, #0
 80054ae:	6053      	str	r3, [r2, #4]
 80054b0:	e7de      	b.n	8005470 <_malloc_r+0xa8>
 80054b2:	230c      	movs	r3, #12
 80054b4:	6033      	str	r3, [r6, #0]
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 f80c 	bl	80054d4 <__malloc_unlock>
 80054bc:	e794      	b.n	80053e8 <_malloc_r+0x20>
 80054be:	6005      	str	r5, [r0, #0]
 80054c0:	e7d6      	b.n	8005470 <_malloc_r+0xa8>
 80054c2:	bf00      	nop
 80054c4:	20000288 	.word	0x20000288

080054c8 <__malloc_lock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	@ (80054d0 <__malloc_lock+0x8>)
 80054ca:	f7ff bf0f 	b.w	80052ec <__retarget_lock_acquire_recursive>
 80054ce:	bf00      	nop
 80054d0:	20000280 	.word	0x20000280

080054d4 <__malloc_unlock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	@ (80054dc <__malloc_unlock+0x8>)
 80054d6:	f7ff bf0a 	b.w	80052ee <__retarget_lock_release_recursive>
 80054da:	bf00      	nop
 80054dc:	20000280 	.word	0x20000280

080054e0 <__ssputs_r>:
 80054e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	688e      	ldr	r6, [r1, #8]
 80054e6:	461f      	mov	r7, r3
 80054e8:	42be      	cmp	r6, r7
 80054ea:	680b      	ldr	r3, [r1, #0]
 80054ec:	4682      	mov	sl, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	4690      	mov	r8, r2
 80054f2:	d82d      	bhi.n	8005550 <__ssputs_r+0x70>
 80054f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054fc:	d026      	beq.n	800554c <__ssputs_r+0x6c>
 80054fe:	6965      	ldr	r5, [r4, #20]
 8005500:	6909      	ldr	r1, [r1, #16]
 8005502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005506:	eba3 0901 	sub.w	r9, r3, r1
 800550a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800550e:	1c7b      	adds	r3, r7, #1
 8005510:	444b      	add	r3, r9
 8005512:	106d      	asrs	r5, r5, #1
 8005514:	429d      	cmp	r5, r3
 8005516:	bf38      	it	cc
 8005518:	461d      	movcc	r5, r3
 800551a:	0553      	lsls	r3, r2, #21
 800551c:	d527      	bpl.n	800556e <__ssputs_r+0x8e>
 800551e:	4629      	mov	r1, r5
 8005520:	f7ff ff52 	bl	80053c8 <_malloc_r>
 8005524:	4606      	mov	r6, r0
 8005526:	b360      	cbz	r0, 8005582 <__ssputs_r+0xa2>
 8005528:	6921      	ldr	r1, [r4, #16]
 800552a:	464a      	mov	r2, r9
 800552c:	f000 fae8 	bl	8005b00 <memcpy>
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	6126      	str	r6, [r4, #16]
 800553e:	6165      	str	r5, [r4, #20]
 8005540:	444e      	add	r6, r9
 8005542:	eba5 0509 	sub.w	r5, r5, r9
 8005546:	6026      	str	r6, [r4, #0]
 8005548:	60a5      	str	r5, [r4, #8]
 800554a:	463e      	mov	r6, r7
 800554c:	42be      	cmp	r6, r7
 800554e:	d900      	bls.n	8005552 <__ssputs_r+0x72>
 8005550:	463e      	mov	r6, r7
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	4632      	mov	r2, r6
 8005556:	4641      	mov	r1, r8
 8005558:	f000 faa8 	bl	8005aac <memmove>
 800555c:	68a3      	ldr	r3, [r4, #8]
 800555e:	1b9b      	subs	r3, r3, r6
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	4433      	add	r3, r6
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	2000      	movs	r0, #0
 800556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556e:	462a      	mov	r2, r5
 8005570:	f000 fad4 	bl	8005b1c <_realloc_r>
 8005574:	4606      	mov	r6, r0
 8005576:	2800      	cmp	r0, #0
 8005578:	d1e0      	bne.n	800553c <__ssputs_r+0x5c>
 800557a:	6921      	ldr	r1, [r4, #16]
 800557c:	4650      	mov	r0, sl
 800557e:	f7ff feb7 	bl	80052f0 <_free_r>
 8005582:	230c      	movs	r3, #12
 8005584:	f8ca 3000 	str.w	r3, [sl]
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	e7e9      	b.n	800556a <__ssputs_r+0x8a>
	...

08005598 <_svfiprintf_r>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	4698      	mov	r8, r3
 800559e:	898b      	ldrh	r3, [r1, #12]
 80055a0:	061b      	lsls	r3, r3, #24
 80055a2:	b09d      	sub	sp, #116	@ 0x74
 80055a4:	4607      	mov	r7, r0
 80055a6:	460d      	mov	r5, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	d510      	bpl.n	80055ce <_svfiprintf_r+0x36>
 80055ac:	690b      	ldr	r3, [r1, #16]
 80055ae:	b973      	cbnz	r3, 80055ce <_svfiprintf_r+0x36>
 80055b0:	2140      	movs	r1, #64	@ 0x40
 80055b2:	f7ff ff09 	bl	80053c8 <_malloc_r>
 80055b6:	6028      	str	r0, [r5, #0]
 80055b8:	6128      	str	r0, [r5, #16]
 80055ba:	b930      	cbnz	r0, 80055ca <_svfiprintf_r+0x32>
 80055bc:	230c      	movs	r3, #12
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	b01d      	add	sp, #116	@ 0x74
 80055c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ca:	2340      	movs	r3, #64	@ 0x40
 80055cc:	616b      	str	r3, [r5, #20]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d2:	2320      	movs	r3, #32
 80055d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80055dc:	2330      	movs	r3, #48	@ 0x30
 80055de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800577c <_svfiprintf_r+0x1e4>
 80055e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055e6:	f04f 0901 	mov.w	r9, #1
 80055ea:	4623      	mov	r3, r4
 80055ec:	469a      	mov	sl, r3
 80055ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055f2:	b10a      	cbz	r2, 80055f8 <_svfiprintf_r+0x60>
 80055f4:	2a25      	cmp	r2, #37	@ 0x25
 80055f6:	d1f9      	bne.n	80055ec <_svfiprintf_r+0x54>
 80055f8:	ebba 0b04 	subs.w	fp, sl, r4
 80055fc:	d00b      	beq.n	8005616 <_svfiprintf_r+0x7e>
 80055fe:	465b      	mov	r3, fp
 8005600:	4622      	mov	r2, r4
 8005602:	4629      	mov	r1, r5
 8005604:	4638      	mov	r0, r7
 8005606:	f7ff ff6b 	bl	80054e0 <__ssputs_r>
 800560a:	3001      	adds	r0, #1
 800560c:	f000 80a7 	beq.w	800575e <_svfiprintf_r+0x1c6>
 8005610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005612:	445a      	add	r2, fp
 8005614:	9209      	str	r2, [sp, #36]	@ 0x24
 8005616:	f89a 3000 	ldrb.w	r3, [sl]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 809f 	beq.w	800575e <_svfiprintf_r+0x1c6>
 8005620:	2300      	movs	r3, #0
 8005622:	f04f 32ff 	mov.w	r2, #4294967295
 8005626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800562a:	f10a 0a01 	add.w	sl, sl, #1
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005636:	931a      	str	r3, [sp, #104]	@ 0x68
 8005638:	4654      	mov	r4, sl
 800563a:	2205      	movs	r2, #5
 800563c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005640:	484e      	ldr	r0, [pc, #312]	@ (800577c <_svfiprintf_r+0x1e4>)
 8005642:	f7fa fda5 	bl	8000190 <memchr>
 8005646:	9a04      	ldr	r2, [sp, #16]
 8005648:	b9d8      	cbnz	r0, 8005682 <_svfiprintf_r+0xea>
 800564a:	06d0      	lsls	r0, r2, #27
 800564c:	bf44      	itt	mi
 800564e:	2320      	movmi	r3, #32
 8005650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005654:	0711      	lsls	r1, r2, #28
 8005656:	bf44      	itt	mi
 8005658:	232b      	movmi	r3, #43	@ 0x2b
 800565a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800565e:	f89a 3000 	ldrb.w	r3, [sl]
 8005662:	2b2a      	cmp	r3, #42	@ 0x2a
 8005664:	d015      	beq.n	8005692 <_svfiprintf_r+0xfa>
 8005666:	9a07      	ldr	r2, [sp, #28]
 8005668:	4654      	mov	r4, sl
 800566a:	2000      	movs	r0, #0
 800566c:	f04f 0c0a 	mov.w	ip, #10
 8005670:	4621      	mov	r1, r4
 8005672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005676:	3b30      	subs	r3, #48	@ 0x30
 8005678:	2b09      	cmp	r3, #9
 800567a:	d94b      	bls.n	8005714 <_svfiprintf_r+0x17c>
 800567c:	b1b0      	cbz	r0, 80056ac <_svfiprintf_r+0x114>
 800567e:	9207      	str	r2, [sp, #28]
 8005680:	e014      	b.n	80056ac <_svfiprintf_r+0x114>
 8005682:	eba0 0308 	sub.w	r3, r0, r8
 8005686:	fa09 f303 	lsl.w	r3, r9, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	46a2      	mov	sl, r4
 8005690:	e7d2      	b.n	8005638 <_svfiprintf_r+0xa0>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	1d19      	adds	r1, r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	9103      	str	r1, [sp, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	bfbb      	ittet	lt
 800569e:	425b      	neglt	r3, r3
 80056a0:	f042 0202 	orrlt.w	r2, r2, #2
 80056a4:	9307      	strge	r3, [sp, #28]
 80056a6:	9307      	strlt	r3, [sp, #28]
 80056a8:	bfb8      	it	lt
 80056aa:	9204      	strlt	r2, [sp, #16]
 80056ac:	7823      	ldrb	r3, [r4, #0]
 80056ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80056b0:	d10a      	bne.n	80056c8 <_svfiprintf_r+0x130>
 80056b2:	7863      	ldrb	r3, [r4, #1]
 80056b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80056b6:	d132      	bne.n	800571e <_svfiprintf_r+0x186>
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	1d1a      	adds	r2, r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	9203      	str	r2, [sp, #12]
 80056c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056c4:	3402      	adds	r4, #2
 80056c6:	9305      	str	r3, [sp, #20]
 80056c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005780 <_svfiprintf_r+0x1e8>
 80056cc:	7821      	ldrb	r1, [r4, #0]
 80056ce:	2203      	movs	r2, #3
 80056d0:	4650      	mov	r0, sl
 80056d2:	f7fa fd5d 	bl	8000190 <memchr>
 80056d6:	b138      	cbz	r0, 80056e8 <_svfiprintf_r+0x150>
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	eba0 000a 	sub.w	r0, r0, sl
 80056de:	2240      	movs	r2, #64	@ 0x40
 80056e0:	4082      	lsls	r2, r0
 80056e2:	4313      	orrs	r3, r2
 80056e4:	3401      	adds	r4, #1
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ec:	4825      	ldr	r0, [pc, #148]	@ (8005784 <_svfiprintf_r+0x1ec>)
 80056ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056f2:	2206      	movs	r2, #6
 80056f4:	f7fa fd4c 	bl	8000190 <memchr>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d036      	beq.n	800576a <_svfiprintf_r+0x1d2>
 80056fc:	4b22      	ldr	r3, [pc, #136]	@ (8005788 <_svfiprintf_r+0x1f0>)
 80056fe:	bb1b      	cbnz	r3, 8005748 <_svfiprintf_r+0x1b0>
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	3307      	adds	r3, #7
 8005704:	f023 0307 	bic.w	r3, r3, #7
 8005708:	3308      	adds	r3, #8
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570e:	4433      	add	r3, r6
 8005710:	9309      	str	r3, [sp, #36]	@ 0x24
 8005712:	e76a      	b.n	80055ea <_svfiprintf_r+0x52>
 8005714:	fb0c 3202 	mla	r2, ip, r2, r3
 8005718:	460c      	mov	r4, r1
 800571a:	2001      	movs	r0, #1
 800571c:	e7a8      	b.n	8005670 <_svfiprintf_r+0xd8>
 800571e:	2300      	movs	r3, #0
 8005720:	3401      	adds	r4, #1
 8005722:	9305      	str	r3, [sp, #20]
 8005724:	4619      	mov	r1, r3
 8005726:	f04f 0c0a 	mov.w	ip, #10
 800572a:	4620      	mov	r0, r4
 800572c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005730:	3a30      	subs	r2, #48	@ 0x30
 8005732:	2a09      	cmp	r2, #9
 8005734:	d903      	bls.n	800573e <_svfiprintf_r+0x1a6>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0c6      	beq.n	80056c8 <_svfiprintf_r+0x130>
 800573a:	9105      	str	r1, [sp, #20]
 800573c:	e7c4      	b.n	80056c8 <_svfiprintf_r+0x130>
 800573e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005742:	4604      	mov	r4, r0
 8005744:	2301      	movs	r3, #1
 8005746:	e7f0      	b.n	800572a <_svfiprintf_r+0x192>
 8005748:	ab03      	add	r3, sp, #12
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	462a      	mov	r2, r5
 800574e:	4b0f      	ldr	r3, [pc, #60]	@ (800578c <_svfiprintf_r+0x1f4>)
 8005750:	a904      	add	r1, sp, #16
 8005752:	4638      	mov	r0, r7
 8005754:	f3af 8000 	nop.w
 8005758:	1c42      	adds	r2, r0, #1
 800575a:	4606      	mov	r6, r0
 800575c:	d1d6      	bne.n	800570c <_svfiprintf_r+0x174>
 800575e:	89ab      	ldrh	r3, [r5, #12]
 8005760:	065b      	lsls	r3, r3, #25
 8005762:	f53f af2d 	bmi.w	80055c0 <_svfiprintf_r+0x28>
 8005766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005768:	e72c      	b.n	80055c4 <_svfiprintf_r+0x2c>
 800576a:	ab03      	add	r3, sp, #12
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	462a      	mov	r2, r5
 8005770:	4b06      	ldr	r3, [pc, #24]	@ (800578c <_svfiprintf_r+0x1f4>)
 8005772:	a904      	add	r1, sp, #16
 8005774:	4638      	mov	r0, r7
 8005776:	f000 f879 	bl	800586c <_printf_i>
 800577a:	e7ed      	b.n	8005758 <_svfiprintf_r+0x1c0>
 800577c:	08005d57 	.word	0x08005d57
 8005780:	08005d5d 	.word	0x08005d5d
 8005784:	08005d61 	.word	0x08005d61
 8005788:	00000000 	.word	0x00000000
 800578c:	080054e1 	.word	0x080054e1

08005790 <_printf_common>:
 8005790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005794:	4616      	mov	r6, r2
 8005796:	4698      	mov	r8, r3
 8005798:	688a      	ldr	r2, [r1, #8]
 800579a:	690b      	ldr	r3, [r1, #16]
 800579c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057a0:	4293      	cmp	r3, r2
 80057a2:	bfb8      	it	lt
 80057a4:	4613      	movlt	r3, r2
 80057a6:	6033      	str	r3, [r6, #0]
 80057a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057ac:	4607      	mov	r7, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	b10a      	cbz	r2, 80057b6 <_printf_common+0x26>
 80057b2:	3301      	adds	r3, #1
 80057b4:	6033      	str	r3, [r6, #0]
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	0699      	lsls	r1, r3, #26
 80057ba:	bf42      	ittt	mi
 80057bc:	6833      	ldrmi	r3, [r6, #0]
 80057be:	3302      	addmi	r3, #2
 80057c0:	6033      	strmi	r3, [r6, #0]
 80057c2:	6825      	ldr	r5, [r4, #0]
 80057c4:	f015 0506 	ands.w	r5, r5, #6
 80057c8:	d106      	bne.n	80057d8 <_printf_common+0x48>
 80057ca:	f104 0a19 	add.w	sl, r4, #25
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	6832      	ldr	r2, [r6, #0]
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	42ab      	cmp	r3, r5
 80057d6:	dc26      	bgt.n	8005826 <_printf_common+0x96>
 80057d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	3b00      	subs	r3, #0
 80057e0:	bf18      	it	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	0692      	lsls	r2, r2, #26
 80057e6:	d42b      	bmi.n	8005840 <_printf_common+0xb0>
 80057e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057ec:	4641      	mov	r1, r8
 80057ee:	4638      	mov	r0, r7
 80057f0:	47c8      	blx	r9
 80057f2:	3001      	adds	r0, #1
 80057f4:	d01e      	beq.n	8005834 <_printf_common+0xa4>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	6922      	ldr	r2, [r4, #16]
 80057fa:	f003 0306 	and.w	r3, r3, #6
 80057fe:	2b04      	cmp	r3, #4
 8005800:	bf02      	ittt	eq
 8005802:	68e5      	ldreq	r5, [r4, #12]
 8005804:	6833      	ldreq	r3, [r6, #0]
 8005806:	1aed      	subeq	r5, r5, r3
 8005808:	68a3      	ldr	r3, [r4, #8]
 800580a:	bf0c      	ite	eq
 800580c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005810:	2500      	movne	r5, #0
 8005812:	4293      	cmp	r3, r2
 8005814:	bfc4      	itt	gt
 8005816:	1a9b      	subgt	r3, r3, r2
 8005818:	18ed      	addgt	r5, r5, r3
 800581a:	2600      	movs	r6, #0
 800581c:	341a      	adds	r4, #26
 800581e:	42b5      	cmp	r5, r6
 8005820:	d11a      	bne.n	8005858 <_printf_common+0xc8>
 8005822:	2000      	movs	r0, #0
 8005824:	e008      	b.n	8005838 <_printf_common+0xa8>
 8005826:	2301      	movs	r3, #1
 8005828:	4652      	mov	r2, sl
 800582a:	4641      	mov	r1, r8
 800582c:	4638      	mov	r0, r7
 800582e:	47c8      	blx	r9
 8005830:	3001      	adds	r0, #1
 8005832:	d103      	bne.n	800583c <_printf_common+0xac>
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583c:	3501      	adds	r5, #1
 800583e:	e7c6      	b.n	80057ce <_printf_common+0x3e>
 8005840:	18e1      	adds	r1, r4, r3
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	2030      	movs	r0, #48	@ 0x30
 8005846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800584a:	4422      	add	r2, r4
 800584c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005854:	3302      	adds	r3, #2
 8005856:	e7c7      	b.n	80057e8 <_printf_common+0x58>
 8005858:	2301      	movs	r3, #1
 800585a:	4622      	mov	r2, r4
 800585c:	4641      	mov	r1, r8
 800585e:	4638      	mov	r0, r7
 8005860:	47c8      	blx	r9
 8005862:	3001      	adds	r0, #1
 8005864:	d0e6      	beq.n	8005834 <_printf_common+0xa4>
 8005866:	3601      	adds	r6, #1
 8005868:	e7d9      	b.n	800581e <_printf_common+0x8e>
	...

0800586c <_printf_i>:
 800586c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	7e0f      	ldrb	r7, [r1, #24]
 8005872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005874:	2f78      	cmp	r7, #120	@ 0x78
 8005876:	4691      	mov	r9, r2
 8005878:	4680      	mov	r8, r0
 800587a:	460c      	mov	r4, r1
 800587c:	469a      	mov	sl, r3
 800587e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005882:	d807      	bhi.n	8005894 <_printf_i+0x28>
 8005884:	2f62      	cmp	r7, #98	@ 0x62
 8005886:	d80a      	bhi.n	800589e <_printf_i+0x32>
 8005888:	2f00      	cmp	r7, #0
 800588a:	f000 80d2 	beq.w	8005a32 <_printf_i+0x1c6>
 800588e:	2f58      	cmp	r7, #88	@ 0x58
 8005890:	f000 80b9 	beq.w	8005a06 <_printf_i+0x19a>
 8005894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800589c:	e03a      	b.n	8005914 <_printf_i+0xa8>
 800589e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058a2:	2b15      	cmp	r3, #21
 80058a4:	d8f6      	bhi.n	8005894 <_printf_i+0x28>
 80058a6:	a101      	add	r1, pc, #4	@ (adr r1, 80058ac <_printf_i+0x40>)
 80058a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058ac:	08005905 	.word	0x08005905
 80058b0:	08005919 	.word	0x08005919
 80058b4:	08005895 	.word	0x08005895
 80058b8:	08005895 	.word	0x08005895
 80058bc:	08005895 	.word	0x08005895
 80058c0:	08005895 	.word	0x08005895
 80058c4:	08005919 	.word	0x08005919
 80058c8:	08005895 	.word	0x08005895
 80058cc:	08005895 	.word	0x08005895
 80058d0:	08005895 	.word	0x08005895
 80058d4:	08005895 	.word	0x08005895
 80058d8:	08005a19 	.word	0x08005a19
 80058dc:	08005943 	.word	0x08005943
 80058e0:	080059d3 	.word	0x080059d3
 80058e4:	08005895 	.word	0x08005895
 80058e8:	08005895 	.word	0x08005895
 80058ec:	08005a3b 	.word	0x08005a3b
 80058f0:	08005895 	.word	0x08005895
 80058f4:	08005943 	.word	0x08005943
 80058f8:	08005895 	.word	0x08005895
 80058fc:	08005895 	.word	0x08005895
 8005900:	080059db 	.word	0x080059db
 8005904:	6833      	ldr	r3, [r6, #0]
 8005906:	1d1a      	adds	r2, r3, #4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6032      	str	r2, [r6, #0]
 800590c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005914:	2301      	movs	r3, #1
 8005916:	e09d      	b.n	8005a54 <_printf_i+0x1e8>
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	6820      	ldr	r0, [r4, #0]
 800591c:	1d19      	adds	r1, r3, #4
 800591e:	6031      	str	r1, [r6, #0]
 8005920:	0606      	lsls	r6, r0, #24
 8005922:	d501      	bpl.n	8005928 <_printf_i+0xbc>
 8005924:	681d      	ldr	r5, [r3, #0]
 8005926:	e003      	b.n	8005930 <_printf_i+0xc4>
 8005928:	0645      	lsls	r5, r0, #25
 800592a:	d5fb      	bpl.n	8005924 <_printf_i+0xb8>
 800592c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005930:	2d00      	cmp	r5, #0
 8005932:	da03      	bge.n	800593c <_printf_i+0xd0>
 8005934:	232d      	movs	r3, #45	@ 0x2d
 8005936:	426d      	negs	r5, r5
 8005938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800593c:	4859      	ldr	r0, [pc, #356]	@ (8005aa4 <_printf_i+0x238>)
 800593e:	230a      	movs	r3, #10
 8005940:	e011      	b.n	8005966 <_printf_i+0xfa>
 8005942:	6821      	ldr	r1, [r4, #0]
 8005944:	6833      	ldr	r3, [r6, #0]
 8005946:	0608      	lsls	r0, r1, #24
 8005948:	f853 5b04 	ldr.w	r5, [r3], #4
 800594c:	d402      	bmi.n	8005954 <_printf_i+0xe8>
 800594e:	0649      	lsls	r1, r1, #25
 8005950:	bf48      	it	mi
 8005952:	b2ad      	uxthmi	r5, r5
 8005954:	2f6f      	cmp	r7, #111	@ 0x6f
 8005956:	4853      	ldr	r0, [pc, #332]	@ (8005aa4 <_printf_i+0x238>)
 8005958:	6033      	str	r3, [r6, #0]
 800595a:	bf14      	ite	ne
 800595c:	230a      	movne	r3, #10
 800595e:	2308      	moveq	r3, #8
 8005960:	2100      	movs	r1, #0
 8005962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005966:	6866      	ldr	r6, [r4, #4]
 8005968:	60a6      	str	r6, [r4, #8]
 800596a:	2e00      	cmp	r6, #0
 800596c:	bfa2      	ittt	ge
 800596e:	6821      	ldrge	r1, [r4, #0]
 8005970:	f021 0104 	bicge.w	r1, r1, #4
 8005974:	6021      	strge	r1, [r4, #0]
 8005976:	b90d      	cbnz	r5, 800597c <_printf_i+0x110>
 8005978:	2e00      	cmp	r6, #0
 800597a:	d04b      	beq.n	8005a14 <_printf_i+0x1a8>
 800597c:	4616      	mov	r6, r2
 800597e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005982:	fb03 5711 	mls	r7, r3, r1, r5
 8005986:	5dc7      	ldrb	r7, [r0, r7]
 8005988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800598c:	462f      	mov	r7, r5
 800598e:	42bb      	cmp	r3, r7
 8005990:	460d      	mov	r5, r1
 8005992:	d9f4      	bls.n	800597e <_printf_i+0x112>
 8005994:	2b08      	cmp	r3, #8
 8005996:	d10b      	bne.n	80059b0 <_printf_i+0x144>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	07df      	lsls	r7, r3, #31
 800599c:	d508      	bpl.n	80059b0 <_printf_i+0x144>
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	6861      	ldr	r1, [r4, #4]
 80059a2:	4299      	cmp	r1, r3
 80059a4:	bfde      	ittt	le
 80059a6:	2330      	movle	r3, #48	@ 0x30
 80059a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059b0:	1b92      	subs	r2, r2, r6
 80059b2:	6122      	str	r2, [r4, #16]
 80059b4:	f8cd a000 	str.w	sl, [sp]
 80059b8:	464b      	mov	r3, r9
 80059ba:	aa03      	add	r2, sp, #12
 80059bc:	4621      	mov	r1, r4
 80059be:	4640      	mov	r0, r8
 80059c0:	f7ff fee6 	bl	8005790 <_printf_common>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d14a      	bne.n	8005a5e <_printf_i+0x1f2>
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	b004      	add	sp, #16
 80059ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f043 0320 	orr.w	r3, r3, #32
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	4833      	ldr	r0, [pc, #204]	@ (8005aa8 <_printf_i+0x23c>)
 80059dc:	2778      	movs	r7, #120	@ 0x78
 80059de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	6831      	ldr	r1, [r6, #0]
 80059e6:	061f      	lsls	r7, r3, #24
 80059e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80059ec:	d402      	bmi.n	80059f4 <_printf_i+0x188>
 80059ee:	065f      	lsls	r7, r3, #25
 80059f0:	bf48      	it	mi
 80059f2:	b2ad      	uxthmi	r5, r5
 80059f4:	6031      	str	r1, [r6, #0]
 80059f6:	07d9      	lsls	r1, r3, #31
 80059f8:	bf44      	itt	mi
 80059fa:	f043 0320 	orrmi.w	r3, r3, #32
 80059fe:	6023      	strmi	r3, [r4, #0]
 8005a00:	b11d      	cbz	r5, 8005a0a <_printf_i+0x19e>
 8005a02:	2310      	movs	r3, #16
 8005a04:	e7ac      	b.n	8005960 <_printf_i+0xf4>
 8005a06:	4827      	ldr	r0, [pc, #156]	@ (8005aa4 <_printf_i+0x238>)
 8005a08:	e7e9      	b.n	80059de <_printf_i+0x172>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f023 0320 	bic.w	r3, r3, #32
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	e7f6      	b.n	8005a02 <_printf_i+0x196>
 8005a14:	4616      	mov	r6, r2
 8005a16:	e7bd      	b.n	8005994 <_printf_i+0x128>
 8005a18:	6833      	ldr	r3, [r6, #0]
 8005a1a:	6825      	ldr	r5, [r4, #0]
 8005a1c:	6961      	ldr	r1, [r4, #20]
 8005a1e:	1d18      	adds	r0, r3, #4
 8005a20:	6030      	str	r0, [r6, #0]
 8005a22:	062e      	lsls	r6, r5, #24
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	d501      	bpl.n	8005a2c <_printf_i+0x1c0>
 8005a28:	6019      	str	r1, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <_printf_i+0x1c6>
 8005a2c:	0668      	lsls	r0, r5, #25
 8005a2e:	d5fb      	bpl.n	8005a28 <_printf_i+0x1bc>
 8005a30:	8019      	strh	r1, [r3, #0]
 8005a32:	2300      	movs	r3, #0
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	4616      	mov	r6, r2
 8005a38:	e7bc      	b.n	80059b4 <_printf_i+0x148>
 8005a3a:	6833      	ldr	r3, [r6, #0]
 8005a3c:	1d1a      	adds	r2, r3, #4
 8005a3e:	6032      	str	r2, [r6, #0]
 8005a40:	681e      	ldr	r6, [r3, #0]
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	2100      	movs	r1, #0
 8005a46:	4630      	mov	r0, r6
 8005a48:	f7fa fba2 	bl	8000190 <memchr>
 8005a4c:	b108      	cbz	r0, 8005a52 <_printf_i+0x1e6>
 8005a4e:	1b80      	subs	r0, r0, r6
 8005a50:	6060      	str	r0, [r4, #4]
 8005a52:	6863      	ldr	r3, [r4, #4]
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	2300      	movs	r3, #0
 8005a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a5c:	e7aa      	b.n	80059b4 <_printf_i+0x148>
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	4632      	mov	r2, r6
 8005a62:	4649      	mov	r1, r9
 8005a64:	4640      	mov	r0, r8
 8005a66:	47d0      	blx	sl
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d0ad      	beq.n	80059c8 <_printf_i+0x15c>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	079b      	lsls	r3, r3, #30
 8005a70:	d413      	bmi.n	8005a9a <_printf_i+0x22e>
 8005a72:	68e0      	ldr	r0, [r4, #12]
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	4298      	cmp	r0, r3
 8005a78:	bfb8      	it	lt
 8005a7a:	4618      	movlt	r0, r3
 8005a7c:	e7a6      	b.n	80059cc <_printf_i+0x160>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4632      	mov	r2, r6
 8005a82:	4649      	mov	r1, r9
 8005a84:	4640      	mov	r0, r8
 8005a86:	47d0      	blx	sl
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d09d      	beq.n	80059c8 <_printf_i+0x15c>
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	68e3      	ldr	r3, [r4, #12]
 8005a90:	9903      	ldr	r1, [sp, #12]
 8005a92:	1a5b      	subs	r3, r3, r1
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	dcf2      	bgt.n	8005a7e <_printf_i+0x212>
 8005a98:	e7eb      	b.n	8005a72 <_printf_i+0x206>
 8005a9a:	2500      	movs	r5, #0
 8005a9c:	f104 0619 	add.w	r6, r4, #25
 8005aa0:	e7f5      	b.n	8005a8e <_printf_i+0x222>
 8005aa2:	bf00      	nop
 8005aa4:	08005d68 	.word	0x08005d68
 8005aa8:	08005d79 	.word	0x08005d79

08005aac <memmove>:
 8005aac:	4288      	cmp	r0, r1
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	eb01 0402 	add.w	r4, r1, r2
 8005ab4:	d902      	bls.n	8005abc <memmove+0x10>
 8005ab6:	4284      	cmp	r4, r0
 8005ab8:	4623      	mov	r3, r4
 8005aba:	d807      	bhi.n	8005acc <memmove+0x20>
 8005abc:	1e43      	subs	r3, r0, #1
 8005abe:	42a1      	cmp	r1, r4
 8005ac0:	d008      	beq.n	8005ad4 <memmove+0x28>
 8005ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aca:	e7f8      	b.n	8005abe <memmove+0x12>
 8005acc:	4402      	add	r2, r0
 8005ace:	4601      	mov	r1, r0
 8005ad0:	428a      	cmp	r2, r1
 8005ad2:	d100      	bne.n	8005ad6 <memmove+0x2a>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ade:	e7f7      	b.n	8005ad0 <memmove+0x24>

08005ae0 <_sbrk_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4d06      	ldr	r5, [pc, #24]	@ (8005afc <_sbrk_r+0x1c>)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	f7fa fe18 	bl	8000720 <_sbrk>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_sbrk_r+0x1a>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_sbrk_r+0x1a>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	2000027c 	.word	0x2000027c

08005b00 <memcpy>:
 8005b00:	440a      	add	r2, r1
 8005b02:	4291      	cmp	r1, r2
 8005b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b08:	d100      	bne.n	8005b0c <memcpy+0xc>
 8005b0a:	4770      	bx	lr
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b16:	4291      	cmp	r1, r2
 8005b18:	d1f9      	bne.n	8005b0e <memcpy+0xe>
 8005b1a:	bd10      	pop	{r4, pc}

08005b1c <_realloc_r>:
 8005b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b20:	4680      	mov	r8, r0
 8005b22:	4615      	mov	r5, r2
 8005b24:	460c      	mov	r4, r1
 8005b26:	b921      	cbnz	r1, 8005b32 <_realloc_r+0x16>
 8005b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	f7ff bc4b 	b.w	80053c8 <_malloc_r>
 8005b32:	b92a      	cbnz	r2, 8005b40 <_realloc_r+0x24>
 8005b34:	f7ff fbdc 	bl	80052f0 <_free_r>
 8005b38:	2400      	movs	r4, #0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	f000 f81a 	bl	8005b78 <_malloc_usable_size_r>
 8005b44:	4285      	cmp	r5, r0
 8005b46:	4606      	mov	r6, r0
 8005b48:	d802      	bhi.n	8005b50 <_realloc_r+0x34>
 8005b4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b4e:	d8f4      	bhi.n	8005b3a <_realloc_r+0x1e>
 8005b50:	4629      	mov	r1, r5
 8005b52:	4640      	mov	r0, r8
 8005b54:	f7ff fc38 	bl	80053c8 <_malloc_r>
 8005b58:	4607      	mov	r7, r0
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d0ec      	beq.n	8005b38 <_realloc_r+0x1c>
 8005b5e:	42b5      	cmp	r5, r6
 8005b60:	462a      	mov	r2, r5
 8005b62:	4621      	mov	r1, r4
 8005b64:	bf28      	it	cs
 8005b66:	4632      	movcs	r2, r6
 8005b68:	f7ff ffca 	bl	8005b00 <memcpy>
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f7ff fbbe 	bl	80052f0 <_free_r>
 8005b74:	463c      	mov	r4, r7
 8005b76:	e7e0      	b.n	8005b3a <_realloc_r+0x1e>

08005b78 <_malloc_usable_size_r>:
 8005b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7c:	1f18      	subs	r0, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfbc      	itt	lt
 8005b82:	580b      	ldrlt	r3, [r1, r0]
 8005b84:	18c0      	addlt	r0, r0, r3
 8005b86:	4770      	bx	lr

08005b88 <_init>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr

08005b94 <_fini>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr
