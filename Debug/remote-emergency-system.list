
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005948  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c70  08005c70  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c78  08005c78  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005c80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000005c  08005cdc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005cdc  00007284  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014287  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003567  00000000  00000000  0001b30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0001e878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f66  00000000  00000000  0001fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001edbf  00000000  00000000  00020c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c39  00000000  00000000  0003fa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b61db  00000000  00000000  0005665e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c839  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c4  00000000  00000000  0010c87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00112040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000005c 	.word	0x2000005c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005a70 	.word	0x08005a70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000060 	.word	0x20000060
 800017c:	08005a70 	.word	0x08005a70

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffe3 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}

0800055e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 fa53 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f809 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f7ff fff1 	bl	8000550 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 800056e:	f000 f8b1 	bl	80006d4 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f941 	bl	80007f8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    mainLoRa();
 8000576:	f004 fce7 	bl	8004f48 <mainLoRa>
 800057a:	e7fc      	b.n	8000576 <main+0x18>

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09a      	sub	sp, #104	@ 0x68
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2248      	movs	r2, #72	@ 0x48
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fdf0 	bl	8005170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <SystemClock_Config+0xa0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005aa:	4a1c      	ldr	r2, [pc, #112]	@ (800061c <SystemClock_Config+0xa0>)
 80005ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	4b1a      	ldr	r3, [pc, #104]	@ (800061c <SystemClock_Config+0xa0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005be:	2320      	movs	r3, #32
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005ca:	23b0      	movs	r3, #176	@ 0xb0
 80005cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f808 	bl	80025ec <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005e2:	f000 f81d 	bl	8000620 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005e6:	234f      	movs	r3, #79	@ 0x4f
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fb74 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060e:	f000 f807 	bl	8000620 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3768      	adds	r7, #104	@ 0x68
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	58000400 	.word	0x58000400

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <NMI_Handler+0x4>

08000640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <MemManage_Handler+0x4>

08000650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <UsageFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f001 fa1a 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000696:	f003 fb21 	bl	8003cdc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078

080006a4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80006ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80006b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c8:	68fb      	ldr	r3, [r7, #12]
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SUBGHZ_Init+0x20>)
 80006da:	2210      	movs	r2, #16
 80006dc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_SUBGHZ_Init+0x20>)
 80006e0:	f003 f87a 	bl	80037d8 <HAL_SUBGHZ_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80006ea:	f7ff ff99 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000078 	.word	0x20000078

080006f8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ffcf 	bl	80006a4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2032      	movs	r0, #50	@ 0x32
 800070c:	f001 faef 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000710:	2032      	movs	r0, #50	@ 0x32
 8000712:	f001 fb06 	bl	8001d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000728:	4a14      	ldr	r2, [pc, #80]	@ (800077c <_sbrk+0x5c>)
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <_sbrk+0x60>)
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <_sbrk+0x64>)
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <_sbrk+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d207      	bcs.n	8000760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000750:	f004 fd16 	bl	8005180 <__errno>
 8000754:	4603      	mov	r3, r0
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e009      	b.n	8000774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <_sbrk+0x64>)
 8000770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20010000 	.word	0x20010000
 8000780:	00000400 	.word	0x00000400
 8000784:	20000084 	.word	0x20000084
 8000788:	20000288 	.word	0x20000288

0800078c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <LL_AHB2_GRP1_EnableClock>:
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007bc:	68fb      	ldr	r3, [r7, #12]
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <LL_APB1_GRP1_EnableClock>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ec:	68fb      	ldr	r3, [r7, #12]
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 80007fe:	4a23      	ldr	r2, [pc, #140]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000840:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000842:	f003 fc0e 	bl	8004062 <HAL_UART_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800084c:	f7ff fee8 	bl	8000620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000854:	f004 f945 	bl	8004ae2 <HAL_UARTEx_SetTxFifoThreshold>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800085e:	f7ff fedf 	bl	8000620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000866:	f004 f97a 	bl	8004b5e <HAL_UARTEx_SetRxFifoThreshold>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000870:	f7ff fed6 	bl	8000620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000876:	f004 f8fc 	bl	8004a72 <HAL_UARTEx_DisableFifoMode>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000880:	f7ff fece 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000088 	.word	0x20000088
 800088c:	40004400 	.word	0x40004400

08000890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b096      	sub	sp, #88	@ 0x58
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2238      	movs	r2, #56	@ 0x38
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 fc5d 	bl	8005170 <memset>
  if(uartHandle->Instance==USART2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d126      	bne.n	800090e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c4:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80008c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fdce 	bl	8003470 <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008da:	f7ff fea1 	bl	8000620 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80008e2:	f7ff ff71 	bl	80007c8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff56 	bl	8000798 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80008ec:	230c      	movs	r3, #12
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fc:	2307      	movs	r3, #7
 80008fe:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f001 fa25 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800090e:	bf00      	nop
 8000910:	3758      	adds	r7, #88	@ 0x58
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400

0800091c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800091c:	480d      	ldr	r0, [pc, #52]	@ (8000954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000920:	f7ff ff34 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	@ (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	@ (8000960 <LoopForever+0xe>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	@ (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094a:	f004 fc1f 	bl	800518c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fe06 	bl	800055e <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   r0, =_estack
 8000954:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000960:	08005c80 	.word	0x08005c80
  ldr r2, =_sbss
 8000964:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000968:	20000284 	.word	0x20000284

0800096c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>

0800096e <LL_AHB2_GRP1_EnableClock>:
{
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800097c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4313      	orrs	r3, r2
 8000984:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80009b4:	2004      	movs	r0, #4
 80009b6:	f7ff ffda 	bl	800096e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80009ba:	2310      	movs	r3, #16
 80009bc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009d0:	f001 f9c2 	bl	8001d58 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80009d4:	2320      	movs	r3, #32
 80009d6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009de:	f001 f9bb 	bl	8001d58 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80009e2:	2308      	movs	r3, #8
 80009e4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009ec:	f001 f9b4 	bl	8001d58 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80009f0:	2200      	movs	r2, #0
 80009f2:	2120      	movs	r1, #32
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 80009f6:	f001 fb0f 	bl	8002018 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80009fa:	2200      	movs	r2, #0
 80009fc:	2110      	movs	r1, #16
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 8000a00:	f001 fb0a 	bl	8002018 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000a04:	2200      	movs	r2, #0
 8000a06:	2108      	movs	r1, #8
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <BSP_RADIO_Init+0x78>)
 8000a0a:	f001 fb05 	bl	8002018 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	48000800 	.word	0x48000800

08000a1c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d84b      	bhi.n	8000ac4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a34 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000a45 	.word	0x08000a45
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	08000a85 	.word	0x08000a85
 8000a40:	08000aa5 	.word	0x08000aa5
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2108      	movs	r1, #8
 8000a48:	4821      	ldr	r0, [pc, #132]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a4a:	f001 fae5 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2110      	movs	r1, #16
 8000a52:	481f      	ldr	r0, [pc, #124]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a54:	f001 fae0 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	481c      	ldr	r0, [pc, #112]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a5e:	f001 fadb 	bl	8002018 <HAL_GPIO_WritePin>
      break;      
 8000a62:	e030      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a6a:	f001 fad5 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2110      	movs	r1, #16
 8000a72:	4817      	ldr	r0, [pc, #92]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a74:	f001 fad0 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a7e:	f001 facb 	bl	8002018 <HAL_GPIO_WritePin>
      break;
 8000a82:	e020      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2108      	movs	r1, #8
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a8a:	f001 fac5 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2110      	movs	r1, #16
 8000a92:	480f      	ldr	r0, [pc, #60]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a94:	f001 fac0 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000a9e:	f001 fabb 	bl	8002018 <HAL_GPIO_WritePin>
      break;
 8000aa2:	e010      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000aaa:	f001 fab5 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000ab4:	f001 fab0 	bl	8002018 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2120      	movs	r1, #32
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000abe:	f001 faab 	bl	8002018 <HAL_GPIO_WritePin>
      break;
 8000ac2:	e000      	b.n	8000ac6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000ac4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	48000800 	.word	0x48000800

08000ad4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e001      	b.n	8000b18 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8000b14:	2316      	movs	r3, #22
 8000b16:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000b18:	68fb      	ldr	r3, [r7, #12]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8000b28:	f7ff ff3a 	bl	80009a0 <BSP_RADIO_Init>
 8000b2c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff6c 	bl	8000a1c <BSP_RADIO_ConfigRFSwitch>
 8000b44:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8000b52:	f7ff ffbf 	bl	8000ad4 <BSP_RADIO_GetTxConfig>
 8000b56:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8000b60:	f7ff ffbf 	bl	8000ae2 <BSP_RADIO_IsTCXO>
 8000b64:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8000b6e:	f7ff ffbf 	bl	8000af0 <BSP_RADIO_IsDCDC>
 8000b72:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ffba 	bl	8000afe <BSP_RADIO_GetRFOMaxPowerConfig>
 8000b8a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8000ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <SUBGRF_Init+0x84>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8000ba8:	f7ff fd94 	bl	80006d4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f000 ff0b 	bl	80019c8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <SUBGRF_Init+0x88>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f8b9 	bl	8000d30 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8000bbe:	f7ff ffcd 	bl	8000b5c <RBI_IsTCXO>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d10e      	bne.n	8000be6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 fa1e 	bl	800100c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f640 1011 	movw	r0, #2321	@ 0x911
 8000bd6:	f000 fd29 	bl	800162c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8000bda:	237f      	movs	r3, #127	@ 0x7f
 8000bdc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8000bde:	7b38      	ldrb	r0, [r7, #12]
 8000be0:	f000 f928 	bl	8000e34 <SUBGRF_Calibrate>
 8000be4:	e009      	b.n	8000bfa <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000be6:	2120      	movs	r1, #32
 8000be8:	f640 1011 	movw	r0, #2321	@ 0x911
 8000bec:	f000 fd1e 	bl	800162c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	f640 1012 	movw	r0, #2322	@ 0x912
 8000bf6:	f000 fd19 	bl	800162c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8000bfa:	210e      	movs	r1, #14
 8000bfc:	f640 101f 	movw	r0, #2335	@ 0x91f
 8000c00:	f000 fd14 	bl	800162c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8000c04:	f7ff ff8e 	bl	8000b24 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <SUBGRF_Init+0x8c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000120 	.word	0x20000120
 8000c1c:	2000011f 	.word	0x2000011f
 8000c20:	2000011c 	.word	0x2000011c

08000c24 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	461a      	mov	r2, r3
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 fd42 	bl	80016c0 <SUBGRF_WriteBuffer>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8000c56:	f107 0317 	add.w	r3, r7, #23
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f000 fcb9 	bl	80015d4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d201      	bcs.n	8000c70 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e007      	b.n	8000c80 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8000c70:	7df8      	ldrb	r0, [r7, #23]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	f000 fd43 	bl	8001704 <SUBGRF_ReadBuffer>

    return 0;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8000c96:	7afb      	ldrb	r3, [r7, #11]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff ffc2 	bl	8000c24 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f861 	bl	8000d68 <SUBGRF_SetTx>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000cc8:	f000 fa24 	bl	8001114 <SUBGRF_GetPacketType>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d108      	bne.n	8000ce4 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8000cde:	f000 fccd 	bl	800167c <SUBGRF_WriteRegisters>
            break;
 8000ce2:	e000      	b.n	8000ce6 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8000ce4:	bf00      	nop
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000d08:	f000 fa04 	bl	8001114 <SUBGRF_GetPacketType>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d108      	bne.n	8000d24 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	2202      	movs	r2, #2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f240 60be 	movw	r0, #1726	@ 0x6be
 8000d1e:	f000 fcad 	bl	800167c <SUBGRF_WriteRegisters>
            break;
 8000d22:	e000      	b.n	8000d26 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8000d24:	bf00      	nop
    }
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2080      	movs	r0, #128	@ 0x80
 8000d42:	f000 fd01 	bl	8001748 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d103      	bne.n	8000d54 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SUBGRF_SetStandby+0x34>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8000d52:	e002      	b.n	8000d5a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <SUBGRF_SetStandby+0x34>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000011c 	.word	0x2000011c

08000d68 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <SUBGRF_SetTx+0x3c>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2203      	movs	r2, #3
 8000d92:	4619      	mov	r1, r3
 8000d94:	2083      	movs	r0, #131	@ 0x83
 8000d96:	f000 fcd7 	bl	8001748 <SUBGRF_WriteCommand>
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000011c 	.word	0x2000011c

08000da8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <SUBGRF_SetRx+0x3c>)
 8000db2:	2205      	movs	r2, #5
 8000db4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0c1b      	lsrs	r3, r3, #16
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	2082      	movs	r0, #130	@ 0x82
 8000dd6:	f000 fcb7 	bl	8001748 <SUBGRF_WriteCommand>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000011c 	.word	0x2000011c

08000de8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	209f      	movs	r0, #159	@ 0x9f
 8000dfa:	f000 fca5 	bl	8001748 <SUBGRF_WriteCommand>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8000e0c:	f7ff fead 	bl	8000b6a <RBI_IsDCDC>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	2201      	movs	r2, #1
 8000e24:	4619      	mov	r1, r3
 8000e26:	2096      	movs	r0, #150	@ 0x96
 8000e28:	f000 fc8e 	bl	8001748 <SUBGRF_WriteCommand>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000e3c:	793b      	ldrb	r3, [r7, #4]
 8000e3e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000e68:	793b      	ldrb	r3, [r7, #4]
 8000e6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000e88:	793b      	ldrb	r3, [r7, #4]
 8000e8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8000e98:	793b      	ldrb	r3, [r7, #4]
 8000e9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000ea8:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8000eaa:	f107 030f 	add.w	r3, r7, #15
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2089      	movs	r0, #137	@ 0x89
 8000eb4:	f000 fc48 	bl	8001748 <SUBGRF_WriteCommand>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <SUBGRF_CalibrateImage+0x80>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d904      	bls.n	8000eda <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8000ed0:	23e1      	movs	r3, #225	@ 0xe1
 8000ed2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8000ed4:	23e9      	movs	r3, #233	@ 0xe9
 8000ed6:	737b      	strb	r3, [r7, #13]
 8000ed8:	e027      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <SUBGRF_CalibrateImage+0x84>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d904      	bls.n	8000eec <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8000ee2:	23d7      	movs	r3, #215	@ 0xd7
 8000ee4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8000ee6:	23db      	movs	r3, #219	@ 0xdb
 8000ee8:	737b      	strb	r3, [r7, #13]
 8000eea:	e01e      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <SUBGRF_CalibrateImage+0x88>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d904      	bls.n	8000efe <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8000ef4:	23c1      	movs	r3, #193	@ 0xc1
 8000ef6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8000ef8:	23c5      	movs	r3, #197	@ 0xc5
 8000efa:	737b      	strb	r3, [r7, #13]
 8000efc:	e015      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <SUBGRF_CalibrateImage+0x8c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d904      	bls.n	8000f10 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8000f06:	2375      	movs	r3, #117	@ 0x75
 8000f08:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8000f0a:	2381      	movs	r3, #129	@ 0x81
 8000f0c:	737b      	strb	r3, [r7, #13]
 8000f0e:	e00c      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <SUBGRF_CalibrateImage+0x90>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d904      	bls.n	8000f22 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8000f18:	236b      	movs	r3, #107	@ 0x6b
 8000f1a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8000f1c:	236f      	movs	r3, #111	@ 0x6f
 8000f1e:	737b      	strb	r3, [r7, #13]
 8000f20:	e003      	b.n	8000f2a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8000f22:	2329      	movs	r3, #41	@ 0x29
 8000f24:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8000f26:	232b      	movs	r3, #43	@ 0x2b
 8000f28:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4619      	mov	r1, r3
 8000f32:	2098      	movs	r0, #152	@ 0x98
 8000f34:	f000 fc08 	bl	8001748 <SUBGRF_WriteCommand>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	35a4e900 	.word	0x35a4e900
 8000f44:	32a9f880 	.word	0x32a9f880
 8000f48:	2de54480 	.word	0x2de54480
 8000f4c:	1b6b0b00 	.word	0x1b6b0b00
 8000f50:	1954fc40 	.word	0x1954fc40

08000f54 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	4611      	mov	r1, r2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4623      	mov	r3, r4
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	4603      	mov	r3, r0
 8000f68:	71bb      	strb	r3, [r7, #6]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	717b      	strb	r3, [r7, #5]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2204      	movs	r2, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2095      	movs	r0, #149	@ 0x95
 8000f8c:	f000 fbdc 	bl	8001748 <SUBGRF_WriteCommand>
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd90      	pop	{r4, r7, pc}

08000f98 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	4603      	mov	r3, r0
 8000fac:	80bb      	strh	r3, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	807b      	strh	r3, [r7, #2]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8000fe6:	883b      	ldrh	r3, [r7, #0]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8000ff0:	883b      	ldrh	r3, [r7, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2008      	movs	r0, #8
 8001000:	f000 fba2 	bl	8001748 <SUBGRF_WriteCommand>
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	b2db      	uxtb	r3, r3
 8001028:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b2db      	uxtb	r3, r3
 8001030:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2204      	movs	r2, #4
 800103e:	4619      	mov	r1, r3
 8001040:	2097      	movs	r0, #151	@ 0x97
 8001042:	f000 fb81 	bl	8001748 <SUBGRF_WriteCommand>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800105e:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <SUBGRF_SetRfFrequency+0x84>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff27 	bl	8000ec0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <SUBGRF_SetRfFrequency+0x84>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	461c      	mov	r4, r3
 800107e:	4615      	mov	r5, r2
 8001080:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001084:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <SUBGRF_SetRfFrequency+0x88>)
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	4640      	mov	r0, r8
 8001090:	4649      	mov	r1, r9
 8001092:	f7ff f8cd 	bl	8000230 <__aeabi_uldivmod>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4613      	mov	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	0e1b      	lsrs	r3, r3, #24
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	2204      	movs	r2, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	2086      	movs	r0, #134	@ 0x86
 80010c6:	f000 fb3f 	bl	8001748 <SUBGRF_WriteCommand>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010d4:	2000011f 	.word	0x2000011f
 80010d8:	01e84800 	.word	0x01e84800

080010dc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <SUBGRF_SetPacketType+0x34>)
 80010ea:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80010f2:	2100      	movs	r1, #0
 80010f4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80010f8:	f000 fa98 	bl	800162c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	208a      	movs	r0, #138	@ 0x8a
 8001104:	f000 fb20 	bl	8001748 <SUBGRF_WriteCommand>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000011d 	.word	0x2000011d

08001114 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    return PacketType;
 8001118:	4b02      	ldr	r3, [pc, #8]	@ (8001124 <SUBGRF_GetPacketType+0x10>)
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	2000011d 	.word	0x2000011d

08001128 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	460b      	mov	r3, r1
 8001134:	71bb      	strb	r3, [r7, #6]
 8001136:	4613      	mov	r3, r2
 8001138:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d149      	bne.n	80011d4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fd19 	bl	8000b78 <RBI_GetRFOMaxPowerConfig>
 8001146:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001148:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	429a      	cmp	r2, r3
 8001150:	da01      	bge.n	8001156 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b0e      	cmp	r3, #14
 800115a:	d10e      	bne.n	800117a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800115c:	2301      	movs	r3, #1
 800115e:	2201      	movs	r2, #1
 8001160:	2100      	movs	r1, #0
 8001162:	2004      	movs	r0, #4
 8001164:	f7ff fef6 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	330e      	adds	r3, #14
 8001174:	b2db      	uxtb	r3, r3
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	e01f      	b.n	80011ba <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	d10e      	bne.n	800119e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001180:	2301      	movs	r3, #1
 8001182:	2201      	movs	r2, #1
 8001184:	2100      	movs	r1, #0
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff fee4 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800118c:	79ba      	ldrb	r2, [r7, #6]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	330d      	adds	r3, #13
 8001198:	b2db      	uxtb	r3, r3
 800119a:	71bb      	strb	r3, [r7, #6]
 800119c:	e00d      	b.n	80011ba <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800119e:	2301      	movs	r3, #1
 80011a0:	2201      	movs	r2, #1
 80011a2:	2100      	movs	r1, #0
 80011a4:	2007      	movs	r0, #7
 80011a6:	f7ff fed5 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80011aa:	79ba      	ldrb	r2, [r7, #6]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	330e      	adds	r3, #14
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80011ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011be:	f113 0f11 	cmn.w	r3, #17
 80011c2:	da01      	bge.n	80011c8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80011c4:	23ef      	movs	r3, #239	@ 0xef
 80011c6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80011c8:	2118      	movs	r1, #24
 80011ca:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80011ce:	f000 fa2d 	bl	800162c <SUBGRF_WriteRegister>
 80011d2:	e067      	b.n	80012a4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80011d4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80011d8:	f000 fa3c 	bl	8001654 <SUBGRF_ReadRegister>
 80011dc:	4603      	mov	r3, r0
 80011de:	f043 031e 	orr.w	r3, r3, #30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4619      	mov	r1, r3
 80011e6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80011ea:	f000 fa1f 	bl	800162c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fcc2 	bl	8000b78 <RBI_GetRFOMaxPowerConfig>
 80011f4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80011f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	da01      	bge.n	8001204 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b14      	cmp	r3, #20
 8001208:	d10e      	bne.n	8001228 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800120a:	2301      	movs	r3, #1
 800120c:	2200      	movs	r2, #0
 800120e:	2105      	movs	r1, #5
 8001210:	2003      	movs	r0, #3
 8001212:	f7ff fe9f 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001216:	79ba      	ldrb	r2, [r7, #6]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3316      	adds	r3, #22
 8001222:	b2db      	uxtb	r3, r3
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	e031      	b.n	800128c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b11      	cmp	r3, #17
 800122c:	d10e      	bne.n	800124c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2103      	movs	r1, #3
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff fe8d 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3316      	adds	r3, #22
 8001246:	b2db      	uxtb	r3, r3
 8001248:	71bb      	strb	r3, [r7, #6]
 800124a:	e01f      	b.n	800128c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b0e      	cmp	r3, #14
 8001250:	d10e      	bne.n	8001270 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001252:	2301      	movs	r3, #1
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff fe7b 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800125e:	79ba      	ldrb	r2, [r7, #6]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	330e      	adds	r3, #14
 800126a:	b2db      	uxtb	r3, r3
 800126c:	71bb      	strb	r3, [r7, #6]
 800126e:	e00d      	b.n	800128c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001270:	2301      	movs	r3, #1
 8001272:	2200      	movs	r2, #0
 8001274:	2107      	movs	r1, #7
 8001276:	2004      	movs	r0, #4
 8001278:	f7ff fe6c 	bl	8000f54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800127c:	79ba      	ldrb	r2, [r7, #6]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3316      	adds	r3, #22
 8001288:	b2db      	uxtb	r3, r3
 800128a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800128c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001290:	f113 0f09 	cmn.w	r3, #9
 8001294:	da01      	bge.n	800129a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001296:	23f7      	movs	r3, #247	@ 0xf7
 8001298:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800129a:	2138      	movs	r1, #56	@ 0x38
 800129c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80012a0:	f000 f9c4 	bl	800162c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2202      	movs	r2, #2
 80012b2:	4619      	mov	r1, r3
 80012b4:	208e      	movs	r0, #142	@ 0x8e
 80012b6:	f000 fa47 	bl	8001748 <SUBGRF_WriteCommand>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80012c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80012d2:	4a61      	ldr	r2, [pc, #388]	@ (8001458 <SUBGRF_SetModulationParams+0x194>)
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012dc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b5d      	ldr	r3, [pc, #372]	@ (800145c <SUBGRF_SetModulationParams+0x198>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d004      	beq.n	80012f6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fef3 	bl	80010dc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	f200 80a5 	bhi.w	800144a <SUBGRF_SetModulationParams+0x186>
 8001300:	a201      	add	r2, pc, #4	@ (adr r2, 8001308 <SUBGRF_SetModulationParams+0x44>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001319 	.word	0x08001319
 800130c:	080013d9 	.word	0x080013d9
 8001310:	0800139b 	.word	0x0800139b
 8001314:	08001407 	.word	0x08001407
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001318:	2308      	movs	r3, #8
 800131a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	@ (8001460 <SUBGRF_SetModulationParams+0x19c>)
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	b2db      	uxtb	r3, r3
 800132e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b2db      	uxtb	r3, r3
 8001336:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7b1b      	ldrb	r3, [r3, #12]
 8001342:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7b5b      	ldrb	r3, [r3, #13]
 8001348:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2200      	movs	r2, #0
 8001350:	461c      	mov	r4, r3
 8001352:	4615      	mov	r5, r2
 8001354:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001358:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800135c:	4a41      	ldr	r2, [pc, #260]	@ (8001464 <SUBGRF_SetModulationParams+0x1a0>)
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	4640      	mov	r0, r8
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff63 	bl	8000230 <__aeabi_uldivmod>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	b2db      	uxtb	r3, r3
 8001378:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b2db      	uxtb	r3, r3
 8001380:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001388:	7cfb      	ldrb	r3, [r7, #19]
 800138a:	b29a      	uxth	r2, r3
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	208b      	movs	r0, #139	@ 0x8b
 8001394:	f000 f9d8 	bl	8001748 <SUBGRF_WriteCommand>
        break;
 8001398:	e058      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800139a:	2304      	movs	r3, #4
 800139c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001460 <SUBGRF_SetModulationParams+0x19c>)
 80013a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7d1b      	ldrb	r3, [r3, #20]
 80013c4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80013c6:	7cfb      	ldrb	r3, [r7, #19]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	208b      	movs	r0, #139	@ 0x8b
 80013d2:	f000 f9b9 	bl	8001748 <SUBGRF_WriteCommand>
        break;
 80013d6:	e039      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e1b      	ldrb	r3, [r3, #24]
 80013e0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7e5b      	ldrb	r3, [r3, #25]
 80013e6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7e9b      	ldrb	r3, [r3, #26]
 80013ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7edb      	ldrb	r3, [r3, #27]
 80013f2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80013f4:	7cfb      	ldrb	r3, [r7, #19]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	208b      	movs	r0, #139	@ 0x8b
 8001400:	f000 f9a2 	bl	8001748 <SUBGRF_WriteCommand>

        break;
 8001404:	e022      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001406:	2305      	movs	r3, #5
 8001408:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <SUBGRF_SetModulationParams+0x19c>)
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	b2db      	uxtb	r3, r3
 800141c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	b2db      	uxtb	r3, r3
 8001424:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7b5b      	ldrb	r3, [r3, #13]
 8001436:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001438:	7cfb      	ldrb	r3, [r7, #19]
 800143a:	b29a      	uxth	r2, r3
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4619      	mov	r1, r3
 8001442:	208b      	movs	r0, #139	@ 0x8b
 8001444:	f000 f980 	bl	8001748 <SUBGRF_WriteCommand>
        break;
 8001448:	e000      	b.n	800144c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800144a:	bf00      	nop
    }
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001456:	bf00      	nop
 8001458:	08005a88 	.word	0x08005a88
 800145c:	2000011d 	.word	0x2000011d
 8001460:	3d090000 	.word	0x3d090000
 8001464:	01e84800 	.word	0x01e84800

08001468 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001474:	4a48      	ldr	r2, [pc, #288]	@ (8001598 <SUBGRF_SetPacketParams+0x130>)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	ca07      	ldmia	r2, {r0, r1, r2}
 800147c:	c303      	stmia	r3!, {r0, r1}
 800147e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b45      	ldr	r3, [pc, #276]	@ (800159c <SUBGRF_SetPacketParams+0x134>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d004      	beq.n	8001496 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe23 	bl	80010dc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d878      	bhi.n	8001590 <SUBGRF_SetPacketParams+0x128>
 800149e:	a201      	add	r2, pc, #4	@ (adr r2, 80014a4 <SUBGRF_SetPacketParams+0x3c>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014b5 	.word	0x080014b5
 80014a8:	08001545 	.word	0x08001545
 80014ac:	08001539 	.word	0x08001539
 80014b0:	080014b5 	.word	0x080014b5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7a5b      	ldrb	r3, [r3, #9]
 80014b8:	2bf1      	cmp	r3, #241	@ 0xf1
 80014ba:	d10a      	bne.n	80014d2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80014bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014c0:	f7ff fbf5 	bl	8000cae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80014c4:	f248 0005 	movw	r0, #32773	@ 0x8005
 80014c8:	f7ff fc11 	bl	8000cee <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80014cc:	2302      	movs	r3, #2
 80014ce:	75bb      	strb	r3, [r7, #22]
 80014d0:	e011      	b.n	80014f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7a5b      	ldrb	r3, [r3, #9]
 80014d6:	2bf2      	cmp	r3, #242	@ 0xf2
 80014d8:	d10a      	bne.n	80014f0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80014da:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80014de:	f7ff fbe6 	bl	8000cae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80014e2:	f241 0021 	movw	r0, #4129	@ 0x1021
 80014e6:	f7ff fc02 	bl	8000cee <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80014ea:	2306      	movs	r3, #6
 80014ec:	75bb      	strb	r3, [r7, #22]
 80014ee:	e002      	b.n	80014f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7a5b      	ldrb	r3, [r3, #9]
 80014f4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80014f6:	2309      	movs	r3, #9
 80014f8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	885b      	ldrh	r3, [r3, #2]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	885b      	ldrh	r3, [r3, #2]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	795b      	ldrb	r3, [r3, #5]
 8001518:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	79db      	ldrb	r3, [r3, #7]
 8001524:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7a1b      	ldrb	r3, [r3, #8]
 800152a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800152c:	7dbb      	ldrb	r3, [r7, #22]
 800152e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7a9b      	ldrb	r3, [r3, #10]
 8001534:	753b      	strb	r3, [r7, #20]
        break;
 8001536:	e022      	b.n	800157e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7b1b      	ldrb	r3, [r3, #12]
 8001540:	733b      	strb	r3, [r7, #12]
        break;
 8001542:	e01c      	b.n	800157e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001544:	2306      	movs	r3, #6
 8001546:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	89db      	ldrh	r3, [r3, #14]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	89db      	ldrh	r3, [r3, #14]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7c1a      	ldrb	r2, [r3, #16]
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <SUBGRF_SetPacketParams+0x138>)
 8001562:	4611      	mov	r1, r2
 8001564:	7019      	strb	r1, [r3, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7c5b      	ldrb	r3, [r3, #17]
 800156e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7c9b      	ldrb	r3, [r3, #18]
 8001574:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7cdb      	ldrb	r3, [r3, #19]
 800157a:	747b      	strb	r3, [r7, #17]
        break;
 800157c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	208c      	movs	r0, #140	@ 0x8c
 800158a:	f000 f8dd 	bl	8001748 <SUBGRF_WriteCommand>
 800158e:	e000      	b.n	8001592 <SUBGRF_SetPacketParams+0x12a>
        return;
 8001590:	bf00      	nop
}
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	08005a90 	.word	0x08005a90
 800159c:	2000011d 	.word	0x2000011d
 80015a0:	2000011e 	.word	0x2000011e

080015a4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2202      	movs	r2, #2
 80015c2:	4619      	mov	r1, r3
 80015c4:	208f      	movs	r0, #143	@ 0x8f
 80015c6:	f000 f8bf 	bl	8001748 <SUBGRF_WriteCommand>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2202      	movs	r2, #2
 80015e4:	4619      	mov	r1, r3
 80015e6:	2013      	movs	r0, #19
 80015e8:	f000 f8d0 	bl	800178c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80015ec:	f7ff fd92 	bl	8001114 <SUBGRF_GetPacketType>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d10d      	bne.n	8001612 <SUBGRF_GetRxBufferStatus+0x3e>
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <SUBGRF_GetRxBufferStatus+0x54>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8001600:	f240 7002 	movw	r0, #1794	@ 0x702
 8001604:	f000 f826 	bl	8001654 <SUBGRF_ReadRegister>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e002      	b.n	8001618 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8001612:	7b3a      	ldrb	r2, [r7, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8001618:	7b7a      	ldrb	r2, [r7, #13]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	701a      	strb	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000011e 	.word	0x2000011e

0800162c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	80fb      	strh	r3, [r7, #6]
 8001638:	4613      	mov	r3, r2
 800163a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800163c:	1d7a      	adds	r2, r7, #5
 800163e:	88f9      	ldrh	r1, [r7, #6]
 8001640:	2301      	movs	r3, #1
 8001642:	4803      	ldr	r0, [pc, #12]	@ (8001650 <SUBGRF_WriteRegister+0x24>)
 8001644:	f002 f92c 	bl	80038a0 <HAL_SUBGHZ_WriteRegisters>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000078 	.word	0x20000078

08001654 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800165e:	f107 020f 	add.w	r2, r7, #15
 8001662:	88f9      	ldrh	r1, [r7, #6]
 8001664:	2301      	movs	r3, #1
 8001666:	4804      	ldr	r0, [pc, #16]	@ (8001678 <SUBGRF_ReadRegister+0x24>)
 8001668:	f002 f979 	bl	800395e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000078 	.word	0x20000078

0800167c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	4613      	mov	r3, r2
 800168a:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800168c:	f3ef 8310 	mrs	r3, PRIMASK
 8001690:	60fb      	str	r3, [r7, #12]
  return(result);
 8001692:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001696:	b672      	cpsid	i
}
 8001698:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	88f9      	ldrh	r1, [r7, #6]
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <SUBGRF_WriteRegisters+0x40>)
 80016a2:	f002 f8fd 	bl	80038a0 <HAL_SUBGHZ_WriteRegisters>
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f383 8810 	msr	PRIMASK, r3
}
 80016b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000078 	.word	0x20000078

080016c0 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016d0:	f3ef 8310 	mrs	r3, PRIMASK
 80016d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80016d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80016d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80016da:	b672      	cpsid	i
}
 80016dc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	79f9      	ldrb	r1, [r7, #7]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	4806      	ldr	r0, [pc, #24]	@ (8001700 <SUBGRF_WriteBuffer+0x40>)
 80016e8:	f002 fa4d 	bl	8003b86 <HAL_SUBGHZ_WriteBuffer>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f383 8810 	msr	PRIMASK, r3
}
 80016f6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000078 	.word	0x20000078

08001704 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001714:	f3ef 8310 	mrs	r3, PRIMASK
 8001718:	60fb      	str	r3, [r7, #12]
  return(result);
 800171a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800171c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800171e:	b672      	cpsid	i
}
 8001720:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	b29b      	uxth	r3, r3
 8001726:	79f9      	ldrb	r1, [r7, #7]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <SUBGRF_ReadBuffer+0x40>)
 800172c:	f002 fa7e 	bl	8003c2c <HAL_SUBGHZ_ReadBuffer>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f383 8810 	msr	PRIMASK, r3
}
 800173a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000078 	.word	0x20000078

08001748 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001758:	f3ef 8310 	mrs	r3, PRIMASK
 800175c:	60fb      	str	r3, [r7, #12]
  return(result);
 800175e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001762:	b672      	cpsid	i
}
 8001764:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8001766:	88bb      	ldrh	r3, [r7, #4]
 8001768:	79f9      	ldrb	r1, [r7, #7]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	4806      	ldr	r0, [pc, #24]	@ (8001788 <SUBGRF_WriteCommand+0x40>)
 800176e:	f002 f957 	bl	8003a20 <HAL_SUBGHZ_ExecSetCmd>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f383 8810 	msr	PRIMASK, r3
}
 800177c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000078 	.word	0x20000078

0800178c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	4613      	mov	r3, r2
 800179a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800179c:	f3ef 8310 	mrs	r3, PRIMASK
 80017a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80017a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80017a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017a6:	b672      	cpsid	i
}
 80017a8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	79f9      	ldrb	r1, [r7, #7]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	4806      	ldr	r0, [pc, #24]	@ (80017cc <SUBGRF_ReadCommand+0x40>)
 80017b2:	f002 f994 	bl	8003ade <HAL_SUBGHZ_ExecGetCmd>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f383 8810 	msr	PRIMASK, r3
}
 80017c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000078 	.word	0x20000078

080017d0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d10d      	bne.n	8001806 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d104      	bne.n	80017fa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80017f4:	2004      	movs	r0, #4
 80017f6:	f000 f8e7 	bl	80019c8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d107      	bne.n	8001810 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8001800:	2303      	movs	r3, #3
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e004      	b.n	8001810 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f98d 	bl	8000b32 <RBI_ConfigRFSwitch>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800182e:	f7ff f98e 	bl	8000b4e <RBI_GetTxConfig>
 8001832:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d016      	beq.n	8001868 <SUBGRF_SetRfTxPower+0x48>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b02      	cmp	r3, #2
 800183e:	dc16      	bgt.n	800186e <SUBGRF_SetRfTxPower+0x4e>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <SUBGRF_SetRfTxPower+0x2e>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d00a      	beq.n	8001862 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800184c:	e00f      	b.n	800186e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b0f      	cmp	r3, #15
 8001854:	dd02      	ble.n	800185c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8001856:	2302      	movs	r3, #2
 8001858:	73fb      	strb	r3, [r7, #15]
            break;
 800185a:	e009      	b.n	8001870 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
            break;
 8001860:	e006      	b.n	8001870 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
            break;
 8001866:	e003      	b.n	8001870 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8001868:	2302      	movs	r3, #2
 800186a:	73fb      	strb	r3, [r7, #15]
            break;
 800186c:	e000      	b.n	8001870 <SUBGRF_SetRfTxPower+0x50>
            break;
 800186e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8001870:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2202      	movs	r2, #2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fc55 	bl	8001128 <SUBGRF_SetTxParams>

    return paSelect;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2001      	movs	r0, #1
 8001896:	4798      	blx	r3
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000120 	.word	0x20000120

080018a4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2002      	movs	r0, #2
 80018b2:	4798      	blx	r3
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000120 	.word	0x20000120

080018c0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2040      	movs	r0, #64	@ 0x40
 80018ce:	4798      	blx	r3
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000120 	.word	0x20000120

080018dc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80018f2:	e00a      	b.n	800190a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2080      	movs	r0, #128	@ 0x80
 80018fa:	4798      	blx	r3
            break;
 80018fc:	e005      	b.n	800190a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001906:	4798      	blx	r3
            break;
 8001908:	bf00      	nop
    }
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000120 	.word	0x20000120

08001918 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001928:	4798      	blx	r3
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000120 	.word	0x20000120

08001938 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2020      	movs	r0, #32
 8001946:	4798      	blx	r3
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000120 	.word	0x20000120

08001954 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2004      	movs	r0, #4
 8001962:	4798      	blx	r3
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000120 	.word	0x20000120

08001970 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2008      	movs	r0, #8
 800197e:	4798      	blx	r3
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000120 	.word	0x20000120

0800198c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2010      	movs	r0, #16
 800199a:	4798      	blx	r3
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000120 	.word	0x20000120

080019a8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019b8:	4798      	blx	r3
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000120 	.word	0x20000120

080019c8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80019d2:	f7ff f8ca 	bl	8000b6a <RBI_IsDCDC>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d112      	bne.n	8001a02 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80019dc:	f640 1023 	movw	r0, #2339	@ 0x923
 80019e0:	f7ff fe38 	bl	8001654 <SUBGRF_ReadRegister>
 80019e4:	4603      	mov	r3, r0
 80019e6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	f023 0306 	bic.w	r3, r3, #6
 80019ee:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	f640 1023 	movw	r0, #2339	@ 0x923
 80019fe:	f7ff fe15 	bl	800162c <SUBGRF_WriteRegister>
  }
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a16:	2003      	movs	r0, #3
 8001a18:	f000 f95e 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a1c:	f001 fb4a 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a09      	ldr	r2, [pc, #36]	@ (8001a48 <HAL_Init+0x3c>)
 8001a24:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f810 	bl	8001a4c <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	e001      	b.n	8001a3c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a38:	f7fe fdf8 	bl	800062c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a58:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <HAL_InitTick+0x6c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d024      	beq.n	8001aaa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a60:	f001 fb28 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_InitTick+0x6c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a70:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f960 	bl	8001d3e <HAL_SYSTICK_Config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d809      	bhi.n	8001a9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	f000 f92c 	bl	8001cee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a96:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <HAL_InitTick+0x70>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e004      	b.n	8001aae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_IncTick+0x1c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a03      	ldr	r2, [pc, #12]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000124 	.word	0x20000124

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <HAL_GetTick+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	20000124 	.word	0x20000124

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffe0 	bl	8001ae4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4906      	ldr	r1, [pc, #24]	@ (8001bd8 <__NVIC_EnableIRQ+0x34>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	@ (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff90 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff2d 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff44 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff92 	bl	8001c30 <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff61 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff37 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffa4 	bl	8001c94 <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	e140      	b.n	8001fea <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8132 	beq.w	8001fe4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d005      	beq.n	8001d98 <HAL_GPIO_Init+0x40>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d130      	bne.n	8001dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	f003 0201 	and.w	r2, r3, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d123      	bne.n	8001e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	6939      	ldr	r1, [r7, #16]
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 808c 	beq.w	8001fe4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ecc:	4a4e      	ldr	r2, [pc, #312]	@ (8002008 <HAL_GPIO_Init+0x2b0>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1bc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a44      	ldr	r2, [pc, #272]	@ (800200c <HAL_GPIO_Init+0x2b4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1b8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a43      	ldr	r2, [pc, #268]	@ (8002010 <HAL_GPIO_Init+0x2b8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1b4>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e004      	b.n	8001f16 <HAL_GPIO_Init+0x1be>
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x1be>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_GPIO_Init+0x1be>
 8001f14:	2300      	movs	r3, #0
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	f002 0203 	and.w	r2, r2, #3
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f26:	4938      	ldr	r1, [pc, #224]	@ (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f34:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f58:	4a2e      	ldr	r2, [pc, #184]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f82:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001fae:	4a19      	ldr	r2, [pc, #100]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fbc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002014 <HAL_GPIO_Init+0x2bc>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f47f aeb7 	bne.w	8001d68 <HAL_GPIO_Init+0x10>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	48000400 	.word	0x48000400
 8002010:	48000800 	.word	0x48000800
 8002014:	58000800 	.word	0x58000800

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002034:	e002      	b.n	800203c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <HAL_PWR_EnableBkUpAccess+0x18>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a03      	ldr	r2, [pc, #12]	@ (8002060 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	58000400 	.word	0x58000400

08002064 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_PWREx_GetVoltageRange+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800208c:	d101      	bne.n	8002092 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	58000400 	.word	0x58000400

080020a0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ea:	d101      	bne.n	80020f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210c:	6013      	str	r3, [r2, #0]
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002128:	6013      	str	r3, [r2, #0]
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002144:	d101      	bne.n	800214a <LL_RCC_HSE_IsReady+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_RCC_HSE_IsReady+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800217e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219e:	d101      	bne.n	80021a4 <LL_RCC_HSI_IsReady+0x18>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <LL_RCC_HSI_IsReady+0x1a>
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d101      	bne.n	80021ee <LL_RCC_LSE_IsReady+0x18>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_RCC_LSE_IsReady+0x1a>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d101      	bne.n	8002250 <LL_RCC_LSI_IsReady+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_RCC_LSI_IsReady+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6013      	str	r3, [r2, #0]
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6013      	str	r3, [r2, #0]
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d101      	bne.n	80022a8 <LL_RCC_MSI_IsReady+0x16>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_RCC_MSI_IsReady+0x18>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d101      	bne.n	80022c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002396:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800239a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800239e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023c4:	f023 020f 	bic.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800244a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024d2:	d101      	bne.n	80024d8 <LL_RCC_PLL_IsReady+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_RCC_PLL_IsReady+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0303 	and.w	r3, r3, #3
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254e:	d101      	bne.n	8002554 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002566:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002572:	d101      	bne.n	8002578 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800258e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002596:	d101      	bne.n	800259c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025b8:	d101      	bne.n	80025be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025da:	d101      	bne.n	80025e0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e36f      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	f7ff fea6 	bl	800234e <LL_RCC_GetSysClkSource>
 8002602:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002604:	f7ff ff8f 	bl	8002526 <LL_RCC_PLL_GetMainSource>
 8002608:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80c4 	beq.w	80027a0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x3e>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	d176      	bne.n	8002712 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d173      	bne.n	8002712 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e353      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_OscConfig+0x68>
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002652:	e006      	b.n	8002662 <HAL_RCC_OscConfig+0x76>
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002662:	4293      	cmp	r3, r2
 8002664:	d222      	bcs.n	80026ac <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fd5a 	bl	8003124 <RCC_SetFlashLatencyFromMSIRange>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e331      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fe2b 	bl	8002300 <LL_RCC_MSI_SetCalibTrimming>
 80026aa:	e021      	b.n	80026f0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fe12 	bl	8002300 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fd1f 	bl	8003124 <RCC_SetFlashLatencyFromMSIRange>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e2f6      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026f0:	f000 fce0 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4aa7      	ldr	r2, [pc, #668]	@ (8002994 <HAL_RCC_OscConfig+0x3a8>)
 80026f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80026fa:	4ba7      	ldr	r3, [pc, #668]	@ (8002998 <HAL_RCC_OscConfig+0x3ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f9a4 	bl	8001a4c <HAL_InitTick>
 8002704:	4603      	mov	r3, r0
 8002706:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d047      	beq.n	800279e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	e2e5      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d02c      	beq.n	8002774 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800271a:	f7ff fd9e 	bl	800225a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800271e:	f7ff f9e1 	bl	8001ae4 <HAL_GetTick>
 8002722:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002726:	f7ff f9dd 	bl	8001ae4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e2d2      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002738:	f7ff fdab 	bl	8002292 <LL_RCC_MSI_IsReady>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f1      	beq.n	8002726 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fdc7 	bl	8002300 <LL_RCC_MSI_SetCalibTrimming>
 8002772:	e015      	b.n	80027a0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002774:	f7ff fd7f 	bl	8002276 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002778:	f7ff f9b4 	bl	8001ae4 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002780:	f7ff f9b0 	bl	8001ae4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e2a5      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002792:	f7ff fd7e 	bl	8002292 <LL_RCC_MSI_IsReady>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f1      	bne.n	8002780 <HAL_RCC_OscConfig+0x194>
 800279c:	e000      	b.n	80027a0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800279e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d058      	beq.n	800285e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x1d2>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d108      	bne.n	80027ca <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d14b      	bne.n	800285e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e289      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_OscConfig+0x204>
 80027ea:	f7ff fc86 	bl	80020fa <LL_RCC_HSE_Enable>
 80027ee:	e00d      	b.n	800280c <HAL_RCC_OscConfig+0x220>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80027f8:	d104      	bne.n	8002804 <HAL_RCC_OscConfig+0x218>
 80027fa:	f7ff fc51 	bl	80020a0 <LL_RCC_HSE_EnableTcxo>
 80027fe:	f7ff fc7c 	bl	80020fa <LL_RCC_HSE_Enable>
 8002802:	e003      	b.n	800280c <HAL_RCC_OscConfig+0x220>
 8002804:	f7ff fc87 	bl	8002116 <LL_RCC_HSE_Disable>
 8002808:	f7ff fc58 	bl	80020bc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d012      	beq.n	800283a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff f966 	bl	8001ae4 <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff f962 	bl	8001ae4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e257      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800282e:	f7ff fc80 	bl	8002132 <LL_RCC_HSE_IsReady>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f1      	beq.n	800281c <HAL_RCC_OscConfig+0x230>
 8002838:	e011      	b.n	800285e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7ff f953 	bl	8001ae4 <HAL_GetTick>
 800283e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002842:	f7ff f94f 	bl	8001ae4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	@ 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e244      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002854:	f7ff fc6d 	bl	8002132 <LL_RCC_HSE_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f1      	bne.n	8002842 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d046      	beq.n	80028f8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d005      	beq.n	800287c <HAL_RCC_OscConfig+0x290>
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d10e      	bne.n	8002894 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d10b      	bne.n	8002894 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e22a      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fc8e 	bl	80021ae <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002892:	e031      	b.n	80028f8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d019      	beq.n	80028d0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	f7ff fc5a 	bl	8002154 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff f920 	bl	8001ae4 <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7ff f91c 	bl	8001ae4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e211      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028ba:	f7ff fc67 	bl	800218c <LL_RCC_HSI_IsReady>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f1      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fc70 	bl	80021ae <LL_RCC_HSI_SetCalibTrimming>
 80028ce:	e013      	b.n	80028f8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d0:	f7ff fc4e 	bl	8002170 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7ff f906 	bl	8001ae4 <HAL_GetTick>
 80028d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028dc:	f7ff f902 	bl	8001ae4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1f7      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028ee:	f7ff fc4d 	bl	800218c <LL_RCC_HSI_IsReady>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f1      	bne.n	80028dc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d06e      	beq.n	80029e2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d056      	beq.n	80029ba <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	429a      	cmp	r2, r3
 8002922:	d031      	beq.n	8002988 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e1d0      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d013      	beq.n	800296e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002946:	f7ff fc67 	bl	8002218 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294a:	f7ff f8cb 	bl	8001ae4 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7ff f8c7 	bl	8001ae4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b11      	cmp	r3, #17
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1bc      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002964:	f7ff fc68 	bl	8002238 <LL_RCC_LSI_IsReady>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f1      	bne.n	8002952 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002988:	f7ff fc36 	bl	80021f8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7ff f8aa 	bl	8001ae4 <HAL_GetTick>
 8002990:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002992:	e00c      	b.n	80029ae <HAL_RCC_OscConfig+0x3c2>
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299c:	f7ff f8a2 	bl	8001ae4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b11      	cmp	r3, #17
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e197      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80029ae:	f7ff fc43 	bl	8002238 <LL_RCC_LSI_IsReady>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f1      	beq.n	800299c <HAL_RCC_OscConfig+0x3b0>
 80029b8:	e013      	b.n	80029e2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ba:	f7ff fc2d 	bl	8002218 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff f891 	bl	8001ae4 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c6:	f7ff f88d 	bl	8001ae4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b11      	cmp	r3, #17
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e182      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80029d8:	f7ff fc2e 	bl	8002238 <LL_RCC_LSI_IsReady>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f1      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80d8 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029f0:	f7ff fb44 	bl	800207c <LL_PWR_IsEnabledBkUpAccess>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d113      	bne.n	8002a22 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029fa:	f7ff fb25 	bl	8002048 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fe:	f7ff f871 	bl	8001ae4 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7ff f86d 	bl	8001ae4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e162      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a18:	f7ff fb30 	bl	800207c <LL_PWR_IsEnabledBkUpAccess>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f1      	beq.n	8002a06 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d07b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b85      	cmp	r3, #133	@ 0x85
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff f849 	bl	8001ae4 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7ff f83b 	bl	8001ae4 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e12e      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a80:	f7ff fba9 	bl	80021d6 <LL_RCC_LSE_IsReady>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ef      	beq.n	8002a6a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b81      	cmp	r3, #129	@ 0x81
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b85      	cmp	r3, #133	@ 0x85
 8002a98:	d121      	bne.n	8002ade <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7ff f823 	bl	8001ae4 <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7ff f815 	bl	8001ae4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e108      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ec      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002adc:	e060      	b.n	8002ba0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7ff f801 	bl	8001ae4 <HAL_GetTick>
 8002ae2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fff3 	bl	8001ae4 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0e6      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ec      	bne.n	8002afa <HAL_RCC_OscConfig+0x50e>
 8002b20:	e03e      	b.n	8002ba0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe ffdf 	bl	8001ae4 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe ffd1 	bl	8001ae4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0c4      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ec      	bne.n	8002b3e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7fe ffbe 	bl	8001ae4 <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe ffb0 	bl	8001ae4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0a3      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b96:	f7ff fb1e 	bl	80021d6 <LL_RCC_LSE_IsReady>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ef      	bne.n	8002b80 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8099 	beq.w	8002cdc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d06c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d14b      	bne.n	8002c50 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb8:	f7ff fc74 	bl	80024a4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe ff92 	bl	8001ae4 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe ff8e 	bl	8001ae4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b0a      	cmp	r3, #10
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e083      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bd6:	f7ff fc73 	bl	80024c0 <LL_RCC_PLL_IsReady>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f1      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <HAL_RCC_OscConfig+0x6fc>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bf8:	0212      	lsls	r2, r2, #8
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c06:	4311      	orrs	r1, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c16:	f7ff fc37 	bl	8002488 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe ff5b 	bl	8001ae4 <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fe ff57 	bl	8001ae4 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e04c      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c44:	f7ff fc3c 	bl	80024c0 <LL_RCC_PLL_IsReady>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f1      	beq.n	8002c32 <HAL_RCC_OscConfig+0x646>
 8002c4e:	e045      	b.n	8002cdc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	f7ff fc28 	bl	80024a4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe ff46 	bl	8001ae4 <HAL_GetTick>
 8002c58:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe ff42 	bl	8001ae4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b0a      	cmp	r3, #10
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e037      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c6e:	f7ff fc27 	bl	80024c0 <LL_RCC_PLL_IsReady>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f1      	bne.n	8002c5c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c82:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <HAL_RCC_OscConfig+0x700>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e028      	b.n	8002cdc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e023      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d115      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d106      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	11c1808c 	.word	0x11c1808c
 8002cec:	eefefffc 	.word	0xeefefffc

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e12c      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b98      	ldr	r3, [pc, #608]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d91b      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b95      	ldr	r3, [pc, #596]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4993      	ldr	r1, [pc, #588]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d22:	f7fe fedf 	bl	8001ae4 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d2a:	f7fe fedb 	bl	8001ae4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e110      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d1ef      	bne.n	8002d2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fb02 	bl	8002364 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d60:	f7fe fec0 	bl	8001ae4 <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d68:	f7fe febc 	bl	8001ae4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0f1      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d7a:	f7ff fbdf 	bl	800253c <LL_RCC_IsActiveFlag_HPRE>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f1      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d016      	beq.n	8002dbe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff faf8 	bl	800238a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d9a:	f7fe fea3 	bl	8001ae4 <HAL_GetTick>
 8002d9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002da2:	f7fe fe9f 	bl	8001ae4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0d4      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002db4:	f7ff fbd3 	bl	800255e <LL_RCC_IsActiveFlag_C2HPRE>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f1      	beq.n	8002da2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff faf0 	bl	80023b4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fe86 	bl	8001ae4 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ddc:	f7fe fe82 	bl	8001ae4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0b7      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dee:	f7ff fbc8 	bl	8002582 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f1      	beq.n	8002ddc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d016      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fae9 	bl	80023e0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e0e:	f7fe fe69 	bl	8001ae4 <HAL_GetTick>
 8002e12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e16:	f7fe fe65 	bl	8001ae4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e09a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e28:	f7ff fbbd 	bl	80025a6 <LL_RCC_IsActiveFlag_PPRE1>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f1      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d017      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fade 	bl	8002406 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e4a:	f7fe fe4b 	bl	8001ae4 <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e52:	f7fe fe47 	bl	8001ae4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e07c      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e64:	f7ff fbb0 	bl	80025c8 <LL_RCC_IsActiveFlag_PPRE2>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f1      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d043      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e82:	f7ff f956 	bl	8002132 <LL_RCC_HSE_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11e      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e066      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e98:	f7ff fb12 	bl	80024c0 <LL_RCC_PLL_IsReady>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d113      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e05b      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002eae:	f7ff f9f0 	bl	8002292 <LL_RCC_MSI_IsReady>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d108      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e050      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ebc:	f7ff f966 	bl	800218c <LL_RCC_HSI_IsReady>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e049      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fa2a 	bl	8002328 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe fe06 	bl	8001ae4 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002edc:	f7fe fe02 	bl	8001ae4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e035      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	f7ff fa2c 	bl	800234e <LL_RCC_GetSysClkSource>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d1ec      	bne.n	8002edc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f02:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d21b      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f10:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 0207 	bic.w	r2, r3, #7
 8002f18:	4913      	ldr	r1, [pc, #76]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fde0 	bl	8001ae4 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f28:	f7fe fddc 	bl	8001ae4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e011      	b.n	8002f5e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_ClockConfig+0x278>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1ef      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f48:	f000 f8b4 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <HAL_RCC_ClockConfig+0x27c>)
 8002f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002f52:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <HAL_RCC_ClockConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fd78 	bl	8001a4c <HAL_InitTick>
 8002f5c:	4603      	mov	r3, r0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	58004000 	.word	0x58004000
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f82:	f7ff f9e4 	bl	800234e <LL_RCC_GetSysClkSource>
 8002f86:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f88:	f7ff facd 	bl	8002526 <LL_RCC_PLL_GetMainSource>
 8002f8c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x2c>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d139      	bne.n	800300e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d136      	bne.n	800300e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002fa0:	f7ff f987 	bl	80022b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d115      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x62>
 8002faa:	f7ff f982 	bl	80022b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x4e>
 8002fb4:	f7ff f98d 	bl	80022d2 <LL_RCC_MSI_GetRange>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	e005      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x5a>
 8002fc2:	f7ff f991 	bl	80022e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	4a36      	ldr	r2, [pc, #216]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd4:	e014      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x8c>
 8002fd6:	f7ff f96c 	bl	80022b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x7a>
 8002fe0:	f7ff f977 	bl	80022d2 <LL_RCC_MSI_GetRange>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	e005      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x86>
 8002fee:	f7ff f97b 	bl	80022e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003000:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d115      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800300c:	e012      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d102      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003014:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x138>)
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e00c      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d109      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003020:	f7ff f85a 	bl	80020d8 <LL_RCC_HSE_IsEnabledDiv2>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x138>)
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e001      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003030:	4b1f      	ldr	r3, [pc, #124]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003032:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003034:	f7ff f98b 	bl	800234e <LL_RCC_GetSysClkSource>
 8003038:	4603      	mov	r3, r0
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d12f      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800303e:	f7ff fa72 	bl	8002526 <LL_RCC_PLL_GetMainSource>
 8003042:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0xde>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d003      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0xe4>
 8003050:	e00d      	b.n	800306e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003052:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x138>)
 8003054:	60fb      	str	r3, [r7, #12]
        break;
 8003056:	e00d      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003058:	f7ff f83e 	bl	80020d8 <LL_RCC_HSE_IsEnabledDiv2>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003062:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x138>)
 8003064:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003066:	e005      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800306a:	60fb      	str	r3, [r7, #12]
        break;
 800306c:	e002      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	60fb      	str	r3, [r7, #12]
        break;
 8003072:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003074:	f7ff fa35 	bl	80024e2 <LL_RCC_PLL_GetN>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	fb03 f402 	mul.w	r4, r3, r2
 8003080:	f7ff fa46 	bl	8002510 <LL_RCC_PLL_GetDivider>
 8003084:	4603      	mov	r3, r0
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	3301      	adds	r3, #1
 800308a:	fbb4 f4f3 	udiv	r4, r4, r3
 800308e:	f7ff fa34 	bl	80024fa <LL_RCC_PLL_GetR>
 8003092:	4603      	mov	r3, r0
 8003094:	0f5b      	lsrs	r3, r3, #29
 8003096:	3301      	adds	r3, #1
 8003098:	fbb4 f3f3 	udiv	r3, r4, r3
 800309c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd90      	pop	{r4, r7, pc}
 80030a8:	08005bd0 	.word	0x08005bd0
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	01e84800 	.word	0x01e84800

080030b4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b4:	b598      	push	{r3, r4, r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030b8:	f7ff ff5c 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 80030bc:	4604      	mov	r4, r0
 80030be:	f7ff f9b5 	bl	800242c <LL_RCC_GetAHBPrescaler>
 80030c2:	4603      	mov	r3, r0
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	4a03      	ldr	r2, [pc, #12]	@ (80030d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd98      	pop	{r3, r4, r7, pc}
 80030d8:	08005b70 	.word	0x08005b70

080030dc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b598      	push	{r3, r4, r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030e0:	f7ff ffe8 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4604      	mov	r4, r0
 80030e6:	f7ff f9b9 	bl	800245c <LL_RCC_GetAPB1Prescaler>
 80030ea:	4603      	mov	r3, r0
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	4a03      	ldr	r2, [pc, #12]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd98      	pop	{r3, r4, r7, pc}
 80030fc:	08005bb0 	.word	0x08005bb0

08003100 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b598      	push	{r3, r4, r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003104:	f7ff ffd6 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8003108:	4604      	mov	r4, r0
 800310a:	f7ff f9b2 	bl	8002472 <LL_RCC_GetAPB2Prescaler>
 800310e:	4603      	mov	r3, r0
 8003110:	0adb      	lsrs	r3, r3, #11
 8003112:	4a03      	ldr	r2, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	fa24 f303 	lsr.w	r3, r4, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd98      	pop	{r3, r4, r7, pc}
 8003120:	08005bb0 	.word	0x08005bb0

08003124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	4a10      	ldr	r2, [pc, #64]	@ (8003178 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800313c:	f7ff f981 	bl	8002442 <LL_RCC_GetAHB3Prescaler>
 8003140:	4603      	mov	r3, r0
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	4a0c      	ldr	r2, [pc, #48]	@ (800317c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4a09      	ldr	r2, [pc, #36]	@ (8003180 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	0c9c      	lsrs	r4, r3, #18
 8003160:	f7fe ff80 	bl	8002064 <HAL_PWREx_GetVoltageRange>
 8003164:	4603      	mov	r3, r0
 8003166:	4619      	mov	r1, r3
 8003168:	4620      	mov	r0, r4
 800316a:	f000 f80b 	bl	8003184 <RCC_SetFlashLatency>
 800316e:	4603      	mov	r3, r0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	08005bd0 	.word	0x08005bd0
 800317c:	08005b70 	.word	0x08005b70
 8003180:	431bde83 	.word	0x431bde83

08003184 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	@ 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800318e:	4a3a      	ldr	r2, [pc, #232]	@ (8003278 <RCC_SetFlashLatency+0xf4>)
 8003190:	f107 0320 	add.w	r3, r7, #32
 8003194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003198:	6018      	str	r0, [r3, #0]
 800319a:	3304      	adds	r3, #4
 800319c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800319e:	4a37      	ldr	r2, [pc, #220]	@ (800327c <RCC_SetFlashLatency+0xf8>)
 80031a0:	f107 0318 	add.w	r3, r7, #24
 80031a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a8:	6018      	str	r0, [r3, #0]
 80031aa:	3304      	adds	r3, #4
 80031ac:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80031ae:	4a34      	ldr	r2, [pc, #208]	@ (8003280 <RCC_SetFlashLatency+0xfc>)
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80031b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031ba:	2300      	movs	r3, #0
 80031bc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c4:	d11b      	bne.n	80031fe <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ca:	e014      	b.n	80031f6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	3338      	adds	r3, #56	@ 0x38
 80031d2:	443b      	add	r3, r7
 80031d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80031d8:	461a      	mov	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4293      	cmp	r3, r2
 80031de:	d807      	bhi.n	80031f0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	3338      	adds	r3, #56	@ 0x38
 80031e6:	443b      	add	r3, r7
 80031e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031ee:	e021      	b.n	8003234 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f2:	3301      	adds	r3, #1
 80031f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d9e7      	bls.n	80031cc <RCC_SetFlashLatency+0x48>
 80031fc:	e01a      	b.n	8003234 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031fe:	2300      	movs	r3, #0
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003202:	e014      	b.n	800322e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	3338      	adds	r3, #56	@ 0x38
 800320a:	443b      	add	r3, r7
 800320c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003210:	461a      	mov	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4293      	cmp	r3, r2
 8003216:	d807      	bhi.n	8003228 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3338      	adds	r3, #56	@ 0x38
 800321e:	443b      	add	r3, r7
 8003220:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003224:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003226:	e005      	b.n	8003234 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322a:	3301      	adds	r3, #1
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003230:	2b02      	cmp	r3, #2
 8003232:	d9e7      	bls.n	8003204 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003234:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <RCC_SetFlashLatency+0x100>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 0207 	bic.w	r2, r3, #7
 800323c:	4911      	ldr	r1, [pc, #68]	@ (8003284 <RCC_SetFlashLatency+0x100>)
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003244:	f7fe fc4e 	bl	8001ae4 <HAL_GetTick>
 8003248:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800324a:	e008      	b.n	800325e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800324c:	f7fe fc4a 	bl	8001ae4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e007      	b.n	800326e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800325e:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <RCC_SetFlashLatency+0x100>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003268:	429a      	cmp	r2, r3
 800326a:	d1ef      	bne.n	800324c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3738      	adds	r7, #56	@ 0x38
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	08005a9c 	.word	0x08005a9c
 800327c:	08005aa4 	.word	0x08005aa4
 8003280:	08005aac 	.word	0x08005aac
 8003284:	58004000 	.word	0x58004000

08003288 <LL_RCC_LSE_IsReady>:
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d101      	bne.n	80032a0 <LL_RCC_LSE_IsReady+0x18>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <LL_RCC_LSE_IsReady+0x1a>
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <LL_RCC_SetUSARTClockSource>:
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	43db      	mvns	r3, r3
 80032c0:	401a      	ands	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <LL_RCC_SetI2SClockSource>:
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <LL_RCC_SetLPUARTClockSource>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003314:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003318:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <LL_RCC_SetI2CClockSource>:
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003346:	43db      	mvns	r3, r3
 8003348:	401a      	ands	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003352:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <LL_RCC_SetLPTIMClockSource>:
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003372:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	43db      	mvns	r3, r3
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <LL_RCC_SetRNGClockSource>:
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80033ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <LL_RCC_SetADCClockSource>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <LL_RCC_SetRTCClockSource>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003400:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <LL_RCC_GetRTCClockSource>:
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <LL_RCC_ForceBackupDomainReset>:
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800343e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003442:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <LL_RCC_ReleaseBackupDomainReset>:
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800345e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800347c:	2300      	movs	r3, #0
 800347e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003480:	2300      	movs	r3, #0
 8003482:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d058      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003490:	f7fe fdda 	bl	8002048 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003494:	f7fe fb26 	bl	8001ae4 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800349a:	e009      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fe fb22 	bl	8001ae4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	74fb      	strb	r3, [r7, #19]
        break;
 80034ae:	e006      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034b0:	4b7b      	ldr	r3, [pc, #492]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034bc:	d1ee      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d13c      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80034c4:	f7ff ffa7 	bl	8003416 <LL_RCC_GetRTCClockSource>
 80034c8:	4602      	mov	r2, r0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d00f      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034e0:	f7ff ffa5 	bl	800342e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034e4:	f7ff ffb3 	bl	800344e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d014      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe faf2 	bl	8001ae4 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003502:	e00b      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe faee 	bl	8001ae4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d902      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	74fb      	strb	r3, [r7, #19]
            break;
 800351a:	e004      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800351c:	f7ff feb4 	bl	8003288 <LL_RCC_LSE_IsReady>
 8003520:	4603      	mov	r3, r0
 8003522:	2b01      	cmp	r3, #1
 8003524:	d1ee      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff5b 	bl	80033ec <LL_RCC_SetRTCClockSource>
 8003536:	e004      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
 800353c:	e001      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fea9 	bl	80032aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fe9e 	bl	80032aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fec0 	bl	8003304 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fee6 	bl	8003366 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fedb 	bl	8003366 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fed0 	bl	8003366 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fea9 	bl	800332e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fe9e 	bl	800332e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fe93 	bl	800332e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d011      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fe5e 	bl	80032da <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003626:	d107      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fea5 	bl	8003398 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003660:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003664:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d011      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fea3 	bl	80033c2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003684:	d107      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003694:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003696:	7cbb      	ldrb	r3, [r7, #18]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	58000400 	.word	0x58000400

080036a4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036b4:	4904      	ldr	r1, [pc, #16]	@ (80036c8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	58000400 	.word	0x58000400

080036cc <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	4a04      	ldr	r2, [pc, #16]	@ (80036e8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	58000400 	.word	0x58000400

080036ec <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80036f0:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	4a04      	ldr	r2, [pc, #16]	@ (8003708 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80036f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	58000400 	.word	0x58000400

0800370c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003716:	619a      	str	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	58000400 	.word	0x58000400

08003724 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d101      	bne.n	8003738 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	58000400 	.word	0x58000400

08003748 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b04      	cmp	r3, #4
 8003756:	d101      	bne.n	800375c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	58000400 	.word	0x58000400

0800376c <LL_RCC_RF_DisableReset>:
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003778:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800377c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003780:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <LL_RCC_IsRFUnderReset>:
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a0:	d101      	bne.n	80037a6 <LL_RCC_IsRFUnderReset+0x1a>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <LL_RCC_IsRFUnderReset+0x1c>
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80037ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80037be:	4905      	ldr	r1, [pc, #20]	@ (80037d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	58000800 	.word	0x58000800

080037d8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
    return status;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	e052      	b.n	8003894 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	799b      	ldrb	r3, [r3, #6]
 80037f6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80037f8:	7bbb      	ldrb	r3, [r7, #14]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_SUBGHZ_Init+0x2c>
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d109      	bne.n	8003818 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc ff74 	bl	80006f8 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003810:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003814:	f7ff ffcc 	bl	80037b0 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003818:	7bbb      	ldrb	r3, [r7, #14]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d126      	bne.n	800386c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003824:	f7ff ffa2 	bl	800376c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003828:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <HAL_SUBGHZ_Init+0xc4>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	0cdb      	lsrs	r3, r3, #19
 8003836:	2264      	movs	r2, #100	@ 0x64
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	609a      	str	r2, [r3, #8]
        break;
 800384e:	e007      	b.n	8003860 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	3b01      	subs	r3, #1
 8003854:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003856:	f7ff ff99 	bl	800378c <LL_RCC_IsRFUnderReset>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ee      	bne.n	800383e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003860:	f7ff ff34 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003864:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003868:	f7ff ff1c 	bl	80036a4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800386c:	f7ff ff4e 	bl	800370c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fab0 	bl	8003de0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	719a      	strb	r2, [r3, #6]

  return status;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000000 	.word	0x20000000

080038a0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	461a      	mov	r2, r3
 80038ac:	460b      	mov	r3, r1
 80038ae:	817b      	strh	r3, [r7, #10]
 80038b0:	4613      	mov	r3, r2
 80038b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	799b      	ldrb	r3, [r3, #6]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d14a      	bne.n	8003954 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	795b      	ldrb	r3, [r3, #5]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_SUBGHZ_WriteRegisters+0x2a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e045      	b.n	8003956 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2202      	movs	r2, #2
 80038d4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb50 	bl	8003f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80038dc:	f7ff ff06 	bl	80036ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80038e0:	210d      	movs	r1, #13
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa9c 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fa94 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	4619      	mov	r1, r3
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fa8e 	bl	8003e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003904:	2300      	movs	r3, #0
 8003906:	82bb      	strh	r3, [r7, #20]
 8003908:	e00a      	b.n	8003920 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800390a:	8abb      	ldrh	r3, [r7, #20]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	4619      	mov	r1, r3
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa83 	bl	8003e20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800391a:	8abb      	ldrh	r3, [r7, #20]
 800391c:	3301      	adds	r3, #1
 800391e:	82bb      	strh	r3, [r7, #20]
 8003920:	8aba      	ldrh	r2, [r7, #20]
 8003922:	893b      	ldrh	r3, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3f0      	bcc.n	800390a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003928:	f7ff fed0 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fb49 	bl	8003fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
 800393e:	e001      	b.n	8003944 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	715a      	strb	r2, [r3, #5]

    return status;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	e000      	b.n	8003956 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	461a      	mov	r2, r3
 800396a:	460b      	mov	r3, r1
 800396c:	817b      	strh	r3, [r7, #10]
 800396e:	4613      	mov	r3, r2
 8003970:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	799b      	ldrb	r3, [r3, #6]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d14a      	bne.n	8003a16 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	795b      	ldrb	r3, [r3, #5]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003988:	2302      	movs	r3, #2
 800398a:	e045      	b.n	8003a18 <HAL_SUBGHZ_ReadRegisters+0xba>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 faf2 	bl	8003f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003998:	f7ff fea8 	bl	80036ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800399c:	211d      	movs	r1, #29
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa3e 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80039a4:	897b      	ldrh	r3, [r7, #10]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fa36 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80039b4:	897b      	ldrh	r3, [r7, #10]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4619      	mov	r1, r3
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa30 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80039c0:	2100      	movs	r1, #0
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fa2c 	bl	8003e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	82fb      	strh	r3, [r7, #22]
 80039cc:	e009      	b.n	80039e2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fa7b 	bl	8003ecc <SUBGHZSPI_Receive>
      pData++;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3301      	adds	r3, #1
 80039da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80039dc:	8afb      	ldrh	r3, [r7, #22]
 80039de:	3301      	adds	r3, #1
 80039e0:	82fb      	strh	r3, [r7, #22]
 80039e2:	8afa      	ldrh	r2, [r7, #22]
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d3f1      	bcc.n	80039ce <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80039ea:	f7ff fe6f 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fae8 	bl	8003fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e001      	b.n	8003a06 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	715a      	strb	r2, [r3, #5]

    return status;
 8003a12:	7ffb      	ldrb	r3, [r7, #31]
 8003a14:	e000      	b.n	8003a18 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	72fb      	strb	r3, [r7, #11]
 8003a30:	4613      	mov	r3, r2
 8003a32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	799b      	ldrb	r3, [r3, #6]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d14a      	bne.n	8003ad4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	795b      	ldrb	r3, [r3, #5]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e045      	b.n	8003ad6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fa93 	bl	8003f7c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	2b84      	cmp	r3, #132	@ 0x84
 8003a5a:	d002      	beq.n	8003a62 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003a5c:	7afb      	ldrb	r3, [r7, #11]
 8003a5e:	2b94      	cmp	r3, #148	@ 0x94
 8003a60:	d103      	bne.n	8003a6a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	711a      	strb	r2, [r3, #4]
 8003a68:	e002      	b.n	8003a70 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a70:	f7ff fe3c 	bl	80036ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003a74:	7afb      	ldrb	r3, [r7, #11]
 8003a76:	4619      	mov	r1, r3
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f9d1 	bl	8003e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	82bb      	strh	r3, [r7, #20]
 8003a82:	e00a      	b.n	8003a9a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003a84:	8abb      	ldrh	r3, [r7, #20]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f9c6 	bl	8003e20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003a94:	8abb      	ldrh	r3, [r7, #20]
 8003a96:	3301      	adds	r3, #1
 8003a98:	82bb      	strh	r3, [r7, #20]
 8003a9a:	8aba      	ldrh	r2, [r7, #20]
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d3f0      	bcc.n	8003a84 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003aa2:	f7ff fe13 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
 8003aa8:	2b84      	cmp	r3, #132	@ 0x84
 8003aaa:	d002      	beq.n	8003ab2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fa89 	bl	8003fc4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
 8003abe:	e001      	b.n	8003ac4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	715a      	strb	r2, [r3, #5]

    return status;
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	e000      	b.n	8003ad6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	460b      	mov	r3, r1
 8003aec:	72fb      	strb	r3, [r7, #11]
 8003aee:	4613      	mov	r3, r2
 8003af0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	799b      	ldrb	r3, [r3, #6]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d13d      	bne.n	8003b7c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	795b      	ldrb	r3, [r3, #5]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e038      	b.n	8003b7e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fa32 	bl	8003f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b18:	f7ff fde8 	bl	80036ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003b1c:	7afb      	ldrb	r3, [r7, #11]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f97d 	bl	8003e20 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003b26:	2100      	movs	r1, #0
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f979 	bl	8003e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	82fb      	strh	r3, [r7, #22]
 8003b32:	e009      	b.n	8003b48 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f9c8 	bl	8003ecc <SUBGHZSPI_Receive>
      pData++;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	3301      	adds	r3, #1
 8003b46:	82fb      	strh	r3, [r7, #22]
 8003b48:	8afa      	ldrh	r2, [r7, #22]
 8003b4a:	893b      	ldrh	r3, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d3f1      	bcc.n	8003b34 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b50:	f7ff fdbc 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa35 	bl	8003fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e001      	b.n	8003b6c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	715a      	strb	r2, [r3, #5]

    return status;
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
 8003b7a:	e000      	b.n	8003b7e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	461a      	mov	r2, r3
 8003b92:	460b      	mov	r3, r1
 8003b94:	72fb      	strb	r3, [r7, #11]
 8003b96:	4613      	mov	r3, r2
 8003b98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	799b      	ldrb	r3, [r3, #6]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d13e      	bne.n	8003c22 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	795b      	ldrb	r3, [r3, #5]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e039      	b.n	8003c24 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9e0 	bl	8003f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bbc:	f7ff fd96 	bl	80036ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003bc0:	210e      	movs	r1, #14
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f92c 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f927 	bl	8003e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	82bb      	strh	r3, [r7, #20]
 8003bd6:	e00a      	b.n	8003bee <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003bd8:	8abb      	ldrh	r3, [r7, #20]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f91c 	bl	8003e20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003be8:	8abb      	ldrh	r3, [r7, #20]
 8003bea:	3301      	adds	r3, #1
 8003bec:	82bb      	strh	r3, [r7, #20]
 8003bee:	8aba      	ldrh	r2, [r7, #20]
 8003bf0:	893b      	ldrh	r3, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3f0      	bcc.n	8003bd8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bf6:	f7ff fd69 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f9e2 	bl	8003fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
 8003c0c:	e001      	b.n	8003c12 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	715a      	strb	r2, [r3, #5]

    return status;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	e000      	b.n	8003c24 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	460b      	mov	r3, r1
 8003c3a:	72fb      	strb	r3, [r7, #11]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	799b      	ldrb	r3, [r3, #6]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d141      	bne.n	8003cd2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	795b      	ldrb	r3, [r3, #5]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e03c      	b.n	8003cd4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f98b 	bl	8003f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c66:	f7ff fd41 	bl	80036ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003c6a:	211e      	movs	r1, #30
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8d7 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003c72:	7afb      	ldrb	r3, [r7, #11]
 8003c74:	4619      	mov	r1, r3
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f8d2 	bl	8003e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f8ce 	bl	8003e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	82fb      	strh	r3, [r7, #22]
 8003c88:	e009      	b.n	8003c9e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f91d 	bl	8003ecc <SUBGHZSPI_Receive>
      pData++;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003c98:	8afb      	ldrh	r3, [r7, #22]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	82fb      	strh	r3, [r7, #22]
 8003c9e:	8afa      	ldrh	r2, [r7, #22]
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3f1      	bcc.n	8003c8a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ca6:	f7ff fd11 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f98a 	bl	8003fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e001      	b.n	8003cc2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	715a      	strb	r2, [r3, #5]

    return status;
 8003cce:	7ffb      	ldrb	r3, [r7, #31]
 8003cd0:	e000      	b.n	8003cd4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003ce8:	f107 020c 	add.w	r2, r7, #12
 8003cec:	2302      	movs	r3, #2
 8003cee:	2112      	movs	r1, #18
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fef4 	bl	8003ade <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003cf6:	7b3b      	ldrb	r3, [r7, #12]
 8003cf8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003cfa:	89fb      	ldrh	r3, [r7, #14]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	b21a      	sxth	r2, r3
 8003d00:	7b7b      	ldrb	r3, [r7, #13]
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	b21b      	sxth	r3, r3
 8003d08:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003d0a:	f107 020c 	add.w	r2, r7, #12
 8003d0e:	2302      	movs	r3, #2
 8003d10:	2102      	movs	r1, #2
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fe84 	bl	8003a20 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003d18:	89fb      	ldrh	r3, [r7, #14]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fdb0 	bl	8001888 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003d28:	89fb      	ldrh	r3, [r7, #14]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8003d32:	89fb      	ldrh	r3, [r7, #14]
 8003d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fd fdb1 	bl	80018a4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003d42:	89fb      	ldrh	r3, [r7, #14]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fd fe01 	bl	8001954 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003d52:	89fb      	ldrh	r3, [r7, #14]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fd fe07 	bl	8001970 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fd fe0d 	bl	800198c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003d72:	89fb      	ldrh	r3, [r7, #14]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fd fddb 	bl	8001938 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003d82:	89fb      	ldrh	r3, [r7, #14]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd fd97 	bl	80018c0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003d92:	89fb      	ldrh	r3, [r7, #14]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003d9c:	89fb      	ldrh	r3, [r7, #14]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003da6:	2101      	movs	r1, #1
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fd fd97 	bl	80018dc <HAL_SUBGHZ_CADStatusCallback>
 8003dae:	e003      	b.n	8003db8 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003db0:	2100      	movs	r1, #0
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fd92 	bl	80018dc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003db8:	89fb      	ldrh	r3, [r7, #14]
 8003dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fda8 	bl	8001918 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fde8 	bl	80019a8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <SUBGHZSPI_Init+0x3c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0b      	ldr	r2, [pc, #44]	@ (8003e1c <SUBGHZSPI_Init+0x3c>)
 8003dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003df4:	4a09      	ldr	r2, [pc, #36]	@ (8003e1c <SUBGHZSPI_Init+0x3c>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003dfc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003dfe:	4b07      	ldr	r3, [pc, #28]	@ (8003e1c <SUBGHZSPI_Init+0x3c>)
 8003e00:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003e04:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003e06:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <SUBGHZSPI_Init+0x3c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a04      	ldr	r2, [pc, #16]	@ (8003e1c <SUBGHZSPI_Init+0x3c>)
 8003e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e10:	6013      	str	r3, [r2, #0]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	58010000 	.word	0x58010000

08003e20 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e30:	4b23      	ldr	r3, [pc, #140]	@ (8003ec0 <SUBGHZSPI_Transmit+0xa0>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	0cdb      	lsrs	r3, r3, #19
 8003e3e:	2264      	movs	r2, #100	@ 0x64
 8003e40:	fb02 f303 	mul.w	r3, r2, r3
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	609a      	str	r2, [r3, #8]
      break;
 8003e56:	e008      	b.n	8003e6a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003e5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <SUBGHZSPI_Transmit+0xa4>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d1ed      	bne.n	8003e46 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003e6a:	4b17      	ldr	r3, [pc, #92]	@ (8003ec8 <SUBGHZSPI_Transmit+0xa8>)
 8003e6c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e74:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <SUBGHZSPI_Transmit+0xa0>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	0cdb      	lsrs	r3, r3, #19
 8003e82:	2264      	movs	r2, #100	@ 0x64
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	609a      	str	r2, [r3, #8]
      break;
 8003e9a:	e008      	b.n	8003eae <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003ea2:	4b08      	ldr	r3, [pc, #32]	@ (8003ec4 <SUBGHZSPI_Transmit+0xa4>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d1ed      	bne.n	8003e8a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003eae:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <SUBGHZSPI_Transmit+0xa4>)
 8003eb0:	68db      	ldr	r3, [r3, #12]

  return status;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	58010000 	.word	0x58010000
 8003ec8:	5801000c 	.word	0x5801000c

08003ecc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003eda:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <SUBGHZSPI_Receive+0xa4>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	0cdb      	lsrs	r3, r3, #19
 8003ee8:	2264      	movs	r2, #100	@ 0x64
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d105      	bne.n	8003f02 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e008      	b.n	8003f14 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003f08:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <SUBGHZSPI_Receive+0xa8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d1ed      	bne.n	8003ef0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003f14:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <SUBGHZSPI_Receive+0xac>)
 8003f16:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	22ff      	movs	r2, #255	@ 0xff
 8003f1c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f1e:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <SUBGHZSPI_Receive+0xa4>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	0cdb      	lsrs	r3, r3, #19
 8003f2c:	2264      	movs	r2, #100	@ 0x64
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	609a      	str	r2, [r3, #8]
      break;
 8003f44:	e008      	b.n	8003f58 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003f4c:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <SUBGHZSPI_Receive+0xa8>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d1ed      	bne.n	8003f34 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003f58:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <SUBGHZSPI_Receive+0xa8>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	701a      	strb	r2, [r3, #0]

  return status;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000
 8003f74:	58010000 	.word	0x58010000
 8003f78:	5801000c 	.word	0x5801000c

08003f7c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	791b      	ldrb	r3, [r3, #4]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d111      	bne.n	8003fb0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <SUBGHZ_CheckDeviceReady+0x44>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f9c:	f7ff fba6 	bl	80036ec <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f9      	bne.n	8003fa0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003fac:	f7ff fb8e 	bl	80036cc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f807 	bl	8003fc4 <SUBGHZ_WaitOnBusy>
 8003fb6:	4603      	mov	r3, r0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000000 	.word	0x20000000

08003fc4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <SUBGHZ_WaitOnBusy+0x58>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	0d1b      	lsrs	r3, r3, #20
 8003fde:	2264      	movs	r2, #100	@ 0x64
 8003fe0:	fb02 f303 	mul.w	r3, r2, r3
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003fe6:	f7ff fbaf 	bl	8003748 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003fea:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e009      	b.n	8004012 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b01      	subs	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004004:	f7ff fb8e 	bl	8003724 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	2b01      	cmp	r3, #1
 8004010:	d0e9      	beq.n	8003fe6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004012:	7dfb      	ldrb	r3, [r7, #23]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000000 	.word	0x20000000

08004020 <LL_RCC_GetUSARTClockSource>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	401a      	ands	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	4313      	orrs	r3, r2
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <LL_RCC_GetLPUARTClockSource>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004050:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4013      	ands	r3, r2
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e042      	b.n	80040fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fc fc02 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	@ 0x24
 8004090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fb23 	bl	80046f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f8ac 	bl	8004210 <UART_SetConfig>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e01b      	b.n	80040fa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fba1 	bl	800483a <UART_CheckIdleState>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b08a      	sub	sp, #40	@ 0x28
 8004106:	af02      	add	r7, sp, #8
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004118:	2b20      	cmp	r3, #32
 800411a:	d173      	bne.n	8004204 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit+0x26>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e06c      	b.n	8004206 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	@ 0x21
 8004138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413c:	f7fd fcd2 	bl	8001ae4 <HAL_GetTick>
 8004140:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	88fa      	ldrh	r2, [r7, #6]
 8004146:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415a:	d108      	bne.n	800416e <HAL_UART_Transmit+0x6c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e003      	b.n	8004176 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004176:	e02c      	b.n	80041d2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	2180      	movs	r1, #128	@ 0x80
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fba7 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e039      	b.n	8004206 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	3302      	adds	r3, #2
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e007      	b.n	80041c0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	781a      	ldrb	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1cc      	bne.n	8004178 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2140      	movs	r1, #64	@ 0x40
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb74 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b08c      	sub	sp, #48	@ 0x30
 8004216:	af00      	add	r7, sp, #0
 8004218:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	431a      	orrs	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	431a      	orrs	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	4313      	orrs	r3, r2
 8004236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b94      	ldr	r3, [pc, #592]	@ (8004490 <UART_SetConfig+0x280>)
 8004240:	4013      	ands	r3, r2
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004248:	430b      	orrs	r3, r1
 800424a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a89      	ldr	r2, [pc, #548]	@ (8004494 <UART_SetConfig+0x284>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004278:	4313      	orrs	r3, r2
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004286:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004290:	430b      	orrs	r3, r1
 8004292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	f023 010f 	bic.w	r1, r3, #15
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7a      	ldr	r2, [pc, #488]	@ (8004498 <UART_SetConfig+0x288>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d127      	bne.n	8004304 <UART_SetConfig+0xf4>
 80042b4:	2003      	movs	r0, #3
 80042b6:	f7ff feb3 	bl	8004020 <LL_RCC_GetUSARTClockSource>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d81b      	bhi.n	80042fc <UART_SetConfig+0xec>
 80042c4:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <UART_SetConfig+0xbc>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042ed 	.word	0x080042ed
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042f5 	.word	0x080042f5
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e2:	e080      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ea:	e07c      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f2:	e078      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fa:	e074      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004302:	e070      	b.n	80043e6 <UART_SetConfig+0x1d6>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a64      	ldr	r2, [pc, #400]	@ (800449c <UART_SetConfig+0x28c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d138      	bne.n	8004380 <UART_SetConfig+0x170>
 800430e:	200c      	movs	r0, #12
 8004310:	f7ff fe86 	bl	8004020 <LL_RCC_GetUSARTClockSource>
 8004314:	4603      	mov	r3, r0
 8004316:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d82c      	bhi.n	8004378 <UART_SetConfig+0x168>
 800431e:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <UART_SetConfig+0x114>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004359 	.word	0x08004359
 8004328:	08004379 	.word	0x08004379
 800432c:	08004379 	.word	0x08004379
 8004330:	08004379 	.word	0x08004379
 8004334:	08004369 	.word	0x08004369
 8004338:	08004379 	.word	0x08004379
 800433c:	08004379 	.word	0x08004379
 8004340:	08004379 	.word	0x08004379
 8004344:	08004361 	.word	0x08004361
 8004348:	08004379 	.word	0x08004379
 800434c:	08004379 	.word	0x08004379
 8004350:	08004379 	.word	0x08004379
 8004354:	08004371 	.word	0x08004371
 8004358:	2300      	movs	r3, #0
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435e:	e042      	b.n	80043e6 <UART_SetConfig+0x1d6>
 8004360:	2302      	movs	r3, #2
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004366:	e03e      	b.n	80043e6 <UART_SetConfig+0x1d6>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436e:	e03a      	b.n	80043e6 <UART_SetConfig+0x1d6>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004376:	e036      	b.n	80043e6 <UART_SetConfig+0x1d6>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437e:	e032      	b.n	80043e6 <UART_SetConfig+0x1d6>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a43      	ldr	r2, [pc, #268]	@ (8004494 <UART_SetConfig+0x284>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d12a      	bne.n	80043e0 <UART_SetConfig+0x1d0>
 800438a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800438e:	f7ff fe59 	bl	8004044 <LL_RCC_GetLPUARTClockSource>
 8004392:	4603      	mov	r3, r0
 8004394:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004398:	d01a      	beq.n	80043d0 <UART_SetConfig+0x1c0>
 800439a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800439e:	d81b      	bhi.n	80043d8 <UART_SetConfig+0x1c8>
 80043a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a4:	d00c      	beq.n	80043c0 <UART_SetConfig+0x1b0>
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043aa:	d815      	bhi.n	80043d8 <UART_SetConfig+0x1c8>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <UART_SetConfig+0x1a8>
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b4:	d008      	beq.n	80043c8 <UART_SetConfig+0x1b8>
 80043b6:	e00f      	b.n	80043d8 <UART_SetConfig+0x1c8>
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043be:	e012      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80043c0:	2302      	movs	r3, #2
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e00e      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80043c8:	2304      	movs	r3, #4
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e00a      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80043d0:	2308      	movs	r3, #8
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e006      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80043d8:	2310      	movs	r3, #16
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043de:	e002      	b.n	80043e6 <UART_SetConfig+0x1d6>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004494 <UART_SetConfig+0x284>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	f040 80a4 	bne.w	800453a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d823      	bhi.n	8004442 <UART_SetConfig+0x232>
 80043fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <UART_SetConfig+0x1f0>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004425 	.word	0x08004425
 8004404:	08004443 	.word	0x08004443
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004443 	.word	0x08004443
 8004410:	08004433 	.word	0x08004433
 8004414:	08004443 	.word	0x08004443
 8004418:	08004443 	.word	0x08004443
 800441c:	08004443 	.word	0x08004443
 8004420:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe fe5a 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8004428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800442a:	e010      	b.n	800444e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b1c      	ldr	r3, [pc, #112]	@ (80044a0 <UART_SetConfig+0x290>)
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004430:	e00d      	b.n	800444e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe fd9f 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004436:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004438:	e009      	b.n	800444e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004440:	e005      	b.n	800444e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800444c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8137 	beq.w	80046c4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	4a12      	ldr	r2, [pc, #72]	@ (80044a4 <UART_SetConfig+0x294>)
 800445c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004460:	461a      	mov	r2, r3
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	fbb3 f3f2 	udiv	r3, r3, r2
 8004468:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	429a      	cmp	r2, r3
 8004478:	d305      	bcc.n	8004486 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	429a      	cmp	r2, r3
 8004484:	d910      	bls.n	80044a8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800448c:	e11a      	b.n	80046c4 <UART_SetConfig+0x4b4>
 800448e:	bf00      	nop
 8004490:	cfff69f3 	.word	0xcfff69f3
 8004494:	40008000 	.word	0x40008000
 8004498:	40013800 	.word	0x40013800
 800449c:	40004400 	.word	0x40004400
 80044a0:	00f42400 	.word	0x00f42400
 80044a4:	08005c10 	.word	0x08005c10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	2200      	movs	r2, #0
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	60fa      	str	r2, [r7, #12]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	4a8e      	ldr	r2, [pc, #568]	@ (80046f0 <UART_SetConfig+0x4e0>)
 80044b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2200      	movs	r2, #0
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ca:	f7fb feb1 	bl	8000230 <__aeabi_uldivmod>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	020b      	lsls	r3, r1, #8
 80044e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044e4:	0202      	lsls	r2, r0, #8
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	6849      	ldr	r1, [r1, #4]
 80044ea:	0849      	lsrs	r1, r1, #1
 80044ec:	2000      	movs	r0, #0
 80044ee:	460c      	mov	r4, r1
 80044f0:	4605      	mov	r5, r0
 80044f2:	eb12 0804 	adds.w	r8, r2, r4
 80044f6:	eb43 0905 	adc.w	r9, r3, r5
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	469a      	mov	sl, r3
 8004502:	4693      	mov	fp, r2
 8004504:	4652      	mov	r2, sl
 8004506:	465b      	mov	r3, fp
 8004508:	4640      	mov	r0, r8
 800450a:	4649      	mov	r1, r9
 800450c:	f7fb fe90 	bl	8000230 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4613      	mov	r3, r2
 8004516:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800451e:	d308      	bcc.n	8004532 <UART_SetConfig+0x322>
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004526:	d204      	bcs.n	8004532 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	e0c8      	b.n	80046c4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004538:	e0c4      	b.n	80046c4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004542:	d167      	bne.n	8004614 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004544:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004548:	2b08      	cmp	r3, #8
 800454a:	d828      	bhi.n	800459e <UART_SetConfig+0x38e>
 800454c:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <UART_SetConfig+0x344>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
 8004560:	0800459f 	.word	0x0800459f
 8004564:	0800458f 	.word	0x0800458f
 8004568:	0800459f 	.word	0x0800459f
 800456c:	0800459f 	.word	0x0800459f
 8004570:	0800459f 	.word	0x0800459f
 8004574:	08004597 	.word	0x08004597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fdb0 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 800457c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800457e:	e014      	b.n	80045aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7fe fdbe 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004586:	e010      	b.n	80045aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004588:	4b5a      	ldr	r3, [pc, #360]	@ (80046f4 <UART_SetConfig+0x4e4>)
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800458c:	e00d      	b.n	80045aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458e:	f7fe fcf1 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004592:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004594:	e009      	b.n	80045aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800459c:	e005      	b.n	80045aa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8089 	beq.w	80046c4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	4a4e      	ldr	r2, [pc, #312]	@ (80046f0 <UART_SetConfig+0x4e0>)
 80045b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045bc:	461a      	mov	r2, r3
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045c4:	005a      	lsls	r2, r3, #1
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	441a      	add	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d916      	bls.n	800460c <UART_SetConfig+0x3fc>
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d212      	bcs.n	800460c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f023 030f 	bic.w	r3, r3, #15
 80045ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	8bfb      	ldrh	r3, [r7, #30]
 80045fe:	4313      	orrs	r3, r2
 8004600:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	8bfa      	ldrh	r2, [r7, #30]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	e05b      	b.n	80046c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004612:	e057      	b.n	80046c4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004614:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004618:	2b08      	cmp	r3, #8
 800461a:	d828      	bhi.n	800466e <UART_SetConfig+0x45e>
 800461c:	a201      	add	r2, pc, #4	@ (adr r2, 8004624 <UART_SetConfig+0x414>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004649 	.word	0x08004649
 8004628:	08004651 	.word	0x08004651
 800462c:	08004659 	.word	0x08004659
 8004630:	0800466f 	.word	0x0800466f
 8004634:	0800465f 	.word	0x0800465f
 8004638:	0800466f 	.word	0x0800466f
 800463c:	0800466f 	.word	0x0800466f
 8004640:	0800466f 	.word	0x0800466f
 8004644:	08004667 	.word	0x08004667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004648:	f7fe fd48 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 800464c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800464e:	e014      	b.n	800467a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004650:	f7fe fd56 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004656:	e010      	b.n	800467a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004658:	4b26      	ldr	r3, [pc, #152]	@ (80046f4 <UART_SetConfig+0x4e4>)
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800465c:	e00d      	b.n	800467a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465e:	f7fe fc89 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004662:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004664:	e009      	b.n	800467a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800466c:	e005      	b.n	800467a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004678:	bf00      	nop
    }

    if (pclk != 0U)
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d021      	beq.n	80046c4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	4a1a      	ldr	r2, [pc, #104]	@ (80046f0 <UART_SetConfig+0x4e0>)
 8004686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800468a:	461a      	mov	r2, r3
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	441a      	add	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	2b0f      	cmp	r3, #15
 80046a8:	d909      	bls.n	80046be <UART_SetConfig+0x4ae>
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b0:	d205      	bcs.n	80046be <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	e002      	b.n	80046c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2200      	movs	r2, #0
 80046d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3730      	adds	r7, #48	@ 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ee:	bf00      	nop
 80046f0:	08005c10 	.word	0x08005c10
 80046f4:	00f42400 	.word	0x00f42400

080046f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01a      	beq.n	800480e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f6:	d10a      	bne.n	800480e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af02      	add	r7, sp, #8
 8004840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800484a:	f7fd f94b 	bl	8001ae4 <HAL_GetTick>
 800484e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b08      	cmp	r3, #8
 800485c:	d10e      	bne.n	800487c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800485e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f832 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e028      	b.n	80048ce <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d10e      	bne.n	80048a8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f81c 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e012      	b.n	80048ce <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b09c      	sub	sp, #112	@ 0x70
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e6:	e0af      	b.n	8004a48 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	f000 80ab 	beq.w	8004a48 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fd f8f7 	bl	8001ae4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <UART_WaitOnFlagUntilTimeout+0x32>
 8004902:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004904:	2b00      	cmp	r3, #0
 8004906:	d140      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004918:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800491c:	667b      	str	r3, [r7, #100]	@ 0x64
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004926:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004928:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800492c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800494a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	663b      	str	r3, [r7, #96]	@ 0x60
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800495a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e06f      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d057      	beq.n	8004a48 <UART_WaitOnFlagUntilTimeout+0x172>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b80      	cmp	r3, #128	@ 0x80
 800499c:	d054      	beq.n	8004a48 <UART_WaitOnFlagUntilTimeout+0x172>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d051      	beq.n	8004a48 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b2:	d149      	bne.n	8004a48 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80049d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80049ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e6      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004a10:	623a      	str	r2, [r7, #32]
 8004a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69f9      	ldr	r1, [r7, #28]
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e010      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4013      	ands	r3, r2
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	f43f af40 	beq.w	80048e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3770      	adds	r7, #112	@ 0x70
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e027      	b.n	8004ad8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	@ 0x24
 8004a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004ab6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e02d      	b.n	8004b56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2224      	movs	r2, #36	@ 0x24
 8004b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f850 	bl	8004bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e02d      	b.n	8004bd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2224      	movs	r2, #36	@ 0x24
 8004b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f812 	bl	8004bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d108      	bne.n	8004bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bfc:	e031      	b.n	8004c62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bfe:	2308      	movs	r3, #8
 8004c00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c02:	2308      	movs	r3, #8
 8004c04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	0e5b      	lsrs	r3, r3, #25
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	0f5b      	lsrs	r3, r3, #29
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c26:	7bbb      	ldrb	r3, [r7, #14]
 8004c28:	7b3a      	ldrb	r2, [r7, #12]
 8004c2a:	4910      	ldr	r1, [pc, #64]	@ (8004c6c <UARTEx_SetNbDataToProcess+0x90>)
 8004c2c:	5c8a      	ldrb	r2, [r1, r2]
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c32:	7b3a      	ldrb	r2, [r7, #12]
 8004c34:	490e      	ldr	r1, [pc, #56]	@ (8004c70 <UARTEx_SetNbDataToProcess+0x94>)
 8004c36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c38:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	7b7a      	ldrb	r2, [r7, #13]
 8004c48:	4908      	ldr	r1, [pc, #32]	@ (8004c6c <UARTEx_SetNbDataToProcess+0x90>)
 8004c4a:	5c8a      	ldrb	r2, [r1, r2]
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c50:	7b7a      	ldrb	r2, [r7, #13]
 8004c52:	4907      	ldr	r1, [pc, #28]	@ (8004c70 <UARTEx_SetNbDataToProcess+0x94>)
 8004c54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	08005c28 	.word	0x08005c28
 8004c70:	08005c30 	.word	0x08005c30

08004c74 <setStateMode>:

/*	Sitting operation mode
 *	0 = STATE_MASTER
 *  1 = STATE_SLAVE
 */
LoRaState setStateMode (uint8_t  mode) {
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
	if (mode == 0) return STATE_MASTER;
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <setStateMode+0x14>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e005      	b.n	8004c94 <setStateMode+0x20>
	if (mode == 1) return STATE_SLAVE;
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <setStateMode+0x1e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e000      	b.n	8004c94 <setStateMode+0x20>

	return STATE_NULL;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
	...

08004ca0 <getDefaultLoRaConfig>:

LoRaConfig getDefaultLoRaConfig (void) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	return (LoRaConfig){
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a04      	ldr	r2, [pc, #16]	@ (8004cbc <getDefaultLoRaConfig+0x1c>)
 8004cac:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.lora_spreading_factor =7,
		.lora_codingrate = 1,
		.lora_preamble_length = 8,
		.lora_symbol_timeout = 5,
	};
}
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	08005ab8 	.word	0x08005ab8

08004cc0 <LoraInit>:
    if (conf.lora_symbol_timeout >= 0) config.lora_symbol_timeout = conf.lora_symbol_timeout;

    return config;
}

void LoraInit(LoRaConfig config) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08c      	sub	sp, #48	@ 0x30
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 8004ccc:	4835      	ldr	r0, [pc, #212]	@ (8004da4 <LoraInit+0xe4>)
 8004cce:	f7fb ff61 	bl	8000b94 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8004cd2:	f640 1016 	movw	r0, #2326	@ 0x916
 8004cd6:	f7fc fcbd 	bl	8001654 <SUBGRF_ReadRegister>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f640 1016 	movw	r0, #2326	@ 0x916
 8004ce8:	f7fc fca0 	bl	800162c <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 8004cec:	f7fc f88b 	bl	8000e06 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fc fc56 	bl	80015a4 <SUBGRF_SetBufferBaseAddress>

	//Set Operating Frequency and Transmission Power
	SUBGRF_SetRfFrequency(config.rf_frequency);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc f9a8 	bl	8001050 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(config.tx_output_power);
 8004d00:	7a3b      	ldrb	r3, [r7, #8]
 8004d02:	b25b      	sxtb	r3, r3
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fc fd8b 	bl	8001820 <SUBGRF_SetRfTxPower>

	//Preamble Interrupt Timer Configuration
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7fc f86c 	bl	8000de8 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	//Set Packet Type to LoRa
	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7fc f9e3 	bl	80010dc <SUBGRF_SetPacketType>

	//Sync Word Setup
	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8004d16:	2114      	movs	r1, #20
 8004d18:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8004d1c:	f7fc fc86 	bl	800162c <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8004d20:	2124      	movs	r1, #36	@ 0x24
 8004d22:	f240 7041 	movw	r0, #1857	@ 0x741
 8004d26:	f7fc fc81 	bl	800162c <SUBGRF_WriteRegister>
	 * Coding rate: Defined by config.lora_codingrate
	 * Spreading Factor: Defined by config.lora_spreading_factor
	 * Low Data Rate Optimization: Disabled with value 0x00
	 */
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	753b      	strb	r3, [r7, #20]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[config.lora_bandwidth];
 8004d2e:	7a7b      	ldrb	r3, [r7, #9]
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <LoraInit+0xe8>)
 8004d34:	5c9b      	ldrb	r3, [r3, r2]
 8004d36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)config.lora_codingrate;
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)config.lora_spreading_factor;
 8004d46:	7abb      	ldrb	r3, [r7, #10]
 8004d48:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	SUBGRF_SetModulationParams(&modulationParams);
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fc fab7 	bl	80012c4 <SUBGRF_SetModulationParams>
	 * CRC Mode: Enables cyclic redundancy checking (CRC) to ensure packet integrity
	 * HeaderType: Defines the packet header type as variable length
	 * InvertIQ: Sets the inversion of IQ polarity (normal)
	 * Preamble Length: Used the value from config.lora_preamble_length
	 */
	packetParams.PacketType = PACKET_TYPE_LORA;
 8004d56:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <LoraInit+0xec>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8004d5c:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <LoraInit+0xec>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8004d62:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <LoraInit+0xec>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8004d68:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <LoraInit+0xec>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dac <LoraInit+0xec>)
 8004d70:	22ff      	movs	r2, #255	@ 0xff
 8004d72:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = config.lora_preamble_length;
 8004d74:	7b3b      	ldrb	r3, [r7, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <LoraInit+0xec>)
 8004d7a:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8004d7c:	480b      	ldr	r0, [pc, #44]	@ (8004dac <LoraInit+0xec>)
 8004d7e:	f7fc fb73 	bl	8001468 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8004d82:	f240 7036 	movw	r0, #1846	@ 0x736
 8004d86:	f7fc fc65 	bl	8001654 <SUBGRF_ReadRegister>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f043 0304 	orr.w	r3, r3, #4
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	4619      	mov	r1, r3
 8004d94:	f240 7036 	movw	r0, #1846	@ 0x736
 8004d98:	f7fc fc48 	bl	800162c <SUBGRF_WriteRegister>
}
 8004d9c:	bf00      	nop
 8004d9e:	3730      	adds	r7, #48	@ 0x30
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	08004db1 	.word	0x08004db1
 8004da8:	08005c38 	.word	0x08005c38
 8004dac:	20000128 	.word	0x20000128

08004db0 <RadioOnDioIrq>:

#include "LoRaEvents.h"

volatile LoRaIrqStatus lastEventStatus = IRQ_DEFAULT_RETURN_STATUS;

void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
	lastEventStatus = LoRaEventHandler(radioIrq);
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f80b 	bl	8004dd8 <LoRaEventHandler>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <RadioOnDioIrq+0x24>)
 8004dc8:	701a      	strb	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000009 	.word	0x20000009

08004dd8 <LoRaEventHandler>:

LoRaIrqStatus LoRaEventHandler(RadioIrqMasks_t radioIrq) {
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq) {
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de8:	d00f      	beq.n	8004e0a <LoRaEventHandler+0x32>
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dee:	dc10      	bgt.n	8004e12 <LoRaEventHandler+0x3a>
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d00c      	beq.n	8004e0e <LoRaEventHandler+0x36>
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	dc0c      	bgt.n	8004e12 <LoRaEventHandler+0x3a>
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d002      	beq.n	8004e02 <LoRaEventHandler+0x2a>
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d002      	beq.n	8004e06 <LoRaEventHandler+0x2e>
 8004e00:	e007      	b.n	8004e12 <LoRaEventHandler+0x3a>
        case IRQ_TX_DONE:
            return IRQ_TX_DONE_STATUS;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e006      	b.n	8004e14 <LoRaEventHandler+0x3c>
        case IRQ_RX_DONE:
            return IRQ_RX_DONE_STATUS;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e004      	b.n	8004e14 <LoRaEventHandler+0x3c>
        case IRQ_RX_TX_TIMEOUT:
            return IRQ_RX_TX_TIMEOUT_STATUS;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e002      	b.n	8004e14 <LoRaEventHandler+0x3c>
        case IRQ_CRC_ERROR:
            return IRQ_CRC_ERROR_STATUS;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e000      	b.n	8004e14 <LoRaEventHandler+0x3c>
        default:
            return IRQ_DEFAULT_RETURN_STATUS;
 8004e12:	2399      	movs	r3, #153	@ 0x99
    }
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
	...

08004e20 <getLastLoRaEvent>:

LoRaIrqStatus getLastLoRaEvent(void) {
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
    return lastEventStatus;
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <getLastLoRaEvent+0x14>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b2db      	uxtb	r3, r3
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000009 	.word	0x20000009

08004e38 <SendMessage>:
 *      Author: Luiz Fernando Silvério Felisbino
 */

#include "LoRaMessageHandler.h"

LoRaIrqStatus SendMessage(const char *message) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	if (message == NULL || strlen(message) == 0) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <SendMessage+0x16>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <SendMessage+0x1a>
		return IRQ_CRC_ERROR_STATUS;  // Invalid message
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e032      	b.n	8004eb8 <SendMessage+0x80>
	}

	HAL_Delay(200);
 8004e52:	20c8      	movs	r0, #200	@ 0xc8
 8004e54:	f7fc fe50 	bl	8001af8 <HAL_Delay>

	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f240 2101 	movw	r1, #513	@ 0x201
 8004e60:	f240 2001 	movw	r0, #513	@ 0x201
 8004e64:	f7fc f898 	bl	8000f98 <SUBGRF_SetDioIrqParams>
	                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8004e68:	2101      	movs	r1, #1
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f7fc fcb0 	bl	80017d0 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8004e70:	f640 0089 	movw	r0, #2185	@ 0x889
 8004e74:	f7fc fbee 	bl	8001654 <SUBGRF_ReadRegister>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	4619      	mov	r1, r3
 8004e82:	f640 0089 	movw	r0, #2185	@ 0x889
 8004e86:	f7fc fbd1 	bl	800162c <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = strlen(message);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fb f978 	bl	8000180 <strlen>
 8004e90:	4603      	mov	r3, r0
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <SendMessage+0x88>)
 8004e96:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8004e98:	4809      	ldr	r0, [pc, #36]	@ (8004ec0 <SendMessage+0x88>)
 8004e9a:	f7fc fae5 	bl	8001468 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t *)message, strlen(message), 0);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fb f96e 	bl	8000180 <strlen>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fb feeb 	bl	8000c88 <SUBGRF_SendPayload>

	//while (getLastLoRaEvent() == IRQ_DEFAULT_RETURN_STATUS);
	return getLastLoRaEvent();
 8004eb2:	f7ff ffb5 	bl	8004e20 <getLastLoRaEvent>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000128 	.word	0x20000128

08004ec4 <receiveMessage>:

LoRaIrqStatus receiveMessage(char *buffer, uint8_t bufferSize, uint16_t Timeout) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	803b      	strh	r3, [r7, #0]
    if (buffer == NULL || bufferSize <= 0) {
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <receiveMessage+0x1c>
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <receiveMessage+0x20>
        return IRQ_CRC_ERROR_STATUS;  // Invalid buffer
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e02b      	b.n	8004f3c <receiveMessage+0x78>
    }

    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f240 2162 	movw	r1, #610	@ 0x262
 8004eec:	f240 2062 	movw	r0, #610	@ 0x262
 8004ef0:	f7fc f852 	bl	8000f98 <SUBGRF_SetDioIrqParams>
                           IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE);
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f7fc fc6a 	bl	80017d0 <SUBGRF_SetSwitch>
    packetParams.Params.LoRa.PayloadLength = 0xFF;
 8004efc:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <receiveMessage+0x80>)
 8004efe:	22ff      	movs	r2, #255	@ 0xff
 8004f00:	745a      	strb	r2, [r3, #17]
    SUBGRF_SetPacketParams(&packetParams);
 8004f02:	4810      	ldr	r0, [pc, #64]	@ (8004f44 <receiveMessage+0x80>)
 8004f04:	f7fc fab0 	bl	8001468 <SUBGRF_SetPacketParams>
    SUBGRF_SetRx(Timeout << 6);
 8004f08:	883b      	ldrh	r3, [r7, #0]
 8004f0a:	019b      	lsls	r3, r3, #6
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb ff4b 	bl	8000da8 <SUBGRF_SetRx>

    LoRaIrqStatus event = getLastLoRaEvent();
 8004f12:	f7ff ff85 	bl	8004e20 <getLastLoRaEvent>
 8004f16:	4603      	mov	r3, r0
 8004f18:	73fb      	strb	r3, [r7, #15]

    if (event == IRQ_RX_DONE_STATUS) {
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d10c      	bne.n	8004f3a <receiveMessage+0x76>
    	SUBGRF_GetPayload((uint8_t *)buffer, (uint8_t)bufferSize, 0xFF);
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	22ff      	movs	r2, #255	@ 0xff
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fb fe8c 	bl	8000c44 <SUBGRF_GetPayload>
    	buffer[bufferSize] = '\0';
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
        return IRQ_RX_DONE_STATUS;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <receiveMessage+0x78>
    }

    return event;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000128 	.word	0x20000128

08004f48 <mainLoRa>:

  sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
}

void mainLoRa(void) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004f4e:	af00      	add	r7, sp, #0
	LoraInit(getDefaultLoRaConfig());
 8004f50:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fea3 	bl	8004ca0 <getDefaultLoRaConfig>
 8004f5a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f62:	f7ff fead 	bl	8004cc0 <LoraInit>
    ConfigRES RES;
    RES.state = setStateMode(STATE_MODE);
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7ff fe84 	bl	8004c74 <setStateMode>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f78:	701a      	strb	r2, [r3, #0]
    RES.rxTimeout = 3000;
 8004f7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f82:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004f86:	605a      	str	r2, [r3, #4]
    RES.rxMargin = 200;
 8004f88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f8c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f90:	22c8      	movs	r2, #200	@ 0xc8
 8004f92:	609a      	str	r2, [r3, #8]

    SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 8004f94:	2300      	movs	r3, #0
 8004f96:	2200      	movs	r2, #0
 8004f98:	f240 2142 	movw	r1, #578	@ 0x242
 8004f9c:	f240 2042 	movw	r0, #578	@ 0x242
 8004fa0:	f7fb fffa 	bl	8000f98 <SUBGRF_SetDioIrqParams>
        IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
        IRQ_RADIO_NONE,
        IRQ_RADIO_NONE );
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f7fc fc12 	bl	80017d0 <SUBGRF_SetSwitch>
    SUBGRF_SetRx(RES.rxTimeout << 6);
 8004fac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fb0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	019b      	lsls	r3, r3, #6
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fb fef5 	bl	8000da8 <SUBGRF_SetRx>

    while (true){
    	if (RES.state == STATE_MASTER){
 8004fbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d13c      	bne.n	8005046 <mainLoRa+0xfe>
    	    	uint8_t result = SendMessage("GO");
 8004fcc:	484e      	ldr	r0, [pc, #312]	@ (8005108 <mainLoRa+0x1c0>)
 8004fce:	f7ff ff33 	bl	8004e38 <SendMessage>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
    	        switch (result) {
 8004fd8:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8004fdc:	2b99      	cmp	r3, #153	@ 0x99
 8004fde:	d022      	beq.n	8005026 <mainLoRa+0xde>
 8004fe0:	2b99      	cmp	r3, #153	@ 0x99
 8004fe2:	dc28      	bgt.n	8005036 <mainLoRa+0xee>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d016      	beq.n	8005016 <mainLoRa+0xce>
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	dc24      	bgt.n	8005036 <mainLoRa+0xee>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <mainLoRa+0xae>
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d008      	beq.n	8005006 <mainLoRa+0xbe>
 8004ff4:	e01f      	b.n	8005036 <mainLoRa+0xee>
    	            case IRQ_TX_DONE_STATUS:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"TX done\r\n", 18, HAL_MAX_DELAY);
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffa:	2212      	movs	r2, #18
 8004ffc:	4943      	ldr	r1, [pc, #268]	@ (800510c <mainLoRa+0x1c4>)
 8004ffe:	4844      	ldr	r0, [pc, #272]	@ (8005110 <mainLoRa+0x1c8>)
 8005000:	f7ff f87f 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 8005004:	e07f      	b.n	8005106 <mainLoRa+0x1be>
    	            case IRQ_RX_TX_TIMEOUT_STATUS:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Timeout\r\n", 18, HAL_MAX_DELAY);
 8005006:	f04f 33ff 	mov.w	r3, #4294967295
 800500a:	2212      	movs	r2, #18
 800500c:	4941      	ldr	r1, [pc, #260]	@ (8005114 <mainLoRa+0x1cc>)
 800500e:	4840      	ldr	r0, [pc, #256]	@ (8005110 <mainLoRa+0x1c8>)
 8005010:	f7ff f877 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 8005014:	e077      	b.n	8005106 <mainLoRa+0x1be>
    	            case IRQ_CRC_ERROR_STATUS:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Error\r\n", 18, HAL_MAX_DELAY);
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	2212      	movs	r2, #18
 800501c:	493e      	ldr	r1, [pc, #248]	@ (8005118 <mainLoRa+0x1d0>)
 800501e:	483c      	ldr	r0, [pc, #240]	@ (8005110 <mainLoRa+0x1c8>)
 8005020:	f7ff f86f 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 8005024:	e06f      	b.n	8005106 <mainLoRa+0x1be>
    	            case IRQ_DEFAULT_RETURN_STATUS:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Return\r\n", 18, HAL_MAX_DELAY);
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	2212      	movs	r2, #18
 800502c:	493b      	ldr	r1, [pc, #236]	@ (800511c <mainLoRa+0x1d4>)
 800502e:	4838      	ldr	r0, [pc, #224]	@ (8005110 <mainLoRa+0x1c8>)
 8005030:	f7ff f867 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 8005034:	e067      	b.n	8005106 <mainLoRa+0x1be>
    	            default:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Master\r\n", 18, HAL_MAX_DELAY);
 8005036:	f04f 33ff 	mov.w	r3, #4294967295
 800503a:	2212      	movs	r2, #18
 800503c:	4938      	ldr	r1, [pc, #224]	@ (8005120 <mainLoRa+0x1d8>)
 800503e:	4834      	ldr	r0, [pc, #208]	@ (8005110 <mainLoRa+0x1c8>)
 8005040:	f7ff f85f 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 8005044:	e05f      	b.n	8005106 <mainLoRa+0x1be>
    	        }
    	    } else if (RES.state == STATE_SLAVE){
 8005046:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800504a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d1b4      	bne.n	8004fbe <mainLoRa+0x76>
    	    	HAL_Delay(500);
 8005054:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005058:	f7fc fd4e 	bl	8001af8 <HAL_Delay>
    	    	uint8_t result = receiveMessage(RES.rxBuffer, 2, RES.rxTimeout);
 800505c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005060:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	b29a      	uxth	r2, r3
 8005068:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800506c:	330c      	adds	r3, #12
 800506e:	2102      	movs	r1, #2
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ff27 	bl	8004ec4 <receiveMessage>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
    	        switch (result) {
 800507c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005080:	2b99      	cmp	r3, #153	@ 0x99
 8005082:	d030      	beq.n	80050e6 <mainLoRa+0x19e>
 8005084:	2b99      	cmp	r3, #153	@ 0x99
 8005086:	dc36      	bgt.n	80050f6 <mainLoRa+0x1ae>
 8005088:	2b03      	cmp	r3, #3
 800508a:	d024      	beq.n	80050d6 <mainLoRa+0x18e>
 800508c:	2b03      	cmp	r3, #3
 800508e:	dc32      	bgt.n	80050f6 <mainLoRa+0x1ae>
 8005090:	2b01      	cmp	r3, #1
 8005092:	d002      	beq.n	800509a <mainLoRa+0x152>
 8005094:	2b02      	cmp	r3, #2
 8005096:	d016      	beq.n	80050c6 <mainLoRa+0x17e>
 8005098:	e02d      	b.n	80050f6 <mainLoRa+0x1ae>
    	            case IRQ_RX_DONE_STATUS:
    	                char msg[255];
    	                sprintf(msg, "RX done: %s\r\n", RES.rxBuffer);
 800509a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800509e:	f103 020c 	add.w	r2, r3, #12
 80050a2:	463b      	mov	r3, r7
 80050a4:	491f      	ldr	r1, [pc, #124]	@ (8005124 <mainLoRa+0x1dc>)
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f842 	bl	8005130 <siprintf>
    	                HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80050ac:	463b      	mov	r3, r7
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb f866 	bl	8000180 <strlen>
 80050b4:	4603      	mov	r3, r0
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	4639      	mov	r1, r7
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	4814      	ldr	r0, [pc, #80]	@ (8005110 <mainLoRa+0x1c8>)
 80050c0:	f7ff f81f 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 80050c4:	e01f      	b.n	8005106 <mainLoRa+0x1be>
    	            case IRQ_RX_TX_TIMEOUT_STATUS:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Timeout\r\n", 18, HAL_MAX_DELAY);
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	2212      	movs	r2, #18
 80050cc:	4916      	ldr	r1, [pc, #88]	@ (8005128 <mainLoRa+0x1e0>)
 80050ce:	4810      	ldr	r0, [pc, #64]	@ (8005110 <mainLoRa+0x1c8>)
 80050d0:	f7ff f817 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 80050d4:	e017      	b.n	8005106 <mainLoRa+0x1be>
    	            case IRQ_CRC_ERROR_STATUS:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Error\r\n", 18, HAL_MAX_DELAY);
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	2212      	movs	r2, #18
 80050dc:	490e      	ldr	r1, [pc, #56]	@ (8005118 <mainLoRa+0x1d0>)
 80050de:	480c      	ldr	r0, [pc, #48]	@ (8005110 <mainLoRa+0x1c8>)
 80050e0:	f7ff f80f 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 80050e4:	e00f      	b.n	8005106 <mainLoRa+0x1be>
    	            case IRQ_DEFAULT_RETURN_STATUS:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Return\r\n", 18, HAL_MAX_DELAY);
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ea:	2212      	movs	r2, #18
 80050ec:	490b      	ldr	r1, [pc, #44]	@ (800511c <mainLoRa+0x1d4>)
 80050ee:	4808      	ldr	r0, [pc, #32]	@ (8005110 <mainLoRa+0x1c8>)
 80050f0:	f7ff f807 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 80050f4:	e007      	b.n	8005106 <mainLoRa+0x1be>
    	            default:
    	                HAL_UART_Transmit(&huart2, (uint8_t *)"Default Slave\r\n", 18, HAL_MAX_DELAY);
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295
 80050fa:	2212      	movs	r2, #18
 80050fc:	490b      	ldr	r1, [pc, #44]	@ (800512c <mainLoRa+0x1e4>)
 80050fe:	4804      	ldr	r0, [pc, #16]	@ (8005110 <mainLoRa+0x1c8>)
 8005100:	f7fe ffff 	bl	8004102 <HAL_UART_Transmit>
    	                break;
 8005104:	bf00      	nop
    	if (RES.state == STATE_MASTER){
 8005106:	e75a      	b.n	8004fbe <mainLoRa+0x76>
 8005108:	08005ae8 	.word	0x08005ae8
 800510c:	08005aec 	.word	0x08005aec
 8005110:	20000088 	.word	0x20000088
 8005114:	08005af8 	.word	0x08005af8
 8005118:	08005b0c 	.word	0x08005b0c
 800511c:	08005b14 	.word	0x08005b14
 8005120:	08005b28 	.word	0x08005b28
 8005124:	08005b3c 	.word	0x08005b3c
 8005128:	08005b4c 	.word	0x08005b4c
 800512c:	08005b60 	.word	0x08005b60

08005130 <siprintf>:
 8005130:	b40e      	push	{r1, r2, r3}
 8005132:	b500      	push	{lr}
 8005134:	b09c      	sub	sp, #112	@ 0x70
 8005136:	ab1d      	add	r3, sp, #116	@ 0x74
 8005138:	9002      	str	r0, [sp, #8]
 800513a:	9006      	str	r0, [sp, #24]
 800513c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005140:	4809      	ldr	r0, [pc, #36]	@ (8005168 <siprintf+0x38>)
 8005142:	9107      	str	r1, [sp, #28]
 8005144:	9104      	str	r1, [sp, #16]
 8005146:	4909      	ldr	r1, [pc, #36]	@ (800516c <siprintf+0x3c>)
 8005148:	f853 2b04 	ldr.w	r2, [r3], #4
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	6800      	ldr	r0, [r0, #0]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	a902      	add	r1, sp, #8
 8005154:	f000 f994 	bl	8005480 <_svfiprintf_r>
 8005158:	9b02      	ldr	r3, [sp, #8]
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	b01c      	add	sp, #112	@ 0x70
 8005160:	f85d eb04 	ldr.w	lr, [sp], #4
 8005164:	b003      	add	sp, #12
 8005166:	4770      	bx	lr
 8005168:	2000000c 	.word	0x2000000c
 800516c:	ffff0208 	.word	0xffff0208

08005170 <memset>:
 8005170:	4402      	add	r2, r0
 8005172:	4603      	mov	r3, r0
 8005174:	4293      	cmp	r3, r2
 8005176:	d100      	bne.n	800517a <memset+0xa>
 8005178:	4770      	bx	lr
 800517a:	f803 1b01 	strb.w	r1, [r3], #1
 800517e:	e7f9      	b.n	8005174 <memset+0x4>

08005180 <__errno>:
 8005180:	4b01      	ldr	r3, [pc, #4]	@ (8005188 <__errno+0x8>)
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	2000000c 	.word	0x2000000c

0800518c <__libc_init_array>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	4d0d      	ldr	r5, [pc, #52]	@ (80051c4 <__libc_init_array+0x38>)
 8005190:	4c0d      	ldr	r4, [pc, #52]	@ (80051c8 <__libc_init_array+0x3c>)
 8005192:	1b64      	subs	r4, r4, r5
 8005194:	10a4      	asrs	r4, r4, #2
 8005196:	2600      	movs	r6, #0
 8005198:	42a6      	cmp	r6, r4
 800519a:	d109      	bne.n	80051b0 <__libc_init_array+0x24>
 800519c:	4d0b      	ldr	r5, [pc, #44]	@ (80051cc <__libc_init_array+0x40>)
 800519e:	4c0c      	ldr	r4, [pc, #48]	@ (80051d0 <__libc_init_array+0x44>)
 80051a0:	f000 fc66 	bl	8005a70 <_init>
 80051a4:	1b64      	subs	r4, r4, r5
 80051a6:	10a4      	asrs	r4, r4, #2
 80051a8:	2600      	movs	r6, #0
 80051aa:	42a6      	cmp	r6, r4
 80051ac:	d105      	bne.n	80051ba <__libc_init_array+0x2e>
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b4:	4798      	blx	r3
 80051b6:	3601      	adds	r6, #1
 80051b8:	e7ee      	b.n	8005198 <__libc_init_array+0xc>
 80051ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80051be:	4798      	blx	r3
 80051c0:	3601      	adds	r6, #1
 80051c2:	e7f2      	b.n	80051aa <__libc_init_array+0x1e>
 80051c4:	08005c78 	.word	0x08005c78
 80051c8:	08005c78 	.word	0x08005c78
 80051cc:	08005c78 	.word	0x08005c78
 80051d0:	08005c7c 	.word	0x08005c7c

080051d4 <__retarget_lock_acquire_recursive>:
 80051d4:	4770      	bx	lr

080051d6 <__retarget_lock_release_recursive>:
 80051d6:	4770      	bx	lr

080051d8 <_free_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4605      	mov	r5, r0
 80051dc:	2900      	cmp	r1, #0
 80051de:	d041      	beq.n	8005264 <_free_r+0x8c>
 80051e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e4:	1f0c      	subs	r4, r1, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfb8      	it	lt
 80051ea:	18e4      	addlt	r4, r4, r3
 80051ec:	f000 f8e0 	bl	80053b0 <__malloc_lock>
 80051f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005268 <_free_r+0x90>)
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	b933      	cbnz	r3, 8005204 <_free_r+0x2c>
 80051f6:	6063      	str	r3, [r4, #4]
 80051f8:	6014      	str	r4, [r2, #0]
 80051fa:	4628      	mov	r0, r5
 80051fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005200:	f000 b8dc 	b.w	80053bc <__malloc_unlock>
 8005204:	42a3      	cmp	r3, r4
 8005206:	d908      	bls.n	800521a <_free_r+0x42>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	1821      	adds	r1, r4, r0
 800520c:	428b      	cmp	r3, r1
 800520e:	bf01      	itttt	eq
 8005210:	6819      	ldreq	r1, [r3, #0]
 8005212:	685b      	ldreq	r3, [r3, #4]
 8005214:	1809      	addeq	r1, r1, r0
 8005216:	6021      	streq	r1, [r4, #0]
 8005218:	e7ed      	b.n	80051f6 <_free_r+0x1e>
 800521a:	461a      	mov	r2, r3
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	b10b      	cbz	r3, 8005224 <_free_r+0x4c>
 8005220:	42a3      	cmp	r3, r4
 8005222:	d9fa      	bls.n	800521a <_free_r+0x42>
 8005224:	6811      	ldr	r1, [r2, #0]
 8005226:	1850      	adds	r0, r2, r1
 8005228:	42a0      	cmp	r0, r4
 800522a:	d10b      	bne.n	8005244 <_free_r+0x6c>
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	4401      	add	r1, r0
 8005230:	1850      	adds	r0, r2, r1
 8005232:	4283      	cmp	r3, r0
 8005234:	6011      	str	r1, [r2, #0]
 8005236:	d1e0      	bne.n	80051fa <_free_r+0x22>
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	6053      	str	r3, [r2, #4]
 800523e:	4408      	add	r0, r1
 8005240:	6010      	str	r0, [r2, #0]
 8005242:	e7da      	b.n	80051fa <_free_r+0x22>
 8005244:	d902      	bls.n	800524c <_free_r+0x74>
 8005246:	230c      	movs	r3, #12
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	e7d6      	b.n	80051fa <_free_r+0x22>
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	1821      	adds	r1, r4, r0
 8005250:	428b      	cmp	r3, r1
 8005252:	bf04      	itt	eq
 8005254:	6819      	ldreq	r1, [r3, #0]
 8005256:	685b      	ldreq	r3, [r3, #4]
 8005258:	6063      	str	r3, [r4, #4]
 800525a:	bf04      	itt	eq
 800525c:	1809      	addeq	r1, r1, r0
 800525e:	6021      	streq	r1, [r4, #0]
 8005260:	6054      	str	r4, [r2, #4]
 8005262:	e7ca      	b.n	80051fa <_free_r+0x22>
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	20000280 	.word	0x20000280

0800526c <sbrk_aligned>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4e0f      	ldr	r6, [pc, #60]	@ (80052ac <sbrk_aligned+0x40>)
 8005270:	460c      	mov	r4, r1
 8005272:	6831      	ldr	r1, [r6, #0]
 8005274:	4605      	mov	r5, r0
 8005276:	b911      	cbnz	r1, 800527e <sbrk_aligned+0x12>
 8005278:	f000 fba6 	bl	80059c8 <_sbrk_r>
 800527c:	6030      	str	r0, [r6, #0]
 800527e:	4621      	mov	r1, r4
 8005280:	4628      	mov	r0, r5
 8005282:	f000 fba1 	bl	80059c8 <_sbrk_r>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d103      	bne.n	8005292 <sbrk_aligned+0x26>
 800528a:	f04f 34ff 	mov.w	r4, #4294967295
 800528e:	4620      	mov	r0, r4
 8005290:	bd70      	pop	{r4, r5, r6, pc}
 8005292:	1cc4      	adds	r4, r0, #3
 8005294:	f024 0403 	bic.w	r4, r4, #3
 8005298:	42a0      	cmp	r0, r4
 800529a:	d0f8      	beq.n	800528e <sbrk_aligned+0x22>
 800529c:	1a21      	subs	r1, r4, r0
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 fb92 	bl	80059c8 <_sbrk_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d1f2      	bne.n	800528e <sbrk_aligned+0x22>
 80052a8:	e7ef      	b.n	800528a <sbrk_aligned+0x1e>
 80052aa:	bf00      	nop
 80052ac:	2000027c 	.word	0x2000027c

080052b0 <_malloc_r>:
 80052b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b4:	1ccd      	adds	r5, r1, #3
 80052b6:	f025 0503 	bic.w	r5, r5, #3
 80052ba:	3508      	adds	r5, #8
 80052bc:	2d0c      	cmp	r5, #12
 80052be:	bf38      	it	cc
 80052c0:	250c      	movcc	r5, #12
 80052c2:	2d00      	cmp	r5, #0
 80052c4:	4606      	mov	r6, r0
 80052c6:	db01      	blt.n	80052cc <_malloc_r+0x1c>
 80052c8:	42a9      	cmp	r1, r5
 80052ca:	d904      	bls.n	80052d6 <_malloc_r+0x26>
 80052cc:	230c      	movs	r3, #12
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	2000      	movs	r0, #0
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053ac <_malloc_r+0xfc>
 80052da:	f000 f869 	bl	80053b0 <__malloc_lock>
 80052de:	f8d8 3000 	ldr.w	r3, [r8]
 80052e2:	461c      	mov	r4, r3
 80052e4:	bb44      	cbnz	r4, 8005338 <_malloc_r+0x88>
 80052e6:	4629      	mov	r1, r5
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7ff ffbf 	bl	800526c <sbrk_aligned>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	4604      	mov	r4, r0
 80052f2:	d158      	bne.n	80053a6 <_malloc_r+0xf6>
 80052f4:	f8d8 4000 	ldr.w	r4, [r8]
 80052f8:	4627      	mov	r7, r4
 80052fa:	2f00      	cmp	r7, #0
 80052fc:	d143      	bne.n	8005386 <_malloc_r+0xd6>
 80052fe:	2c00      	cmp	r4, #0
 8005300:	d04b      	beq.n	800539a <_malloc_r+0xea>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	4639      	mov	r1, r7
 8005306:	4630      	mov	r0, r6
 8005308:	eb04 0903 	add.w	r9, r4, r3
 800530c:	f000 fb5c 	bl	80059c8 <_sbrk_r>
 8005310:	4581      	cmp	r9, r0
 8005312:	d142      	bne.n	800539a <_malloc_r+0xea>
 8005314:	6821      	ldr	r1, [r4, #0]
 8005316:	1a6d      	subs	r5, r5, r1
 8005318:	4629      	mov	r1, r5
 800531a:	4630      	mov	r0, r6
 800531c:	f7ff ffa6 	bl	800526c <sbrk_aligned>
 8005320:	3001      	adds	r0, #1
 8005322:	d03a      	beq.n	800539a <_malloc_r+0xea>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	442b      	add	r3, r5
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	f8d8 3000 	ldr.w	r3, [r8]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	bb62      	cbnz	r2, 800538c <_malloc_r+0xdc>
 8005332:	f8c8 7000 	str.w	r7, [r8]
 8005336:	e00f      	b.n	8005358 <_malloc_r+0xa8>
 8005338:	6822      	ldr	r2, [r4, #0]
 800533a:	1b52      	subs	r2, r2, r5
 800533c:	d420      	bmi.n	8005380 <_malloc_r+0xd0>
 800533e:	2a0b      	cmp	r2, #11
 8005340:	d917      	bls.n	8005372 <_malloc_r+0xc2>
 8005342:	1961      	adds	r1, r4, r5
 8005344:	42a3      	cmp	r3, r4
 8005346:	6025      	str	r5, [r4, #0]
 8005348:	bf18      	it	ne
 800534a:	6059      	strne	r1, [r3, #4]
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	bf08      	it	eq
 8005350:	f8c8 1000 	streq.w	r1, [r8]
 8005354:	5162      	str	r2, [r4, r5]
 8005356:	604b      	str	r3, [r1, #4]
 8005358:	4630      	mov	r0, r6
 800535a:	f000 f82f 	bl	80053bc <__malloc_unlock>
 800535e:	f104 000b 	add.w	r0, r4, #11
 8005362:	1d23      	adds	r3, r4, #4
 8005364:	f020 0007 	bic.w	r0, r0, #7
 8005368:	1ac2      	subs	r2, r0, r3
 800536a:	bf1c      	itt	ne
 800536c:	1a1b      	subne	r3, r3, r0
 800536e:	50a3      	strne	r3, [r4, r2]
 8005370:	e7af      	b.n	80052d2 <_malloc_r+0x22>
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	42a3      	cmp	r3, r4
 8005376:	bf0c      	ite	eq
 8005378:	f8c8 2000 	streq.w	r2, [r8]
 800537c:	605a      	strne	r2, [r3, #4]
 800537e:	e7eb      	b.n	8005358 <_malloc_r+0xa8>
 8005380:	4623      	mov	r3, r4
 8005382:	6864      	ldr	r4, [r4, #4]
 8005384:	e7ae      	b.n	80052e4 <_malloc_r+0x34>
 8005386:	463c      	mov	r4, r7
 8005388:	687f      	ldr	r7, [r7, #4]
 800538a:	e7b6      	b.n	80052fa <_malloc_r+0x4a>
 800538c:	461a      	mov	r2, r3
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	42a3      	cmp	r3, r4
 8005392:	d1fb      	bne.n	800538c <_malloc_r+0xdc>
 8005394:	2300      	movs	r3, #0
 8005396:	6053      	str	r3, [r2, #4]
 8005398:	e7de      	b.n	8005358 <_malloc_r+0xa8>
 800539a:	230c      	movs	r3, #12
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	4630      	mov	r0, r6
 80053a0:	f000 f80c 	bl	80053bc <__malloc_unlock>
 80053a4:	e794      	b.n	80052d0 <_malloc_r+0x20>
 80053a6:	6005      	str	r5, [r0, #0]
 80053a8:	e7d6      	b.n	8005358 <_malloc_r+0xa8>
 80053aa:	bf00      	nop
 80053ac:	20000280 	.word	0x20000280

080053b0 <__malloc_lock>:
 80053b0:	4801      	ldr	r0, [pc, #4]	@ (80053b8 <__malloc_lock+0x8>)
 80053b2:	f7ff bf0f 	b.w	80051d4 <__retarget_lock_acquire_recursive>
 80053b6:	bf00      	nop
 80053b8:	20000278 	.word	0x20000278

080053bc <__malloc_unlock>:
 80053bc:	4801      	ldr	r0, [pc, #4]	@ (80053c4 <__malloc_unlock+0x8>)
 80053be:	f7ff bf0a 	b.w	80051d6 <__retarget_lock_release_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000278 	.word	0x20000278

080053c8 <__ssputs_r>:
 80053c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053cc:	688e      	ldr	r6, [r1, #8]
 80053ce:	461f      	mov	r7, r3
 80053d0:	42be      	cmp	r6, r7
 80053d2:	680b      	ldr	r3, [r1, #0]
 80053d4:	4682      	mov	sl, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	4690      	mov	r8, r2
 80053da:	d82d      	bhi.n	8005438 <__ssputs_r+0x70>
 80053dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80053e4:	d026      	beq.n	8005434 <__ssputs_r+0x6c>
 80053e6:	6965      	ldr	r5, [r4, #20]
 80053e8:	6909      	ldr	r1, [r1, #16]
 80053ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053ee:	eba3 0901 	sub.w	r9, r3, r1
 80053f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053f6:	1c7b      	adds	r3, r7, #1
 80053f8:	444b      	add	r3, r9
 80053fa:	106d      	asrs	r5, r5, #1
 80053fc:	429d      	cmp	r5, r3
 80053fe:	bf38      	it	cc
 8005400:	461d      	movcc	r5, r3
 8005402:	0553      	lsls	r3, r2, #21
 8005404:	d527      	bpl.n	8005456 <__ssputs_r+0x8e>
 8005406:	4629      	mov	r1, r5
 8005408:	f7ff ff52 	bl	80052b0 <_malloc_r>
 800540c:	4606      	mov	r6, r0
 800540e:	b360      	cbz	r0, 800546a <__ssputs_r+0xa2>
 8005410:	6921      	ldr	r1, [r4, #16]
 8005412:	464a      	mov	r2, r9
 8005414:	f000 fae8 	bl	80059e8 <memcpy>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800541e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	6126      	str	r6, [r4, #16]
 8005426:	6165      	str	r5, [r4, #20]
 8005428:	444e      	add	r6, r9
 800542a:	eba5 0509 	sub.w	r5, r5, r9
 800542e:	6026      	str	r6, [r4, #0]
 8005430:	60a5      	str	r5, [r4, #8]
 8005432:	463e      	mov	r6, r7
 8005434:	42be      	cmp	r6, r7
 8005436:	d900      	bls.n	800543a <__ssputs_r+0x72>
 8005438:	463e      	mov	r6, r7
 800543a:	6820      	ldr	r0, [r4, #0]
 800543c:	4632      	mov	r2, r6
 800543e:	4641      	mov	r1, r8
 8005440:	f000 faa8 	bl	8005994 <memmove>
 8005444:	68a3      	ldr	r3, [r4, #8]
 8005446:	1b9b      	subs	r3, r3, r6
 8005448:	60a3      	str	r3, [r4, #8]
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	4433      	add	r3, r6
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	2000      	movs	r0, #0
 8005452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005456:	462a      	mov	r2, r5
 8005458:	f000 fad4 	bl	8005a04 <_realloc_r>
 800545c:	4606      	mov	r6, r0
 800545e:	2800      	cmp	r0, #0
 8005460:	d1e0      	bne.n	8005424 <__ssputs_r+0x5c>
 8005462:	6921      	ldr	r1, [r4, #16]
 8005464:	4650      	mov	r0, sl
 8005466:	f7ff feb7 	bl	80051d8 <_free_r>
 800546a:	230c      	movs	r3, #12
 800546c:	f8ca 3000 	str.w	r3, [sl]
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	e7e9      	b.n	8005452 <__ssputs_r+0x8a>
	...

08005480 <_svfiprintf_r>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	4698      	mov	r8, r3
 8005486:	898b      	ldrh	r3, [r1, #12]
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	b09d      	sub	sp, #116	@ 0x74
 800548c:	4607      	mov	r7, r0
 800548e:	460d      	mov	r5, r1
 8005490:	4614      	mov	r4, r2
 8005492:	d510      	bpl.n	80054b6 <_svfiprintf_r+0x36>
 8005494:	690b      	ldr	r3, [r1, #16]
 8005496:	b973      	cbnz	r3, 80054b6 <_svfiprintf_r+0x36>
 8005498:	2140      	movs	r1, #64	@ 0x40
 800549a:	f7ff ff09 	bl	80052b0 <_malloc_r>
 800549e:	6028      	str	r0, [r5, #0]
 80054a0:	6128      	str	r0, [r5, #16]
 80054a2:	b930      	cbnz	r0, 80054b2 <_svfiprintf_r+0x32>
 80054a4:	230c      	movs	r3, #12
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ac:	b01d      	add	sp, #116	@ 0x74
 80054ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b2:	2340      	movs	r3, #64	@ 0x40
 80054b4:	616b      	str	r3, [r5, #20]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ba:	2320      	movs	r3, #32
 80054bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80054c4:	2330      	movs	r3, #48	@ 0x30
 80054c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005664 <_svfiprintf_r+0x1e4>
 80054ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054ce:	f04f 0901 	mov.w	r9, #1
 80054d2:	4623      	mov	r3, r4
 80054d4:	469a      	mov	sl, r3
 80054d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054da:	b10a      	cbz	r2, 80054e0 <_svfiprintf_r+0x60>
 80054dc:	2a25      	cmp	r2, #37	@ 0x25
 80054de:	d1f9      	bne.n	80054d4 <_svfiprintf_r+0x54>
 80054e0:	ebba 0b04 	subs.w	fp, sl, r4
 80054e4:	d00b      	beq.n	80054fe <_svfiprintf_r+0x7e>
 80054e6:	465b      	mov	r3, fp
 80054e8:	4622      	mov	r2, r4
 80054ea:	4629      	mov	r1, r5
 80054ec:	4638      	mov	r0, r7
 80054ee:	f7ff ff6b 	bl	80053c8 <__ssputs_r>
 80054f2:	3001      	adds	r0, #1
 80054f4:	f000 80a7 	beq.w	8005646 <_svfiprintf_r+0x1c6>
 80054f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054fa:	445a      	add	r2, fp
 80054fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80054fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 809f 	beq.w	8005646 <_svfiprintf_r+0x1c6>
 8005508:	2300      	movs	r3, #0
 800550a:	f04f 32ff 	mov.w	r2, #4294967295
 800550e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005512:	f10a 0a01 	add.w	sl, sl, #1
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	9307      	str	r3, [sp, #28]
 800551a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800551e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005520:	4654      	mov	r4, sl
 8005522:	2205      	movs	r2, #5
 8005524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005528:	484e      	ldr	r0, [pc, #312]	@ (8005664 <_svfiprintf_r+0x1e4>)
 800552a:	f7fa fe31 	bl	8000190 <memchr>
 800552e:	9a04      	ldr	r2, [sp, #16]
 8005530:	b9d8      	cbnz	r0, 800556a <_svfiprintf_r+0xea>
 8005532:	06d0      	lsls	r0, r2, #27
 8005534:	bf44      	itt	mi
 8005536:	2320      	movmi	r3, #32
 8005538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800553c:	0711      	lsls	r1, r2, #28
 800553e:	bf44      	itt	mi
 8005540:	232b      	movmi	r3, #43	@ 0x2b
 8005542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005546:	f89a 3000 	ldrb.w	r3, [sl]
 800554a:	2b2a      	cmp	r3, #42	@ 0x2a
 800554c:	d015      	beq.n	800557a <_svfiprintf_r+0xfa>
 800554e:	9a07      	ldr	r2, [sp, #28]
 8005550:	4654      	mov	r4, sl
 8005552:	2000      	movs	r0, #0
 8005554:	f04f 0c0a 	mov.w	ip, #10
 8005558:	4621      	mov	r1, r4
 800555a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800555e:	3b30      	subs	r3, #48	@ 0x30
 8005560:	2b09      	cmp	r3, #9
 8005562:	d94b      	bls.n	80055fc <_svfiprintf_r+0x17c>
 8005564:	b1b0      	cbz	r0, 8005594 <_svfiprintf_r+0x114>
 8005566:	9207      	str	r2, [sp, #28]
 8005568:	e014      	b.n	8005594 <_svfiprintf_r+0x114>
 800556a:	eba0 0308 	sub.w	r3, r0, r8
 800556e:	fa09 f303 	lsl.w	r3, r9, r3
 8005572:	4313      	orrs	r3, r2
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	46a2      	mov	sl, r4
 8005578:	e7d2      	b.n	8005520 <_svfiprintf_r+0xa0>
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	1d19      	adds	r1, r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	9103      	str	r1, [sp, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	bfbb      	ittet	lt
 8005586:	425b      	neglt	r3, r3
 8005588:	f042 0202 	orrlt.w	r2, r2, #2
 800558c:	9307      	strge	r3, [sp, #28]
 800558e:	9307      	strlt	r3, [sp, #28]
 8005590:	bfb8      	it	lt
 8005592:	9204      	strlt	r2, [sp, #16]
 8005594:	7823      	ldrb	r3, [r4, #0]
 8005596:	2b2e      	cmp	r3, #46	@ 0x2e
 8005598:	d10a      	bne.n	80055b0 <_svfiprintf_r+0x130>
 800559a:	7863      	ldrb	r3, [r4, #1]
 800559c:	2b2a      	cmp	r3, #42	@ 0x2a
 800559e:	d132      	bne.n	8005606 <_svfiprintf_r+0x186>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	1d1a      	adds	r2, r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	9203      	str	r2, [sp, #12]
 80055a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ac:	3402      	adds	r4, #2
 80055ae:	9305      	str	r3, [sp, #20]
 80055b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005668 <_svfiprintf_r+0x1e8>
 80055b4:	7821      	ldrb	r1, [r4, #0]
 80055b6:	2203      	movs	r2, #3
 80055b8:	4650      	mov	r0, sl
 80055ba:	f7fa fde9 	bl	8000190 <memchr>
 80055be:	b138      	cbz	r0, 80055d0 <_svfiprintf_r+0x150>
 80055c0:	9b04      	ldr	r3, [sp, #16]
 80055c2:	eba0 000a 	sub.w	r0, r0, sl
 80055c6:	2240      	movs	r2, #64	@ 0x40
 80055c8:	4082      	lsls	r2, r0
 80055ca:	4313      	orrs	r3, r2
 80055cc:	3401      	adds	r4, #1
 80055ce:	9304      	str	r3, [sp, #16]
 80055d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d4:	4825      	ldr	r0, [pc, #148]	@ (800566c <_svfiprintf_r+0x1ec>)
 80055d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055da:	2206      	movs	r2, #6
 80055dc:	f7fa fdd8 	bl	8000190 <memchr>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d036      	beq.n	8005652 <_svfiprintf_r+0x1d2>
 80055e4:	4b22      	ldr	r3, [pc, #136]	@ (8005670 <_svfiprintf_r+0x1f0>)
 80055e6:	bb1b      	cbnz	r3, 8005630 <_svfiprintf_r+0x1b0>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	3307      	adds	r3, #7
 80055ec:	f023 0307 	bic.w	r3, r3, #7
 80055f0:	3308      	adds	r3, #8
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f6:	4433      	add	r3, r6
 80055f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80055fa:	e76a      	b.n	80054d2 <_svfiprintf_r+0x52>
 80055fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005600:	460c      	mov	r4, r1
 8005602:	2001      	movs	r0, #1
 8005604:	e7a8      	b.n	8005558 <_svfiprintf_r+0xd8>
 8005606:	2300      	movs	r3, #0
 8005608:	3401      	adds	r4, #1
 800560a:	9305      	str	r3, [sp, #20]
 800560c:	4619      	mov	r1, r3
 800560e:	f04f 0c0a 	mov.w	ip, #10
 8005612:	4620      	mov	r0, r4
 8005614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005618:	3a30      	subs	r2, #48	@ 0x30
 800561a:	2a09      	cmp	r2, #9
 800561c:	d903      	bls.n	8005626 <_svfiprintf_r+0x1a6>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0c6      	beq.n	80055b0 <_svfiprintf_r+0x130>
 8005622:	9105      	str	r1, [sp, #20]
 8005624:	e7c4      	b.n	80055b0 <_svfiprintf_r+0x130>
 8005626:	fb0c 2101 	mla	r1, ip, r1, r2
 800562a:	4604      	mov	r4, r0
 800562c:	2301      	movs	r3, #1
 800562e:	e7f0      	b.n	8005612 <_svfiprintf_r+0x192>
 8005630:	ab03      	add	r3, sp, #12
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	462a      	mov	r2, r5
 8005636:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <_svfiprintf_r+0x1f4>)
 8005638:	a904      	add	r1, sp, #16
 800563a:	4638      	mov	r0, r7
 800563c:	f3af 8000 	nop.w
 8005640:	1c42      	adds	r2, r0, #1
 8005642:	4606      	mov	r6, r0
 8005644:	d1d6      	bne.n	80055f4 <_svfiprintf_r+0x174>
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	065b      	lsls	r3, r3, #25
 800564a:	f53f af2d 	bmi.w	80054a8 <_svfiprintf_r+0x28>
 800564e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005650:	e72c      	b.n	80054ac <_svfiprintf_r+0x2c>
 8005652:	ab03      	add	r3, sp, #12
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	462a      	mov	r2, r5
 8005658:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <_svfiprintf_r+0x1f4>)
 800565a:	a904      	add	r1, sp, #16
 800565c:	4638      	mov	r0, r7
 800565e:	f000 f879 	bl	8005754 <_printf_i>
 8005662:	e7ed      	b.n	8005640 <_svfiprintf_r+0x1c0>
 8005664:	08005c3b 	.word	0x08005c3b
 8005668:	08005c41 	.word	0x08005c41
 800566c:	08005c45 	.word	0x08005c45
 8005670:	00000000 	.word	0x00000000
 8005674:	080053c9 	.word	0x080053c9

08005678 <_printf_common>:
 8005678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	4616      	mov	r6, r2
 800567e:	4698      	mov	r8, r3
 8005680:	688a      	ldr	r2, [r1, #8]
 8005682:	690b      	ldr	r3, [r1, #16]
 8005684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005688:	4293      	cmp	r3, r2
 800568a:	bfb8      	it	lt
 800568c:	4613      	movlt	r3, r2
 800568e:	6033      	str	r3, [r6, #0]
 8005690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005694:	4607      	mov	r7, r0
 8005696:	460c      	mov	r4, r1
 8005698:	b10a      	cbz	r2, 800569e <_printf_common+0x26>
 800569a:	3301      	adds	r3, #1
 800569c:	6033      	str	r3, [r6, #0]
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	0699      	lsls	r1, r3, #26
 80056a2:	bf42      	ittt	mi
 80056a4:	6833      	ldrmi	r3, [r6, #0]
 80056a6:	3302      	addmi	r3, #2
 80056a8:	6033      	strmi	r3, [r6, #0]
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	f015 0506 	ands.w	r5, r5, #6
 80056b0:	d106      	bne.n	80056c0 <_printf_common+0x48>
 80056b2:	f104 0a19 	add.w	sl, r4, #25
 80056b6:	68e3      	ldr	r3, [r4, #12]
 80056b8:	6832      	ldr	r2, [r6, #0]
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	42ab      	cmp	r3, r5
 80056be:	dc26      	bgt.n	800570e <_printf_common+0x96>
 80056c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	3b00      	subs	r3, #0
 80056c8:	bf18      	it	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	0692      	lsls	r2, r2, #26
 80056ce:	d42b      	bmi.n	8005728 <_printf_common+0xb0>
 80056d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056d4:	4641      	mov	r1, r8
 80056d6:	4638      	mov	r0, r7
 80056d8:	47c8      	blx	r9
 80056da:	3001      	adds	r0, #1
 80056dc:	d01e      	beq.n	800571c <_printf_common+0xa4>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	f003 0306 	and.w	r3, r3, #6
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	bf02      	ittt	eq
 80056ea:	68e5      	ldreq	r5, [r4, #12]
 80056ec:	6833      	ldreq	r3, [r6, #0]
 80056ee:	1aed      	subeq	r5, r5, r3
 80056f0:	68a3      	ldr	r3, [r4, #8]
 80056f2:	bf0c      	ite	eq
 80056f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f8:	2500      	movne	r5, #0
 80056fa:	4293      	cmp	r3, r2
 80056fc:	bfc4      	itt	gt
 80056fe:	1a9b      	subgt	r3, r3, r2
 8005700:	18ed      	addgt	r5, r5, r3
 8005702:	2600      	movs	r6, #0
 8005704:	341a      	adds	r4, #26
 8005706:	42b5      	cmp	r5, r6
 8005708:	d11a      	bne.n	8005740 <_printf_common+0xc8>
 800570a:	2000      	movs	r0, #0
 800570c:	e008      	b.n	8005720 <_printf_common+0xa8>
 800570e:	2301      	movs	r3, #1
 8005710:	4652      	mov	r2, sl
 8005712:	4641      	mov	r1, r8
 8005714:	4638      	mov	r0, r7
 8005716:	47c8      	blx	r9
 8005718:	3001      	adds	r0, #1
 800571a:	d103      	bne.n	8005724 <_printf_common+0xac>
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005724:	3501      	adds	r5, #1
 8005726:	e7c6      	b.n	80056b6 <_printf_common+0x3e>
 8005728:	18e1      	adds	r1, r4, r3
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	2030      	movs	r0, #48	@ 0x30
 800572e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005732:	4422      	add	r2, r4
 8005734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800573c:	3302      	adds	r3, #2
 800573e:	e7c7      	b.n	80056d0 <_printf_common+0x58>
 8005740:	2301      	movs	r3, #1
 8005742:	4622      	mov	r2, r4
 8005744:	4641      	mov	r1, r8
 8005746:	4638      	mov	r0, r7
 8005748:	47c8      	blx	r9
 800574a:	3001      	adds	r0, #1
 800574c:	d0e6      	beq.n	800571c <_printf_common+0xa4>
 800574e:	3601      	adds	r6, #1
 8005750:	e7d9      	b.n	8005706 <_printf_common+0x8e>
	...

08005754 <_printf_i>:
 8005754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	7e0f      	ldrb	r7, [r1, #24]
 800575a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800575c:	2f78      	cmp	r7, #120	@ 0x78
 800575e:	4691      	mov	r9, r2
 8005760:	4680      	mov	r8, r0
 8005762:	460c      	mov	r4, r1
 8005764:	469a      	mov	sl, r3
 8005766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800576a:	d807      	bhi.n	800577c <_printf_i+0x28>
 800576c:	2f62      	cmp	r7, #98	@ 0x62
 800576e:	d80a      	bhi.n	8005786 <_printf_i+0x32>
 8005770:	2f00      	cmp	r7, #0
 8005772:	f000 80d2 	beq.w	800591a <_printf_i+0x1c6>
 8005776:	2f58      	cmp	r7, #88	@ 0x58
 8005778:	f000 80b9 	beq.w	80058ee <_printf_i+0x19a>
 800577c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005784:	e03a      	b.n	80057fc <_printf_i+0xa8>
 8005786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800578a:	2b15      	cmp	r3, #21
 800578c:	d8f6      	bhi.n	800577c <_printf_i+0x28>
 800578e:	a101      	add	r1, pc, #4	@ (adr r1, 8005794 <_printf_i+0x40>)
 8005790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005794:	080057ed 	.word	0x080057ed
 8005798:	08005801 	.word	0x08005801
 800579c:	0800577d 	.word	0x0800577d
 80057a0:	0800577d 	.word	0x0800577d
 80057a4:	0800577d 	.word	0x0800577d
 80057a8:	0800577d 	.word	0x0800577d
 80057ac:	08005801 	.word	0x08005801
 80057b0:	0800577d 	.word	0x0800577d
 80057b4:	0800577d 	.word	0x0800577d
 80057b8:	0800577d 	.word	0x0800577d
 80057bc:	0800577d 	.word	0x0800577d
 80057c0:	08005901 	.word	0x08005901
 80057c4:	0800582b 	.word	0x0800582b
 80057c8:	080058bb 	.word	0x080058bb
 80057cc:	0800577d 	.word	0x0800577d
 80057d0:	0800577d 	.word	0x0800577d
 80057d4:	08005923 	.word	0x08005923
 80057d8:	0800577d 	.word	0x0800577d
 80057dc:	0800582b 	.word	0x0800582b
 80057e0:	0800577d 	.word	0x0800577d
 80057e4:	0800577d 	.word	0x0800577d
 80057e8:	080058c3 	.word	0x080058c3
 80057ec:	6833      	ldr	r3, [r6, #0]
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6032      	str	r2, [r6, #0]
 80057f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057fc:	2301      	movs	r3, #1
 80057fe:	e09d      	b.n	800593c <_printf_i+0x1e8>
 8005800:	6833      	ldr	r3, [r6, #0]
 8005802:	6820      	ldr	r0, [r4, #0]
 8005804:	1d19      	adds	r1, r3, #4
 8005806:	6031      	str	r1, [r6, #0]
 8005808:	0606      	lsls	r6, r0, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xbc>
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	e003      	b.n	8005818 <_printf_i+0xc4>
 8005810:	0645      	lsls	r5, r0, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xb8>
 8005814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005818:	2d00      	cmp	r5, #0
 800581a:	da03      	bge.n	8005824 <_printf_i+0xd0>
 800581c:	232d      	movs	r3, #45	@ 0x2d
 800581e:	426d      	negs	r5, r5
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005824:	4859      	ldr	r0, [pc, #356]	@ (800598c <_printf_i+0x238>)
 8005826:	230a      	movs	r3, #10
 8005828:	e011      	b.n	800584e <_printf_i+0xfa>
 800582a:	6821      	ldr	r1, [r4, #0]
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	0608      	lsls	r0, r1, #24
 8005830:	f853 5b04 	ldr.w	r5, [r3], #4
 8005834:	d402      	bmi.n	800583c <_printf_i+0xe8>
 8005836:	0649      	lsls	r1, r1, #25
 8005838:	bf48      	it	mi
 800583a:	b2ad      	uxthmi	r5, r5
 800583c:	2f6f      	cmp	r7, #111	@ 0x6f
 800583e:	4853      	ldr	r0, [pc, #332]	@ (800598c <_printf_i+0x238>)
 8005840:	6033      	str	r3, [r6, #0]
 8005842:	bf14      	ite	ne
 8005844:	230a      	movne	r3, #10
 8005846:	2308      	moveq	r3, #8
 8005848:	2100      	movs	r1, #0
 800584a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800584e:	6866      	ldr	r6, [r4, #4]
 8005850:	60a6      	str	r6, [r4, #8]
 8005852:	2e00      	cmp	r6, #0
 8005854:	bfa2      	ittt	ge
 8005856:	6821      	ldrge	r1, [r4, #0]
 8005858:	f021 0104 	bicge.w	r1, r1, #4
 800585c:	6021      	strge	r1, [r4, #0]
 800585e:	b90d      	cbnz	r5, 8005864 <_printf_i+0x110>
 8005860:	2e00      	cmp	r6, #0
 8005862:	d04b      	beq.n	80058fc <_printf_i+0x1a8>
 8005864:	4616      	mov	r6, r2
 8005866:	fbb5 f1f3 	udiv	r1, r5, r3
 800586a:	fb03 5711 	mls	r7, r3, r1, r5
 800586e:	5dc7      	ldrb	r7, [r0, r7]
 8005870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005874:	462f      	mov	r7, r5
 8005876:	42bb      	cmp	r3, r7
 8005878:	460d      	mov	r5, r1
 800587a:	d9f4      	bls.n	8005866 <_printf_i+0x112>
 800587c:	2b08      	cmp	r3, #8
 800587e:	d10b      	bne.n	8005898 <_printf_i+0x144>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	07df      	lsls	r7, r3, #31
 8005884:	d508      	bpl.n	8005898 <_printf_i+0x144>
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	6861      	ldr	r1, [r4, #4]
 800588a:	4299      	cmp	r1, r3
 800588c:	bfde      	ittt	le
 800588e:	2330      	movle	r3, #48	@ 0x30
 8005890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005898:	1b92      	subs	r2, r2, r6
 800589a:	6122      	str	r2, [r4, #16]
 800589c:	f8cd a000 	str.w	sl, [sp]
 80058a0:	464b      	mov	r3, r9
 80058a2:	aa03      	add	r2, sp, #12
 80058a4:	4621      	mov	r1, r4
 80058a6:	4640      	mov	r0, r8
 80058a8:	f7ff fee6 	bl	8005678 <_printf_common>
 80058ac:	3001      	adds	r0, #1
 80058ae:	d14a      	bne.n	8005946 <_printf_i+0x1f2>
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	b004      	add	sp, #16
 80058b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	f043 0320 	orr.w	r3, r3, #32
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	4833      	ldr	r0, [pc, #204]	@ (8005990 <_printf_i+0x23c>)
 80058c4:	2778      	movs	r7, #120	@ 0x78
 80058c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	6831      	ldr	r1, [r6, #0]
 80058ce:	061f      	lsls	r7, r3, #24
 80058d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80058d4:	d402      	bmi.n	80058dc <_printf_i+0x188>
 80058d6:	065f      	lsls	r7, r3, #25
 80058d8:	bf48      	it	mi
 80058da:	b2ad      	uxthmi	r5, r5
 80058dc:	6031      	str	r1, [r6, #0]
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	bf44      	itt	mi
 80058e2:	f043 0320 	orrmi.w	r3, r3, #32
 80058e6:	6023      	strmi	r3, [r4, #0]
 80058e8:	b11d      	cbz	r5, 80058f2 <_printf_i+0x19e>
 80058ea:	2310      	movs	r3, #16
 80058ec:	e7ac      	b.n	8005848 <_printf_i+0xf4>
 80058ee:	4827      	ldr	r0, [pc, #156]	@ (800598c <_printf_i+0x238>)
 80058f0:	e7e9      	b.n	80058c6 <_printf_i+0x172>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f023 0320 	bic.w	r3, r3, #32
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	e7f6      	b.n	80058ea <_printf_i+0x196>
 80058fc:	4616      	mov	r6, r2
 80058fe:	e7bd      	b.n	800587c <_printf_i+0x128>
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	6825      	ldr	r5, [r4, #0]
 8005904:	6961      	ldr	r1, [r4, #20]
 8005906:	1d18      	adds	r0, r3, #4
 8005908:	6030      	str	r0, [r6, #0]
 800590a:	062e      	lsls	r6, r5, #24
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	d501      	bpl.n	8005914 <_printf_i+0x1c0>
 8005910:	6019      	str	r1, [r3, #0]
 8005912:	e002      	b.n	800591a <_printf_i+0x1c6>
 8005914:	0668      	lsls	r0, r5, #25
 8005916:	d5fb      	bpl.n	8005910 <_printf_i+0x1bc>
 8005918:	8019      	strh	r1, [r3, #0]
 800591a:	2300      	movs	r3, #0
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	4616      	mov	r6, r2
 8005920:	e7bc      	b.n	800589c <_printf_i+0x148>
 8005922:	6833      	ldr	r3, [r6, #0]
 8005924:	1d1a      	adds	r2, r3, #4
 8005926:	6032      	str	r2, [r6, #0]
 8005928:	681e      	ldr	r6, [r3, #0]
 800592a:	6862      	ldr	r2, [r4, #4]
 800592c:	2100      	movs	r1, #0
 800592e:	4630      	mov	r0, r6
 8005930:	f7fa fc2e 	bl	8000190 <memchr>
 8005934:	b108      	cbz	r0, 800593a <_printf_i+0x1e6>
 8005936:	1b80      	subs	r0, r0, r6
 8005938:	6060      	str	r0, [r4, #4]
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	2300      	movs	r3, #0
 8005940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005944:	e7aa      	b.n	800589c <_printf_i+0x148>
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	4632      	mov	r2, r6
 800594a:	4649      	mov	r1, r9
 800594c:	4640      	mov	r0, r8
 800594e:	47d0      	blx	sl
 8005950:	3001      	adds	r0, #1
 8005952:	d0ad      	beq.n	80058b0 <_printf_i+0x15c>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	079b      	lsls	r3, r3, #30
 8005958:	d413      	bmi.n	8005982 <_printf_i+0x22e>
 800595a:	68e0      	ldr	r0, [r4, #12]
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	4298      	cmp	r0, r3
 8005960:	bfb8      	it	lt
 8005962:	4618      	movlt	r0, r3
 8005964:	e7a6      	b.n	80058b4 <_printf_i+0x160>
 8005966:	2301      	movs	r3, #1
 8005968:	4632      	mov	r2, r6
 800596a:	4649      	mov	r1, r9
 800596c:	4640      	mov	r0, r8
 800596e:	47d0      	blx	sl
 8005970:	3001      	adds	r0, #1
 8005972:	d09d      	beq.n	80058b0 <_printf_i+0x15c>
 8005974:	3501      	adds	r5, #1
 8005976:	68e3      	ldr	r3, [r4, #12]
 8005978:	9903      	ldr	r1, [sp, #12]
 800597a:	1a5b      	subs	r3, r3, r1
 800597c:	42ab      	cmp	r3, r5
 800597e:	dcf2      	bgt.n	8005966 <_printf_i+0x212>
 8005980:	e7eb      	b.n	800595a <_printf_i+0x206>
 8005982:	2500      	movs	r5, #0
 8005984:	f104 0619 	add.w	r6, r4, #25
 8005988:	e7f5      	b.n	8005976 <_printf_i+0x222>
 800598a:	bf00      	nop
 800598c:	08005c4c 	.word	0x08005c4c
 8005990:	08005c5d 	.word	0x08005c5d

08005994 <memmove>:
 8005994:	4288      	cmp	r0, r1
 8005996:	b510      	push	{r4, lr}
 8005998:	eb01 0402 	add.w	r4, r1, r2
 800599c:	d902      	bls.n	80059a4 <memmove+0x10>
 800599e:	4284      	cmp	r4, r0
 80059a0:	4623      	mov	r3, r4
 80059a2:	d807      	bhi.n	80059b4 <memmove+0x20>
 80059a4:	1e43      	subs	r3, r0, #1
 80059a6:	42a1      	cmp	r1, r4
 80059a8:	d008      	beq.n	80059bc <memmove+0x28>
 80059aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059b2:	e7f8      	b.n	80059a6 <memmove+0x12>
 80059b4:	4402      	add	r2, r0
 80059b6:	4601      	mov	r1, r0
 80059b8:	428a      	cmp	r2, r1
 80059ba:	d100      	bne.n	80059be <memmove+0x2a>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059c6:	e7f7      	b.n	80059b8 <memmove+0x24>

080059c8 <_sbrk_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d06      	ldr	r5, [pc, #24]	@ (80059e4 <_sbrk_r+0x1c>)
 80059cc:	2300      	movs	r3, #0
 80059ce:	4604      	mov	r4, r0
 80059d0:	4608      	mov	r0, r1
 80059d2:	602b      	str	r3, [r5, #0]
 80059d4:	f7fa fea4 	bl	8000720 <_sbrk>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_sbrk_r+0x1a>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_sbrk_r+0x1a>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000274 	.word	0x20000274

080059e8 <memcpy>:
 80059e8:	440a      	add	r2, r1
 80059ea:	4291      	cmp	r1, r2
 80059ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f0:	d100      	bne.n	80059f4 <memcpy+0xc>
 80059f2:	4770      	bx	lr
 80059f4:	b510      	push	{r4, lr}
 80059f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059fe:	4291      	cmp	r1, r2
 8005a00:	d1f9      	bne.n	80059f6 <memcpy+0xe>
 8005a02:	bd10      	pop	{r4, pc}

08005a04 <_realloc_r>:
 8005a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a08:	4680      	mov	r8, r0
 8005a0a:	4615      	mov	r5, r2
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	b921      	cbnz	r1, 8005a1a <_realloc_r+0x16>
 8005a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a14:	4611      	mov	r1, r2
 8005a16:	f7ff bc4b 	b.w	80052b0 <_malloc_r>
 8005a1a:	b92a      	cbnz	r2, 8005a28 <_realloc_r+0x24>
 8005a1c:	f7ff fbdc 	bl	80051d8 <_free_r>
 8005a20:	2400      	movs	r4, #0
 8005a22:	4620      	mov	r0, r4
 8005a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a28:	f000 f81a 	bl	8005a60 <_malloc_usable_size_r>
 8005a2c:	4285      	cmp	r5, r0
 8005a2e:	4606      	mov	r6, r0
 8005a30:	d802      	bhi.n	8005a38 <_realloc_r+0x34>
 8005a32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a36:	d8f4      	bhi.n	8005a22 <_realloc_r+0x1e>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f7ff fc38 	bl	80052b0 <_malloc_r>
 8005a40:	4607      	mov	r7, r0
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d0ec      	beq.n	8005a20 <_realloc_r+0x1c>
 8005a46:	42b5      	cmp	r5, r6
 8005a48:	462a      	mov	r2, r5
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	bf28      	it	cs
 8005a4e:	4632      	movcs	r2, r6
 8005a50:	f7ff ffca 	bl	80059e8 <memcpy>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4640      	mov	r0, r8
 8005a58:	f7ff fbbe 	bl	80051d8 <_free_r>
 8005a5c:	463c      	mov	r4, r7
 8005a5e:	e7e0      	b.n	8005a22 <_realloc_r+0x1e>

08005a60 <_malloc_usable_size_r>:
 8005a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a64:	1f18      	subs	r0, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfbc      	itt	lt
 8005a6a:	580b      	ldrlt	r3, [r1, r0]
 8005a6c:	18c0      	addlt	r0, r0, r3
 8005a6e:	4770      	bx	lr

08005a70 <_init>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	bf00      	nop
 8005a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a76:	bc08      	pop	{r3}
 8005a78:	469e      	mov	lr, r3
 8005a7a:	4770      	bx	lr

08005a7c <_fini>:
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	bf00      	nop
 8005a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a82:	bc08      	pop	{r3}
 8005a84:	469e      	mov	lr, r3
 8005a86:	4770      	bx	lr
