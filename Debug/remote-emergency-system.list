
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005de0  08005de0  00006de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de8  08005de8  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dec  08005dec  00006dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005df0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000070  08005e60  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005e60  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a83  00000000  00000000  0000709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b2  00000000  00000000  0001ab1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0001dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbe  00000000  00000000  0001f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f698  00000000  00000000  0002048e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016881  00000000  00000000  0003fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7da2  00000000  00000000  000563a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cac  00000000  00000000  0010e18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00113e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08005c40 	.word	0x08005c40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08005c40 	.word	0x08005c40

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96a 	b.w	800053c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14e      	bne.n	800032a <__udivmoddi4+0xaa>
 800028c:	4694      	mov	ip, r2
 800028e:	458c      	cmp	ip, r1
 8000290:	4686      	mov	lr, r0
 8000292:	fab2 f282 	clz	r2, r2
 8000296:	d962      	bls.n	800035e <__udivmoddi4+0xde>
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0320 	rsb	r3, r2, #32
 800029e:	4091      	lsls	r1, r2
 80002a0:	fa20 f303 	lsr.w	r3, r0, r3
 80002a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a8:	4319      	orrs	r1, r3
 80002aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	fb07 1114 	mls	r1, r7, r4, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb04 f106 	mul.w	r1, r4, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d6:	f080 8112 	bcs.w	80004fe <__udivmoddi4+0x27e>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 810f 	bls.w	80004fe <__udivmoddi4+0x27e>
 80002e0:	3c02      	subs	r4, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb00 f606 	mul.w	r6, r0, r6
 80002fa:	429e      	cmp	r6, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x94>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f100 31ff 	add.w	r1, r0, #4294967295
 8000306:	f080 80fc 	bcs.w	8000502 <__udivmoddi4+0x282>
 800030a:	429e      	cmp	r6, r3
 800030c:	f240 80f9 	bls.w	8000502 <__udivmoddi4+0x282>
 8000310:	4463      	add	r3, ip
 8000312:	3802      	subs	r0, #2
 8000314:	1b9b      	subs	r3, r3, r6
 8000316:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800031a:	2100      	movs	r1, #0
 800031c:	b11d      	cbz	r5, 8000326 <__udivmoddi4+0xa6>
 800031e:	40d3      	lsrs	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	e9c5 3200 	strd	r3, r2, [r5]
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d905      	bls.n	800033a <__udivmoddi4+0xba>
 800032e:	b10d      	cbz	r5, 8000334 <__udivmoddi4+0xb4>
 8000330:	e9c5 0100 	strd	r0, r1, [r5]
 8000334:	2100      	movs	r1, #0
 8000336:	4608      	mov	r0, r1
 8000338:	e7f5      	b.n	8000326 <__udivmoddi4+0xa6>
 800033a:	fab3 f183 	clz	r1, r3
 800033e:	2900      	cmp	r1, #0
 8000340:	d146      	bne.n	80003d0 <__udivmoddi4+0x150>
 8000342:	42a3      	cmp	r3, r4
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xcc>
 8000346:	4290      	cmp	r0, r2
 8000348:	f0c0 80f0 	bcc.w	800052c <__udivmoddi4+0x2ac>
 800034c:	1a86      	subs	r6, r0, r2
 800034e:	eb64 0303 	sbc.w	r3, r4, r3
 8000352:	2001      	movs	r0, #1
 8000354:	2d00      	cmp	r5, #0
 8000356:	d0e6      	beq.n	8000326 <__udivmoddi4+0xa6>
 8000358:	e9c5 6300 	strd	r6, r3, [r5]
 800035c:	e7e3      	b.n	8000326 <__udivmoddi4+0xa6>
 800035e:	2a00      	cmp	r2, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x204>
 8000364:	eba1 040c 	sub.w	r4, r1, ip
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	fa1f f78c 	uxth.w	r7, ip
 8000370:	2101      	movs	r1, #1
 8000372:	fbb4 f6f8 	udiv	r6, r4, r8
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000382:	fb07 f006 	mul.w	r0, r7, r6
 8000386:	4298      	cmp	r0, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x11c>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x11a>
 8000394:	4298      	cmp	r0, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 800039a:	4626      	mov	r6, r4
 800039c:	1a1c      	subs	r4, r3, r0
 800039e:	fa1f f38e 	uxth.w	r3, lr
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ae:	fb00 f707 	mul.w	r7, r0, r7
 80003b2:	429f      	cmp	r7, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x148>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x146>
 80003c0:	429f      	cmp	r7, r3
 80003c2:	f200 80b0 	bhi.w	8000526 <__udivmoddi4+0x2a6>
 80003c6:	4620      	mov	r0, r4
 80003c8:	1bdb      	subs	r3, r3, r7
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	e7a5      	b.n	800031c <__udivmoddi4+0x9c>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 f706 	lsr.w	r7, r2, r6
 80003da:	431f      	orrs	r7, r3
 80003dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e0:	fa04 f301 	lsl.w	r3, r4, r1
 80003e4:	ea43 030c 	orr.w	r3, r3, ip
 80003e8:	40f4      	lsrs	r4, r6
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb4 fef0 	udiv	lr, r4, r0
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000400:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000404:	fb0e f90c 	mul.w	r9, lr, ip
 8000408:	45a1      	cmp	r9, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90a      	bls.n	8000426 <__udivmoddi4+0x1a6>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000416:	f080 8084 	bcs.w	8000522 <__udivmoddi4+0x2a2>
 800041a:	45a1      	cmp	r9, r4
 800041c:	f240 8081 	bls.w	8000522 <__udivmoddi4+0x2a2>
 8000420:	f1ae 0e02 	sub.w	lr, lr, #2
 8000424:	443c      	add	r4, r7
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	45a4      	cmp	ip, r4
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1d2>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	d267      	bcs.n	800051a <__udivmoddi4+0x29a>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d965      	bls.n	800051a <__udivmoddi4+0x29a>
 800044e:	3b02      	subs	r3, #2
 8000450:	443c      	add	r4, r7
 8000452:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000456:	fba0 9302 	umull	r9, r3, r0, r2
 800045a:	eba4 040c 	sub.w	r4, r4, ip
 800045e:	429c      	cmp	r4, r3
 8000460:	46ce      	mov	lr, r9
 8000462:	469c      	mov	ip, r3
 8000464:	d351      	bcc.n	800050a <__udivmoddi4+0x28a>
 8000466:	d04e      	beq.n	8000506 <__udivmoddi4+0x286>
 8000468:	b155      	cbz	r5, 8000480 <__udivmoddi4+0x200>
 800046a:	ebb8 030e 	subs.w	r3, r8, lr
 800046e:	eb64 040c 	sbc.w	r4, r4, ip
 8000472:	fa04 f606 	lsl.w	r6, r4, r6
 8000476:	40cb      	lsrs	r3, r1
 8000478:	431e      	orrs	r6, r3
 800047a:	40cc      	lsrs	r4, r1
 800047c:	e9c5 6400 	strd	r6, r4, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	e750      	b.n	8000326 <__udivmoddi4+0xa6>
 8000484:	f1c2 0320 	rsb	r3, r2, #32
 8000488:	fa20 f103 	lsr.w	r1, r0, r3
 800048c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000490:	fa24 f303 	lsr.w	r3, r4, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	430c      	orrs	r4, r1
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x24c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29e>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29e>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d4:	fb08 3311 	mls	r3, r8, r1, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x276>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x296>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x296>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e739      	b.n	8000372 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f0      	b.n	80002e4 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e706      	b.n	8000314 <__udivmoddi4+0x94>
 8000506:	45c8      	cmp	r8, r9
 8000508:	d2ae      	bcs.n	8000468 <__udivmoddi4+0x1e8>
 800050a:	ebb9 0e02 	subs.w	lr, r9, r2
 800050e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000512:	3801      	subs	r0, #1
 8000514:	e7a8      	b.n	8000468 <__udivmoddi4+0x1e8>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x276>
 800051a:	4603      	mov	r3, r0
 800051c:	e799      	b.n	8000452 <__udivmoddi4+0x1d2>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x24c>
 8000522:	46d6      	mov	lr, sl
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74d      	b.n	80003c8 <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e70f      	b.n	8000354 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e730      	b.n	800039c <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800054c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800054e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4013      	ands	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000564:	68fb      	ldr	r3, [r7, #12]
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ffe3 	bl	8000540 <LL_AHB2_GRP1_EnableClock>

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <pingPong>:

// Buffers para armazenar as mensagens
char sendMessageBuffer[] = "ping";
char receiveMessageBuffer[BUFFER_SIZE];

LoRaIrqStatus pingPong(char *sendBuffer, uint8_t sendBufferSize, char *receiveBuffer, uint8_t receiveBufferSize) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	461a      	mov	r2, r3
 800058c:	460b      	mov	r3, r1
 800058e:	72fb      	strb	r3, [r7, #11]
 8000590:	4613      	mov	r3, r2
 8000592:	72bb      	strb	r3, [r7, #10]
    LoRaIrqStatus result;

    // Envia "ping"
    result = SendMessage(sendBuffer);
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f004 fb45 	bl	8004c24 <SendMessage>
 800059a:	4603      	mov	r3, r0
 800059c:	75fb      	strb	r3, [r7, #23]
    if (result != IRQ_RX_DONE_STATUS) {
 800059e:	7dfb      	ldrb	r3, [r7, #23]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d001      	beq.n	80005a8 <pingPong+0x28>
        // Se não conseguiu enviar, retorna o erro específico
        return result;
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	e021      	b.n	80005ec <pingPong+0x6c>
    }

    // Aguarda resposta com o timeout especificado
    result = receiveMessage(receiveBuffer, receiveBufferSize, PING_TIMEOUT);
 80005a8:	7abb      	ldrb	r3, [r7, #10]
 80005aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005ae:	4619      	mov	r1, r3
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f004 fb81 	bl	8004cb8 <receiveMessage>
 80005b6:	4603      	mov	r3, r0
 80005b8:	75fb      	strb	r3, [r7, #23]
    if (result == IRQ_RX_DONE_STATUS) {
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d10a      	bne.n	80005d6 <pingPong+0x56>
        // Verifica se a mensagem recebida é o "pong"
        if (strcmp(receiveBuffer, "pong") == 0) {
 80005c0:	490c      	ldr	r1, [pc, #48]	@ (80005f4 <pingPong+0x74>)
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fddc 	bl	8000180 <strcmp>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <pingPong+0x52>
            return IRQ_RX_DONE_STATUS;  // Recebeu o "pong" com sucesso
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00c      	b.n	80005ec <pingPong+0x6c>
        } else {
            // Mensagem recebida não é "pong"
            return IRQ_CRC_ERROR_STATUS;  // Erro na resposta recebida
 80005d2:	2303      	movs	r3, #3
 80005d4:	e00a      	b.n	80005ec <pingPong+0x6c>
        }
    } else if (result == IRQ_RX_TX_TIMEOUT_STATUS) {
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d101      	bne.n	80005e0 <pingPong+0x60>
        // Caso de timeout durante o recebimento
        return IRQ_RX_TX_TIMEOUT_STATUS;
 80005dc:	2302      	movs	r3, #2
 80005de:	e005      	b.n	80005ec <pingPong+0x6c>
    } else if (result == IRQ_CRC_ERROR_STATUS) {
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d101      	bne.n	80005ea <pingPong+0x6a>
        // Caso de erro de CRC
        return IRQ_CRC_ERROR_STATUS;
 80005e6:	2303      	movs	r3, #3
 80005e8:	e000      	b.n	80005ec <pingPong+0x6c>
    }

    // Caso não tenha sido possível receber a mensagem ou erro desconhecido
    return IRQ_CRC_ERROR_STATUS;
 80005ea:	2303      	movs	r3, #3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08005c58 	.word	0x08005c58

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f001 fa39 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f839 	bl	8000678 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LoraInit(getDefaultLoRaConfig());
 8000606:	463b      	mov	r3, r7
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fa35 	bl	8004a78 <getDefaultLoRaConfig>
 800060e:	463b      	mov	r3, r7
 8000610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000614:	f004 fa40 	bl	8004a98 <LoraInit>
  LoRaIrqStatus status;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f7ff ffaa 	bl	8000570 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 800061c:	f000 f8ce 	bl	80007bc <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000620:	f000 f9be 	bl	80009a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Dispositivo A envia um "ping" e aguarda o "pong"
	          status = pingPong(sendMessageBuffer, sizeof(sendMessageBuffer), receiveMessageBuffer, sizeof(receiveMessageBuffer));
 8000624:	2340      	movs	r3, #64	@ 0x40
 8000626:	4a0f      	ldr	r2, [pc, #60]	@ (8000664 <main+0x6c>)
 8000628:	2105      	movs	r1, #5
 800062a:	480f      	ldr	r0, [pc, #60]	@ (8000668 <main+0x70>)
 800062c:	f7ff ffa8 	bl	8000580 <pingPong>
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]

	          if (status == IRQ_RX_DONE_STATUS) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d104      	bne.n	8000644 <main+0x4c>
	              // Recebeu a resposta "pong"
	              printf("Mensagem recebida: %s\n", receiveMessageBuffer);  // Exibe o "pong"
 800063a:	490a      	ldr	r1, [pc, #40]	@ (8000664 <main+0x6c>)
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <main+0x74>)
 800063e:	f004 fc39 	bl	8004eb4 <iprintf>
 8000642:	e009      	b.n	8000658 <main+0x60>
	          } else if (status == IRQ_CRC_ERROR_STATUS) {
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d103      	bne.n	8000652 <main+0x5a>
	              // Erro na comunicação
	              printf("Erro de CRC ou timeout.\n");
 800064a:	4809      	ldr	r0, [pc, #36]	@ (8000670 <main+0x78>)
 800064c:	f004 fc9a 	bl	8004f84 <puts>
 8000650:	e002      	b.n	8000658 <main+0x60>
	          } else {
	              // Outro tipo de erro
	              printf("Erro desconhecido.\n");
 8000652:	4808      	ldr	r0, [pc, #32]	@ (8000674 <main+0x7c>)
 8000654:	f004 fc96 	bl	8004f84 <puts>
	          }

	          HAL_Delay(1000);  // Aguarda um segundo antes de tentar novamente
 8000658:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065c:	f001 fa80 	bl	8001b60 <HAL_Delay>
	          status = pingPong(sendMessageBuffer, sizeof(sendMessageBuffer), receiveMessageBuffer, sizeof(receiveMessageBuffer));
 8000660:	e7e0      	b.n	8000624 <main+0x2c>
 8000662:	bf00      	nop
 8000664:	2000008c 	.word	0x2000008c
 8000668:	20000000 	.word	0x20000000
 800066c:	08005c60 	.word	0x08005c60
 8000670:	08005c78 	.word	0x08005c78
 8000674:	08005c90 	.word	0x08005c90

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09a      	sub	sp, #104	@ 0x68
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2248      	movs	r2, #72	@ 0x48
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fd5c 	bl	8005144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <SystemClock_Config+0xa0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <SystemClock_Config+0xa0>)
 80006a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <SystemClock_Config+0xa0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ba:	2320      	movs	r3, #32
 80006bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006c6:	23b0      	movs	r3, #176	@ 0xb0
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 ff94 	bl	8002600 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006de:	f000 f81d 	bl	800071c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006e2:	234f      	movs	r3, #79	@ 0x4f
 80006e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fb00 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070a:	f000 f807 	bl	800071c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3768      	adds	r7, #104	@ 0x68
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58000400 	.word	0x58000400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <NMI_Handler+0x4>

0800073c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <MemManage_Handler+0x4>

0800074c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <UsageFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f001 f9d0 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000798:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800079a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80007a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b0:	68fb      	ldr	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SUBGHZ_Init+0x20>)
 80007c2:	2210      	movs	r2, #16
 80007c4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_SUBGHZ_Init+0x20>)
 80007c8:	f003 f810 	bl	80037ec <HAL_SUBGHZ_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80007d2:	f7ff ffa3 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000cc 	.word	0x200000cc

080007e0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff ffcf 	bl	800078c <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e00a      	b.n	800081e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000808:	f3af 8000 	nop.w
 800080c:	4601      	mov	r1, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	60ba      	str	r2, [r7, #8]
 8000814:	b2ca      	uxtb	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	dbf0      	blt.n	8000808 <_read+0x12>
  }

  return len;
 8000826:	687b      	ldr	r3, [r7, #4]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e009      	b.n	8000856 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	60ba      	str	r2, [r7, #8]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3301      	adds	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	429a      	cmp	r2, r3
 800085c:	dbf1      	blt.n	8000842 <_write+0x12>
  }
  return len;
 800085e:	687b      	ldr	r3, [r7, #4]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <_close>:

int _close(int file)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800088e:	605a      	str	r2, [r3, #4]
  return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <_isatty>:

int _isatty(int file)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a4:	2301      	movs	r3, #1
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f004 fc72 	bl	80051e0 <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20010000 	.word	0x20010000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000d8 	.word	0x200000d8
 8000930:	200002e0 	.word	0x200002e0

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <LL_AHB2_GRP1_EnableClock>:
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800094c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800094e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800095c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000964:	68fb      	ldr	r3, [r7, #12]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <LL_APB1_GRP1_EnableClock>:
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800097e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4313      	orrs	r3, r2
 8000986:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000994:	68fb      	ldr	r3, [r7, #12]
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009a6:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <MX_USART2_UART_Init+0x94>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009ea:	f003 fac2 	bl	8003f72 <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f7ff fe92 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 80009fc:	f003 ff73 	bl	80048e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f7ff fe89 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4808      	ldr	r0, [pc, #32]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 8000a0e:	f003 ffa8 	bl	8004962 <HAL_UARTEx_SetRxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f7ff fe80 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_USART2_UART_Init+0x90>)
 8000a1e:	f003 ff2a 	bl	8004876 <HAL_UARTEx_DisableFifoMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f7ff fe78 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000dc 	.word	0x200000dc
 8000a34:	40004400 	.word	0x40004400

08000a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b096      	sub	sp, #88	@ 0x58
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2238      	movs	r2, #56	@ 0x38
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fb73 	bl	8005144 <memset>
  if(uartHandle->Instance==USART2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d126      	bne.n	8000ab6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a6c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000a70:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fd04 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a82:	f7ff fe4b 	bl	800071c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a86:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000a8a:	f7ff ff71 	bl	8000970 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff ff56 	bl	8000940 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000a94:	230c      	movs	r3, #12
 8000a96:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab2:	f001 f95b 	bl	8001d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3758      	adds	r7, #88	@ 0x58
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac8:	f7ff ff34 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	@ (8000b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b10 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000af2:	f004 fb7b 	bl	80051ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fd7f 	bl	80005f8 <main>

08000afa <LoopForever>:

LoopForever:
    b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
  ldr   r0, =_estack
 8000afc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b08:	08005df0 	.word	0x08005df0
  ldr r2, =_sbss
 8000b0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b10:	200002dc 	.word	0x200002dc

08000b14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>

08000b16 <LL_AHB2_GRP1_EnableClock>:
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4013      	ands	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
	...

08000b48 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f7ff ffda 	bl	8000b16 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8000b62:	2310      	movs	r3, #16
 8000b64:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <BSP_RADIO_Init+0x78>)
 8000b78:	f001 f8f8 	bl	8001d6c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <BSP_RADIO_Init+0x78>)
 8000b86:	f001 f8f1 	bl	8001d6c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <BSP_RADIO_Init+0x78>)
 8000b94:	f001 f8ea 	bl	8001d6c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <BSP_RADIO_Init+0x78>)
 8000b9e:	f001 fa45 	bl	800202c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <BSP_RADIO_Init+0x78>)
 8000ba8:	f001 fa40 	bl	800202c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000bac:	2200      	movs	r2, #0
 8000bae:	2108      	movs	r1, #8
 8000bb0:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <BSP_RADIO_Init+0x78>)
 8000bb2:	f001 fa3b 	bl	800202c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d84b      	bhi.n	8000c6c <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bdc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000c0d 	.word	0x08000c0d
 8000be4:	08000c2d 	.word	0x08000c2d
 8000be8:	08000c4d 	.word	0x08000c4d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2108      	movs	r1, #8
 8000bf0:	4821      	ldr	r0, [pc, #132]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000bf2:	f001 fa1b 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	481f      	ldr	r0, [pc, #124]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000bfc:	f001 fa16 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2120      	movs	r1, #32
 8000c04:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c06:	f001 fa11 	bl	800202c <HAL_GPIO_WritePin>
      break;      
 8000c0a:	e030      	b.n	8000c6e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2108      	movs	r1, #8
 8000c10:	4819      	ldr	r0, [pc, #100]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c12:	f001 fa0b 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000c16:	2201      	movs	r2, #1
 8000c18:	2110      	movs	r1, #16
 8000c1a:	4817      	ldr	r0, [pc, #92]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c1c:	f001 fa06 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	4814      	ldr	r0, [pc, #80]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c26:	f001 fa01 	bl	800202c <HAL_GPIO_WritePin>
      break;
 8000c2a:	e020      	b.n	8000c6e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c32:	f001 f9fb 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000c36:	2201      	movs	r2, #1
 8000c38:	2110      	movs	r1, #16
 8000c3a:	480f      	ldr	r0, [pc, #60]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c3c:	f001 f9f6 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000c40:	2201      	movs	r2, #1
 8000c42:	2120      	movs	r1, #32
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c46:	f001 f9f1 	bl	800202c <HAL_GPIO_WritePin>
      break;
 8000c4a:	e010      	b.n	8000c6e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2108      	movs	r1, #8
 8000c50:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c52:	f001 f9eb 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4807      	ldr	r0, [pc, #28]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c5c:	f001 f9e6 	bl	800202c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000c60:	2201      	movs	r2, #1
 8000c62:	2120      	movs	r1, #32
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000c66:	f001 f9e1 	bl	800202c <HAL_GPIO_WritePin>
      break;
 8000c6a:	e000      	b.n	8000c6e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000c6c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	48000800 	.word	0x48000800

08000c7c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e001      	b.n	8000cc0 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8000cbc:	2316      	movs	r3, #22
 8000cbe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8000cd0:	f7ff ff3a 	bl	8000b48 <BSP_RADIO_Init>
 8000cd4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff6c 	bl	8000bc4 <BSP_RADIO_ConfigRFSwitch>
 8000cec:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8000cfa:	f7ff ffbf 	bl	8000c7c <BSP_RADIO_GetTxConfig>
 8000cfe:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8000d08:	f7ff ffbf 	bl	8000c8a <BSP_RADIO_IsTCXO>
 8000d0c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8000d16:	f7ff ffbf 	bl	8000c98 <BSP_RADIO_IsDCDC>
 8000d1a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffba 	bl	8000ca6 <BSP_RADIO_GetRFOMaxPowerConfig>
 8000d32:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <SUBGRF_Init+0x84>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8000d50:	f7ff fd34 	bl	80007bc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8000d54:	2002      	movs	r0, #2
 8000d56:	f000 fe6b 	bl	8001a30 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <SUBGRF_Init+0x88>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 f8b9 	bl	8000ed8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8000d66:	f7ff ffcd 	bl	8000d04 <RBI_IsTCXO>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d10e      	bne.n	8000d8e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8000d70:	2140      	movs	r1, #64	@ 0x40
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 fa1e 	bl	80011b4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f640 1011 	movw	r0, #2321	@ 0x911
 8000d7e:	f000 fd29 	bl	80017d4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8000d82:	237f      	movs	r3, #127	@ 0x7f
 8000d84:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8000d86:	7b38      	ldrb	r0, [r7, #12]
 8000d88:	f000 f928 	bl	8000fdc <SUBGRF_Calibrate>
 8000d8c:	e009      	b.n	8000da2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000d8e:	2120      	movs	r1, #32
 8000d90:	f640 1011 	movw	r0, #2321	@ 0x911
 8000d94:	f000 fd1e 	bl	80017d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000d98:	2120      	movs	r1, #32
 8000d9a:	f640 1012 	movw	r0, #2322	@ 0x912
 8000d9e:	f000 fd19 	bl	80017d4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8000da2:	210e      	movs	r1, #14
 8000da4:	f640 101f 	movw	r0, #2335	@ 0x91f
 8000da8:	f000 fd14 	bl	80017d4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8000dac:	f7ff ff8e 	bl	8000ccc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <SUBGRF_Init+0x8c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000174 	.word	0x20000174
 8000dc4:	20000173 	.word	0x20000173
 8000dc8:	20000170 	.word	0x20000170

08000dcc <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 fd42 	bl	8001868 <SUBGRF_WriteBuffer>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	4613      	mov	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8000dfe:	f107 0317 	add.w	r3, r7, #23
 8000e02:	4619      	mov	r1, r3
 8000e04:	68b8      	ldr	r0, [r7, #8]
 8000e06:	f000 fcb9 	bl	800177c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d201      	bcs.n	8000e18 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e007      	b.n	8000e28 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8000e18:	7df8      	ldrb	r0, [r7, #23]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	f000 fd43 	bl	80018ac <SUBGRF_ReadBuffer>

    return 0;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8000e3e:	7afb      	ldrb	r3, [r7, #11]
 8000e40:	4619      	mov	r1, r3
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f7ff ffc2 	bl	8000dcc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f861 	bl	8000f10 <SUBGRF_SetTx>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000e70:	f000 fa24 	bl	80012bc <SUBGRF_GetPacketType>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d108      	bne.n	8000e8c <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8000e86:	f000 fccd 	bl	8001824 <SUBGRF_WriteRegisters>
            break;
 8000e8a:	e000      	b.n	8000e8e <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8000e8c:	bf00      	nop
    }
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000eb0:	f000 fa04 	bl	80012bc <SUBGRF_GetPacketType>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d108      	bne.n	8000ecc <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f240 60be 	movw	r0, #1726	@ 0x6be
 8000ec6:	f000 fcad 	bl	8001824 <SUBGRF_WriteRegisters>
            break;
 8000eca:	e000      	b.n	8000ece <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8000ecc:	bf00      	nop
    }
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2080      	movs	r0, #128	@ 0x80
 8000eea:	f000 fd01 	bl	80018f0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SUBGRF_SetStandby+0x34>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8000efa:	e002      	b.n	8000f02 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <SUBGRF_SetStandby+0x34>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	701a      	strb	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000170 	.word	0x20000170

08000f10 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <SUBGRF_SetTx+0x3c>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2083      	movs	r0, #131	@ 0x83
 8000f3e:	f000 fcd7 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000170 	.word	0x20000170

08000f50 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <SUBGRF_SetRx+0x3c>)
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	0c1b      	lsrs	r3, r3, #16
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2203      	movs	r2, #3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2082      	movs	r0, #130	@ 0x82
 8000f7e:	f000 fcb7 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000170 	.word	0x20000170

08000f90 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	209f      	movs	r0, #159	@ 0x9f
 8000fa2:	f000 fca5 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8000fb4:	f7ff fead 	bl	8000d12 <RBI_IsDCDC>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d102      	bne.n	8000fc4 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e001      	b.n	8000fc8 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2096      	movs	r0, #150	@ 0x96
 8000fd0:	f000 fc8e 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000ff0:	793b      	ldrb	r3, [r7, #4]
 8000ff2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800100a:	b25b      	sxtb	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001010:	793b      	ldrb	r3, [r7, #4]
 8001012:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800101a:	b25b      	sxtb	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001020:	793b      	ldrb	r3, [r7, #4]
 8001022:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800102a:	b25b      	sxtb	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001030:	793b      	ldrb	r3, [r7, #4]
 8001032:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800103a:	b25b      	sxtb	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8001040:	793b      	ldrb	r3, [r7, #4]
 8001042:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800104a:	4313      	orrs	r3, r2
 800104c:	b25b      	sxtb	r3, r3
 800104e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001050:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8001052:	f107 030f 	add.w	r3, r7, #15
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	2089      	movs	r0, #137	@ 0x89
 800105c:	f000 fc48 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a1d      	ldr	r2, [pc, #116]	@ (80010e8 <SUBGRF_CalibrateImage+0x80>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d904      	bls.n	8001082 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001078:	23e1      	movs	r3, #225	@ 0xe1
 800107a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800107c:	23e9      	movs	r3, #233	@ 0xe9
 800107e:	737b      	strb	r3, [r7, #13]
 8001080:	e027      	b.n	80010d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <SUBGRF_CalibrateImage+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d904      	bls.n	8001094 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800108a:	23d7      	movs	r3, #215	@ 0xd7
 800108c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800108e:	23db      	movs	r3, #219	@ 0xdb
 8001090:	737b      	strb	r3, [r7, #13]
 8001092:	e01e      	b.n	80010d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <SUBGRF_CalibrateImage+0x88>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d904      	bls.n	80010a6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800109c:	23c1      	movs	r3, #193	@ 0xc1
 800109e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80010a0:	23c5      	movs	r3, #197	@ 0xc5
 80010a2:	737b      	strb	r3, [r7, #13]
 80010a4:	e015      	b.n	80010d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <SUBGRF_CalibrateImage+0x8c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d904      	bls.n	80010b8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80010ae:	2375      	movs	r3, #117	@ 0x75
 80010b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80010b2:	2381      	movs	r3, #129	@ 0x81
 80010b4:	737b      	strb	r3, [r7, #13]
 80010b6:	e00c      	b.n	80010d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <SUBGRF_CalibrateImage+0x90>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d904      	bls.n	80010ca <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80010c0:	236b      	movs	r3, #107	@ 0x6b
 80010c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80010c4:	236f      	movs	r3, #111	@ 0x6f
 80010c6:	737b      	strb	r3, [r7, #13]
 80010c8:	e003      	b.n	80010d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80010ca:	2329      	movs	r3, #41	@ 0x29
 80010cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80010ce:	232b      	movs	r3, #43	@ 0x2b
 80010d0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2202      	movs	r2, #2
 80010d8:	4619      	mov	r1, r3
 80010da:	2098      	movs	r0, #152	@ 0x98
 80010dc:	f000 fc08 	bl	80018f0 <SUBGRF_WriteCommand>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	35a4e900 	.word	0x35a4e900
 80010ec:	32a9f880 	.word	0x32a9f880
 80010f0:	2de54480 	.word	0x2de54480
 80010f4:	1b6b0b00 	.word	0x1b6b0b00
 80010f8:	1954fc40 	.word	0x1954fc40

080010fc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	4604      	mov	r4, r0
 8001104:	4608      	mov	r0, r1
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4623      	mov	r3, r4
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	4603      	mov	r3, r0
 8001110:	71bb      	strb	r3, [r7, #6]
 8001112:	460b      	mov	r3, r1
 8001114:	717b      	strb	r3, [r7, #5]
 8001116:	4613      	mov	r3, r2
 8001118:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8001126:	793b      	ldrb	r3, [r7, #4]
 8001128:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2204      	movs	r2, #4
 8001130:	4619      	mov	r1, r3
 8001132:	2095      	movs	r0, #149	@ 0x95
 8001134:	f000 fbdc 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}

08001140 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	4611      	mov	r1, r2
 800114c:	461a      	mov	r2, r3
 800114e:	4623      	mov	r3, r4
 8001150:	80fb      	strh	r3, [r7, #6]
 8001152:	4603      	mov	r3, r0
 8001154:	80bb      	strh	r3, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	807b      	strh	r3, [r7, #2]
 800115a:	4613      	mov	r3, r2
 800115c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800118e:	883b      	ldrh	r3, [r7, #0]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	b29b      	uxth	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001198:	883b      	ldrh	r3, [r7, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2208      	movs	r2, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	2008      	movs	r0, #8
 80011a8:	f000 fba2 	bl	80018f0 <SUBGRF_WriteCommand>
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2204      	movs	r2, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	2097      	movs	r0, #151	@ 0x97
 80011ea:	f000 fb81 	bl	80018f0 <SUBGRF_WriteCommand>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80011f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <SUBGRF_SetRfFrequency+0x84>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	f083 0301 	eor.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff27 	bl	8001068 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <SUBGRF_SetRfFrequency+0x84>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	461c      	mov	r4, r3
 8001226:	4615      	mov	r5, r2
 8001228:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800122c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001230:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <SUBGRF_SetRfFrequency+0x88>)
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	4640      	mov	r0, r8
 8001238:	4649      	mov	r1, r9
 800123a:	f7ff f809 	bl	8000250 <__aeabi_uldivmod>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4613      	mov	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	0e1b      	lsrs	r3, r3, #24
 800124a:	b2db      	uxtb	r3, r3
 800124c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	0c1b      	lsrs	r3, r3, #16
 8001252:	b2db      	uxtb	r3, r3
 8001254:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	b2db      	uxtb	r3, r3
 800125c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	2204      	movs	r2, #4
 800126a:	4619      	mov	r1, r3
 800126c:	2086      	movs	r0, #134	@ 0x86
 800126e:	f000 fb3f 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800127c:	20000173 	.word	0x20000173
 8001280:	01e84800 	.word	0x01e84800

08001284 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <SUBGRF_SetPacketType+0x34>)
 8001292:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800129a:	2100      	movs	r1, #0
 800129c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80012a0:	f000 fa98 	bl	80017d4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	208a      	movs	r0, #138	@ 0x8a
 80012ac:	f000 fb20 	bl	80018f0 <SUBGRF_WriteCommand>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000171 	.word	0x20000171

080012bc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
    return PacketType;
 80012c0:	4b02      	ldr	r3, [pc, #8]	@ (80012cc <SUBGRF_GetPacketType+0x10>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	20000171 	.word	0x20000171

080012d0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	460b      	mov	r3, r1
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	4613      	mov	r3, r2
 80012e0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d149      	bne.n	800137c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fd19 	bl	8000d20 <RBI_GetRFOMaxPowerConfig>
 80012ee:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80012f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	da01      	bge.n	80012fe <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b0e      	cmp	r3, #14
 8001302:	d10e      	bne.n	8001322 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001304:	2301      	movs	r3, #1
 8001306:	2201      	movs	r2, #1
 8001308:	2100      	movs	r1, #0
 800130a:	2004      	movs	r0, #4
 800130c:	f7ff fef6 	bl	80010fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001310:	79ba      	ldrb	r2, [r7, #6]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	330e      	adds	r3, #14
 800131c:	b2db      	uxtb	r3, r3
 800131e:	71bb      	strb	r3, [r7, #6]
 8001320:	e01f      	b.n	8001362 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b0a      	cmp	r3, #10
 8001326:	d10e      	bne.n	8001346 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001328:	2301      	movs	r3, #1
 800132a:	2201      	movs	r2, #1
 800132c:	2100      	movs	r1, #0
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff fee4 	bl	80010fc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8001334:	79ba      	ldrb	r2, [r7, #6]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	330d      	adds	r3, #13
 8001340:	b2db      	uxtb	r3, r3
 8001342:	71bb      	strb	r3, [r7, #6]
 8001344:	e00d      	b.n	8001362 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8001346:	2301      	movs	r3, #1
 8001348:	2201      	movs	r2, #1
 800134a:	2100      	movs	r1, #0
 800134c:	2007      	movs	r0, #7
 800134e:	f7ff fed5 	bl	80010fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001352:	79ba      	ldrb	r2, [r7, #6]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	330e      	adds	r3, #14
 800135e:	b2db      	uxtb	r3, r3
 8001360:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8001362:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001366:	f113 0f11 	cmn.w	r3, #17
 800136a:	da01      	bge.n	8001370 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800136c:	23ef      	movs	r3, #239	@ 0xef
 800136e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001370:	2118      	movs	r1, #24
 8001372:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001376:	f000 fa2d 	bl	80017d4 <SUBGRF_WriteRegister>
 800137a:	e067      	b.n	800144c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800137c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001380:	f000 fa3c 	bl	80017fc <SUBGRF_ReadRegister>
 8001384:	4603      	mov	r3, r0
 8001386:	f043 031e 	orr.w	r3, r3, #30
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4619      	mov	r1, r3
 800138e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001392:	f000 fa1f 	bl	80017d4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fcc2 	bl	8000d20 <RBI_GetRFOMaxPowerConfig>
 800139c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800139e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	da01      	bge.n	80013ac <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b14      	cmp	r3, #20
 80013b0:	d10e      	bne.n	80013d0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80013b2:	2301      	movs	r3, #1
 80013b4:	2200      	movs	r2, #0
 80013b6:	2105      	movs	r1, #5
 80013b8:	2003      	movs	r0, #3
 80013ba:	f7ff fe9f 	bl	80010fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80013be:	79ba      	ldrb	r2, [r7, #6]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3316      	adds	r3, #22
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	e031      	b.n	8001434 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b11      	cmp	r3, #17
 80013d4:	d10e      	bne.n	80013f4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80013d6:	2301      	movs	r3, #1
 80013d8:	2200      	movs	r2, #0
 80013da:	2103      	movs	r1, #3
 80013dc:	2002      	movs	r0, #2
 80013de:	f7ff fe8d 	bl	80010fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80013e2:	79ba      	ldrb	r2, [r7, #6]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3316      	adds	r3, #22
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	71bb      	strb	r3, [r7, #6]
 80013f2:	e01f      	b.n	8001434 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b0e      	cmp	r3, #14
 80013f8:	d10e      	bne.n	8001418 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80013fa:	2301      	movs	r3, #1
 80013fc:	2200      	movs	r2, #0
 80013fe:	2102      	movs	r1, #2
 8001400:	2002      	movs	r0, #2
 8001402:	f7ff fe7b 	bl	80010fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	330e      	adds	r3, #14
 8001412:	b2db      	uxtb	r3, r3
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	e00d      	b.n	8001434 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001418:	2301      	movs	r3, #1
 800141a:	2200      	movs	r2, #0
 800141c:	2107      	movs	r1, #7
 800141e:	2004      	movs	r0, #4
 8001420:	f7ff fe6c 	bl	80010fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001424:	79ba      	ldrb	r2, [r7, #6]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3316      	adds	r3, #22
 8001430:	b2db      	uxtb	r3, r3
 8001432:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001434:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001438:	f113 0f09 	cmn.w	r3, #9
 800143c:	da01      	bge.n	8001442 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800143e:	23f7      	movs	r3, #247	@ 0xf7
 8001440:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001442:	2138      	movs	r1, #56	@ 0x38
 8001444:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001448:	f000 f9c4 	bl	80017d4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	2202      	movs	r2, #2
 800145a:	4619      	mov	r1, r3
 800145c:	208e      	movs	r0, #142	@ 0x8e
 800145e:	f000 fa47 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800146c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800147a:	4a61      	ldr	r2, [pc, #388]	@ (8001600 <SUBGRF_SetModulationParams+0x194>)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001484:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	4b5d      	ldr	r3, [pc, #372]	@ (8001604 <SUBGRF_SetModulationParams+0x198>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d004      	beq.n	800149e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fef3 	bl	8001284 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	f200 80a5 	bhi.w	80015f2 <SUBGRF_SetModulationParams+0x186>
 80014a8:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <SUBGRF_SetModulationParams+0x44>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	08001581 	.word	0x08001581
 80014b8:	08001543 	.word	0x08001543
 80014bc:	080015af 	.word	0x080015af
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80014c0:	2308      	movs	r3, #8
 80014c2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001608 <SUBGRF_SetModulationParams+0x19c>)
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
 80014ea:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7b5b      	ldrb	r3, [r3, #13]
 80014f0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2200      	movs	r2, #0
 80014f8:	461c      	mov	r4, r3
 80014fa:	4615      	mov	r5, r2
 80014fc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001500:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001504:	4a41      	ldr	r2, [pc, #260]	@ (800160c <SUBGRF_SetModulationParams+0x1a0>)
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	4640      	mov	r0, r8
 800150c:	4649      	mov	r1, r9
 800150e:	f7fe fe9f 	bl	8000250 <__aeabi_uldivmod>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4613      	mov	r3, r2
 8001518:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	b2db      	uxtb	r3, r3
 8001520:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001530:	7cfb      	ldrb	r3, [r7, #19]
 8001532:	b29a      	uxth	r2, r3
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4619      	mov	r1, r3
 800153a:	208b      	movs	r0, #139	@ 0x8b
 800153c:	f000 f9d8 	bl	80018f0 <SUBGRF_WriteCommand>
        break;
 8001540:	e058      	b.n	80015f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001542:	2304      	movs	r3, #4
 8001544:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4a2f      	ldr	r2, [pc, #188]	@ (8001608 <SUBGRF_SetModulationParams+0x19c>)
 800154c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	b2db      	uxtb	r3, r3
 8001558:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b2db      	uxtb	r3, r3
 8001560:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7d1b      	ldrb	r3, [r3, #20]
 800156c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	b29a      	uxth	r2, r3
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4619      	mov	r1, r3
 8001578:	208b      	movs	r0, #139	@ 0x8b
 800157a:	f000 f9b9 	bl	80018f0 <SUBGRF_WriteCommand>
        break;
 800157e:	e039      	b.n	80015f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7e1b      	ldrb	r3, [r3, #24]
 8001588:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e9b      	ldrb	r3, [r3, #26]
 8001594:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7edb      	ldrb	r3, [r3, #27]
 800159a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	208b      	movs	r0, #139	@ 0x8b
 80015a8:	f000 f9a2 	bl	80018f0 <SUBGRF_WriteCommand>

        break;
 80015ac:	e022      	b.n	80015f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80015ae:	2305      	movs	r3, #5
 80015b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <SUBGRF_SetModulationParams+0x19c>)
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7b1b      	ldrb	r3, [r3, #12]
 80015d8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4619      	mov	r1, r3
 80015ea:	208b      	movs	r0, #139	@ 0x8b
 80015ec:	f000 f980 	bl	80018f0 <SUBGRF_WriteCommand>
        break;
 80015f0:	e000      	b.n	80015f4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80015f2:	bf00      	nop
    }
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015fe:	bf00      	nop
 8001600:	08005ca4 	.word	0x08005ca4
 8001604:	20000171 	.word	0x20000171
 8001608:	3d090000 	.word	0x3d090000
 800160c:	01e84800 	.word	0x01e84800

08001610 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800161c:	4a48      	ldr	r2, [pc, #288]	@ (8001740 <SUBGRF_SetPacketParams+0x130>)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	ca07      	ldmia	r2, {r0, r1, r2}
 8001624:	c303      	stmia	r3!, {r0, r1}
 8001626:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	4b45      	ldr	r3, [pc, #276]	@ (8001744 <SUBGRF_SetPacketParams+0x134>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d004      	beq.n	800163e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe23 	bl	8001284 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d878      	bhi.n	8001738 <SUBGRF_SetPacketParams+0x128>
 8001646:	a201      	add	r2, pc, #4	@ (adr r2, 800164c <SUBGRF_SetPacketParams+0x3c>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	0800165d 	.word	0x0800165d
 8001650:	080016ed 	.word	0x080016ed
 8001654:	080016e1 	.word	0x080016e1
 8001658:	0800165d 	.word	0x0800165d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7a5b      	ldrb	r3, [r3, #9]
 8001660:	2bf1      	cmp	r3, #241	@ 0xf1
 8001662:	d10a      	bne.n	800167a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001664:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001668:	f7ff fbf5 	bl	8000e56 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800166c:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001670:	f7ff fc11 	bl	8000e96 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001674:	2302      	movs	r3, #2
 8001676:	75bb      	strb	r3, [r7, #22]
 8001678:	e011      	b.n	800169e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7a5b      	ldrb	r3, [r3, #9]
 800167e:	2bf2      	cmp	r3, #242	@ 0xf2
 8001680:	d10a      	bne.n	8001698 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001682:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001686:	f7ff fbe6 	bl	8000e56 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800168a:	f241 0021 	movw	r0, #4129	@ 0x1021
 800168e:	f7ff fc02 	bl	8000e96 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001692:	2306      	movs	r3, #6
 8001694:	75bb      	strb	r3, [r7, #22]
 8001696:	e002      	b.n	800169e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7a5b      	ldrb	r3, [r3, #9]
 800169c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800169e:	2309      	movs	r3, #9
 80016a0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	885b      	ldrh	r3, [r3, #2]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	885b      	ldrh	r3, [r3, #2]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	795b      	ldrb	r3, [r3, #5]
 80016c0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	799b      	ldrb	r3, [r3, #6]
 80016c6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	79db      	ldrb	r3, [r3, #7]
 80016cc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7a1b      	ldrb	r3, [r3, #8]
 80016d2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80016d4:	7dbb      	ldrb	r3, [r7, #22]
 80016d6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7a9b      	ldrb	r3, [r3, #10]
 80016dc:	753b      	strb	r3, [r7, #20]
        break;
 80016de:	e022      	b.n	8001726 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b1b      	ldrb	r3, [r3, #12]
 80016e8:	733b      	strb	r3, [r7, #12]
        break;
 80016ea:	e01c      	b.n	8001726 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80016ec:	2306      	movs	r3, #6
 80016ee:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	89db      	ldrh	r3, [r3, #14]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	89db      	ldrh	r3, [r3, #14]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7c1a      	ldrb	r2, [r3, #16]
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <SUBGRF_SetPacketParams+0x138>)
 800170a:	4611      	mov	r1, r2
 800170c:	7019      	strb	r1, [r3, #0]
 800170e:	4613      	mov	r3, r2
 8001710:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7c5b      	ldrb	r3, [r3, #17]
 8001716:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7c9b      	ldrb	r3, [r3, #18]
 800171c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7cdb      	ldrb	r3, [r3, #19]
 8001722:	747b      	strb	r3, [r7, #17]
        break;
 8001724:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	b29a      	uxth	r2, r3
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4619      	mov	r1, r3
 8001730:	208c      	movs	r0, #140	@ 0x8c
 8001732:	f000 f8dd 	bl	80018f0 <SUBGRF_WriteCommand>
 8001736:	e000      	b.n	800173a <SUBGRF_SetPacketParams+0x12a>
        return;
 8001738:	bf00      	nop
}
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	08005cac 	.word	0x08005cac
 8001744:	20000171 	.word	0x20000171
 8001748:	20000172 	.word	0x20000172

0800174c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	460a      	mov	r2, r1
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	4613      	mov	r3, r2
 800175a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2202      	movs	r2, #2
 800176a:	4619      	mov	r1, r3
 800176c:	208f      	movs	r0, #143	@ 0x8f
 800176e:	f000 f8bf 	bl	80018f0 <SUBGRF_WriteCommand>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	2202      	movs	r2, #2
 800178c:	4619      	mov	r1, r3
 800178e:	2013      	movs	r0, #19
 8001790:	f000 f8d0 	bl	8001934 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001794:	f7ff fd92 	bl	80012bc <SUBGRF_GetPacketType>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10d      	bne.n	80017ba <SUBGRF_GetRxBufferStatus+0x3e>
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <SUBGRF_GetRxBufferStatus+0x54>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80017a8:	f240 7002 	movw	r0, #1794	@ 0x702
 80017ac:	f000 f826 	bl	80017fc <SUBGRF_ReadRegister>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e002      	b.n	80017c0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80017ba:	7b3a      	ldrb	r2, [r7, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80017c0:	7b7a      	ldrb	r2, [r7, #13]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	701a      	strb	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000172 	.word	0x20000172

080017d4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	460a      	mov	r2, r1
 80017de:	80fb      	strh	r3, [r7, #6]
 80017e0:	4613      	mov	r3, r2
 80017e2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80017e4:	1d7a      	adds	r2, r7, #5
 80017e6:	88f9      	ldrh	r1, [r7, #6]
 80017e8:	2301      	movs	r3, #1
 80017ea:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <SUBGRF_WriteRegister+0x24>)
 80017ec:	f002 f862 	bl	80038b4 <HAL_SUBGHZ_WriteRegisters>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200000cc 	.word	0x200000cc

080017fc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001806:	f107 020f 	add.w	r2, r7, #15
 800180a:	88f9      	ldrh	r1, [r7, #6]
 800180c:	2301      	movs	r3, #1
 800180e:	4804      	ldr	r0, [pc, #16]	@ (8001820 <SUBGRF_ReadRegister+0x24>)
 8001810:	f002 f8af 	bl	8003972 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200000cc 	.word	0x200000cc

08001824 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	80fb      	strh	r3, [r7, #6]
 8001830:	4613      	mov	r3, r2
 8001832:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001834:	f3ef 8310 	mrs	r3, PRIMASK
 8001838:	60fb      	str	r3, [r7, #12]
  return(result);
 800183a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800183c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800183e:	b672      	cpsid	i
}
 8001840:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	88f9      	ldrh	r1, [r7, #6]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4806      	ldr	r0, [pc, #24]	@ (8001864 <SUBGRF_WriteRegisters+0x40>)
 800184a:	f002 f833 	bl	80038b4 <HAL_SUBGHZ_WriteRegisters>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f383 8810 	msr	PRIMASK, r3
}
 8001858:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200000cc 	.word	0x200000cc

08001868 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001878:	f3ef 8310 	mrs	r3, PRIMASK
 800187c:	60fb      	str	r3, [r7, #12]
  return(result);
 800187e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001882:	b672      	cpsid	i
}
 8001884:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8001886:	79bb      	ldrb	r3, [r7, #6]
 8001888:	b29b      	uxth	r3, r3
 800188a:	79f9      	ldrb	r1, [r7, #7]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <SUBGRF_WriteBuffer+0x40>)
 8001890:	f002 f983 	bl	8003b9a <HAL_SUBGHZ_WriteBuffer>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f383 8810 	msr	PRIMASK, r3
}
 800189e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200000cc 	.word	0x200000cc

080018ac <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	4613      	mov	r3, r2
 80018ba:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018bc:	f3ef 8310 	mrs	r3, PRIMASK
 80018c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80018c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80018c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80018c6:	b672      	cpsid	i
}
 80018c8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	79f9      	ldrb	r1, [r7, #7]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	4806      	ldr	r0, [pc, #24]	@ (80018ec <SUBGRF_ReadBuffer+0x40>)
 80018d4:	f002 f9b4 	bl	8003c40 <HAL_SUBGHZ_ReadBuffer>
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f383 8810 	msr	PRIMASK, r3
}
 80018e2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200000cc 	.word	0x200000cc

080018f0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001900:	f3ef 8310 	mrs	r3, PRIMASK
 8001904:	60fb      	str	r3, [r7, #12]
  return(result);
 8001906:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001908:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800190a:	b672      	cpsid	i
}
 800190c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	79f9      	ldrb	r1, [r7, #7]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4806      	ldr	r0, [pc, #24]	@ (8001930 <SUBGRF_WriteCommand+0x40>)
 8001916:	f002 f88d 	bl	8003a34 <HAL_SUBGHZ_ExecSetCmd>
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f383 8810 	msr	PRIMASK, r3
}
 8001924:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200000cc 	.word	0x200000cc

08001934 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	4613      	mov	r3, r2
 8001942:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001944:	f3ef 8310 	mrs	r3, PRIMASK
 8001948:	60fb      	str	r3, [r7, #12]
  return(result);
 800194a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800194c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800194e:	b672      	cpsid	i
}
 8001950:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	79f9      	ldrb	r1, [r7, #7]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4806      	ldr	r0, [pc, #24]	@ (8001974 <SUBGRF_ReadCommand+0x40>)
 800195a:	f002 f8ca 	bl	8003af2 <HAL_SUBGHZ_ExecGetCmd>
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f383 8810 	msr	PRIMASK, r3
}
 8001968:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200000cc 	.word	0x200000cc

08001978 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10d      	bne.n	80019ae <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d104      	bne.n	80019a2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001998:	2302      	movs	r3, #2
 800199a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800199c:	2004      	movs	r0, #4
 800199e:	f000 f847 	bl	8001a30 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d107      	bne.n	80019b8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80019a8:	2303      	movs	r3, #3
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e004      	b.n	80019b8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f98d 	bl	8000cda <RBI_ConfigRFSwitch>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80019d6:	f7ff f98e 	bl	8000cf6 <RBI_GetTxConfig>
 80019da:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d016      	beq.n	8001a10 <SUBGRF_SetRfTxPower+0x48>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	dc16      	bgt.n	8001a16 <SUBGRF_SetRfTxPower+0x4e>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <SUBGRF_SetRfTxPower+0x2e>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d00a      	beq.n	8001a0a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80019f4:	e00f      	b.n	8001a16 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	dd02      	ble.n	8001a04 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	73fb      	strb	r3, [r7, #15]
            break;
 8001a02:	e009      	b.n	8001a18 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
            break;
 8001a08:	e006      	b.n	8001a18 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
            break;
 8001a0e:	e003      	b.n	8001a18 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	73fb      	strb	r3, [r7, #15]
            break;
 8001a14:	e000      	b.n	8001a18 <SUBGRF_SetRfTxPower+0x50>
            break;
 8001a16:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8001a18:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fc55 	bl	80012d0 <SUBGRF_SetTxParams>

    return paSelect;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8001a3a:	f7ff f96a 	bl	8000d12 <RBI_IsDCDC>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d112      	bne.n	8001a6a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8001a44:	f640 1023 	movw	r0, #2339	@ 0x923
 8001a48:	f7ff fed8 	bl	80017fc <SUBGRF_ReadRegister>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f023 0306 	bic.w	r3, r3, #6
 8001a56:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	f640 1023 	movw	r0, #2339	@ 0x923
 8001a66:	f7ff feb5 	bl	80017d4 <SUBGRF_WriteRegister>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7e:	2003      	movs	r0, #3
 8001a80:	f000 f942 	bl	8001d08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a84:	f001 fb20 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_Init+0x3c>)
 8001a8c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a8e:	200f      	movs	r0, #15
 8001a90:	f000 f810 	bl	8001ab4 <HAL_InitTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	e001      	b.n	8001aa4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa0:	f7fe fe42 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <HAL_InitTick+0x6c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d024      	beq.n	8001b12 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ac8:	f001 fafe 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <HAL_InitTick+0x6c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f936 	bl	8001d52 <HAL_SYSTICK_Config>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	d809      	bhi.n	8001b06 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af2:	2200      	movs	r2, #0
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295
 8001afa:	f000 f910 	bl	8001d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afe:	4a09      	ldr	r2, [pc, #36]	@ (8001b24 <HAL_InitTick+0x70>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e007      	b.n	8001b16 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e004      	b.n	8001b16 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000010 	.word	0x20000010
 8001b24:	2000000c 	.word	0x2000000c

08001b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_IncTick+0x1c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_IncTick+0x20>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a03      	ldr	r2, [pc, #12]	@ (8001b48 <HAL_IncTick+0x20>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000010 	.word	0x20000010
 8001b48:	20000178 	.word	0x20000178

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b02      	ldr	r3, [pc, #8]	@ (8001b5c <HAL_GetTick+0x10>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	20000178 	.word	0x20000178

08001b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fff0 	bl	8001b4c <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d005      	beq.n	8001b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_Delay+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b86:	bf00      	nop
 8001b88:	f7ff ffe0 	bl	8001b4c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d8f7      	bhi.n	8001b88 <HAL_Delay+0x28>
  {
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000010 	.word	0x20000010

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd4:	d301      	bcc.n	8001cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00f      	b.n	8001cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cda:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <SysTick_Config+0x40>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f7ff ff90 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <SysTick_Config+0x40>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf2:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <SysTick_Config+0x40>)
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	e000e010 	.word	0xe000e010

08001d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff49 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff60 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff92 	bl	8001c60 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff61 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffb2 	bl	8001cc4 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e140      	b.n	8001ffe <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8132 	beq.w	8001ff8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d017      	beq.n	8001e4a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d123      	bne.n	8001e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0203 	and.w	r2, r3, #3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 808c 	beq.w	8001ff8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800201c <HAL_GPIO_Init+0x2b0>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f0a:	d00d      	beq.n	8001f28 <HAL_GPIO_Init+0x1bc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a44      	ldr	r2, [pc, #272]	@ (8002020 <HAL_GPIO_Init+0x2b4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x1b8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a43      	ldr	r2, [pc, #268]	@ (8002024 <HAL_GPIO_Init+0x2b8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_GPIO_Init+0x1b4>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x1be>
 8001f20:	2307      	movs	r3, #7
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x1be>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x1be>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f3a:	4938      	ldr	r1, [pc, #224]	@ (800201c <HAL_GPIO_Init+0x2b0>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f48:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f72:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f96:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001fc2:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fd0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	f47f aeb7 	bne.w	8001d7c <HAL_GPIO_Init+0x10>
  }
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40010000 	.word	0x40010000
 8002020:	48000400 	.word	0x48000400
 8002024:	48000800 	.word	0x48000800
 8002028:	58000800 	.word	0x58000800

0800202c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
 8002038:	4613      	mov	r3, r2
 800203a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203c:	787b      	ldrb	r3, [r7, #1]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002048:	e002      	b.n	8002050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a03      	ldr	r2, [pc, #12]	@ (8002074 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	58000400 	.word	0x58000400

08002078 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_PWREx_GetVoltageRange+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	58000400 	.word	0x58000400

08002090 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a0:	d101      	bne.n	80020a6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	58000400 	.word	0x58000400

080020b4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020fe:	d101      	bne.n	8002104 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213c:	6013      	str	r3, [r2, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002158:	d101      	bne.n	800215e <LL_RCC_HSE_IsReady+0x18>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_RCC_HSE_IsReady+0x1a>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002192:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b2:	d101      	bne.n	80021b8 <LL_RCC_HSI_IsReady+0x18>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <LL_RCC_HSI_IsReady+0x1a>
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	061b      	lsls	r3, r3, #24
 80021d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d101      	bne.n	8002202 <LL_RCC_LSE_IsReady+0x18>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <LL_RCC_LSE_IsReady+0x1a>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002218:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d101      	bne.n	8002264 <LL_RCC_LSI_IsReady+0x18>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <LL_RCC_LSI_IsReady+0x1a>
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6013      	str	r3, [r2, #0]
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6013      	str	r3, [r2, #0]
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d101      	bne.n	80022bc <LL_RCC_MSI_IsReady+0x16>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_RCC_MSI_IsReady+0x18>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d101      	bne.n	80022dc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002308:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800238a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023d8:	f023 020f 	bic.w	r2, r3, #15
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800242c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024e6:	d101      	bne.n	80024ec <LL_RCC_PLL_IsReady+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_RCC_PLL_IsReady+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002562:	d101      	bne.n	8002568 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002586:	d101      	bne.n	800258c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80025a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025aa:	d101      	bne.n	80025b0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025cc:	d101      	bne.n	80025d2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025ee:	d101      	bne.n	80025f4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e36f      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	f7ff fea6 	bl	8002362 <LL_RCC_GetSysClkSource>
 8002616:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	f7ff ff8f 	bl	800253a <LL_RCC_PLL_GetMainSource>
 800261c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80c4 	beq.w	80027b4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x3e>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d176      	bne.n	8002726 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d173      	bne.n	8002726 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e353      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x68>
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002666:	e006      	b.n	8002676 <HAL_RCC_OscConfig+0x76>
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800266c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002676:	4293      	cmp	r3, r2
 8002678:	d222      	bcs.n	80026c0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fd5a 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e331      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fe2b 	bl	8002314 <LL_RCC_MSI_SetCalibTrimming>
 80026be:	e021      	b.n	8002704 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fe12 	bl	8002314 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fd1f 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e2f6      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002704:	f000 fce0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8002708:	4603      	mov	r3, r0
 800270a:	4aa7      	ldr	r2, [pc, #668]	@ (80029a8 <HAL_RCC_OscConfig+0x3a8>)
 800270c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800270e:	4ba7      	ldr	r3, [pc, #668]	@ (80029ac <HAL_RCC_OscConfig+0x3ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f9ce 	bl	8001ab4 <HAL_InitTick>
 8002718:	4603      	mov	r3, r0
 800271a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d047      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	e2e5      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02c      	beq.n	8002788 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800272e:	f7ff fd9e 	bl	800226e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002732:	f7ff fa0b 	bl	8001b4c <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800273a:	f7ff fa07 	bl	8001b4c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e2d2      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800274c:	f7ff fdab 	bl	80022a6 <LL_RCC_MSI_IsReady>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f1      	beq.n	800273a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fdc7 	bl	8002314 <LL_RCC_MSI_SetCalibTrimming>
 8002786:	e015      	b.n	80027b4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002788:	f7ff fd7f 	bl	800228a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800278c:	f7ff f9de 	bl	8001b4c <HAL_GetTick>
 8002790:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002794:	f7ff f9da 	bl	8001b4c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e2a5      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027a6:	f7ff fd7e 	bl	80022a6 <LL_RCC_MSI_IsReady>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f1      	bne.n	8002794 <HAL_RCC_OscConfig+0x194>
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027b2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d058      	beq.n	8002872 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d108      	bne.n	80027de <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d14b      	bne.n	8002872 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e289      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_OscConfig+0x204>
 80027fe:	f7ff fc86 	bl	800210e <LL_RCC_HSE_Enable>
 8002802:	e00d      	b.n	8002820 <HAL_RCC_OscConfig+0x220>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800280c:	d104      	bne.n	8002818 <HAL_RCC_OscConfig+0x218>
 800280e:	f7ff fc51 	bl	80020b4 <LL_RCC_HSE_EnableTcxo>
 8002812:	f7ff fc7c 	bl	800210e <LL_RCC_HSE_Enable>
 8002816:	e003      	b.n	8002820 <HAL_RCC_OscConfig+0x220>
 8002818:	f7ff fc87 	bl	800212a <LL_RCC_HSE_Disable>
 800281c:	f7ff fc58 	bl	80020d0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff f990 	bl	8001b4c <HAL_GetTick>
 800282c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff f98c 	bl	8001b4c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e257      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002842:	f7ff fc80 	bl	8002146 <LL_RCC_HSE_IsReady>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f1      	beq.n	8002830 <HAL_RCC_OscConfig+0x230>
 800284c:	e011      	b.n	8002872 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff f97d 	bl	8001b4c <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002856:	f7ff f979 	bl	8001b4c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b64      	cmp	r3, #100	@ 0x64
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e244      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002868:	f7ff fc6d 	bl	8002146 <LL_RCC_HSE_IsReady>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f1      	bne.n	8002856 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d046      	beq.n	800290c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d005      	beq.n	8002890 <HAL_RCC_OscConfig+0x290>
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d10e      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d10b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e22a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc8e 	bl	80021c2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028a6:	e031      	b.n	800290c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d019      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	f7ff fc5a 	bl	8002168 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff f94a 	bl	8001b4c <HAL_GetTick>
 80028b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028bc:	f7ff f946 	bl	8001b4c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e211      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028ce:	f7ff fc67 	bl	80021a0 <LL_RCC_HSI_IsReady>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f1      	beq.n	80028bc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fc70 	bl	80021c2 <LL_RCC_HSI_SetCalibTrimming>
 80028e2:	e013      	b.n	800290c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e4:	f7ff fc4e 	bl	8002184 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff f930 	bl	8001b4c <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff f92c 	bl	8001b4c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1f7      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002902:	f7ff fc4d 	bl	80021a0 <LL_RCC_HSI_IsReady>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f1      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d06e      	beq.n	80029f6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d056      	beq.n	80029ce <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002928:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	429a      	cmp	r2, r3
 8002936:	d031      	beq.n	800299c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e1d0      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d013      	beq.n	8002982 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800295a:	f7ff fc67 	bl	800222c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800295e:	f7ff f8f5 	bl	8001b4c <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002966:	f7ff f8f1 	bl	8001b4c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b11      	cmp	r3, #17
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e1bc      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002978:	f7ff fc68 	bl	800224c <LL_RCC_LSI_IsReady>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f1      	bne.n	8002966 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298a:	f023 0210 	bic.w	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299c:	f7ff fc36 	bl	800220c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7ff f8d4 	bl	8001b4c <HAL_GetTick>
 80029a4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80029a6:	e00c      	b.n	80029c2 <HAL_RCC_OscConfig+0x3c2>
 80029a8:	20000008 	.word	0x20000008
 80029ac:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b0:	f7ff f8cc 	bl	8001b4c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b11      	cmp	r3, #17
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e197      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80029c2:	f7ff fc43 	bl	800224c <LL_RCC_LSI_IsReady>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f1      	beq.n	80029b0 <HAL_RCC_OscConfig+0x3b0>
 80029cc:	e013      	b.n	80029f6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	f7ff fc2d 	bl	800222c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7ff f8bb 	bl	8001b4c <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029da:	f7ff f8b7 	bl	8001b4c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e182      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80029ec:	f7ff fc2e 	bl	800224c <LL_RCC_LSI_IsReady>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f1      	bne.n	80029da <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80d8 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a04:	f7ff fb44 	bl	8002090 <LL_PWR_IsEnabledBkUpAccess>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d113      	bne.n	8002a36 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a0e:	f7ff fb25 	bl	800205c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7ff f89b 	bl	8001b4c <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7ff f897 	bl	8001b4c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e162      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a2c:	f7ff fb30 	bl	8002090 <LL_PWR_IsEnabledBkUpAccess>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f1      	beq.n	8002a1a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d07b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b85      	cmp	r3, #133	@ 0x85
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7ff f873 	bl	8001b4c <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7ff f865 	bl	8001b4c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e12e      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a94:	f7ff fba9 	bl	80021ea <LL_RCC_LSE_IsReady>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0ef      	beq.n	8002a7e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b81      	cmp	r3, #129	@ 0x81
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b85      	cmp	r3, #133	@ 0x85
 8002aac:	d121      	bne.n	8002af2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7ff f84d 	bl	8001b4c <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7ff f83f 	bl	8001b4c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e108      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ec      	beq.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002af0:	e060      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7ff f82b 	bl	8001b4c <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7ff f81d 	bl	8001b4c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0e6      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ec      	bne.n	8002b0e <HAL_RCC_OscConfig+0x50e>
 8002b34:	e03e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7ff f809 	bl	8001b4c <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fffb 	bl	8001b4c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0c4      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ec      	bne.n	8002b52 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe ffe8 	bl	8001b4c <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe ffda 	bl	8001b4c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0a3      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002baa:	f7ff fb1e 	bl	80021ea <LL_RCC_LSE_IsReady>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ef      	bne.n	8002b94 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8099 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d06c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d14b      	bne.n	8002c64 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	f7ff fc74 	bl	80024b8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe ffbc 	bl	8001b4c <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe ffb8 	bl	8001b4c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b0a      	cmp	r3, #10
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e083      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bea:	f7ff fc73 	bl	80024d4 <LL_RCC_PLL_IsReady>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f1      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	4b40      	ldr	r3, [pc, #256]	@ (8002cfc <HAL_RCC_OscConfig+0x6fc>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c06:	4311      	orrs	r1, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c0c:	0212      	lsls	r2, r2, #8
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c14:	4311      	orrs	r1, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c20:	430a      	orrs	r2, r1
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c2a:	f7ff fc37 	bl	800249c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe ff85 	bl	8001b4c <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe ff81 	bl	8001b4c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b0a      	cmp	r3, #10
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e04c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c58:	f7ff fc3c 	bl	80024d4 <LL_RCC_PLL_IsReady>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f1      	beq.n	8002c46 <HAL_RCC_OscConfig+0x646>
 8002c62:	e045      	b.n	8002cf0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c64:	f7ff fc28 	bl	80024b8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe ff70 	bl	8001b4c <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe ff6c 	bl	8001b4c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b0a      	cmp	r3, #10
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e037      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c82:	f7ff fc27 	bl	80024d4 <LL_RCC_PLL_IsReady>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f1      	bne.n	8002c70 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c96:	4b1a      	ldr	r3, [pc, #104]	@ (8002d00 <HAL_RCC_OscConfig+0x700>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60cb      	str	r3, [r1, #12]
 8002c9c:	e028      	b.n	8002cf0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e023      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d115      	bne.n	8002cec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d10e      	bne.n	8002cec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	11c1808c 	.word	0x11c1808c
 8002d00:	eefefffc 	.word	0xeefefffc

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e12c      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b98      	ldr	r3, [pc, #608]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d91b      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b95      	ldr	r3, [pc, #596]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4993      	ldr	r1, [pc, #588]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d36:	f7fe ff09 	bl	8001b4c <HAL_GetTick>
 8002d3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d3e:	f7fe ff05 	bl	8001b4c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e110      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d50:	4b8a      	ldr	r3, [pc, #552]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d1ef      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fb02 	bl	8002378 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d74:	f7fe feea 	bl	8001b4c <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d7c:	f7fe fee6 	bl	8001b4c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0f1      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d8e:	f7ff fbdf 	bl	8002550 <LL_RCC_IsActiveFlag_HPRE>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f1      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d016      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff faf8 	bl	800239e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dae:	f7fe fecd 	bl	8001b4c <HAL_GetTick>
 8002db2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002db6:	f7fe fec9 	bl	8001b4c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0d4      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002dc8:	f7ff fbd3 	bl	8002572 <LL_RCC_IsActiveFlag_C2HPRE>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f1      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff faf0 	bl	80023c8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002de8:	f7fe feb0 	bl	8001b4c <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002df0:	f7fe feac 	bl	8001b4c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0b7      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e02:	f7ff fbc8 	bl	8002596 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f1      	beq.n	8002df0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d016      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fae9 	bl	80023f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e22:	f7fe fe93 	bl	8001b4c <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e2a:	f7fe fe8f 	bl	8001b4c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e09a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e3c:	f7ff fbbd 	bl	80025ba <LL_RCC_IsActiveFlag_PPRE1>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f1      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fade 	bl	800241a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe fe75 	bl	8001b4c <HAL_GetTick>
 8002e62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e66:	f7fe fe71 	bl	8001b4c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e07c      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e78:	f7ff fbb0 	bl	80025dc <LL_RCC_IsActiveFlag_PPRE2>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f1      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d043      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e96:	f7ff f956 	bl	8002146 <LL_RCC_HSE_IsReady>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11e      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e066      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002eac:	f7ff fb12 	bl	80024d4 <LL_RCC_PLL_IsReady>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d113      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e05b      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ec2:	f7ff f9f0 	bl	80022a6 <LL_RCC_MSI_IsReady>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e050      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ed0:	f7ff f966 	bl	80021a0 <LL_RCC_HSI_IsReady>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e049      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fa2a 	bl	800233c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fe30 	bl	8001b4c <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fe fe2c 	bl	8001b4c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e035      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	f7ff fa2c 	bl	8002362 <LL_RCC_GetSysClkSource>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d1ec      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d21b      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f24:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 0207 	bic.w	r2, r3, #7
 8002f2c:	4913      	ldr	r1, [pc, #76]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f34:	f7fe fe0a 	bl	8001b4c <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f3c:	f7fe fe06 	bl	8001b4c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e011      	b.n	8002f72 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_RCC_ClockConfig+0x278>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1ef      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f5c:	f000 f8b4 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a07      	ldr	r2, [pc, #28]	@ (8002f80 <HAL_RCC_ClockConfig+0x27c>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <HAL_RCC_ClockConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fda2 	bl	8001ab4 <HAL_InitTick>
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	58004000 	.word	0x58004000
 8002f80:	20000008 	.word	0x20000008
 8002f84:	2000000c 	.word	0x2000000c

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	f7ff f9e4 	bl	8002362 <LL_RCC_GetSysClkSource>
 8002f9a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9c:	f7ff facd 	bl	800253a <LL_RCC_PLL_GetMainSource>
 8002fa0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x2c>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d139      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d136      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002fb4:	f7ff f987 	bl	80022c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0x62>
 8002fbe:	f7ff f982 	bl	80022c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x4e>
 8002fc8:	f7ff f98d 	bl	80022e6 <LL_RCC_MSI_GetRange>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002fd6:	f7ff f991 	bl	80022fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	4a36      	ldr	r2, [pc, #216]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x134>)
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x8c>
 8002fea:	f7ff f96c 	bl	80022c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x7a>
 8002ff4:	f7ff f977 	bl	80022e6 <LL_RCC_MSI_GetRange>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	e005      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x86>
 8003002:	f7ff f97b 	bl	80022fc <LL_RCC_MSI_GetRangeAfterStandby>
 8003006:	4603      	mov	r3, r0
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x134>)
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003020:	e012      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d102      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e00c      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d109      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003034:	f7ff f85a 	bl	80020ec <LL_RCC_HSE_IsEnabledDiv2>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800303e:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e001      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003044:	4b1f      	ldr	r3, [pc, #124]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003046:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003048:	f7ff f98b 	bl	8002362 <LL_RCC_GetSysClkSource>
 800304c:	4603      	mov	r3, r0
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d12f      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003052:	f7ff fa72 	bl	800253a <LL_RCC_PLL_GetMainSource>
 8003056:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0xde>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d003      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0xe4>
 8003064:	e00d      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003066:	4b16      	ldr	r3, [pc, #88]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003068:	60fb      	str	r3, [r7, #12]
        break;
 800306a:	e00d      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800306c:	f7ff f83e 	bl	80020ec <LL_RCC_HSE_IsEnabledDiv2>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003078:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800307a:	e005      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800307c:	4b11      	ldr	r3, [pc, #68]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800307e:	60fb      	str	r3, [r7, #12]
        break;
 8003080:	e002      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	60fb      	str	r3, [r7, #12]
        break;
 8003086:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003088:	f7ff fa35 	bl	80024f6 <LL_RCC_PLL_GetN>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	fb03 f402 	mul.w	r4, r3, r2
 8003094:	f7ff fa46 	bl	8002524 <LL_RCC_PLL_GetDivider>
 8003098:	4603      	mov	r3, r0
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	3301      	adds	r3, #1
 800309e:	fbb4 f4f3 	udiv	r4, r4, r3
 80030a2:	f7ff fa34 	bl	800250e <LL_RCC_PLL_GetR>
 80030a6:	4603      	mov	r3, r0
 80030a8:	0f5b      	lsrs	r3, r3, #29
 80030aa:	3301      	adds	r3, #1
 80030ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80030b0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80030b2:	697b      	ldr	r3, [r7, #20]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	08005d40 	.word	0x08005d40
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	01e84800 	.word	0x01e84800

080030c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b598      	push	{r3, r4, r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030cc:	f7ff ff5c 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 80030d0:	4604      	mov	r4, r0
 80030d2:	f7ff f9b5 	bl	8002440 <LL_RCC_GetAHBPrescaler>
 80030d6:	4603      	mov	r3, r0
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a03      	ldr	r2, [pc, #12]	@ (80030ec <HAL_RCC_GetHCLKFreq+0x24>)
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd98      	pop	{r3, r4, r7, pc}
 80030ec:	08005ce0 	.word	0x08005ce0

080030f0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f0:	b598      	push	{r3, r4, r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030f4:	f7ff ffe8 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030f8:	4604      	mov	r4, r0
 80030fa:	f7ff f9b9 	bl	8002470 <LL_RCC_GetAPB1Prescaler>
 80030fe:	4603      	mov	r3, r0
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	4a03      	ldr	r2, [pc, #12]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	fa24 f303 	lsr.w	r3, r4, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd98      	pop	{r3, r4, r7, pc}
 8003110:	08005d20 	.word	0x08005d20

08003114 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b598      	push	{r3, r4, r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003118:	f7ff ffd6 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 800311c:	4604      	mov	r4, r0
 800311e:	f7ff f9b2 	bl	8002486 <LL_RCC_GetAPB2Prescaler>
 8003122:	4603      	mov	r3, r0
 8003124:	0adb      	lsrs	r3, r3, #11
 8003126:	4a03      	ldr	r2, [pc, #12]	@ (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd98      	pop	{r3, r4, r7, pc}
 8003134:	08005d20 	.word	0x08005d20

08003138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	4a10      	ldr	r2, [pc, #64]	@ (800318c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003150:	f7ff f981 	bl	8002456 <LL_RCC_GetAHB3Prescaler>
 8003154:	4603      	mov	r3, r0
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	4a0c      	ldr	r2, [pc, #48]	@ (8003190 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9c      	lsrs	r4, r3, #18
 8003174:	f7fe ff80 	bl	8002078 <HAL_PWREx_GetVoltageRange>
 8003178:	4603      	mov	r3, r0
 800317a:	4619      	mov	r1, r3
 800317c:	4620      	mov	r0, r4
 800317e:	f000 f80b 	bl	8003198 <RCC_SetFlashLatency>
 8003182:	4603      	mov	r3, r0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bd90      	pop	{r4, r7, pc}
 800318c:	08005d40 	.word	0x08005d40
 8003190:	08005ce0 	.word	0x08005ce0
 8003194:	431bde83 	.word	0x431bde83

08003198 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08e      	sub	sp, #56	@ 0x38
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80031a2:	4a3a      	ldr	r2, [pc, #232]	@ (800328c <RCC_SetFlashLatency+0xf4>)
 80031a4:	f107 0320 	add.w	r3, r7, #32
 80031a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ac:	6018      	str	r0, [r3, #0]
 80031ae:	3304      	adds	r3, #4
 80031b0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80031b2:	4a37      	ldr	r2, [pc, #220]	@ (8003290 <RCC_SetFlashLatency+0xf8>)
 80031b4:	f107 0318 	add.w	r3, r7, #24
 80031b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031bc:	6018      	str	r0, [r3, #0]
 80031be:	3304      	adds	r3, #4
 80031c0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80031c2:	4a34      	ldr	r2, [pc, #208]	@ (8003294 <RCC_SetFlashLatency+0xfc>)
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031ce:	2300      	movs	r3, #0
 80031d0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d8:	d11b      	bne.n	8003212 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031da:	2300      	movs	r3, #0
 80031dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80031de:	e014      	b.n	800320a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	3338      	adds	r3, #56	@ 0x38
 80031e6:	443b      	add	r3, r7
 80031e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d807      	bhi.n	8003204 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	3338      	adds	r3, #56	@ 0x38
 80031fa:	443b      	add	r3, r7
 80031fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003200:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003202:	e021      	b.n	8003248 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	3301      	adds	r3, #1
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
 800320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320c:	2b02      	cmp	r3, #2
 800320e:	d9e7      	bls.n	80031e0 <RCC_SetFlashLatency+0x48>
 8003210:	e01a      	b.n	8003248 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003216:	e014      	b.n	8003242 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	3338      	adds	r3, #56	@ 0x38
 800321e:	443b      	add	r3, r7
 8003220:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4293      	cmp	r3, r2
 800322a:	d807      	bhi.n	800323c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	3338      	adds	r3, #56	@ 0x38
 8003232:	443b      	add	r3, r7
 8003234:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800323a:	e005      	b.n	8003248 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800323c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323e:	3301      	adds	r3, #1
 8003240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003244:	2b02      	cmp	r3, #2
 8003246:	d9e7      	bls.n	8003218 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003248:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <RCC_SetFlashLatency+0x100>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 0207 	bic.w	r2, r3, #7
 8003250:	4911      	ldr	r1, [pc, #68]	@ (8003298 <RCC_SetFlashLatency+0x100>)
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003258:	f7fe fc78 	bl	8001b4c <HAL_GetTick>
 800325c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800325e:	e008      	b.n	8003272 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003260:	f7fe fc74 	bl	8001b4c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e007      	b.n	8003282 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <RCC_SetFlashLatency+0x100>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800327c:	429a      	cmp	r2, r3
 800327e:	d1ef      	bne.n	8003260 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3738      	adds	r7, #56	@ 0x38
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	08005cb8 	.word	0x08005cb8
 8003290:	08005cc0 	.word	0x08005cc0
 8003294:	08005cc8 	.word	0x08005cc8
 8003298:	58004000 	.word	0x58004000

0800329c <LL_RCC_LSE_IsReady>:
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d101      	bne.n	80032b4 <LL_RCC_LSE_IsReady+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_RCC_LSE_IsReady+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <LL_RCC_SetUSARTClockSource>:
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	43db      	mvns	r3, r3
 80032d4:	401a      	ands	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <LL_RCC_SetI2SClockSource>:
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003302:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <LL_RCC_SetLPUARTClockSource>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003328:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800332c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <LL_RCC_SetI2CClockSource>:
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800335a:	43db      	mvns	r3, r3
 800335c:	401a      	ands	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <LL_RCC_SetLPTIMClockSource>:
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003386:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	43db      	mvns	r3, r3
 8003392:	401a      	ands	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	041b      	lsls	r3, r3, #16
 8003398:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <LL_RCC_SetRNGClockSource>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033bc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80033c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_SetADCClockSource>:
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <LL_RCC_SetRTCClockSource>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003414:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <LL_RCC_GetRTCClockSource>:
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <LL_RCC_ForceBackupDomainReset>:
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
	...

08003484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003490:	2300      	movs	r3, #0
 8003492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003494:	2300      	movs	r3, #0
 8003496:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d058      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80034a4:	f7fe fdda 	bl	800205c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a8:	f7fe fb50 	bl	8001b4c <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034ae:	e009      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b0:	f7fe fb4c 	bl	8001b4c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d902      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	74fb      	strb	r3, [r7, #19]
        break;
 80034c2:	e006      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034c4:	4b7b      	ldr	r3, [pc, #492]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d0:	d1ee      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d13c      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80034d8:	f7ff ffa7 	bl	800342a <LL_RCC_GetRTCClockSource>
 80034dc:	4602      	mov	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d00f      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034f4:	f7ff ffa5 	bl	8003442 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f8:	f7ff ffb3 	bl	8003462 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d014      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fb1c 	bl	8001b4c <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003516:	e00b      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fb18 	bl	8001b4c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d902      	bls.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	74fb      	strb	r3, [r7, #19]
            break;
 800352e:	e004      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003530:	f7ff feb4 	bl	800329c <LL_RCC_LSE_IsReady>
 8003534:	4603      	mov	r3, r0
 8003536:	2b01      	cmp	r3, #1
 8003538:	d1ee      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff5b 	bl	8003400 <LL_RCC_SetRTCClockSource>
 800354a:	e004      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
 8003550:	e001      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fea9 	bl	80032be <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fe9e 	bl	80032be <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fec0 	bl	8003318 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fee6 	bl	800337a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fedb 	bl	800337a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fed0 	bl	800337a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fea9 	bl	8003342 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fe9e 	bl	8003342 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fe93 	bl	8003342 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d011      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fe5e 	bl	80032ee <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800363a:	d107      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800364a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fea5 	bl	80033ac <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003674:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003678:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d011      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fea3 	bl	80033d6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003698:	d107      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80036aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	58000400 	.word	0x58000400

080036b8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036c8:	4904      	ldr	r1, [pc, #16]	@ (80036dc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	608b      	str	r3, [r1, #8]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	58000400 	.word	0x58000400

080036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80036e4:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ea:	4a04      	ldr	r2, [pc, #16]	@ (80036fc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	58000400 	.word	0x58000400

08003700 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	4a04      	ldr	r2, [pc, #16]	@ (800371c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800370c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	58000400 	.word	0x58000400

08003720 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003726:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800372a:	619a      	str	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	58000400 	.word	0x58000400

08003738 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d101      	bne.n	800374c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	58000400 	.word	0x58000400

0800375c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b04      	cmp	r3, #4
 800376a:	d101      	bne.n	8003770 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	58000400 	.word	0x58000400

08003780 <LL_RCC_RF_DisableReset>:
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003790:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003794:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <LL_RCC_IsRFUnderReset>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b4:	d101      	bne.n	80037ba <LL_RCC_IsRFUnderReset+0x1a>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <LL_RCC_IsRFUnderReset+0x1c>
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80037ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80037d2:	4905      	ldr	r1, [pc, #20]	@ (80037e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	58000800 	.word	0x58000800

080037ec <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
    return status;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	e052      	b.n	80038a8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	799b      	ldrb	r3, [r3, #6]
 800380a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SUBGHZ_Init+0x2c>
 8003812:	7bbb      	ldrb	r3, [r7, #14]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d109      	bne.n	800382c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fc ffde 	bl	80007e0 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003824:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003828:	f7ff ffcc 	bl	80037c4 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800382c:	7bbb      	ldrb	r3, [r7, #14]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d126      	bne.n	8003880 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003838:	f7ff ffa2 	bl	8003780 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800383c:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <HAL_SUBGHZ_Init+0xc4>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	0cdb      	lsrs	r3, r3, #19
 800384a:	2264      	movs	r2, #100	@ 0x64
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	609a      	str	r2, [r3, #8]
        break;
 8003862:	e007      	b.n	8003874 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	3b01      	subs	r3, #1
 8003868:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800386a:	f7ff ff99 	bl	80037a0 <LL_RCC_IsRFUnderReset>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ee      	bne.n	8003852 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003874:	f7ff ff34 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003878:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800387c:	f7ff ff1c 	bl	80036b8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003880:	f7ff ff4e 	bl	8003720 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fa2e 	bl	8003cf0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	719a      	strb	r2, [r3, #6]

  return status;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000008 	.word	0x20000008

080038b4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	461a      	mov	r2, r3
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
 80038c4:	4613      	mov	r3, r2
 80038c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	799b      	ldrb	r3, [r3, #6]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d14a      	bne.n	8003968 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	795b      	ldrb	r3, [r3, #5]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_SUBGHZ_WriteRegisters+0x2a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e045      	b.n	800396a <HAL_SUBGHZ_WriteRegisters+0xb6>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2202      	movs	r2, #2
 80038e8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 face 	bl	8003e8c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80038f0:	f7ff ff06 	bl	8003700 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80038f4:	210d      	movs	r1, #13
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fa1a 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	b29b      	uxth	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4619      	mov	r1, r3
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa12 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	4619      	mov	r1, r3
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa0c 	bl	8003d30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003918:	2300      	movs	r3, #0
 800391a:	82bb      	strh	r3, [r7, #20]
 800391c:	e00a      	b.n	8003934 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800391e:	8abb      	ldrh	r3, [r7, #20]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa01 	bl	8003d30 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800392e:	8abb      	ldrh	r3, [r7, #20]
 8003930:	3301      	adds	r3, #1
 8003932:	82bb      	strh	r3, [r7, #20]
 8003934:	8aba      	ldrh	r2, [r7, #20]
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	429a      	cmp	r2, r3
 800393a:	d3f0      	bcc.n	800391e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800393c:	f7ff fed0 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fac7 	bl	8003ed4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
 8003952:	e001      	b.n	8003958 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	715a      	strb	r2, [r3, #5]

    return status;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	e000      	b.n	800396a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b088      	sub	sp, #32
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	461a      	mov	r2, r3
 800397e:	460b      	mov	r3, r1
 8003980:	817b      	strh	r3, [r7, #10]
 8003982:	4613      	mov	r3, r2
 8003984:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	799b      	ldrb	r3, [r3, #6]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d14a      	bne.n	8003a2a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	795b      	ldrb	r3, [r3, #5]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800399c:	2302      	movs	r3, #2
 800399e:	e045      	b.n	8003a2c <HAL_SUBGHZ_ReadRegisters+0xba>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa70 	bl	8003e8c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80039ac:	f7ff fea8 	bl	8003700 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80039b0:	211d      	movs	r1, #29
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f9bc 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f9b4 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80039c8:	897b      	ldrh	r3, [r7, #10]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f9ae 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80039d4:	2100      	movs	r1, #0
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f9aa 	bl	8003d30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80039dc:	2300      	movs	r3, #0
 80039de:	82fb      	strh	r3, [r7, #22]
 80039e0:	e009      	b.n	80039f6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80039e2:	69b9      	ldr	r1, [r7, #24]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f9f9 	bl	8003ddc <SUBGHZSPI_Receive>
      pData++;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3301      	adds	r3, #1
 80039ee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80039f0:	8afb      	ldrh	r3, [r7, #22]
 80039f2:	3301      	adds	r3, #1
 80039f4:	82fb      	strh	r3, [r7, #22]
 80039f6:	8afa      	ldrh	r2, [r7, #22]
 80039f8:	893b      	ldrh	r3, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d3f1      	bcc.n	80039e2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80039fe:	f7ff fe6f 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fa66 	bl	8003ed4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e001      	b.n	8003a1a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	715a      	strb	r2, [r3, #5]

    return status;
 8003a26:	7ffb      	ldrb	r3, [r7, #31]
 8003a28:	e000      	b.n	8003a2c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
  }
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	460b      	mov	r3, r1
 8003a42:	72fb      	strb	r3, [r7, #11]
 8003a44:	4613      	mov	r3, r2
 8003a46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	799b      	ldrb	r3, [r3, #6]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d14a      	bne.n	8003ae8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	795b      	ldrb	r3, [r3, #5]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e045      	b.n	8003aea <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fa11 	bl	8003e8c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	2b84      	cmp	r3, #132	@ 0x84
 8003a6e:	d002      	beq.n	8003a76 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	2b94      	cmp	r3, #148	@ 0x94
 8003a74:	d103      	bne.n	8003a7e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	711a      	strb	r2, [r3, #4]
 8003a7c:	e002      	b.n	8003a84 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a84:	f7ff fe3c 	bl	8003700 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f94f 	bl	8003d30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	82bb      	strh	r3, [r7, #20]
 8003a96:	e00a      	b.n	8003aae <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003a98:	8abb      	ldrh	r3, [r7, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f944 	bl	8003d30 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003aa8:	8abb      	ldrh	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	82bb      	strh	r3, [r7, #20]
 8003aae:	8aba      	ldrh	r2, [r7, #20]
 8003ab0:	893b      	ldrh	r3, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3f0      	bcc.n	8003a98 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ab6:	f7ff fe13 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	2b84      	cmp	r3, #132	@ 0x84
 8003abe:	d002      	beq.n	8003ac6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fa07 	bl	8003ed4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
 8003ad2:	e001      	b.n	8003ad8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	715a      	strb	r2, [r3, #5]

    return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	e000      	b.n	8003aea <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b088      	sub	sp, #32
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	461a      	mov	r2, r3
 8003afe:	460b      	mov	r3, r1
 8003b00:	72fb      	strb	r3, [r7, #11]
 8003b02:	4613      	mov	r3, r2
 8003b04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	799b      	ldrb	r3, [r3, #6]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d13d      	bne.n	8003b90 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	795b      	ldrb	r3, [r3, #5]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e038      	b.n	8003b92 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f9b0 	bl	8003e8c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b2c:	f7ff fde8 	bl	8003700 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003b30:	7afb      	ldrb	r3, [r7, #11]
 8003b32:	4619      	mov	r1, r3
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f8fb 	bl	8003d30 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f8f7 	bl	8003d30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	82fb      	strh	r3, [r7, #22]
 8003b46:	e009      	b.n	8003b5c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003b48:	69b9      	ldr	r1, [r7, #24]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f946 	bl	8003ddc <SUBGHZSPI_Receive>
      pData++;
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003b56:	8afb      	ldrh	r3, [r7, #22]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	82fb      	strh	r3, [r7, #22]
 8003b5c:	8afa      	ldrh	r2, [r7, #22]
 8003b5e:	893b      	ldrh	r3, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3f1      	bcc.n	8003b48 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b64:	f7ff fdbc 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f9b3 	bl	8003ed4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e001      	b.n	8003b80 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	715a      	strb	r2, [r3, #5]

    return status;
 8003b8c:	7ffb      	ldrb	r3, [r7, #31]
 8003b8e:	e000      	b.n	8003b92 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	72fb      	strb	r3, [r7, #11]
 8003baa:	4613      	mov	r3, r2
 8003bac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	799b      	ldrb	r3, [r3, #6]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d13e      	bne.n	8003c36 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	795b      	ldrb	r3, [r3, #5]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e039      	b.n	8003c38 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f95e 	bl	8003e8c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bd0:	f7ff fd96 	bl	8003700 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003bd4:	210e      	movs	r1, #14
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f8aa 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	4619      	mov	r1, r3
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f8a5 	bl	8003d30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	82bb      	strh	r3, [r7, #20]
 8003bea:	e00a      	b.n	8003c02 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003bec:	8abb      	ldrh	r3, [r7, #20]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f89a 	bl	8003d30 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003bfc:	8abb      	ldrh	r3, [r7, #20]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	82bb      	strh	r3, [r7, #20]
 8003c02:	8aba      	ldrh	r2, [r7, #20]
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d3f0      	bcc.n	8003bec <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c0a:	f7ff fd69 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f960 	bl	8003ed4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
 8003c20:	e001      	b.n	8003c26 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	715a      	strb	r2, [r3, #5]

    return status;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	e000      	b.n	8003c38 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	72fb      	strb	r3, [r7, #11]
 8003c50:	4613      	mov	r3, r2
 8003c52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	799b      	ldrb	r3, [r3, #6]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d141      	bne.n	8003ce6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	795b      	ldrb	r3, [r3, #5]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e03c      	b.n	8003ce8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f909 	bl	8003e8c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c7a:	f7ff fd41 	bl	8003700 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003c7e:	211e      	movs	r1, #30
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f855 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f850 	bl	8003d30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003c90:	2100      	movs	r1, #0
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f84c 	bl	8003d30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	82fb      	strh	r3, [r7, #22]
 8003c9c:	e009      	b.n	8003cb2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003c9e:	69b9      	ldr	r1, [r7, #24]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f89b 	bl	8003ddc <SUBGHZSPI_Receive>
      pData++;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003cac:	8afb      	ldrh	r3, [r7, #22]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	82fb      	strh	r3, [r7, #22]
 8003cb2:	8afa      	ldrh	r2, [r7, #22]
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3f1      	bcc.n	8003c9e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003cba:	f7ff fd11 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f908 	bl	8003ed4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e001      	b.n	8003cd6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	715a      	strb	r2, [r3, #5]

    return status;
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	e000      	b.n	8003ce8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d2c <SUBGHZSPI_Init+0x3c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <SUBGHZSPI_Init+0x3c>)
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d02:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003d04:	4a09      	ldr	r2, [pc, #36]	@ (8003d2c <SUBGHZSPI_Init+0x3c>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003d0c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003d0e:	4b07      	ldr	r3, [pc, #28]	@ (8003d2c <SUBGHZSPI_Init+0x3c>)
 8003d10:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003d14:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003d16:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <SUBGHZSPI_Init+0x3c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a04      	ldr	r2, [pc, #16]	@ (8003d2c <SUBGHZSPI_Init+0x3c>)
 8003d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d20:	6013      	str	r3, [r2, #0]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	58010000 	.word	0x58010000

08003d30 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d40:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <SUBGHZSPI_Transmit+0xa0>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	0cdb      	lsrs	r3, r3, #19
 8003d4e:	2264      	movs	r2, #100	@ 0x64
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	609a      	str	r2, [r3, #8]
      break;
 8003d66:	e008      	b.n	8003d7a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003d6e:	4b19      	ldr	r3, [pc, #100]	@ (8003dd4 <SUBGHZSPI_Transmit+0xa4>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d1ed      	bne.n	8003d56 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003d7a:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <SUBGHZSPI_Transmit+0xa8>)
 8003d7c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d84:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <SUBGHZSPI_Transmit+0xa0>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	0cdb      	lsrs	r3, r3, #19
 8003d92:	2264      	movs	r2, #100	@ 0x64
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	609a      	str	r2, [r3, #8]
      break;
 8003daa:	e008      	b.n	8003dbe <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003db2:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <SUBGHZSPI_Transmit+0xa4>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d1ed      	bne.n	8003d9a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003dbe:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <SUBGHZSPI_Transmit+0xa4>)
 8003dc0:	68db      	ldr	r3, [r3, #12]

  return status;
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000008 	.word	0x20000008
 8003dd4:	58010000 	.word	0x58010000
 8003dd8:	5801000c 	.word	0x5801000c

08003ddc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003dea:	4b25      	ldr	r3, [pc, #148]	@ (8003e80 <SUBGHZSPI_Receive+0xa4>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	0cdb      	lsrs	r3, r3, #19
 8003df8:	2264      	movs	r2, #100	@ 0x64
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e008      	b.n	8003e24 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003e18:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <SUBGHZSPI_Receive+0xa8>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d1ed      	bne.n	8003e00 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003e24:	4b18      	ldr	r3, [pc, #96]	@ (8003e88 <SUBGHZSPI_Receive+0xac>)
 8003e26:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	22ff      	movs	r2, #255	@ 0xff
 8003e2c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e2e:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <SUBGHZSPI_Receive+0xa4>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	0cdb      	lsrs	r3, r3, #19
 8003e3c:	2264      	movs	r2, #100	@ 0x64
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	609a      	str	r2, [r3, #8]
      break;
 8003e54:	e008      	b.n	8003e68 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003e5c:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <SUBGHZSPI_Receive+0xa8>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d1ed      	bne.n	8003e44 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <SUBGHZSPI_Receive+0xa8>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	701a      	strb	r2, [r3, #0]

  return status;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000008 	.word	0x20000008
 8003e84:	58010000 	.word	0x58010000
 8003e88:	5801000c 	.word	0x5801000c

08003e8c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d111      	bne.n	8003ec0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <SUBGHZ_CheckDeviceReady+0x44>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003eac:	f7ff fc28 	bl	8003700 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f9      	bne.n	8003eb0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ebc:	f7ff fc10 	bl	80036e0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f807 	bl	8003ed4 <SUBGHZ_WaitOnBusy>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000008 	.word	0x20000008

08003ed4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003ee0:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <SUBGHZ_WaitOnBusy+0x58>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	0d1b      	lsrs	r3, r3, #20
 8003eee:	2264      	movs	r2, #100	@ 0x64
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003ef6:	f7ff fc31 	bl	800375c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003efa:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	609a      	str	r2, [r3, #8]
      break;
 8003f0c:	e009      	b.n	8003f22 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003f14:	f7ff fc10 	bl	8003738 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d0e9      	beq.n	8003ef6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000008 	.word	0x20000008

08003f30 <LL_RCC_GetUSARTClockSource>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	401a      	ands	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	4313      	orrs	r3, r2
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <LL_RCC_GetLPUARTClockSource>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4013      	ands	r3, r2
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e042      	b.n	800400a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fc fd4e 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	@ 0x24
 8003fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa9d 	bl	80044fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f826 	bl	8004014 <UART_SetConfig>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e01b      	b.n	800400a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fb1b 	bl	800463e <UART_CheckIdleState>
 8004008:	4603      	mov	r3, r0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b08c      	sub	sp, #48	@ 0x30
 800401a:	af00      	add	r7, sp, #0
 800401c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	4313      	orrs	r3, r2
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b94      	ldr	r3, [pc, #592]	@ (8004294 <UART_SetConfig+0x280>)
 8004044:	4013      	ands	r3, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800404c:	430b      	orrs	r3, r1
 800404e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a89      	ldr	r2, [pc, #548]	@ (8004298 <UART_SetConfig+0x284>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800407c:	4313      	orrs	r3, r2
 800407e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800408a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004094:	430b      	orrs	r3, r1
 8004096:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	f023 010f 	bic.w	r1, r3, #15
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7a      	ldr	r2, [pc, #488]	@ (800429c <UART_SetConfig+0x288>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d127      	bne.n	8004108 <UART_SetConfig+0xf4>
 80040b8:	2003      	movs	r0, #3
 80040ba:	f7ff ff39 	bl	8003f30 <LL_RCC_GetUSARTClockSource>
 80040be:	4603      	mov	r3, r0
 80040c0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d81b      	bhi.n	8004100 <UART_SetConfig+0xec>
 80040c8:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <UART_SetConfig+0xbc>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	080040f1 	.word	0x080040f1
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040f9 	.word	0x080040f9
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e6:	e080      	b.n	80041ea <UART_SetConfig+0x1d6>
 80040e8:	2302      	movs	r3, #2
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ee:	e07c      	b.n	80041ea <UART_SetConfig+0x1d6>
 80040f0:	2304      	movs	r3, #4
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f6:	e078      	b.n	80041ea <UART_SetConfig+0x1d6>
 80040f8:	2308      	movs	r3, #8
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fe:	e074      	b.n	80041ea <UART_SetConfig+0x1d6>
 8004100:	2310      	movs	r3, #16
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004106:	e070      	b.n	80041ea <UART_SetConfig+0x1d6>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a64      	ldr	r2, [pc, #400]	@ (80042a0 <UART_SetConfig+0x28c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d138      	bne.n	8004184 <UART_SetConfig+0x170>
 8004112:	200c      	movs	r0, #12
 8004114:	f7ff ff0c 	bl	8003f30 <LL_RCC_GetUSARTClockSource>
 8004118:	4603      	mov	r3, r0
 800411a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d82c      	bhi.n	800417c <UART_SetConfig+0x168>
 8004122:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <UART_SetConfig+0x114>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800415d 	.word	0x0800415d
 800412c:	0800417d 	.word	0x0800417d
 8004130:	0800417d 	.word	0x0800417d
 8004134:	0800417d 	.word	0x0800417d
 8004138:	0800416d 	.word	0x0800416d
 800413c:	0800417d 	.word	0x0800417d
 8004140:	0800417d 	.word	0x0800417d
 8004144:	0800417d 	.word	0x0800417d
 8004148:	08004165 	.word	0x08004165
 800414c:	0800417d 	.word	0x0800417d
 8004150:	0800417d 	.word	0x0800417d
 8004154:	0800417d 	.word	0x0800417d
 8004158:	08004175 	.word	0x08004175
 800415c:	2300      	movs	r3, #0
 800415e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004162:	e042      	b.n	80041ea <UART_SetConfig+0x1d6>
 8004164:	2302      	movs	r3, #2
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800416a:	e03e      	b.n	80041ea <UART_SetConfig+0x1d6>
 800416c:	2304      	movs	r3, #4
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004172:	e03a      	b.n	80041ea <UART_SetConfig+0x1d6>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417a:	e036      	b.n	80041ea <UART_SetConfig+0x1d6>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004182:	e032      	b.n	80041ea <UART_SetConfig+0x1d6>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a43      	ldr	r2, [pc, #268]	@ (8004298 <UART_SetConfig+0x284>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d12a      	bne.n	80041e4 <UART_SetConfig+0x1d0>
 800418e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004192:	f7ff fedf 	bl	8003f54 <LL_RCC_GetLPUARTClockSource>
 8004196:	4603      	mov	r3, r0
 8004198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800419c:	d01a      	beq.n	80041d4 <UART_SetConfig+0x1c0>
 800419e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041a2:	d81b      	bhi.n	80041dc <UART_SetConfig+0x1c8>
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a8:	d00c      	beq.n	80041c4 <UART_SetConfig+0x1b0>
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ae:	d815      	bhi.n	80041dc <UART_SetConfig+0x1c8>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <UART_SetConfig+0x1a8>
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b8:	d008      	beq.n	80041cc <UART_SetConfig+0x1b8>
 80041ba:	e00f      	b.n	80041dc <UART_SetConfig+0x1c8>
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c2:	e012      	b.n	80041ea <UART_SetConfig+0x1d6>
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ca:	e00e      	b.n	80041ea <UART_SetConfig+0x1d6>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d2:	e00a      	b.n	80041ea <UART_SetConfig+0x1d6>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041da:	e006      	b.n	80041ea <UART_SetConfig+0x1d6>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e2:	e002      	b.n	80041ea <UART_SetConfig+0x1d6>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004298 <UART_SetConfig+0x284>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	f040 80a4 	bne.w	800433e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d823      	bhi.n	8004246 <UART_SetConfig+0x232>
 80041fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <UART_SetConfig+0x1f0>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004229 	.word	0x08004229
 8004208:	08004247 	.word	0x08004247
 800420c:	08004231 	.word	0x08004231
 8004210:	08004247 	.word	0x08004247
 8004214:	08004237 	.word	0x08004237
 8004218:	08004247 	.word	0x08004247
 800421c:	08004247 	.word	0x08004247
 8004220:	08004247 	.word	0x08004247
 8004224:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe ff62 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 800422c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <UART_SetConfig+0x290>)
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe fea7 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 800423a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004250:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8137 	beq.w	80044c8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	4a12      	ldr	r2, [pc, #72]	@ (80042a8 <UART_SetConfig+0x294>)
 8004260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004264:	461a      	mov	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	fbb3 f3f2 	udiv	r3, r3, r2
 800426c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	429a      	cmp	r2, r3
 800427c:	d305      	bcc.n	800428a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	429a      	cmp	r2, r3
 8004288:	d910      	bls.n	80042ac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004290:	e11a      	b.n	80044c8 <UART_SetConfig+0x4b4>
 8004292:	bf00      	nop
 8004294:	cfff69f3 	.word	0xcfff69f3
 8004298:	40008000 	.word	0x40008000
 800429c:	40013800 	.word	0x40013800
 80042a0:	40004400 	.word	0x40004400
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	08005d80 	.word	0x08005d80
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	2200      	movs	r2, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	60fa      	str	r2, [r7, #12]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	4a8e      	ldr	r2, [pc, #568]	@ (80044f4 <UART_SetConfig+0x4e0>)
 80042ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2200      	movs	r2, #0
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042ce:	f7fb ffbf 	bl	8000250 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	020b      	lsls	r3, r1, #8
 80042e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042e8:	0202      	lsls	r2, r0, #8
 80042ea:	6979      	ldr	r1, [r7, #20]
 80042ec:	6849      	ldr	r1, [r1, #4]
 80042ee:	0849      	lsrs	r1, r1, #1
 80042f0:	2000      	movs	r0, #0
 80042f2:	460c      	mov	r4, r1
 80042f4:	4605      	mov	r5, r0
 80042f6:	eb12 0804 	adds.w	r8, r2, r4
 80042fa:	eb43 0905 	adc.w	r9, r3, r5
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	469a      	mov	sl, r3
 8004306:	4693      	mov	fp, r2
 8004308:	4652      	mov	r2, sl
 800430a:	465b      	mov	r3, fp
 800430c:	4640      	mov	r0, r8
 800430e:	4649      	mov	r1, r9
 8004310:	f7fb ff9e 	bl	8000250 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004322:	d308      	bcc.n	8004336 <UART_SetConfig+0x322>
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800432a:	d204      	bcs.n	8004336 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	e0c8      	b.n	80044c8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800433c:	e0c4      	b.n	80044c8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004346:	d167      	bne.n	8004418 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004348:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800434c:	2b08      	cmp	r3, #8
 800434e:	d828      	bhi.n	80043a2 <UART_SetConfig+0x38e>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <UART_SetConfig+0x344>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004385 	.word	0x08004385
 8004360:	0800438d 	.word	0x0800438d
 8004364:	080043a3 	.word	0x080043a3
 8004368:	08004393 	.word	0x08004393
 800436c:	080043a3 	.word	0x080043a3
 8004370:	080043a3 	.word	0x080043a3
 8004374:	080043a3 	.word	0x080043a3
 8004378:	0800439b 	.word	0x0800439b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800437c:	f7fe feb8 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004382:	e014      	b.n	80043ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7fe fec6 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8004388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800438a:	e010      	b.n	80043ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800438c:	4b5a      	ldr	r3, [pc, #360]	@ (80044f8 <UART_SetConfig+0x4e4>)
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004390:	e00d      	b.n	80043ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004392:	f7fe fdf9 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8004396:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004398:	e009      	b.n	80043ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043a0:	e005      	b.n	80043ae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8089 	beq.w	80044c8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	4a4e      	ldr	r2, [pc, #312]	@ (80044f4 <UART_SetConfig+0x4e0>)
 80043bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043c8:	005a      	lsls	r2, r3, #1
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	441a      	add	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2b0f      	cmp	r3, #15
 80043e0:	d916      	bls.n	8004410 <UART_SetConfig+0x3fc>
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d212      	bcs.n	8004410 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f023 030f 	bic.w	r3, r3, #15
 80043f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	b29a      	uxth	r2, r3
 8004400:	8bfb      	ldrh	r3, [r7, #30]
 8004402:	4313      	orrs	r3, r2
 8004404:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	8bfa      	ldrh	r2, [r7, #30]
 800440c:	60da      	str	r2, [r3, #12]
 800440e:	e05b      	b.n	80044c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004416:	e057      	b.n	80044c8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004418:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800441c:	2b08      	cmp	r3, #8
 800441e:	d828      	bhi.n	8004472 <UART_SetConfig+0x45e>
 8004420:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <UART_SetConfig+0x414>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004455 	.word	0x08004455
 8004430:	0800445d 	.word	0x0800445d
 8004434:	08004473 	.word	0x08004473
 8004438:	08004463 	.word	0x08004463
 800443c:	08004473 	.word	0x08004473
 8004440:	08004473 	.word	0x08004473
 8004444:	08004473 	.word	0x08004473
 8004448:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7fe fe50 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8004450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004452:	e014      	b.n	800447e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7fe fe5e 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8004458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800445a:	e010      	b.n	800447e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <UART_SetConfig+0x4e4>)
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004460:	e00d      	b.n	800447e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7fe fd91 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8004466:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004468:	e009      	b.n	800447e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004470:	e005      	b.n	800447e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800447c:	bf00      	nop
    }

    if (pclk != 0U)
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	d021      	beq.n	80044c8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	4a1a      	ldr	r2, [pc, #104]	@ (80044f4 <UART_SetConfig+0x4e0>)
 800448a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448e:	461a      	mov	r2, r3
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	fbb3 f2f2 	udiv	r2, r3, r2
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	441a      	add	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d909      	bls.n	80044c2 <UART_SetConfig+0x4ae>
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b4:	d205      	bcs.n	80044c2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e002      	b.n	80044c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2200      	movs	r2, #0
 80044dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80044e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3730      	adds	r7, #48	@ 0x30
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	08005d80 	.word	0x08005d80
 80044f8:	00f42400 	.word	0x00f42400

080044fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01a      	beq.n	8004612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045fa:	d10a      	bne.n	8004612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af02      	add	r7, sp, #8
 8004644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800464e:	f7fd fa7d 	bl	8001b4c <HAL_GetTick>
 8004652:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b08      	cmp	r3, #8
 8004660:	d10e      	bne.n	8004680 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004662:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f832 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e028      	b.n	80046d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b04      	cmp	r3, #4
 800468c:	d10e      	bne.n	80046ac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f81c 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e012      	b.n	80046d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b09c      	sub	sp, #112	@ 0x70
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ea:	e0af      	b.n	800484c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	f000 80ab 	beq.w	800484c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fd fa29 	bl	8001b4c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <UART_WaitOnFlagUntilTimeout+0x32>
 8004706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004708:	2b00      	cmp	r3, #0
 800470a:	d140      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800471a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800471c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004720:	667b      	str	r3, [r7, #100]	@ 0x64
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800472a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800472c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004730:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e6      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	663b      	str	r3, [r7, #96]	@ 0x60
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800475e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004760:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800476c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e06f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d057      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0x172>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b80      	cmp	r3, #128	@ 0x80
 80047a0:	d054      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0x172>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d051      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b6:	d149      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80047ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e6      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	613b      	str	r3, [r7, #16]
   return(result);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004814:	623a      	str	r2, [r7, #32]
 8004816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	69f9      	ldr	r1, [r7, #28]
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	61bb      	str	r3, [r7, #24]
   return(result);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e5      	bne.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e010      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	429a      	cmp	r2, r3
 8004868:	f43f af40 	beq.w	80046ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3770      	adds	r7, #112	@ 0x70
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_UARTEx_DisableFifoMode+0x16>
 8004888:	2302      	movs	r3, #2
 800488a:	e027      	b.n	80048dc <HAL_UARTEx_DisableFifoMode+0x66>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	@ 0x24
 8004898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80048ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e02d      	b.n	800495a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2224      	movs	r2, #36	@ 0x24
 800490a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f850 	bl	80049e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004976:	2302      	movs	r3, #2
 8004978:	e02d      	b.n	80049d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2224      	movs	r2, #36	@ 0x24
 8004986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f812 	bl	80049e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d108      	bne.n	8004a02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a00:	e031      	b.n	8004a66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a02:	2308      	movs	r3, #8
 8004a04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a06:	2308      	movs	r3, #8
 8004a08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	0e5b      	lsrs	r3, r3, #25
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	0f5b      	lsrs	r3, r3, #29
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	7b3a      	ldrb	r2, [r7, #12]
 8004a2e:	4910      	ldr	r1, [pc, #64]	@ (8004a70 <UARTEx_SetNbDataToProcess+0x90>)
 8004a30:	5c8a      	ldrb	r2, [r1, r2]
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a36:	7b3a      	ldrb	r2, [r7, #12]
 8004a38:	490e      	ldr	r1, [pc, #56]	@ (8004a74 <UARTEx_SetNbDataToProcess+0x94>)
 8004a3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	7b7a      	ldrb	r2, [r7, #13]
 8004a4c:	4908      	ldr	r1, [pc, #32]	@ (8004a70 <UARTEx_SetNbDataToProcess+0x90>)
 8004a4e:	5c8a      	ldrb	r2, [r1, r2]
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a54:	7b7a      	ldrb	r2, [r7, #13]
 8004a56:	4907      	ldr	r1, [pc, #28]	@ (8004a74 <UARTEx_SetNbDataToProcess+0x94>)
 8004a58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr
 8004a70:	08005d98 	.word	0x08005d98
 8004a74:	08005da0 	.word	0x08005da0

08004a78 <getDefaultLoRaConfig>:
#include "LoRaConf.h"

PacketParams_t packetParams;
const RadioLoRaBandwidths_t Bandwidths[] = { LORA_BW_125, LORA_BW_250, LORA_BW_500 };

LoRaConfig getDefaultLoRaConfig (void) {
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	return (LoRaConfig){
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <getDefaultLoRaConfig+0x1c>)
 8004a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.lora_spreading_factor =7,
		.lora_codingrate = 1,
		.lora_preamble_length = 8,
		.lora_symbol_timeout = 5,
	};
}
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	08005cd4 	.word	0x08005cd4

08004a98 <LoraInit>:

    return config;
}


void LoraInit(LoRaConfig config) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08c      	sub	sp, #48	@ 0x30
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 8004aa4:	4835      	ldr	r0, [pc, #212]	@ (8004b7c <LoraInit+0xe4>)
 8004aa6:	f7fc f949 	bl	8000d3c <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8004aaa:	f640 1016 	movw	r0, #2326	@ 0x916
 8004aae:	f7fc fea5 	bl	80017fc <SUBGRF_ReadRegister>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	4619      	mov	r1, r3
 8004abc:	f640 1016 	movw	r0, #2326	@ 0x916
 8004ac0:	f7fc fe88 	bl	80017d4 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 8004ac4:	f7fc fa73 	bl	8000fae <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8004ac8:	2100      	movs	r1, #0
 8004aca:	2000      	movs	r0, #0
 8004acc:	f7fc fe3e 	bl	800174c <SUBGRF_SetBufferBaseAddress>

	//Set Operating Frequency and Transmission Power
	SUBGRF_SetRfFrequency(config.rf_frequency);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fc fb90 	bl	80011f8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(config.tx_output_power);
 8004ad8:	7a3b      	ldrb	r3, [r7, #8]
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fc ff73 	bl	80019c8 <SUBGRF_SetRfTxPower>

	//Preamble Interrupt Timer Configuration
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7fc fa54 	bl	8000f90 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	//Set Packet Type to LoRa
	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7fc fbcb 	bl	8001284 <SUBGRF_SetPacketType>

	//Sync Word Setup
	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8004aee:	2114      	movs	r1, #20
 8004af0:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8004af4:	f7fc fe6e 	bl	80017d4 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8004af8:	2124      	movs	r1, #36	@ 0x24
 8004afa:	f240 7041 	movw	r0, #1857	@ 0x741
 8004afe:	f7fc fe69 	bl	80017d4 <SUBGRF_WriteRegister>
	 * Coding rate: Defined by config.lora_codingrate
	 * Spreading Factor: Defined by config.lora_spreading_factor
	 * Low Data Rate Optimization: Disabled with value 0x00
	 */
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8004b02:	2301      	movs	r3, #1
 8004b04:	753b      	strb	r3, [r7, #20]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[config.lora_bandwidth];
 8004b06:	7a7b      	ldrb	r3, [r7, #9]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004b80 <LoraInit+0xe8>)
 8004b0c:	5c9b      	ldrb	r3, [r3, r2]
 8004b0e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)config.lora_codingrate;
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)config.lora_spreading_factor;
 8004b1e:	7abb      	ldrb	r3, [r7, #10]
 8004b20:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	SUBGRF_SetModulationParams(&modulationParams);
 8004b24:	f107 0314 	add.w	r3, r7, #20
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fc fc9f 	bl	800146c <SUBGRF_SetModulationParams>
	 * CRC Mode: Enables cyclic redundancy checking (CRC) to ensure packet integrity
	 * HeaderType: Defines the packet header type as variable length
	 * InvertIQ: Sets the inversion of IQ polarity (normal)
	 * Preamble Length: Used the value from config.lora_preamble_length
	 */
	packetParams.PacketType = PACKET_TYPE_LORA;
 8004b2e:	4b15      	ldr	r3, [pc, #84]	@ (8004b84 <LoraInit+0xec>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8004b34:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <LoraInit+0xec>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8004b3a:	4b12      	ldr	r3, [pc, #72]	@ (8004b84 <LoraInit+0xec>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8004b40:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <LoraInit+0xec>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8004b46:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <LoraInit+0xec>)
 8004b48:	22ff      	movs	r2, #255	@ 0xff
 8004b4a:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = config.lora_preamble_length;
 8004b4c:	7b3b      	ldrb	r3, [r7, #12]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <LoraInit+0xec>)
 8004b52:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8004b54:	480b      	ldr	r0, [pc, #44]	@ (8004b84 <LoraInit+0xec>)
 8004b56:	f7fc fd5b 	bl	8001610 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8004b5a:	f240 7036 	movw	r0, #1846	@ 0x736
 8004b5e:	f7fc fe4d 	bl	80017fc <SUBGRF_ReadRegister>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f043 0304 	orr.w	r3, r3, #4
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f240 7036 	movw	r0, #1846	@ 0x736
 8004b70:	f7fc fe30 	bl	80017d4 <SUBGRF_WriteRegister>
}
 8004b74:	bf00      	nop
 8004b76:	3730      	adds	r7, #48	@ 0x30
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08004b89 	.word	0x08004b89
 8004b80:	08005da8 	.word	0x08005da8
 8004b84:	2000017c 	.word	0x2000017c

08004b88 <RadioOnDioIrq>:

#include "LoRaEvents.h"

volatile LoRaIrqStatus lastEventStatus = IRQ_DEFAULT_RETURN_STATUS;

void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	80fb      	strh	r3, [r7, #6]
    LoRaEventHandler(radioIrq);
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f805 	bl	8004ba4 <LoRaEventHandler>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <LoRaEventHandler>:

LoRaIrqStatus LoRaEventHandler(uint16_t irqStatus) {
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	80fb      	strh	r3, [r7, #6]
    switch (irqStatus) {
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb4:	d015      	beq.n	8004be2 <LoRaEventHandler+0x3e>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bba:	dc1c      	bgt.n	8004bf6 <LoRaEventHandler+0x52>
 8004bbc:	2b40      	cmp	r3, #64	@ 0x40
 8004bbe:	d015      	beq.n	8004bec <LoRaEventHandler+0x48>
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	dc18      	bgt.n	8004bf6 <LoRaEventHandler+0x52>
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d002      	beq.n	8004bce <LoRaEventHandler+0x2a>
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d005      	beq.n	8004bd8 <LoRaEventHandler+0x34>
 8004bcc:	e013      	b.n	8004bf6 <LoRaEventHandler+0x52>
        case IRQ_TX_DONE:
            return lastEventStatus = IRQ_TX_DONE_STATUS;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004c08 <LoRaEventHandler+0x64>)
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	7011      	strb	r1, [r2, #0]
 8004bd6:	e012      	b.n	8004bfe <LoRaEventHandler+0x5a>
        case IRQ_RX_DONE:
            return lastEventStatus = IRQ_RX_DONE_STATUS;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4a0b      	ldr	r2, [pc, #44]	@ (8004c08 <LoRaEventHandler+0x64>)
 8004bdc:	4619      	mov	r1, r3
 8004bde:	7011      	strb	r1, [r2, #0]
 8004be0:	e00d      	b.n	8004bfe <LoRaEventHandler+0x5a>
        case IRQ_RX_TX_TIMEOUT:
            return lastEventStatus = IRQ_RX_TX_TIMEOUT_STATUS;
 8004be2:	2302      	movs	r3, #2
 8004be4:	4a08      	ldr	r2, [pc, #32]	@ (8004c08 <LoRaEventHandler+0x64>)
 8004be6:	4619      	mov	r1, r3
 8004be8:	7011      	strb	r1, [r2, #0]
 8004bea:	e008      	b.n	8004bfe <LoRaEventHandler+0x5a>
        case IRQ_CRC_ERROR:
            return lastEventStatus = IRQ_CRC_ERROR_STATUS;
 8004bec:	2303      	movs	r3, #3
 8004bee:	4a06      	ldr	r2, [pc, #24]	@ (8004c08 <LoRaEventHandler+0x64>)
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	7011      	strb	r1, [r2, #0]
 8004bf4:	e003      	b.n	8004bfe <LoRaEventHandler+0x5a>
        default:
            return lastEventStatus = IRQ_DEFAULT_RETURN_STATUS;
 8004bf6:	2399      	movs	r3, #153	@ 0x99
 8004bf8:	4a03      	ldr	r2, [pc, #12]	@ (8004c08 <LoRaEventHandler+0x64>)
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	7011      	strb	r1, [r2, #0]
    }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	20000011 	.word	0x20000011

08004c0c <getLastLoRaEvent>:

LoRaIrqStatus getLastLoRaEvent(void) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
    return lastEventStatus;
 8004c10:	4b03      	ldr	r3, [pc, #12]	@ (8004c20 <getLastLoRaEvent+0x14>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000011 	.word	0x20000011

08004c24 <SendMessage>:

#include "LoRaMessageHandler.h"

#define LORA_MAX_PAYLOAD_SIZE 255

LoRaIrqStatus SendMessage(const char *message) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	if (message == NULL || strlen(message) == 0) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <SendMessage+0x16>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <SendMessage+0x1a>
		return IRQ_CRC_ERROR_STATUS;  // Invalid message
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e035      	b.n	8004caa <SendMessage+0x86>
	}

	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2200      	movs	r2, #0
 8004c42:	f240 2101 	movw	r1, #513	@ 0x201
 8004c46:	f240 2001 	movw	r0, #513	@ 0x201
 8004c4a:	f7fc fa79 	bl	8001140 <SUBGRF_SetDioIrqParams>
	                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8004c4e:	2101      	movs	r1, #1
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7fc fe91 	bl	8001978 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8004c56:	f640 0089 	movw	r0, #2185	@ 0x889
 8004c5a:	f7fc fdcf 	bl	80017fc <SUBGRF_ReadRegister>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	4619      	mov	r1, r3
 8004c68:	f640 0089 	movw	r0, #2185	@ 0x889
 8004c6c:	f7fc fdb2 	bl	80017d4 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = strlen(message);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fb fa8f 	bl	8000194 <strlen>
 8004c76:	4603      	mov	r3, r0
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <SendMessage+0x90>)
 8004c7c:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8004c7e:	480d      	ldr	r0, [pc, #52]	@ (8004cb4 <SendMessage+0x90>)
 8004c80:	f7fc fcc6 	bl	8001610 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t *)message, strlen(message), 0);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fb fa85 	bl	8000194 <strlen>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2200      	movs	r2, #0
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc f8cc 	bl	8000e30 <SUBGRF_SendPayload>

	while (getLastLoRaEvent() == IRQ_DEFAULT_RETURN_STATUS);
 8004c98:	bf00      	nop
 8004c9a:	f7ff ffb7 	bl	8004c0c <getLastLoRaEvent>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b99      	cmp	r3, #153	@ 0x99
 8004ca2:	d0fa      	beq.n	8004c9a <SendMessage+0x76>
	return getLastLoRaEvent();
 8004ca4:	f7ff ffb2 	bl	8004c0c <getLastLoRaEvent>
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2000017c 	.word	0x2000017c

08004cb8 <receiveMessage>:

LoRaIrqStatus receiveMessage(char *buffer, uint8_t bufferSize, uint16_t Timeout) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	803b      	strh	r3, [r7, #0]
    if (buffer == NULL || bufferSize == 0) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <receiveMessage+0x1c>
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <receiveMessage+0x20>
        return IRQ_CRC_ERROR_STATUS;  // Invalid buffer
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e027      	b.n	8004d28 <receiveMessage+0x70>
    }

    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f240 2162 	movw	r1, #610	@ 0x262
 8004ce0:	f240 2062 	movw	r0, #610	@ 0x262
 8004ce4:	f7fc fa2c 	bl	8001140 <SUBGRF_SetDioIrqParams>
                           IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE);
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2001      	movs	r0, #1
 8004cec:	f7fc fe44 	bl	8001978 <SUBGRF_SetSwitch>
    SUBGRF_SetRx(Timeout << 6);
 8004cf0:	883b      	ldrh	r3, [r7, #0]
 8004cf2:	019b      	lsls	r3, r3, #6
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fc f92b 	bl	8000f50 <SUBGRF_SetRx>

    LoRaIrqStatus event = getLastLoRaEvent();
 8004cfa:	f7ff ff87 	bl	8004c0c <getLastLoRaEvent>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	73fb      	strb	r3, [r7, #15]

    if (event == IRQ_RX_DONE_STATUS) {
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10e      	bne.n	8004d26 <receiveMessage+0x6e>
    	uint8_t rxSize = SUBGRF_GetPayload((uint8_t *)buffer, (uint8_t)bufferSize, 255);
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	22ff      	movs	r2, #255	@ 0xff
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc f86c 	bl	8000dec <SUBGRF_GetPayload>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73bb      	strb	r3, [r7, #14]
        buffer[rxSize] = '\0';
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
        return IRQ_RX_DONE_STATUS;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <receiveMessage+0x70>
    }

    return event;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <std>:
 8004d30:	2300      	movs	r3, #0
 8004d32:	b510      	push	{r4, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	e9c0 3300 	strd	r3, r3, [r0]
 8004d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d3e:	6083      	str	r3, [r0, #8]
 8004d40:	8181      	strh	r1, [r0, #12]
 8004d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d44:	81c2      	strh	r2, [r0, #14]
 8004d46:	6183      	str	r3, [r0, #24]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	305c      	adds	r0, #92	@ 0x5c
 8004d4e:	f000 f9f9 	bl	8005144 <memset>
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <std+0x58>)
 8004d54:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <std+0x5c>)
 8004d58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <std+0x60>)
 8004d5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <std+0x64>)
 8004d60:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <std+0x68>)
 8004d64:	6224      	str	r4, [r4, #32]
 8004d66:	429c      	cmp	r4, r3
 8004d68:	d006      	beq.n	8004d78 <std+0x48>
 8004d6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d6e:	4294      	cmp	r4, r2
 8004d70:	d002      	beq.n	8004d78 <std+0x48>
 8004d72:	33d0      	adds	r3, #208	@ 0xd0
 8004d74:	429c      	cmp	r4, r3
 8004d76:	d105      	bne.n	8004d84 <std+0x54>
 8004d78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d80:	f000 ba58 	b.w	8005234 <__retarget_lock_init_recursive>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	bf00      	nop
 8004d88:	08004f95 	.word	0x08004f95
 8004d8c:	08004fb7 	.word	0x08004fb7
 8004d90:	08004fef 	.word	0x08004fef
 8004d94:	08005013 	.word	0x08005013
 8004d98:	20000190 	.word	0x20000190

08004d9c <stdio_exit_handler>:
 8004d9c:	4a02      	ldr	r2, [pc, #8]	@ (8004da8 <stdio_exit_handler+0xc>)
 8004d9e:	4903      	ldr	r1, [pc, #12]	@ (8004dac <stdio_exit_handler+0x10>)
 8004da0:	4803      	ldr	r0, [pc, #12]	@ (8004db0 <stdio_exit_handler+0x14>)
 8004da2:	f000 b869 	b.w	8004e78 <_fwalk_sglue>
 8004da6:	bf00      	nop
 8004da8:	20000014 	.word	0x20000014
 8004dac:	08005ac9 	.word	0x08005ac9
 8004db0:	20000024 	.word	0x20000024

08004db4 <cleanup_stdio>:
 8004db4:	6841      	ldr	r1, [r0, #4]
 8004db6:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <cleanup_stdio+0x34>)
 8004db8:	4299      	cmp	r1, r3
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	d001      	beq.n	8004dc4 <cleanup_stdio+0x10>
 8004dc0:	f000 fe82 	bl	8005ac8 <_fflush_r>
 8004dc4:	68a1      	ldr	r1, [r4, #8]
 8004dc6:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <cleanup_stdio+0x38>)
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	d002      	beq.n	8004dd2 <cleanup_stdio+0x1e>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f000 fe7b 	bl	8005ac8 <_fflush_r>
 8004dd2:	68e1      	ldr	r1, [r4, #12]
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <cleanup_stdio+0x3c>)
 8004dd6:	4299      	cmp	r1, r3
 8004dd8:	d004      	beq.n	8004de4 <cleanup_stdio+0x30>
 8004dda:	4620      	mov	r0, r4
 8004ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de0:	f000 be72 	b.w	8005ac8 <_fflush_r>
 8004de4:	bd10      	pop	{r4, pc}
 8004de6:	bf00      	nop
 8004de8:	20000190 	.word	0x20000190
 8004dec:	200001f8 	.word	0x200001f8
 8004df0:	20000260 	.word	0x20000260

08004df4 <global_stdio_init.part.0>:
 8004df4:	b510      	push	{r4, lr}
 8004df6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <global_stdio_init.part.0+0x30>)
 8004df8:	4c0b      	ldr	r4, [pc, #44]	@ (8004e28 <global_stdio_init.part.0+0x34>)
 8004dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8004e2c <global_stdio_init.part.0+0x38>)
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4620      	mov	r0, r4
 8004e00:	2200      	movs	r2, #0
 8004e02:	2104      	movs	r1, #4
 8004e04:	f7ff ff94 	bl	8004d30 <std>
 8004e08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	2109      	movs	r1, #9
 8004e10:	f7ff ff8e 	bl	8004d30 <std>
 8004e14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e18:	2202      	movs	r2, #2
 8004e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e1e:	2112      	movs	r1, #18
 8004e20:	f7ff bf86 	b.w	8004d30 <std>
 8004e24:	200002c8 	.word	0x200002c8
 8004e28:	20000190 	.word	0x20000190
 8004e2c:	08004d9d 	.word	0x08004d9d

08004e30 <__sfp_lock_acquire>:
 8004e30:	4801      	ldr	r0, [pc, #4]	@ (8004e38 <__sfp_lock_acquire+0x8>)
 8004e32:	f000 ba00 	b.w	8005236 <__retarget_lock_acquire_recursive>
 8004e36:	bf00      	nop
 8004e38:	200002d1 	.word	0x200002d1

08004e3c <__sfp_lock_release>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	@ (8004e44 <__sfp_lock_release+0x8>)
 8004e3e:	f000 b9fb 	b.w	8005238 <__retarget_lock_release_recursive>
 8004e42:	bf00      	nop
 8004e44:	200002d1 	.word	0x200002d1

08004e48 <__sinit>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	f7ff fff0 	bl	8004e30 <__sfp_lock_acquire>
 8004e50:	6a23      	ldr	r3, [r4, #32]
 8004e52:	b11b      	cbz	r3, 8004e5c <__sinit+0x14>
 8004e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e58:	f7ff bff0 	b.w	8004e3c <__sfp_lock_release>
 8004e5c:	4b04      	ldr	r3, [pc, #16]	@ (8004e70 <__sinit+0x28>)
 8004e5e:	6223      	str	r3, [r4, #32]
 8004e60:	4b04      	ldr	r3, [pc, #16]	@ (8004e74 <__sinit+0x2c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f5      	bne.n	8004e54 <__sinit+0xc>
 8004e68:	f7ff ffc4 	bl	8004df4 <global_stdio_init.part.0>
 8004e6c:	e7f2      	b.n	8004e54 <__sinit+0xc>
 8004e6e:	bf00      	nop
 8004e70:	08004db5 	.word	0x08004db5
 8004e74:	200002c8 	.word	0x200002c8

08004e78 <_fwalk_sglue>:
 8004e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	4688      	mov	r8, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	2600      	movs	r6, #0
 8004e84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e88:	f1b9 0901 	subs.w	r9, r9, #1
 8004e8c:	d505      	bpl.n	8004e9a <_fwalk_sglue+0x22>
 8004e8e:	6824      	ldr	r4, [r4, #0]
 8004e90:	2c00      	cmp	r4, #0
 8004e92:	d1f7      	bne.n	8004e84 <_fwalk_sglue+0xc>
 8004e94:	4630      	mov	r0, r6
 8004e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9a:	89ab      	ldrh	r3, [r5, #12]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d907      	bls.n	8004eb0 <_fwalk_sglue+0x38>
 8004ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	d003      	beq.n	8004eb0 <_fwalk_sglue+0x38>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4638      	mov	r0, r7
 8004eac:	47c0      	blx	r8
 8004eae:	4306      	orrs	r6, r0
 8004eb0:	3568      	adds	r5, #104	@ 0x68
 8004eb2:	e7e9      	b.n	8004e88 <_fwalk_sglue+0x10>

08004eb4 <iprintf>:
 8004eb4:	b40f      	push	{r0, r1, r2, r3}
 8004eb6:	b507      	push	{r0, r1, r2, lr}
 8004eb8:	4906      	ldr	r1, [pc, #24]	@ (8004ed4 <iprintf+0x20>)
 8004eba:	ab04      	add	r3, sp, #16
 8004ebc:	6808      	ldr	r0, [r1, #0]
 8004ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ec2:	6881      	ldr	r1, [r0, #8]
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	f000 fad9 	bl	800547c <_vfiprintf_r>
 8004eca:	b003      	add	sp, #12
 8004ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed0:	b004      	add	sp, #16
 8004ed2:	4770      	bx	lr
 8004ed4:	20000020 	.word	0x20000020

08004ed8 <_puts_r>:
 8004ed8:	6a03      	ldr	r3, [r0, #32]
 8004eda:	b570      	push	{r4, r5, r6, lr}
 8004edc:	6884      	ldr	r4, [r0, #8]
 8004ede:	4605      	mov	r5, r0
 8004ee0:	460e      	mov	r6, r1
 8004ee2:	b90b      	cbnz	r3, 8004ee8 <_puts_r+0x10>
 8004ee4:	f7ff ffb0 	bl	8004e48 <__sinit>
 8004ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004eea:	07db      	lsls	r3, r3, #31
 8004eec:	d405      	bmi.n	8004efa <_puts_r+0x22>
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	0598      	lsls	r0, r3, #22
 8004ef2:	d402      	bmi.n	8004efa <_puts_r+0x22>
 8004ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ef6:	f000 f99e 	bl	8005236 <__retarget_lock_acquire_recursive>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	0719      	lsls	r1, r3, #28
 8004efe:	d502      	bpl.n	8004f06 <_puts_r+0x2e>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d135      	bne.n	8004f72 <_puts_r+0x9a>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f8c5 	bl	8005098 <__swsetup_r>
 8004f0e:	b380      	cbz	r0, 8004f72 <_puts_r+0x9a>
 8004f10:	f04f 35ff 	mov.w	r5, #4294967295
 8004f14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f16:	07da      	lsls	r2, r3, #31
 8004f18:	d405      	bmi.n	8004f26 <_puts_r+0x4e>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	059b      	lsls	r3, r3, #22
 8004f1e:	d402      	bmi.n	8004f26 <_puts_r+0x4e>
 8004f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f22:	f000 f989 	bl	8005238 <__retarget_lock_release_recursive>
 8004f26:	4628      	mov	r0, r5
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da04      	bge.n	8004f38 <_puts_r+0x60>
 8004f2e:	69a2      	ldr	r2, [r4, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dc17      	bgt.n	8004f64 <_puts_r+0x8c>
 8004f34:	290a      	cmp	r1, #10
 8004f36:	d015      	beq.n	8004f64 <_puts_r+0x8c>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	6022      	str	r2, [r4, #0]
 8004f3e:	7019      	strb	r1, [r3, #0]
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f46:	3b01      	subs	r3, #1
 8004f48:	60a3      	str	r3, [r4, #8]
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d1ed      	bne.n	8004f2a <_puts_r+0x52>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da11      	bge.n	8004f76 <_puts_r+0x9e>
 8004f52:	4622      	mov	r2, r4
 8004f54:	210a      	movs	r1, #10
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 f85f 	bl	800501a <__swbuf_r>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d0d7      	beq.n	8004f10 <_puts_r+0x38>
 8004f60:	250a      	movs	r5, #10
 8004f62:	e7d7      	b.n	8004f14 <_puts_r+0x3c>
 8004f64:	4622      	mov	r2, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f857 	bl	800501a <__swbuf_r>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d1e7      	bne.n	8004f40 <_puts_r+0x68>
 8004f70:	e7ce      	b.n	8004f10 <_puts_r+0x38>
 8004f72:	3e01      	subs	r6, #1
 8004f74:	e7e4      	b.n	8004f40 <_puts_r+0x68>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	6022      	str	r2, [r4, #0]
 8004f7c:	220a      	movs	r2, #10
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e7ee      	b.n	8004f60 <_puts_r+0x88>
	...

08004f84 <puts>:
 8004f84:	4b02      	ldr	r3, [pc, #8]	@ (8004f90 <puts+0xc>)
 8004f86:	4601      	mov	r1, r0
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f7ff bfa5 	b.w	8004ed8 <_puts_r>
 8004f8e:	bf00      	nop
 8004f90:	20000020 	.word	0x20000020

08004f94 <__sread>:
 8004f94:	b510      	push	{r4, lr}
 8004f96:	460c      	mov	r4, r1
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	f000 f8fc 	bl	8005198 <_read_r>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	bfab      	itete	ge
 8004fa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fa8:	181b      	addge	r3, r3, r0
 8004faa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004fae:	bfac      	ite	ge
 8004fb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fb2:	81a3      	strhlt	r3, [r4, #12]
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <__swrite>:
 8004fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fba:	461f      	mov	r7, r3
 8004fbc:	898b      	ldrh	r3, [r1, #12]
 8004fbe:	05db      	lsls	r3, r3, #23
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	d505      	bpl.n	8004fd4 <__swrite+0x1e>
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	2302      	movs	r3, #2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f000 f8d0 	bl	8005174 <_lseek_r>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fea:	f000 b8e7 	b.w	80051bc <_write_r>

08004fee <__sseek>:
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff6:	f000 f8bd 	bl	8005174 <_lseek_r>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	bf15      	itete	ne
 8005000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800500a:	81a3      	strheq	r3, [r4, #12]
 800500c:	bf18      	it	ne
 800500e:	81a3      	strhne	r3, [r4, #12]
 8005010:	bd10      	pop	{r4, pc}

08005012 <__sclose>:
 8005012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005016:	f000 b89d 	b.w	8005154 <_close_r>

0800501a <__swbuf_r>:
 800501a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501c:	460e      	mov	r6, r1
 800501e:	4614      	mov	r4, r2
 8005020:	4605      	mov	r5, r0
 8005022:	b118      	cbz	r0, 800502c <__swbuf_r+0x12>
 8005024:	6a03      	ldr	r3, [r0, #32]
 8005026:	b90b      	cbnz	r3, 800502c <__swbuf_r+0x12>
 8005028:	f7ff ff0e 	bl	8004e48 <__sinit>
 800502c:	69a3      	ldr	r3, [r4, #24]
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	071a      	lsls	r2, r3, #28
 8005034:	d501      	bpl.n	800503a <__swbuf_r+0x20>
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	b943      	cbnz	r3, 800504c <__swbuf_r+0x32>
 800503a:	4621      	mov	r1, r4
 800503c:	4628      	mov	r0, r5
 800503e:	f000 f82b 	bl	8005098 <__swsetup_r>
 8005042:	b118      	cbz	r0, 800504c <__swbuf_r+0x32>
 8005044:	f04f 37ff 	mov.w	r7, #4294967295
 8005048:	4638      	mov	r0, r7
 800504a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	6922      	ldr	r2, [r4, #16]
 8005050:	1a98      	subs	r0, r3, r2
 8005052:	6963      	ldr	r3, [r4, #20]
 8005054:	b2f6      	uxtb	r6, r6
 8005056:	4283      	cmp	r3, r0
 8005058:	4637      	mov	r7, r6
 800505a:	dc05      	bgt.n	8005068 <__swbuf_r+0x4e>
 800505c:	4621      	mov	r1, r4
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fd32 	bl	8005ac8 <_fflush_r>
 8005064:	2800      	cmp	r0, #0
 8005066:	d1ed      	bne.n	8005044 <__swbuf_r+0x2a>
 8005068:	68a3      	ldr	r3, [r4, #8]
 800506a:	3b01      	subs	r3, #1
 800506c:	60a3      	str	r3, [r4, #8]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	701e      	strb	r6, [r3, #0]
 8005076:	6962      	ldr	r2, [r4, #20]
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	429a      	cmp	r2, r3
 800507c:	d004      	beq.n	8005088 <__swbuf_r+0x6e>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	07db      	lsls	r3, r3, #31
 8005082:	d5e1      	bpl.n	8005048 <__swbuf_r+0x2e>
 8005084:	2e0a      	cmp	r6, #10
 8005086:	d1df      	bne.n	8005048 <__swbuf_r+0x2e>
 8005088:	4621      	mov	r1, r4
 800508a:	4628      	mov	r0, r5
 800508c:	f000 fd1c 	bl	8005ac8 <_fflush_r>
 8005090:	2800      	cmp	r0, #0
 8005092:	d0d9      	beq.n	8005048 <__swbuf_r+0x2e>
 8005094:	e7d6      	b.n	8005044 <__swbuf_r+0x2a>
	...

08005098 <__swsetup_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4b29      	ldr	r3, [pc, #164]	@ (8005140 <__swsetup_r+0xa8>)
 800509c:	4605      	mov	r5, r0
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	460c      	mov	r4, r1
 80050a2:	b118      	cbz	r0, 80050ac <__swsetup_r+0x14>
 80050a4:	6a03      	ldr	r3, [r0, #32]
 80050a6:	b90b      	cbnz	r3, 80050ac <__swsetup_r+0x14>
 80050a8:	f7ff fece 	bl	8004e48 <__sinit>
 80050ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b0:	0719      	lsls	r1, r3, #28
 80050b2:	d422      	bmi.n	80050fa <__swsetup_r+0x62>
 80050b4:	06da      	lsls	r2, r3, #27
 80050b6:	d407      	bmi.n	80050c8 <__swsetup_r+0x30>
 80050b8:	2209      	movs	r2, #9
 80050ba:	602a      	str	r2, [r5, #0]
 80050bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c0:	81a3      	strh	r3, [r4, #12]
 80050c2:	f04f 30ff 	mov.w	r0, #4294967295
 80050c6:	e033      	b.n	8005130 <__swsetup_r+0x98>
 80050c8:	0758      	lsls	r0, r3, #29
 80050ca:	d512      	bpl.n	80050f2 <__swsetup_r+0x5a>
 80050cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050ce:	b141      	cbz	r1, 80050e2 <__swsetup_r+0x4a>
 80050d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050d4:	4299      	cmp	r1, r3
 80050d6:	d002      	beq.n	80050de <__swsetup_r+0x46>
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 f8af 	bl	800523c <_free_r>
 80050de:	2300      	movs	r3, #0
 80050e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	2300      	movs	r3, #0
 80050ec:	6063      	str	r3, [r4, #4]
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f043 0308 	orr.w	r3, r3, #8
 80050f8:	81a3      	strh	r3, [r4, #12]
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	b94b      	cbnz	r3, 8005112 <__swsetup_r+0x7a>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005108:	d003      	beq.n	8005112 <__swsetup_r+0x7a>
 800510a:	4621      	mov	r1, r4
 800510c:	4628      	mov	r0, r5
 800510e:	f000 fd29 	bl	8005b64 <__smakebuf_r>
 8005112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005116:	f013 0201 	ands.w	r2, r3, #1
 800511a:	d00a      	beq.n	8005132 <__swsetup_r+0x9a>
 800511c:	2200      	movs	r2, #0
 800511e:	60a2      	str	r2, [r4, #8]
 8005120:	6962      	ldr	r2, [r4, #20]
 8005122:	4252      	negs	r2, r2
 8005124:	61a2      	str	r2, [r4, #24]
 8005126:	6922      	ldr	r2, [r4, #16]
 8005128:	b942      	cbnz	r2, 800513c <__swsetup_r+0xa4>
 800512a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800512e:	d1c5      	bne.n	80050bc <__swsetup_r+0x24>
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	0799      	lsls	r1, r3, #30
 8005134:	bf58      	it	pl
 8005136:	6962      	ldrpl	r2, [r4, #20]
 8005138:	60a2      	str	r2, [r4, #8]
 800513a:	e7f4      	b.n	8005126 <__swsetup_r+0x8e>
 800513c:	2000      	movs	r0, #0
 800513e:	e7f7      	b.n	8005130 <__swsetup_r+0x98>
 8005140:	20000020 	.word	0x20000020

08005144 <memset>:
 8005144:	4402      	add	r2, r0
 8005146:	4603      	mov	r3, r0
 8005148:	4293      	cmp	r3, r2
 800514a:	d100      	bne.n	800514e <memset+0xa>
 800514c:	4770      	bx	lr
 800514e:	f803 1b01 	strb.w	r1, [r3], #1
 8005152:	e7f9      	b.n	8005148 <memset+0x4>

08005154 <_close_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4d06      	ldr	r5, [pc, #24]	@ (8005170 <_close_r+0x1c>)
 8005158:	2300      	movs	r3, #0
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	602b      	str	r3, [r5, #0]
 8005160:	f7fb fb82 	bl	8000868 <_close>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_close_r+0x1a>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	b103      	cbz	r3, 800516e <_close_r+0x1a>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	200002cc 	.word	0x200002cc

08005174 <_lseek_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d07      	ldr	r5, [pc, #28]	@ (8005194 <_lseek_r+0x20>)
 8005178:	4604      	mov	r4, r0
 800517a:	4608      	mov	r0, r1
 800517c:	4611      	mov	r1, r2
 800517e:	2200      	movs	r2, #0
 8005180:	602a      	str	r2, [r5, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f7fb fb94 	bl	80008b0 <_lseek>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_lseek_r+0x1e>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_lseek_r+0x1e>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	200002cc 	.word	0x200002cc

08005198 <_read_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4d07      	ldr	r5, [pc, #28]	@ (80051b8 <_read_r+0x20>)
 800519c:	4604      	mov	r4, r0
 800519e:	4608      	mov	r0, r1
 80051a0:	4611      	mov	r1, r2
 80051a2:	2200      	movs	r2, #0
 80051a4:	602a      	str	r2, [r5, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f7fb fb25 	bl	80007f6 <_read>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d102      	bne.n	80051b6 <_read_r+0x1e>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	b103      	cbz	r3, 80051b6 <_read_r+0x1e>
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	200002cc 	.word	0x200002cc

080051bc <_write_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	@ (80051dc <_write_r+0x20>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	4608      	mov	r0, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fb fb30 	bl	8000830 <_write>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_write_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_write_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	200002cc 	.word	0x200002cc

080051e0 <__errno>:
 80051e0:	4b01      	ldr	r3, [pc, #4]	@ (80051e8 <__errno+0x8>)
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000020 	.word	0x20000020

080051ec <__libc_init_array>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005224 <__libc_init_array+0x38>)
 80051f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005228 <__libc_init_array+0x3c>)
 80051f2:	1b64      	subs	r4, r4, r5
 80051f4:	10a4      	asrs	r4, r4, #2
 80051f6:	2600      	movs	r6, #0
 80051f8:	42a6      	cmp	r6, r4
 80051fa:	d109      	bne.n	8005210 <__libc_init_array+0x24>
 80051fc:	4d0b      	ldr	r5, [pc, #44]	@ (800522c <__libc_init_array+0x40>)
 80051fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005230 <__libc_init_array+0x44>)
 8005200:	f000 fd1e 	bl	8005c40 <_init>
 8005204:	1b64      	subs	r4, r4, r5
 8005206:	10a4      	asrs	r4, r4, #2
 8005208:	2600      	movs	r6, #0
 800520a:	42a6      	cmp	r6, r4
 800520c:	d105      	bne.n	800521a <__libc_init_array+0x2e>
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	f855 3b04 	ldr.w	r3, [r5], #4
 8005214:	4798      	blx	r3
 8005216:	3601      	adds	r6, #1
 8005218:	e7ee      	b.n	80051f8 <__libc_init_array+0xc>
 800521a:	f855 3b04 	ldr.w	r3, [r5], #4
 800521e:	4798      	blx	r3
 8005220:	3601      	adds	r6, #1
 8005222:	e7f2      	b.n	800520a <__libc_init_array+0x1e>
 8005224:	08005de8 	.word	0x08005de8
 8005228:	08005de8 	.word	0x08005de8
 800522c:	08005de8 	.word	0x08005de8
 8005230:	08005dec 	.word	0x08005dec

08005234 <__retarget_lock_init_recursive>:
 8005234:	4770      	bx	lr

08005236 <__retarget_lock_acquire_recursive>:
 8005236:	4770      	bx	lr

08005238 <__retarget_lock_release_recursive>:
 8005238:	4770      	bx	lr
	...

0800523c <_free_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4605      	mov	r5, r0
 8005240:	2900      	cmp	r1, #0
 8005242:	d041      	beq.n	80052c8 <_free_r+0x8c>
 8005244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005248:	1f0c      	subs	r4, r1, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfb8      	it	lt
 800524e:	18e4      	addlt	r4, r4, r3
 8005250:	f000 f8e0 	bl	8005414 <__malloc_lock>
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <_free_r+0x90>)
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x2c>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	4628      	mov	r0, r5
 8005260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005264:	f000 b8dc 	b.w	8005420 <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x42>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	1821      	adds	r1, r4, r0
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1809      	addeq	r1, r1, r0
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x1e>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x4c>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x42>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1850      	adds	r0, r2, r1
 800528c:	42a0      	cmp	r0, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x6c>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	4401      	add	r1, r0
 8005294:	1850      	adds	r0, r2, r1
 8005296:	4283      	cmp	r3, r0
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x22>
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	4408      	add	r0, r1
 80052a4:	6010      	str	r0, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x22>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x74>
 80052aa:	230c      	movs	r3, #12
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x22>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	1821      	adds	r1, r4, r0
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x22>
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	200002d8 	.word	0x200002d8

080052d0 <sbrk_aligned>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005310 <sbrk_aligned+0x40>)
 80052d4:	460c      	mov	r4, r1
 80052d6:	6831      	ldr	r1, [r6, #0]
 80052d8:	4605      	mov	r5, r0
 80052da:	b911      	cbnz	r1, 80052e2 <sbrk_aligned+0x12>
 80052dc:	f000 fca0 	bl	8005c20 <_sbrk_r>
 80052e0:	6030      	str	r0, [r6, #0]
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 fc9b 	bl	8005c20 <_sbrk_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d103      	bne.n	80052f6 <sbrk_aligned+0x26>
 80052ee:	f04f 34ff 	mov.w	r4, #4294967295
 80052f2:	4620      	mov	r0, r4
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d0f8      	beq.n	80052f2 <sbrk_aligned+0x22>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fc8c 	bl	8005c20 <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d1f2      	bne.n	80052f2 <sbrk_aligned+0x22>
 800530c:	e7ef      	b.n	80052ee <sbrk_aligned+0x1e>
 800530e:	bf00      	nop
 8005310:	200002d4 	.word	0x200002d4

08005314 <_malloc_r>:
 8005314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005318:	1ccd      	adds	r5, r1, #3
 800531a:	f025 0503 	bic.w	r5, r5, #3
 800531e:	3508      	adds	r5, #8
 8005320:	2d0c      	cmp	r5, #12
 8005322:	bf38      	it	cc
 8005324:	250c      	movcc	r5, #12
 8005326:	2d00      	cmp	r5, #0
 8005328:	4606      	mov	r6, r0
 800532a:	db01      	blt.n	8005330 <_malloc_r+0x1c>
 800532c:	42a9      	cmp	r1, r5
 800532e:	d904      	bls.n	800533a <_malloc_r+0x26>
 8005330:	230c      	movs	r3, #12
 8005332:	6033      	str	r3, [r6, #0]
 8005334:	2000      	movs	r0, #0
 8005336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005410 <_malloc_r+0xfc>
 800533e:	f000 f869 	bl	8005414 <__malloc_lock>
 8005342:	f8d8 3000 	ldr.w	r3, [r8]
 8005346:	461c      	mov	r4, r3
 8005348:	bb44      	cbnz	r4, 800539c <_malloc_r+0x88>
 800534a:	4629      	mov	r1, r5
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff ffbf 	bl	80052d0 <sbrk_aligned>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	4604      	mov	r4, r0
 8005356:	d158      	bne.n	800540a <_malloc_r+0xf6>
 8005358:	f8d8 4000 	ldr.w	r4, [r8]
 800535c:	4627      	mov	r7, r4
 800535e:	2f00      	cmp	r7, #0
 8005360:	d143      	bne.n	80053ea <_malloc_r+0xd6>
 8005362:	2c00      	cmp	r4, #0
 8005364:	d04b      	beq.n	80053fe <_malloc_r+0xea>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	4639      	mov	r1, r7
 800536a:	4630      	mov	r0, r6
 800536c:	eb04 0903 	add.w	r9, r4, r3
 8005370:	f000 fc56 	bl	8005c20 <_sbrk_r>
 8005374:	4581      	cmp	r9, r0
 8005376:	d142      	bne.n	80053fe <_malloc_r+0xea>
 8005378:	6821      	ldr	r1, [r4, #0]
 800537a:	1a6d      	subs	r5, r5, r1
 800537c:	4629      	mov	r1, r5
 800537e:	4630      	mov	r0, r6
 8005380:	f7ff ffa6 	bl	80052d0 <sbrk_aligned>
 8005384:	3001      	adds	r0, #1
 8005386:	d03a      	beq.n	80053fe <_malloc_r+0xea>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	442b      	add	r3, r5
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	f8d8 3000 	ldr.w	r3, [r8]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	bb62      	cbnz	r2, 80053f0 <_malloc_r+0xdc>
 8005396:	f8c8 7000 	str.w	r7, [r8]
 800539a:	e00f      	b.n	80053bc <_malloc_r+0xa8>
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	1b52      	subs	r2, r2, r5
 80053a0:	d420      	bmi.n	80053e4 <_malloc_r+0xd0>
 80053a2:	2a0b      	cmp	r2, #11
 80053a4:	d917      	bls.n	80053d6 <_malloc_r+0xc2>
 80053a6:	1961      	adds	r1, r4, r5
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	6025      	str	r5, [r4, #0]
 80053ac:	bf18      	it	ne
 80053ae:	6059      	strne	r1, [r3, #4]
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	bf08      	it	eq
 80053b4:	f8c8 1000 	streq.w	r1, [r8]
 80053b8:	5162      	str	r2, [r4, r5]
 80053ba:	604b      	str	r3, [r1, #4]
 80053bc:	4630      	mov	r0, r6
 80053be:	f000 f82f 	bl	8005420 <__malloc_unlock>
 80053c2:	f104 000b 	add.w	r0, r4, #11
 80053c6:	1d23      	adds	r3, r4, #4
 80053c8:	f020 0007 	bic.w	r0, r0, #7
 80053cc:	1ac2      	subs	r2, r0, r3
 80053ce:	bf1c      	itt	ne
 80053d0:	1a1b      	subne	r3, r3, r0
 80053d2:	50a3      	strne	r3, [r4, r2]
 80053d4:	e7af      	b.n	8005336 <_malloc_r+0x22>
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	42a3      	cmp	r3, r4
 80053da:	bf0c      	ite	eq
 80053dc:	f8c8 2000 	streq.w	r2, [r8]
 80053e0:	605a      	strne	r2, [r3, #4]
 80053e2:	e7eb      	b.n	80053bc <_malloc_r+0xa8>
 80053e4:	4623      	mov	r3, r4
 80053e6:	6864      	ldr	r4, [r4, #4]
 80053e8:	e7ae      	b.n	8005348 <_malloc_r+0x34>
 80053ea:	463c      	mov	r4, r7
 80053ec:	687f      	ldr	r7, [r7, #4]
 80053ee:	e7b6      	b.n	800535e <_malloc_r+0x4a>
 80053f0:	461a      	mov	r2, r3
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d1fb      	bne.n	80053f0 <_malloc_r+0xdc>
 80053f8:	2300      	movs	r3, #0
 80053fa:	6053      	str	r3, [r2, #4]
 80053fc:	e7de      	b.n	80053bc <_malloc_r+0xa8>
 80053fe:	230c      	movs	r3, #12
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	4630      	mov	r0, r6
 8005404:	f000 f80c 	bl	8005420 <__malloc_unlock>
 8005408:	e794      	b.n	8005334 <_malloc_r+0x20>
 800540a:	6005      	str	r5, [r0, #0]
 800540c:	e7d6      	b.n	80053bc <_malloc_r+0xa8>
 800540e:	bf00      	nop
 8005410:	200002d8 	.word	0x200002d8

08005414 <__malloc_lock>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__malloc_lock+0x8>)
 8005416:	f7ff bf0e 	b.w	8005236 <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	200002d0 	.word	0x200002d0

08005420 <__malloc_unlock>:
 8005420:	4801      	ldr	r0, [pc, #4]	@ (8005428 <__malloc_unlock+0x8>)
 8005422:	f7ff bf09 	b.w	8005238 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	200002d0 	.word	0x200002d0

0800542c <__sfputc_r>:
 800542c:	6893      	ldr	r3, [r2, #8]
 800542e:	3b01      	subs	r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	b410      	push	{r4}
 8005434:	6093      	str	r3, [r2, #8]
 8005436:	da07      	bge.n	8005448 <__sfputc_r+0x1c>
 8005438:	6994      	ldr	r4, [r2, #24]
 800543a:	42a3      	cmp	r3, r4
 800543c:	db01      	blt.n	8005442 <__sfputc_r+0x16>
 800543e:	290a      	cmp	r1, #10
 8005440:	d102      	bne.n	8005448 <__sfputc_r+0x1c>
 8005442:	bc10      	pop	{r4}
 8005444:	f7ff bde9 	b.w	800501a <__swbuf_r>
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	1c58      	adds	r0, r3, #1
 800544c:	6010      	str	r0, [r2, #0]
 800544e:	7019      	strb	r1, [r3, #0]
 8005450:	4608      	mov	r0, r1
 8005452:	bc10      	pop	{r4}
 8005454:	4770      	bx	lr

08005456 <__sfputs_r>:
 8005456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005458:	4606      	mov	r6, r0
 800545a:	460f      	mov	r7, r1
 800545c:	4614      	mov	r4, r2
 800545e:	18d5      	adds	r5, r2, r3
 8005460:	42ac      	cmp	r4, r5
 8005462:	d101      	bne.n	8005468 <__sfputs_r+0x12>
 8005464:	2000      	movs	r0, #0
 8005466:	e007      	b.n	8005478 <__sfputs_r+0x22>
 8005468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546c:	463a      	mov	r2, r7
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ffdc 	bl	800542c <__sfputc_r>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d1f3      	bne.n	8005460 <__sfputs_r+0xa>
 8005478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800547c <_vfiprintf_r>:
 800547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	460d      	mov	r5, r1
 8005482:	b09d      	sub	sp, #116	@ 0x74
 8005484:	4614      	mov	r4, r2
 8005486:	4698      	mov	r8, r3
 8005488:	4606      	mov	r6, r0
 800548a:	b118      	cbz	r0, 8005494 <_vfiprintf_r+0x18>
 800548c:	6a03      	ldr	r3, [r0, #32]
 800548e:	b90b      	cbnz	r3, 8005494 <_vfiprintf_r+0x18>
 8005490:	f7ff fcda 	bl	8004e48 <__sinit>
 8005494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005496:	07d9      	lsls	r1, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_vfiprintf_r+0x2a>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	059a      	lsls	r2, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_vfiprintf_r+0x2a>
 80054a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054a2:	f7ff fec8 	bl	8005236 <__retarget_lock_acquire_recursive>
 80054a6:	89ab      	ldrh	r3, [r5, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	d501      	bpl.n	80054b0 <_vfiprintf_r+0x34>
 80054ac:	692b      	ldr	r3, [r5, #16]
 80054ae:	b99b      	cbnz	r3, 80054d8 <_vfiprintf_r+0x5c>
 80054b0:	4629      	mov	r1, r5
 80054b2:	4630      	mov	r0, r6
 80054b4:	f7ff fdf0 	bl	8005098 <__swsetup_r>
 80054b8:	b170      	cbz	r0, 80054d8 <_vfiprintf_r+0x5c>
 80054ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054bc:	07dc      	lsls	r4, r3, #31
 80054be:	d504      	bpl.n	80054ca <_vfiprintf_r+0x4e>
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	b01d      	add	sp, #116	@ 0x74
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	89ab      	ldrh	r3, [r5, #12]
 80054cc:	0598      	lsls	r0, r3, #22
 80054ce:	d4f7      	bmi.n	80054c0 <_vfiprintf_r+0x44>
 80054d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054d2:	f7ff feb1 	bl	8005238 <__retarget_lock_release_recursive>
 80054d6:	e7f3      	b.n	80054c0 <_vfiprintf_r+0x44>
 80054d8:	2300      	movs	r3, #0
 80054da:	9309      	str	r3, [sp, #36]	@ 0x24
 80054dc:	2320      	movs	r3, #32
 80054de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e6:	2330      	movs	r3, #48	@ 0x30
 80054e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005698 <_vfiprintf_r+0x21c>
 80054ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054f0:	f04f 0901 	mov.w	r9, #1
 80054f4:	4623      	mov	r3, r4
 80054f6:	469a      	mov	sl, r3
 80054f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054fc:	b10a      	cbz	r2, 8005502 <_vfiprintf_r+0x86>
 80054fe:	2a25      	cmp	r2, #37	@ 0x25
 8005500:	d1f9      	bne.n	80054f6 <_vfiprintf_r+0x7a>
 8005502:	ebba 0b04 	subs.w	fp, sl, r4
 8005506:	d00b      	beq.n	8005520 <_vfiprintf_r+0xa4>
 8005508:	465b      	mov	r3, fp
 800550a:	4622      	mov	r2, r4
 800550c:	4629      	mov	r1, r5
 800550e:	4630      	mov	r0, r6
 8005510:	f7ff ffa1 	bl	8005456 <__sfputs_r>
 8005514:	3001      	adds	r0, #1
 8005516:	f000 80a7 	beq.w	8005668 <_vfiprintf_r+0x1ec>
 800551a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800551c:	445a      	add	r2, fp
 800551e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005520:	f89a 3000 	ldrb.w	r3, [sl]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 809f 	beq.w	8005668 <_vfiprintf_r+0x1ec>
 800552a:	2300      	movs	r3, #0
 800552c:	f04f 32ff 	mov.w	r2, #4294967295
 8005530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005534:	f10a 0a01 	add.w	sl, sl, #1
 8005538:	9304      	str	r3, [sp, #16]
 800553a:	9307      	str	r3, [sp, #28]
 800553c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005540:	931a      	str	r3, [sp, #104]	@ 0x68
 8005542:	4654      	mov	r4, sl
 8005544:	2205      	movs	r2, #5
 8005546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554a:	4853      	ldr	r0, [pc, #332]	@ (8005698 <_vfiprintf_r+0x21c>)
 800554c:	f7fa fe30 	bl	80001b0 <memchr>
 8005550:	9a04      	ldr	r2, [sp, #16]
 8005552:	b9d8      	cbnz	r0, 800558c <_vfiprintf_r+0x110>
 8005554:	06d1      	lsls	r1, r2, #27
 8005556:	bf44      	itt	mi
 8005558:	2320      	movmi	r3, #32
 800555a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800555e:	0713      	lsls	r3, r2, #28
 8005560:	bf44      	itt	mi
 8005562:	232b      	movmi	r3, #43	@ 0x2b
 8005564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005568:	f89a 3000 	ldrb.w	r3, [sl]
 800556c:	2b2a      	cmp	r3, #42	@ 0x2a
 800556e:	d015      	beq.n	800559c <_vfiprintf_r+0x120>
 8005570:	9a07      	ldr	r2, [sp, #28]
 8005572:	4654      	mov	r4, sl
 8005574:	2000      	movs	r0, #0
 8005576:	f04f 0c0a 	mov.w	ip, #10
 800557a:	4621      	mov	r1, r4
 800557c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005580:	3b30      	subs	r3, #48	@ 0x30
 8005582:	2b09      	cmp	r3, #9
 8005584:	d94b      	bls.n	800561e <_vfiprintf_r+0x1a2>
 8005586:	b1b0      	cbz	r0, 80055b6 <_vfiprintf_r+0x13a>
 8005588:	9207      	str	r2, [sp, #28]
 800558a:	e014      	b.n	80055b6 <_vfiprintf_r+0x13a>
 800558c:	eba0 0308 	sub.w	r3, r0, r8
 8005590:	fa09 f303 	lsl.w	r3, r9, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	9304      	str	r3, [sp, #16]
 8005598:	46a2      	mov	sl, r4
 800559a:	e7d2      	b.n	8005542 <_vfiprintf_r+0xc6>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	1d19      	adds	r1, r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	9103      	str	r1, [sp, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bfbb      	ittet	lt
 80055a8:	425b      	neglt	r3, r3
 80055aa:	f042 0202 	orrlt.w	r2, r2, #2
 80055ae:	9307      	strge	r3, [sp, #28]
 80055b0:	9307      	strlt	r3, [sp, #28]
 80055b2:	bfb8      	it	lt
 80055b4:	9204      	strlt	r2, [sp, #16]
 80055b6:	7823      	ldrb	r3, [r4, #0]
 80055b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80055ba:	d10a      	bne.n	80055d2 <_vfiprintf_r+0x156>
 80055bc:	7863      	ldrb	r3, [r4, #1]
 80055be:	2b2a      	cmp	r3, #42	@ 0x2a
 80055c0:	d132      	bne.n	8005628 <_vfiprintf_r+0x1ac>
 80055c2:	9b03      	ldr	r3, [sp, #12]
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	9203      	str	r2, [sp, #12]
 80055ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ce:	3402      	adds	r4, #2
 80055d0:	9305      	str	r3, [sp, #20]
 80055d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800569c <_vfiprintf_r+0x220>
 80055d6:	7821      	ldrb	r1, [r4, #0]
 80055d8:	2203      	movs	r2, #3
 80055da:	4650      	mov	r0, sl
 80055dc:	f7fa fde8 	bl	80001b0 <memchr>
 80055e0:	b138      	cbz	r0, 80055f2 <_vfiprintf_r+0x176>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	eba0 000a 	sub.w	r0, r0, sl
 80055e8:	2240      	movs	r2, #64	@ 0x40
 80055ea:	4082      	lsls	r2, r0
 80055ec:	4313      	orrs	r3, r2
 80055ee:	3401      	adds	r4, #1
 80055f0:	9304      	str	r3, [sp, #16]
 80055f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f6:	482a      	ldr	r0, [pc, #168]	@ (80056a0 <_vfiprintf_r+0x224>)
 80055f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055fc:	2206      	movs	r2, #6
 80055fe:	f7fa fdd7 	bl	80001b0 <memchr>
 8005602:	2800      	cmp	r0, #0
 8005604:	d03f      	beq.n	8005686 <_vfiprintf_r+0x20a>
 8005606:	4b27      	ldr	r3, [pc, #156]	@ (80056a4 <_vfiprintf_r+0x228>)
 8005608:	bb1b      	cbnz	r3, 8005652 <_vfiprintf_r+0x1d6>
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	3307      	adds	r3, #7
 800560e:	f023 0307 	bic.w	r3, r3, #7
 8005612:	3308      	adds	r3, #8
 8005614:	9303      	str	r3, [sp, #12]
 8005616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005618:	443b      	add	r3, r7
 800561a:	9309      	str	r3, [sp, #36]	@ 0x24
 800561c:	e76a      	b.n	80054f4 <_vfiprintf_r+0x78>
 800561e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005622:	460c      	mov	r4, r1
 8005624:	2001      	movs	r0, #1
 8005626:	e7a8      	b.n	800557a <_vfiprintf_r+0xfe>
 8005628:	2300      	movs	r3, #0
 800562a:	3401      	adds	r4, #1
 800562c:	9305      	str	r3, [sp, #20]
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0c0a 	mov.w	ip, #10
 8005634:	4620      	mov	r0, r4
 8005636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800563a:	3a30      	subs	r2, #48	@ 0x30
 800563c:	2a09      	cmp	r2, #9
 800563e:	d903      	bls.n	8005648 <_vfiprintf_r+0x1cc>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0c6      	beq.n	80055d2 <_vfiprintf_r+0x156>
 8005644:	9105      	str	r1, [sp, #20]
 8005646:	e7c4      	b.n	80055d2 <_vfiprintf_r+0x156>
 8005648:	fb0c 2101 	mla	r1, ip, r1, r2
 800564c:	4604      	mov	r4, r0
 800564e:	2301      	movs	r3, #1
 8005650:	e7f0      	b.n	8005634 <_vfiprintf_r+0x1b8>
 8005652:	ab03      	add	r3, sp, #12
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	462a      	mov	r2, r5
 8005658:	4b13      	ldr	r3, [pc, #76]	@ (80056a8 <_vfiprintf_r+0x22c>)
 800565a:	a904      	add	r1, sp, #16
 800565c:	4630      	mov	r0, r6
 800565e:	f3af 8000 	nop.w
 8005662:	4607      	mov	r7, r0
 8005664:	1c78      	adds	r0, r7, #1
 8005666:	d1d6      	bne.n	8005616 <_vfiprintf_r+0x19a>
 8005668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800566a:	07d9      	lsls	r1, r3, #31
 800566c:	d405      	bmi.n	800567a <_vfiprintf_r+0x1fe>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	059a      	lsls	r2, r3, #22
 8005672:	d402      	bmi.n	800567a <_vfiprintf_r+0x1fe>
 8005674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005676:	f7ff fddf 	bl	8005238 <__retarget_lock_release_recursive>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	065b      	lsls	r3, r3, #25
 800567e:	f53f af1f 	bmi.w	80054c0 <_vfiprintf_r+0x44>
 8005682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005684:	e71e      	b.n	80054c4 <_vfiprintf_r+0x48>
 8005686:	ab03      	add	r3, sp, #12
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	462a      	mov	r2, r5
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <_vfiprintf_r+0x22c>)
 800568e:	a904      	add	r1, sp, #16
 8005690:	4630      	mov	r0, r6
 8005692:	f000 f879 	bl	8005788 <_printf_i>
 8005696:	e7e4      	b.n	8005662 <_vfiprintf_r+0x1e6>
 8005698:	08005dab 	.word	0x08005dab
 800569c:	08005db1 	.word	0x08005db1
 80056a0:	08005db5 	.word	0x08005db5
 80056a4:	00000000 	.word	0x00000000
 80056a8:	08005457 	.word	0x08005457

080056ac <_printf_common>:
 80056ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	4616      	mov	r6, r2
 80056b2:	4698      	mov	r8, r3
 80056b4:	688a      	ldr	r2, [r1, #8]
 80056b6:	690b      	ldr	r3, [r1, #16]
 80056b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056bc:	4293      	cmp	r3, r2
 80056be:	bfb8      	it	lt
 80056c0:	4613      	movlt	r3, r2
 80056c2:	6033      	str	r3, [r6, #0]
 80056c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056c8:	4607      	mov	r7, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	b10a      	cbz	r2, 80056d2 <_printf_common+0x26>
 80056ce:	3301      	adds	r3, #1
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	0699      	lsls	r1, r3, #26
 80056d6:	bf42      	ittt	mi
 80056d8:	6833      	ldrmi	r3, [r6, #0]
 80056da:	3302      	addmi	r3, #2
 80056dc:	6033      	strmi	r3, [r6, #0]
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	f015 0506 	ands.w	r5, r5, #6
 80056e4:	d106      	bne.n	80056f4 <_printf_common+0x48>
 80056e6:	f104 0a19 	add.w	sl, r4, #25
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	6832      	ldr	r2, [r6, #0]
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc26      	bgt.n	8005742 <_printf_common+0x96>
 80056f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056f8:	6822      	ldr	r2, [r4, #0]
 80056fa:	3b00      	subs	r3, #0
 80056fc:	bf18      	it	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	0692      	lsls	r2, r2, #26
 8005702:	d42b      	bmi.n	800575c <_printf_common+0xb0>
 8005704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005708:	4641      	mov	r1, r8
 800570a:	4638      	mov	r0, r7
 800570c:	47c8      	blx	r9
 800570e:	3001      	adds	r0, #1
 8005710:	d01e      	beq.n	8005750 <_printf_common+0xa4>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	f003 0306 	and.w	r3, r3, #6
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf02      	ittt	eq
 800571e:	68e5      	ldreq	r5, [r4, #12]
 8005720:	6833      	ldreq	r3, [r6, #0]
 8005722:	1aed      	subeq	r5, r5, r3
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	bf0c      	ite	eq
 8005728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800572c:	2500      	movne	r5, #0
 800572e:	4293      	cmp	r3, r2
 8005730:	bfc4      	itt	gt
 8005732:	1a9b      	subgt	r3, r3, r2
 8005734:	18ed      	addgt	r5, r5, r3
 8005736:	2600      	movs	r6, #0
 8005738:	341a      	adds	r4, #26
 800573a:	42b5      	cmp	r5, r6
 800573c:	d11a      	bne.n	8005774 <_printf_common+0xc8>
 800573e:	2000      	movs	r0, #0
 8005740:	e008      	b.n	8005754 <_printf_common+0xa8>
 8005742:	2301      	movs	r3, #1
 8005744:	4652      	mov	r2, sl
 8005746:	4641      	mov	r1, r8
 8005748:	4638      	mov	r0, r7
 800574a:	47c8      	blx	r9
 800574c:	3001      	adds	r0, #1
 800574e:	d103      	bne.n	8005758 <_printf_common+0xac>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	3501      	adds	r5, #1
 800575a:	e7c6      	b.n	80056ea <_printf_common+0x3e>
 800575c:	18e1      	adds	r1, r4, r3
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	2030      	movs	r0, #48	@ 0x30
 8005762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005766:	4422      	add	r2, r4
 8005768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800576c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005770:	3302      	adds	r3, #2
 8005772:	e7c7      	b.n	8005704 <_printf_common+0x58>
 8005774:	2301      	movs	r3, #1
 8005776:	4622      	mov	r2, r4
 8005778:	4641      	mov	r1, r8
 800577a:	4638      	mov	r0, r7
 800577c:	47c8      	blx	r9
 800577e:	3001      	adds	r0, #1
 8005780:	d0e6      	beq.n	8005750 <_printf_common+0xa4>
 8005782:	3601      	adds	r6, #1
 8005784:	e7d9      	b.n	800573a <_printf_common+0x8e>
	...

08005788 <_printf_i>:
 8005788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	7e0f      	ldrb	r7, [r1, #24]
 800578e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005790:	2f78      	cmp	r7, #120	@ 0x78
 8005792:	4691      	mov	r9, r2
 8005794:	4680      	mov	r8, r0
 8005796:	460c      	mov	r4, r1
 8005798:	469a      	mov	sl, r3
 800579a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800579e:	d807      	bhi.n	80057b0 <_printf_i+0x28>
 80057a0:	2f62      	cmp	r7, #98	@ 0x62
 80057a2:	d80a      	bhi.n	80057ba <_printf_i+0x32>
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	f000 80d2 	beq.w	800594e <_printf_i+0x1c6>
 80057aa:	2f58      	cmp	r7, #88	@ 0x58
 80057ac:	f000 80b9 	beq.w	8005922 <_printf_i+0x19a>
 80057b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057b8:	e03a      	b.n	8005830 <_printf_i+0xa8>
 80057ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057be:	2b15      	cmp	r3, #21
 80057c0:	d8f6      	bhi.n	80057b0 <_printf_i+0x28>
 80057c2:	a101      	add	r1, pc, #4	@ (adr r1, 80057c8 <_printf_i+0x40>)
 80057c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c8:	08005821 	.word	0x08005821
 80057cc:	08005835 	.word	0x08005835
 80057d0:	080057b1 	.word	0x080057b1
 80057d4:	080057b1 	.word	0x080057b1
 80057d8:	080057b1 	.word	0x080057b1
 80057dc:	080057b1 	.word	0x080057b1
 80057e0:	08005835 	.word	0x08005835
 80057e4:	080057b1 	.word	0x080057b1
 80057e8:	080057b1 	.word	0x080057b1
 80057ec:	080057b1 	.word	0x080057b1
 80057f0:	080057b1 	.word	0x080057b1
 80057f4:	08005935 	.word	0x08005935
 80057f8:	0800585f 	.word	0x0800585f
 80057fc:	080058ef 	.word	0x080058ef
 8005800:	080057b1 	.word	0x080057b1
 8005804:	080057b1 	.word	0x080057b1
 8005808:	08005957 	.word	0x08005957
 800580c:	080057b1 	.word	0x080057b1
 8005810:	0800585f 	.word	0x0800585f
 8005814:	080057b1 	.word	0x080057b1
 8005818:	080057b1 	.word	0x080057b1
 800581c:	080058f7 	.word	0x080058f7
 8005820:	6833      	ldr	r3, [r6, #0]
 8005822:	1d1a      	adds	r2, r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6032      	str	r2, [r6, #0]
 8005828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800582c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005830:	2301      	movs	r3, #1
 8005832:	e09d      	b.n	8005970 <_printf_i+0x1e8>
 8005834:	6833      	ldr	r3, [r6, #0]
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	1d19      	adds	r1, r3, #4
 800583a:	6031      	str	r1, [r6, #0]
 800583c:	0606      	lsls	r6, r0, #24
 800583e:	d501      	bpl.n	8005844 <_printf_i+0xbc>
 8005840:	681d      	ldr	r5, [r3, #0]
 8005842:	e003      	b.n	800584c <_printf_i+0xc4>
 8005844:	0645      	lsls	r5, r0, #25
 8005846:	d5fb      	bpl.n	8005840 <_printf_i+0xb8>
 8005848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800584c:	2d00      	cmp	r5, #0
 800584e:	da03      	bge.n	8005858 <_printf_i+0xd0>
 8005850:	232d      	movs	r3, #45	@ 0x2d
 8005852:	426d      	negs	r5, r5
 8005854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005858:	4859      	ldr	r0, [pc, #356]	@ (80059c0 <_printf_i+0x238>)
 800585a:	230a      	movs	r3, #10
 800585c:	e011      	b.n	8005882 <_printf_i+0xfa>
 800585e:	6821      	ldr	r1, [r4, #0]
 8005860:	6833      	ldr	r3, [r6, #0]
 8005862:	0608      	lsls	r0, r1, #24
 8005864:	f853 5b04 	ldr.w	r5, [r3], #4
 8005868:	d402      	bmi.n	8005870 <_printf_i+0xe8>
 800586a:	0649      	lsls	r1, r1, #25
 800586c:	bf48      	it	mi
 800586e:	b2ad      	uxthmi	r5, r5
 8005870:	2f6f      	cmp	r7, #111	@ 0x6f
 8005872:	4853      	ldr	r0, [pc, #332]	@ (80059c0 <_printf_i+0x238>)
 8005874:	6033      	str	r3, [r6, #0]
 8005876:	bf14      	ite	ne
 8005878:	230a      	movne	r3, #10
 800587a:	2308      	moveq	r3, #8
 800587c:	2100      	movs	r1, #0
 800587e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005882:	6866      	ldr	r6, [r4, #4]
 8005884:	60a6      	str	r6, [r4, #8]
 8005886:	2e00      	cmp	r6, #0
 8005888:	bfa2      	ittt	ge
 800588a:	6821      	ldrge	r1, [r4, #0]
 800588c:	f021 0104 	bicge.w	r1, r1, #4
 8005890:	6021      	strge	r1, [r4, #0]
 8005892:	b90d      	cbnz	r5, 8005898 <_printf_i+0x110>
 8005894:	2e00      	cmp	r6, #0
 8005896:	d04b      	beq.n	8005930 <_printf_i+0x1a8>
 8005898:	4616      	mov	r6, r2
 800589a:	fbb5 f1f3 	udiv	r1, r5, r3
 800589e:	fb03 5711 	mls	r7, r3, r1, r5
 80058a2:	5dc7      	ldrb	r7, [r0, r7]
 80058a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058a8:	462f      	mov	r7, r5
 80058aa:	42bb      	cmp	r3, r7
 80058ac:	460d      	mov	r5, r1
 80058ae:	d9f4      	bls.n	800589a <_printf_i+0x112>
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d10b      	bne.n	80058cc <_printf_i+0x144>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	07df      	lsls	r7, r3, #31
 80058b8:	d508      	bpl.n	80058cc <_printf_i+0x144>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	6861      	ldr	r1, [r4, #4]
 80058be:	4299      	cmp	r1, r3
 80058c0:	bfde      	ittt	le
 80058c2:	2330      	movle	r3, #48	@ 0x30
 80058c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058cc:	1b92      	subs	r2, r2, r6
 80058ce:	6122      	str	r2, [r4, #16]
 80058d0:	f8cd a000 	str.w	sl, [sp]
 80058d4:	464b      	mov	r3, r9
 80058d6:	aa03      	add	r2, sp, #12
 80058d8:	4621      	mov	r1, r4
 80058da:	4640      	mov	r0, r8
 80058dc:	f7ff fee6 	bl	80056ac <_printf_common>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d14a      	bne.n	800597a <_printf_i+0x1f2>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	b004      	add	sp, #16
 80058ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	f043 0320 	orr.w	r3, r3, #32
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	4833      	ldr	r0, [pc, #204]	@ (80059c4 <_printf_i+0x23c>)
 80058f8:	2778      	movs	r7, #120	@ 0x78
 80058fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	6831      	ldr	r1, [r6, #0]
 8005902:	061f      	lsls	r7, r3, #24
 8005904:	f851 5b04 	ldr.w	r5, [r1], #4
 8005908:	d402      	bmi.n	8005910 <_printf_i+0x188>
 800590a:	065f      	lsls	r7, r3, #25
 800590c:	bf48      	it	mi
 800590e:	b2ad      	uxthmi	r5, r5
 8005910:	6031      	str	r1, [r6, #0]
 8005912:	07d9      	lsls	r1, r3, #31
 8005914:	bf44      	itt	mi
 8005916:	f043 0320 	orrmi.w	r3, r3, #32
 800591a:	6023      	strmi	r3, [r4, #0]
 800591c:	b11d      	cbz	r5, 8005926 <_printf_i+0x19e>
 800591e:	2310      	movs	r3, #16
 8005920:	e7ac      	b.n	800587c <_printf_i+0xf4>
 8005922:	4827      	ldr	r0, [pc, #156]	@ (80059c0 <_printf_i+0x238>)
 8005924:	e7e9      	b.n	80058fa <_printf_i+0x172>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f023 0320 	bic.w	r3, r3, #32
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	e7f6      	b.n	800591e <_printf_i+0x196>
 8005930:	4616      	mov	r6, r2
 8005932:	e7bd      	b.n	80058b0 <_printf_i+0x128>
 8005934:	6833      	ldr	r3, [r6, #0]
 8005936:	6825      	ldr	r5, [r4, #0]
 8005938:	6961      	ldr	r1, [r4, #20]
 800593a:	1d18      	adds	r0, r3, #4
 800593c:	6030      	str	r0, [r6, #0]
 800593e:	062e      	lsls	r6, r5, #24
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	d501      	bpl.n	8005948 <_printf_i+0x1c0>
 8005944:	6019      	str	r1, [r3, #0]
 8005946:	e002      	b.n	800594e <_printf_i+0x1c6>
 8005948:	0668      	lsls	r0, r5, #25
 800594a:	d5fb      	bpl.n	8005944 <_printf_i+0x1bc>
 800594c:	8019      	strh	r1, [r3, #0]
 800594e:	2300      	movs	r3, #0
 8005950:	6123      	str	r3, [r4, #16]
 8005952:	4616      	mov	r6, r2
 8005954:	e7bc      	b.n	80058d0 <_printf_i+0x148>
 8005956:	6833      	ldr	r3, [r6, #0]
 8005958:	1d1a      	adds	r2, r3, #4
 800595a:	6032      	str	r2, [r6, #0]
 800595c:	681e      	ldr	r6, [r3, #0]
 800595e:	6862      	ldr	r2, [r4, #4]
 8005960:	2100      	movs	r1, #0
 8005962:	4630      	mov	r0, r6
 8005964:	f7fa fc24 	bl	80001b0 <memchr>
 8005968:	b108      	cbz	r0, 800596e <_printf_i+0x1e6>
 800596a:	1b80      	subs	r0, r0, r6
 800596c:	6060      	str	r0, [r4, #4]
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	6123      	str	r3, [r4, #16]
 8005972:	2300      	movs	r3, #0
 8005974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005978:	e7aa      	b.n	80058d0 <_printf_i+0x148>
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	4632      	mov	r2, r6
 800597e:	4649      	mov	r1, r9
 8005980:	4640      	mov	r0, r8
 8005982:	47d0      	blx	sl
 8005984:	3001      	adds	r0, #1
 8005986:	d0ad      	beq.n	80058e4 <_printf_i+0x15c>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	079b      	lsls	r3, r3, #30
 800598c:	d413      	bmi.n	80059b6 <_printf_i+0x22e>
 800598e:	68e0      	ldr	r0, [r4, #12]
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	4298      	cmp	r0, r3
 8005994:	bfb8      	it	lt
 8005996:	4618      	movlt	r0, r3
 8005998:	e7a6      	b.n	80058e8 <_printf_i+0x160>
 800599a:	2301      	movs	r3, #1
 800599c:	4632      	mov	r2, r6
 800599e:	4649      	mov	r1, r9
 80059a0:	4640      	mov	r0, r8
 80059a2:	47d0      	blx	sl
 80059a4:	3001      	adds	r0, #1
 80059a6:	d09d      	beq.n	80058e4 <_printf_i+0x15c>
 80059a8:	3501      	adds	r5, #1
 80059aa:	68e3      	ldr	r3, [r4, #12]
 80059ac:	9903      	ldr	r1, [sp, #12]
 80059ae:	1a5b      	subs	r3, r3, r1
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	dcf2      	bgt.n	800599a <_printf_i+0x212>
 80059b4:	e7eb      	b.n	800598e <_printf_i+0x206>
 80059b6:	2500      	movs	r5, #0
 80059b8:	f104 0619 	add.w	r6, r4, #25
 80059bc:	e7f5      	b.n	80059aa <_printf_i+0x222>
 80059be:	bf00      	nop
 80059c0:	08005dbc 	.word	0x08005dbc
 80059c4:	08005dcd 	.word	0x08005dcd

080059c8 <__sflush_r>:
 80059c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	0716      	lsls	r6, r2, #28
 80059d0:	4605      	mov	r5, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	d454      	bmi.n	8005a80 <__sflush_r+0xb8>
 80059d6:	684b      	ldr	r3, [r1, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dc02      	bgt.n	80059e2 <__sflush_r+0x1a>
 80059dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dd48      	ble.n	8005a74 <__sflush_r+0xac>
 80059e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059e4:	2e00      	cmp	r6, #0
 80059e6:	d045      	beq.n	8005a74 <__sflush_r+0xac>
 80059e8:	2300      	movs	r3, #0
 80059ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059ee:	682f      	ldr	r7, [r5, #0]
 80059f0:	6a21      	ldr	r1, [r4, #32]
 80059f2:	602b      	str	r3, [r5, #0]
 80059f4:	d030      	beq.n	8005a58 <__sflush_r+0x90>
 80059f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	0759      	lsls	r1, r3, #29
 80059fc:	d505      	bpl.n	8005a0a <__sflush_r+0x42>
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	1ad2      	subs	r2, r2, r3
 8005a02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a04:	b10b      	cbz	r3, 8005a0a <__sflush_r+0x42>
 8005a06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a08:	1ad2      	subs	r2, r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a0e:	6a21      	ldr	r1, [r4, #32]
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b0      	blx	r6
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	d106      	bne.n	8005a28 <__sflush_r+0x60>
 8005a1a:	6829      	ldr	r1, [r5, #0]
 8005a1c:	291d      	cmp	r1, #29
 8005a1e:	d82b      	bhi.n	8005a78 <__sflush_r+0xb0>
 8005a20:	4a28      	ldr	r2, [pc, #160]	@ (8005ac4 <__sflush_r+0xfc>)
 8005a22:	410a      	asrs	r2, r1
 8005a24:	07d6      	lsls	r6, r2, #31
 8005a26:	d427      	bmi.n	8005a78 <__sflush_r+0xb0>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	6062      	str	r2, [r4, #4]
 8005a2c:	04d9      	lsls	r1, r3, #19
 8005a2e:	6922      	ldr	r2, [r4, #16]
 8005a30:	6022      	str	r2, [r4, #0]
 8005a32:	d504      	bpl.n	8005a3e <__sflush_r+0x76>
 8005a34:	1c42      	adds	r2, r0, #1
 8005a36:	d101      	bne.n	8005a3c <__sflush_r+0x74>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b903      	cbnz	r3, 8005a3e <__sflush_r+0x76>
 8005a3c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a40:	602f      	str	r7, [r5, #0]
 8005a42:	b1b9      	cbz	r1, 8005a74 <__sflush_r+0xac>
 8005a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a48:	4299      	cmp	r1, r3
 8005a4a:	d002      	beq.n	8005a52 <__sflush_r+0x8a>
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fbf5 	bl	800523c <_free_r>
 8005a52:	2300      	movs	r3, #0
 8005a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a56:	e00d      	b.n	8005a74 <__sflush_r+0xac>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b0      	blx	r6
 8005a5e:	4602      	mov	r2, r0
 8005a60:	1c50      	adds	r0, r2, #1
 8005a62:	d1c9      	bne.n	80059f8 <__sflush_r+0x30>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0c6      	beq.n	80059f8 <__sflush_r+0x30>
 8005a6a:	2b1d      	cmp	r3, #29
 8005a6c:	d001      	beq.n	8005a72 <__sflush_r+0xaa>
 8005a6e:	2b16      	cmp	r3, #22
 8005a70:	d11d      	bne.n	8005aae <__sflush_r+0xe6>
 8005a72:	602f      	str	r7, [r5, #0]
 8005a74:	2000      	movs	r0, #0
 8005a76:	e021      	b.n	8005abc <__sflush_r+0xf4>
 8005a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	e01a      	b.n	8005ab6 <__sflush_r+0xee>
 8005a80:	690f      	ldr	r7, [r1, #16]
 8005a82:	2f00      	cmp	r7, #0
 8005a84:	d0f6      	beq.n	8005a74 <__sflush_r+0xac>
 8005a86:	0793      	lsls	r3, r2, #30
 8005a88:	680e      	ldr	r6, [r1, #0]
 8005a8a:	bf08      	it	eq
 8005a8c:	694b      	ldreq	r3, [r1, #20]
 8005a8e:	600f      	str	r7, [r1, #0]
 8005a90:	bf18      	it	ne
 8005a92:	2300      	movne	r3, #0
 8005a94:	1bf6      	subs	r6, r6, r7
 8005a96:	608b      	str	r3, [r1, #8]
 8005a98:	2e00      	cmp	r6, #0
 8005a9a:	ddeb      	ble.n	8005a74 <__sflush_r+0xac>
 8005a9c:	6a21      	ldr	r1, [r4, #32]
 8005a9e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	463a      	mov	r2, r7
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	47e0      	blx	ip
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	dc07      	bgt.n	8005abe <__sflush_r+0xf6>
 8005aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abe:	4407      	add	r7, r0
 8005ac0:	1a36      	subs	r6, r6, r0
 8005ac2:	e7e9      	b.n	8005a98 <__sflush_r+0xd0>
 8005ac4:	dfbffffe 	.word	0xdfbffffe

08005ac8 <_fflush_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	690b      	ldr	r3, [r1, #16]
 8005acc:	4605      	mov	r5, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	b913      	cbnz	r3, 8005ad8 <_fflush_r+0x10>
 8005ad2:	2500      	movs	r5, #0
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	b118      	cbz	r0, 8005ae2 <_fflush_r+0x1a>
 8005ada:	6a03      	ldr	r3, [r0, #32]
 8005adc:	b90b      	cbnz	r3, 8005ae2 <_fflush_r+0x1a>
 8005ade:	f7ff f9b3 	bl	8004e48 <__sinit>
 8005ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f3      	beq.n	8005ad2 <_fflush_r+0xa>
 8005aea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005aec:	07d0      	lsls	r0, r2, #31
 8005aee:	d404      	bmi.n	8005afa <_fflush_r+0x32>
 8005af0:	0599      	lsls	r1, r3, #22
 8005af2:	d402      	bmi.n	8005afa <_fflush_r+0x32>
 8005af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005af6:	f7ff fb9e 	bl	8005236 <__retarget_lock_acquire_recursive>
 8005afa:	4628      	mov	r0, r5
 8005afc:	4621      	mov	r1, r4
 8005afe:	f7ff ff63 	bl	80059c8 <__sflush_r>
 8005b02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b04:	07da      	lsls	r2, r3, #31
 8005b06:	4605      	mov	r5, r0
 8005b08:	d4e4      	bmi.n	8005ad4 <_fflush_r+0xc>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	059b      	lsls	r3, r3, #22
 8005b0e:	d4e1      	bmi.n	8005ad4 <_fflush_r+0xc>
 8005b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b12:	f7ff fb91 	bl	8005238 <__retarget_lock_release_recursive>
 8005b16:	e7dd      	b.n	8005ad4 <_fflush_r+0xc>

08005b18 <__swhatbuf_r>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b20:	2900      	cmp	r1, #0
 8005b22:	b096      	sub	sp, #88	@ 0x58
 8005b24:	4615      	mov	r5, r2
 8005b26:	461e      	mov	r6, r3
 8005b28:	da0d      	bge.n	8005b46 <__swhatbuf_r+0x2e>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b30:	f04f 0100 	mov.w	r1, #0
 8005b34:	bf14      	ite	ne
 8005b36:	2340      	movne	r3, #64	@ 0x40
 8005b38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	6031      	str	r1, [r6, #0]
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	b016      	add	sp, #88	@ 0x58
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	466a      	mov	r2, sp
 8005b48:	f000 f848 	bl	8005bdc <_fstat_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	dbec      	blt.n	8005b2a <__swhatbuf_r+0x12>
 8005b50:	9901      	ldr	r1, [sp, #4]
 8005b52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b5a:	4259      	negs	r1, r3
 8005b5c:	4159      	adcs	r1, r3
 8005b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b62:	e7eb      	b.n	8005b3c <__swhatbuf_r+0x24>

08005b64 <__smakebuf_r>:
 8005b64:	898b      	ldrh	r3, [r1, #12]
 8005b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b68:	079d      	lsls	r5, r3, #30
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	d507      	bpl.n	8005b80 <__smakebuf_r+0x1c>
 8005b70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6163      	str	r3, [r4, #20]
 8005b7c:	b003      	add	sp, #12
 8005b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b80:	ab01      	add	r3, sp, #4
 8005b82:	466a      	mov	r2, sp
 8005b84:	f7ff ffc8 	bl	8005b18 <__swhatbuf_r>
 8005b88:	9f00      	ldr	r7, [sp, #0]
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7ff fbc0 	bl	8005314 <_malloc_r>
 8005b94:	b948      	cbnz	r0, 8005baa <__smakebuf_r+0x46>
 8005b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9a:	059a      	lsls	r2, r3, #22
 8005b9c:	d4ee      	bmi.n	8005b7c <__smakebuf_r+0x18>
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	e7e2      	b.n	8005b70 <__smakebuf_r+0xc>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	6020      	str	r0, [r4, #0]
 8005bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb2:	81a3      	strh	r3, [r4, #12]
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bba:	b15b      	cbz	r3, 8005bd4 <__smakebuf_r+0x70>
 8005bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f000 f81d 	bl	8005c00 <_isatty_r>
 8005bc6:	b128      	cbz	r0, 8005bd4 <__smakebuf_r+0x70>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	f043 0301 	orr.w	r3, r3, #1
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	431d      	orrs	r5, r3
 8005bd8:	81a5      	strh	r5, [r4, #12]
 8005bda:	e7cf      	b.n	8005b7c <__smakebuf_r+0x18>

08005bdc <_fstat_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d07      	ldr	r5, [pc, #28]	@ (8005bfc <_fstat_r+0x20>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	f7fa fe48 	bl	800087e <_fstat>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d102      	bne.n	8005bf8 <_fstat_r+0x1c>
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	b103      	cbz	r3, 8005bf8 <_fstat_r+0x1c>
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	bd38      	pop	{r3, r4, r5, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200002cc 	.word	0x200002cc

08005c00 <_isatty_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d06      	ldr	r5, [pc, #24]	@ (8005c1c <_isatty_r+0x1c>)
 8005c04:	2300      	movs	r3, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	602b      	str	r3, [r5, #0]
 8005c0c:	f7fa fe46 	bl	800089c <_isatty>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_isatty_r+0x1a>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_isatty_r+0x1a>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200002cc 	.word	0x200002cc

08005c20 <_sbrk_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d06      	ldr	r5, [pc, #24]	@ (8005c3c <_sbrk_r+0x1c>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	f7fa fe4c 	bl	80008c8 <_sbrk>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_sbrk_r+0x1a>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_sbrk_r+0x1a>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	200002cc 	.word	0x200002cc

08005c40 <_init>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

08005c4c <_fini>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr
