
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005cd4  08005cd4  00006cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e40  08005e40  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e40  08005e40  00006e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e48  08005e48  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e48  08005e48  00006e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e4c  08005e4c  00006e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005e50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08005eac  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005eac  00007288  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014604  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003670  00000000  00000000  0001b68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0001ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f79  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee8e  00000000  00000000  00021119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016950  00000000  00000000  0003ffa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b63cb  00000000  00000000  000568f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ccc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005874  00000000  00000000  0010cd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000005c 	.word	0x2000005c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005cbc 	.word	0x08005cbc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000060 	.word	0x20000060
 800017c:	08005cbc 	.word	0x08005cbc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff ffd5 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShutDown_Pin|EBS_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80005b8:	4810      	ldr	r0, [pc, #64]	@ (80005fc <MX_GPIO_Init+0x70>)
 80005ba:	f001 fdb1 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ShutDown_Pin EBS_Pin */
  GPIO_InitStruct.Pin = ShutDown_Pin|EBS_Pin;
 80005be:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4809      	ldr	r0, [pc, #36]	@ (80005fc <MX_GPIO_Init+0x70>)
 80005d6:	f001 fc43 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : NextState_Pin */
  GPIO_InitStruct.Pin = NextState_Pin;
 80005da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(NextState_GPIO_Port, &GPIO_InitStruct);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4619      	mov	r1, r3
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <MX_GPIO_Init+0x70>)
 80005ee:	f001 fc37 	bl	8001e60 <HAL_GPIO_Init>

}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48000400 	.word	0x48000400

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f001 fa54 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f80a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f7ff ffbe 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 8000610:	f000 f8b2 	bl	8000778 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000614:	f000 f942 	bl	800089c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainLoRa();
 8000618:	f004 fd30 	bl	800507c <mainLoRa>
 800061c:	e7fc      	b.n	8000618 <main+0x18>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09a      	sub	sp, #104	@ 0x68
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2248      	movs	r2, #72	@ 0x48
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 feb4 	bl	800539c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <SystemClock_Config+0xa0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <SystemClock_Config+0xa0>)
 8000650:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <SystemClock_Config+0xa0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000662:	2320      	movs	r3, #32
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800066a:	2300      	movs	r3, #0
 800066c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800066e:	23b0      	movs	r3, #176	@ 0xb0
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f83a 	bl	80026f4 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000686:	f000 f81d 	bl	80006c4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800068a:	234f      	movs	r3, #79	@ 0x4f
 800068c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fba6 	bl	8002df8 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b2:	f000 f807 	bl	80006c4 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3768      	adds	r7, #104	@ 0x68
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	58000400 	.word	0x58000400

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <NMI_Handler+0x4>

080006e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <MemManage_Handler+0x4>

080006f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <UsageFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f001 fa1a 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000738:	4802      	ldr	r0, [pc, #8]	@ (8000744 <SUBGHZ_Radio_IRQHandler+0x10>)
 800073a:	f003 fb53 	bl	8003de4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000078 	.word	0x20000078

08000748 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000754:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000756:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000764:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076c:	68fb      	ldr	r3, [r7, #12]
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_SUBGHZ_Init+0x20>)
 800077e:	2210      	movs	r2, #16
 8000780:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_SUBGHZ_Init+0x20>)
 8000784:	f003 f8ac 	bl	80038e0 <HAL_SUBGHZ_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800078e:	f7ff ff99 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000078 	.word	0x20000078

0800079c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ffcf 	bl	8000748 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2032      	movs	r0, #50	@ 0x32
 80007b0:	f001 fb13 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80007b4:	2032      	movs	r0, #50	@ 0x32
 80007b6:	f001 fb2a 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f004 fdec 	bl	80053d0 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20010000 	.word	0x20010000
 8000824:	00000400 	.word	0x00000400
 8000828:	20000084 	.word	0x20000084
 800082c:	20000288 	.word	0x20000288

08000830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <LL_AHB2_GRP1_EnableClock>:
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000848:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000858:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000860:	68fb      	ldr	r3, [r7, #12]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <LL_APB1_GRP1_EnableClock>:
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000878:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800087a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000888:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000890:	68fb      	ldr	r3, [r7, #12]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008a2:	4a23      	ldr	r2, [pc, #140]	@ (8000930 <MX_USART2_UART_Init+0x94>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008e6:	f003 fc4c 	bl	8004182 <HAL_UART_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008f0:	f7ff fee8 	bl	80006c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008f8:	f004 f983 	bl	8004c02 <HAL_UARTEx_SetTxFifoThreshold>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000902:	f7ff fedf 	bl	80006c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4808      	ldr	r0, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x90>)
 800090a:	f004 f9b8 	bl	8004c7e <HAL_UARTEx_SetRxFifoThreshold>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000914:	f7ff fed6 	bl	80006c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_USART2_UART_Init+0x90>)
 800091a:	f004 f93a 	bl	8004b92 <HAL_UARTEx_DisableFifoMode>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000924:	f7ff fece 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000088 	.word	0x20000088
 8000930:	40004400 	.word	0x40004400

08000934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b096      	sub	sp, #88	@ 0x58
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2238      	movs	r2, #56	@ 0x38
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f004 fd21 	bl	800539c <memset>
  if(uartHandle->Instance==USART2)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d126      	bne.n	80009b2 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000964:	2302      	movs	r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000968:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800096c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4618      	mov	r0, r3
 8000974:	f002 fe00 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800097e:	f7ff fea1 	bl	80006c4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000986:	f7ff ff71 	bl	800086c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff ff56 	bl	800083c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000990:	230c      	movs	r3, #12
 8000992:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a0:	2307      	movs	r3, #7
 80009a2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ae:	f001 fa57 	bl	8001e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3758      	adds	r7, #88	@ 0x58
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c0:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c4:	f7ff ff34 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ee:	f004 fcf5 	bl	80053dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fe05 	bl	8000600 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a04:	08005e50 	.word	0x08005e50
  ldr r2, =_sbss
 8000a08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a0c:	20000288 	.word	0x20000288

08000a10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>

08000a12 <LL_AHB2_GRP1_EnableClock>:
{
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4013      	ands	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
	...

08000a44 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8000a58:	2004      	movs	r0, #4
 8000a5a:	f7ff ffda 	bl	8000a12 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4812      	ldr	r0, [pc, #72]	@ (8000abc <BSP_RADIO_Init+0x78>)
 8000a74:	f001 f9f4 	bl	8001e60 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480e      	ldr	r0, [pc, #56]	@ (8000abc <BSP_RADIO_Init+0x78>)
 8000a82:	f001 f9ed 	bl	8001e60 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8000a86:	2308      	movs	r3, #8
 8000a88:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480b      	ldr	r0, [pc, #44]	@ (8000abc <BSP_RADIO_Init+0x78>)
 8000a90:	f001 f9e6 	bl	8001e60 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000a94:	2200      	movs	r2, #0
 8000a96:	2120      	movs	r1, #32
 8000a98:	4808      	ldr	r0, [pc, #32]	@ (8000abc <BSP_RADIO_Init+0x78>)
 8000a9a:	f001 fb41 	bl	8002120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <BSP_RADIO_Init+0x78>)
 8000aa4:	f001 fb3c 	bl	8002120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <BSP_RADIO_Init+0x78>)
 8000aae:	f001 fb37 	bl	8002120 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	48000800 	.word	0x48000800

08000ac0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d84b      	bhi.n	8000b68 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad6:	bf00      	nop
 8000ad8:	08000ae9 	.word	0x08000ae9
 8000adc:	08000b09 	.word	0x08000b09
 8000ae0:	08000b29 	.word	0x08000b29
 8000ae4:	08000b49 	.word	0x08000b49
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2108      	movs	r1, #8
 8000aec:	4821      	ldr	r0, [pc, #132]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000aee:	f001 fb17 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2110      	movs	r1, #16
 8000af6:	481f      	ldr	r0, [pc, #124]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000af8:	f001 fb12 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2120      	movs	r1, #32
 8000b00:	481c      	ldr	r0, [pc, #112]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b02:	f001 fb0d 	bl	8002120 <HAL_GPIO_WritePin>
      break;      
 8000b06:	e030      	b.n	8000b6a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	4819      	ldr	r0, [pc, #100]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b0e:	f001 fb07 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000b12:	2201      	movs	r2, #1
 8000b14:	2110      	movs	r1, #16
 8000b16:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b18:	f001 fb02 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b22:	f001 fafd 	bl	8002120 <HAL_GPIO_WritePin>
      break;
 8000b26:	e020      	b.n	8000b6a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b2e:	f001 faf7 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000b32:	2201      	movs	r2, #1
 8000b34:	2110      	movs	r1, #16
 8000b36:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b38:	f001 faf2 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2120      	movs	r1, #32
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b42:	f001 faed 	bl	8002120 <HAL_GPIO_WritePin>
      break;
 8000b46:	e010      	b.n	8000b6a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b4e:	f001 fae7 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000b52:	2200      	movs	r2, #0
 8000b54:	2110      	movs	r1, #16
 8000b56:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b58:	f001 fae2 	bl	8002120 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000b62:	f001 fadd 	bl	8002120 <HAL_GPIO_WritePin>
      break;
 8000b66:	e000      	b.n	8000b6a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000b68:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	48000800 	.word	0x48000800

08000b78 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e001      	b.n	8000bbc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8000bb8:	2316      	movs	r3, #22
 8000bba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8000bcc:	f7ff ff3a 	bl	8000a44 <BSP_RADIO_Init>
 8000bd0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff6c 	bl	8000ac0 <BSP_RADIO_ConfigRFSwitch>
 8000be8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8000bf6:	f7ff ffbf 	bl	8000b78 <BSP_RADIO_GetTxConfig>
 8000bfa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8000c04:	f7ff ffbf 	bl	8000b86 <BSP_RADIO_IsTCXO>
 8000c08:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8000c12:	f7ff ffbf 	bl	8000b94 <BSP_RADIO_IsDCDC>
 8000c16:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ffba 	bl	8000ba2 <BSP_RADIO_GetRFOMaxPowerConfig>
 8000c2e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8000c46:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <SUBGRF_Init+0x84>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8000c4c:	f7ff fd94 	bl	8000778 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8000c50:	2002      	movs	r0, #2
 8000c52:	f000 ff0b 	bl	8001a6c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <SUBGRF_Init+0x88>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f8b9 	bl	8000dd4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8000c62:	f7ff ffcd 	bl	8000c00 <RBI_IsTCXO>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d10e      	bne.n	8000c8a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8000c6c:	2140      	movs	r1, #64	@ 0x40
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 fa24 	bl	80010bc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8000c74:	2100      	movs	r1, #0
 8000c76:	f640 1011 	movw	r0, #2321	@ 0x911
 8000c7a:	f000 fd29 	bl	80016d0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8000c7e:	237f      	movs	r3, #127	@ 0x7f
 8000c80:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8000c82:	7b38      	ldrb	r0, [r7, #12]
 8000c84:	f000 f928 	bl	8000ed8 <SUBGRF_Calibrate>
 8000c88:	e009      	b.n	8000c9e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	f640 1011 	movw	r0, #2321	@ 0x911
 8000c90:	f000 fd1e 	bl	80016d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8000c94:	2120      	movs	r1, #32
 8000c96:	f640 1012 	movw	r0, #2322	@ 0x912
 8000c9a:	f000 fd19 	bl	80016d0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8000c9e:	210e      	movs	r1, #14
 8000ca0:	f640 101f 	movw	r0, #2335	@ 0x91f
 8000ca4:	f000 fd14 	bl	80016d0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8000ca8:	f7ff ff8e 	bl	8000bc8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <SUBGRF_Init+0x8c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000120 	.word	0x20000120
 8000cc0:	2000011f 	.word	0x2000011f
 8000cc4:	2000011c 	.word	0x2000011c

08000cc8 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 fd42 	bl	8001764 <SUBGRF_WriteBuffer>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8000cfa:	f107 0317 	add.w	r3, r7, #23
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68b8      	ldr	r0, [r7, #8]
 8000d02:	f000 fcb9 	bl	8001678 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d201      	bcs.n	8000d14 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e007      	b.n	8000d24 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8000d14:	7df8      	ldrb	r0, [r7, #23]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	f000 fd43 	bl	80017a8 <SUBGRF_ReadBuffer>

    return 0;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	460b      	mov	r3, r1
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff ffc2 	bl	8000cc8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f861 	bl	8000e0c <SUBGRF_SetTx>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	0a1b      	lsrs	r3, r3, #8
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000d6c:	f000 fa2a 	bl	80011c4 <SUBGRF_GetPacketType>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d108      	bne.n	8000d88 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8000d82:	f000 fccd 	bl	8001720 <SUBGRF_WriteRegisters>
            break;
 8000d86:	e000      	b.n	8000d8a <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8000d88:	bf00      	nop
    }
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	0a1b      	lsrs	r3, r3, #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8000dac:	f000 fa0a 	bl	80011c4 <SUBGRF_GetPacketType>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d108      	bne.n	8000dc8 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f240 60be 	movw	r0, #1726	@ 0x6be
 8000dc2:	f000 fcad 	bl	8001720 <SUBGRF_WriteRegisters>
            break;
 8000dc6:	e000      	b.n	8000dca <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8000dc8:	bf00      	nop
    }
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	2080      	movs	r0, #128	@ 0x80
 8000de6:	f000 fd01 	bl	80017ec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d103      	bne.n	8000df8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <SUBGRF_SetStandby+0x34>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8000df6:	e002      	b.n	8000dfe <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <SUBGRF_SetStandby+0x34>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000011c 	.word	0x2000011c

08000e0c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <SUBGRF_SetTx+0x3c>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0c1b      	lsrs	r3, r3, #16
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2203      	movs	r2, #3
 8000e36:	4619      	mov	r1, r3
 8000e38:	2083      	movs	r0, #131	@ 0x83
 8000e3a:	f000 fcd7 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000011c 	.word	0x2000011c

08000e4c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <SUBGRF_SetRx+0x3c>)
 8000e56:	2205      	movs	r2, #5
 8000e58:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0c1b      	lsrs	r3, r3, #16
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2203      	movs	r2, #3
 8000e76:	4619      	mov	r1, r3
 8000e78:	2082      	movs	r0, #130	@ 0x82
 8000e7a:	f000 fcb7 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000011c 	.word	0x2000011c

08000e8c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	209f      	movs	r0, #159	@ 0x9f
 8000e9e:	f000 fca5 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8000eb0:	f7ff fead 	bl	8000c0e <RBI_IsDCDC>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d102      	bne.n	8000ec0 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	e001      	b.n	8000ec4 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2096      	movs	r0, #150	@ 0x96
 8000ecc:	f000 fc8e 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000ee0:	793b      	ldrb	r3, [r7, #4]
 8000ee2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	019b      	lsls	r3, r3, #6
 8000eec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000ef4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	015b      	lsls	r3, r3, #5
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f06:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000f12:	793b      	ldrb	r3, [r7, #4]
 8000f14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f18:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f2a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000f36:	793b      	ldrb	r3, [r7, #4]
 8000f38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f3c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8000f48:	793b      	ldrb	r3, [r7, #4]
 8000f4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8000f58:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8000f5a:	f107 030f 	add.w	r3, r7, #15
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4619      	mov	r1, r3
 8000f62:	2089      	movs	r0, #137	@ 0x89
 8000f64:	f000 fc42 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff0 <SUBGRF_CalibrateImage+0x80>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d904      	bls.n	8000f8a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8000f80:	23e1      	movs	r3, #225	@ 0xe1
 8000f82:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8000f84:	23e9      	movs	r3, #233	@ 0xe9
 8000f86:	737b      	strb	r3, [r7, #13]
 8000f88:	e027      	b.n	8000fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ff4 <SUBGRF_CalibrateImage+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d904      	bls.n	8000f9c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8000f92:	23d7      	movs	r3, #215	@ 0xd7
 8000f94:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8000f96:	23db      	movs	r3, #219	@ 0xdb
 8000f98:	737b      	strb	r3, [r7, #13]
 8000f9a:	e01e      	b.n	8000fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a16      	ldr	r2, [pc, #88]	@ (8000ff8 <SUBGRF_CalibrateImage+0x88>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d904      	bls.n	8000fae <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8000fa4:	23c1      	movs	r3, #193	@ 0xc1
 8000fa6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8000fa8:	23c5      	movs	r3, #197	@ 0xc5
 8000faa:	737b      	strb	r3, [r7, #13]
 8000fac:	e015      	b.n	8000fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <SUBGRF_CalibrateImage+0x8c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d904      	bls.n	8000fc0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8000fb6:	2375      	movs	r3, #117	@ 0x75
 8000fb8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8000fba:	2381      	movs	r3, #129	@ 0x81
 8000fbc:	737b      	strb	r3, [r7, #13]
 8000fbe:	e00c      	b.n	8000fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001000 <SUBGRF_CalibrateImage+0x90>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d904      	bls.n	8000fd2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8000fc8:	236b      	movs	r3, #107	@ 0x6b
 8000fca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8000fcc:	236f      	movs	r3, #111	@ 0x6f
 8000fce:	737b      	strb	r3, [r7, #13]
 8000fd0:	e003      	b.n	8000fda <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8000fd2:	2329      	movs	r3, #41	@ 0x29
 8000fd4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8000fd6:	232b      	movs	r3, #43	@ 0x2b
 8000fd8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2202      	movs	r2, #2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2098      	movs	r0, #152	@ 0x98
 8000fe4:	f000 fc02 	bl	80017ec <SUBGRF_WriteCommand>
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	35a4e900 	.word	0x35a4e900
 8000ff4:	32a9f880 	.word	0x32a9f880
 8000ff8:	2de54480 	.word	0x2de54480
 8000ffc:	1b6b0b00 	.word	0x1b6b0b00
 8001000:	1954fc40 	.word	0x1954fc40

08001004 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	4604      	mov	r4, r0
 800100c:	4608      	mov	r0, r1
 800100e:	4611      	mov	r1, r2
 8001010:	461a      	mov	r2, r3
 8001012:	4623      	mov	r3, r4
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	4603      	mov	r3, r0
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	460b      	mov	r3, r1
 800101c:	717b      	strb	r3, [r7, #5]
 800101e:	4613      	mov	r3, r2
 8001020:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800102e:	793b      	ldrb	r3, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	2204      	movs	r2, #4
 8001038:	4619      	mov	r1, r3
 800103a:	2095      	movs	r0, #149	@ 0x95
 800103c:	f000 fbd6 	bl	80017ec <SUBGRF_WriteCommand>
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	4604      	mov	r4, r0
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4623      	mov	r3, r4
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	4603      	mov	r3, r0
 800105c:	80bb      	strh	r3, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	807b      	strh	r3, [r7, #2]
 8001062:	4613      	mov	r3, r2
 8001064:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	b29b      	uxth	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001096:	883b      	ldrh	r3, [r7, #0]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80010a0:	883b      	ldrh	r3, [r7, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2208      	movs	r2, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	2008      	movs	r0, #8
 80010b0:	f000 fb9c 	bl	80017ec <SUBGRF_WriteCommand>
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}

080010bc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2204      	movs	r2, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	2097      	movs	r0, #151	@ 0x97
 80010f2:	f000 fb7b 	bl	80017ec <SUBGRF_WriteCommand>
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <SUBGRF_SetRfFrequency+0x84>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff27 	bl	8000f70 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <SUBGRF_SetRfFrequency+0x84>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	461c      	mov	r4, r3
 800112e:	4615      	mov	r5, r2
 8001130:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001134:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001138:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <SUBGRF_SetRfFrequency+0x88>)
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	4640      	mov	r0, r8
 8001140:	4649      	mov	r1, r9
 8001142:	f7ff f875 	bl	8000230 <__aeabi_uldivmod>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4613      	mov	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	0e1b      	lsrs	r3, r3, #24
 8001152:	b2db      	uxtb	r3, r3
 8001154:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	b2db      	uxtb	r3, r3
 800115c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b2db      	uxtb	r3, r3
 8001164:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2204      	movs	r2, #4
 8001172:	4619      	mov	r1, r3
 8001174:	2086      	movs	r0, #134	@ 0x86
 8001176:	f000 fb39 	bl	80017ec <SUBGRF_WriteCommand>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001184:	2000011f 	.word	0x2000011f
 8001188:	01e84800 	.word	0x01e84800

0800118c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <SUBGRF_SetPacketType+0x34>)
 800119a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80011a2:	2100      	movs	r1, #0
 80011a4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80011a8:	f000 fa92 	bl	80016d0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	208a      	movs	r0, #138	@ 0x8a
 80011b4:	f000 fb1a 	bl	80017ec <SUBGRF_WriteCommand>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000011d 	.word	0x2000011d

080011c4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
    return PacketType;
 80011c8:	4b02      	ldr	r3, [pc, #8]	@ (80011d4 <SUBGRF_GetPacketType+0x10>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	2000011d 	.word	0x2000011d

080011d8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	460b      	mov	r3, r1
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d149      	bne.n	8001284 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fd13 	bl	8000c1c <RBI_GetRFOMaxPowerConfig>
 80011f6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80011f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	429a      	cmp	r2, r3
 8001200:	da01      	bge.n	8001206 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b0e      	cmp	r3, #14
 800120a:	d10e      	bne.n	800122a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800120c:	2301      	movs	r3, #1
 800120e:	2201      	movs	r2, #1
 8001210:	2100      	movs	r1, #0
 8001212:	2004      	movs	r0, #4
 8001214:	f7ff fef6 	bl	8001004 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001218:	79ba      	ldrb	r2, [r7, #6]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	330e      	adds	r3, #14
 8001224:	b2db      	uxtb	r3, r3
 8001226:	71bb      	strb	r3, [r7, #6]
 8001228:	e01f      	b.n	800126a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b0a      	cmp	r3, #10
 800122e:	d10e      	bne.n	800124e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001230:	2301      	movs	r3, #1
 8001232:	2201      	movs	r2, #1
 8001234:	2100      	movs	r1, #0
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff fee4 	bl	8001004 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800123c:	79ba      	ldrb	r2, [r7, #6]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	330d      	adds	r3, #13
 8001248:	b2db      	uxtb	r3, r3
 800124a:	71bb      	strb	r3, [r7, #6]
 800124c:	e00d      	b.n	800126a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800124e:	2301      	movs	r3, #1
 8001250:	2201      	movs	r2, #1
 8001252:	2100      	movs	r1, #0
 8001254:	2007      	movs	r0, #7
 8001256:	f7ff fed5 	bl	8001004 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800125a:	79ba      	ldrb	r2, [r7, #6]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	330e      	adds	r3, #14
 8001266:	b2db      	uxtb	r3, r3
 8001268:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800126a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800126e:	f113 0f11 	cmn.w	r3, #17
 8001272:	da01      	bge.n	8001278 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001274:	23ef      	movs	r3, #239	@ 0xef
 8001276:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001278:	2118      	movs	r1, #24
 800127a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800127e:	f000 fa27 	bl	80016d0 <SUBGRF_WriteRegister>
 8001282:	e067      	b.n	8001354 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001284:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001288:	f000 fa36 	bl	80016f8 <SUBGRF_ReadRegister>
 800128c:	4603      	mov	r3, r0
 800128e:	f043 031e 	orr.w	r3, r3, #30
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800129a:	f000 fa19 	bl	80016d0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fcbc 	bl	8000c1c <RBI_GetRFOMaxPowerConfig>
 80012a4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80012a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	da01      	bge.n	80012b4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b14      	cmp	r3, #20
 80012b8:	d10e      	bne.n	80012d8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80012ba:	2301      	movs	r3, #1
 80012bc:	2200      	movs	r2, #0
 80012be:	2105      	movs	r1, #5
 80012c0:	2003      	movs	r0, #3
 80012c2:	f7ff fe9f 	bl	8001004 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80012c6:	79ba      	ldrb	r2, [r7, #6]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3316      	adds	r3, #22
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	71bb      	strb	r3, [r7, #6]
 80012d6:	e031      	b.n	800133c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b11      	cmp	r3, #17
 80012dc:	d10e      	bne.n	80012fc <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80012de:	2301      	movs	r3, #1
 80012e0:	2200      	movs	r2, #0
 80012e2:	2103      	movs	r1, #3
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff fe8d 	bl	8001004 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3316      	adds	r3, #22
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	71bb      	strb	r3, [r7, #6]
 80012fa:	e01f      	b.n	800133c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b0e      	cmp	r3, #14
 8001300:	d10e      	bne.n	8001320 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001302:	2301      	movs	r3, #1
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff fe7b 	bl	8001004 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	330e      	adds	r3, #14
 800131a:	b2db      	uxtb	r3, r3
 800131c:	71bb      	strb	r3, [r7, #6]
 800131e:	e00d      	b.n	800133c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001320:	2301      	movs	r3, #1
 8001322:	2200      	movs	r2, #0
 8001324:	2107      	movs	r1, #7
 8001326:	2004      	movs	r0, #4
 8001328:	f7ff fe6c 	bl	8001004 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800132c:	79ba      	ldrb	r2, [r7, #6]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3316      	adds	r3, #22
 8001338:	b2db      	uxtb	r3, r3
 800133a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800133c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001340:	f113 0f09 	cmn.w	r3, #9
 8001344:	da01      	bge.n	800134a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001346:	23f7      	movs	r3, #247	@ 0xf7
 8001348:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800134a:	2138      	movs	r1, #56	@ 0x38
 800134c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001350:	f000 f9be 	bl	80016d0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2202      	movs	r2, #2
 8001362:	4619      	mov	r1, r3
 8001364:	208e      	movs	r0, #142	@ 0x8e
 8001366:	f000 fa41 	bl	80017ec <SUBGRF_WriteCommand>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001374:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	4b5c      	ldr	r3, [pc, #368]	@ (8001504 <SUBGRF_SetModulationParams+0x190>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d004      	beq.n	80013a2 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fef5 	bl	800118c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	f200 80a5 	bhi.w	80014f6 <SUBGRF_SetModulationParams+0x182>
 80013ac:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <SUBGRF_SetModulationParams+0x40>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	08001485 	.word	0x08001485
 80013bc:	08001447 	.word	0x08001447
 80013c0:	080014b3 	.word	0x080014b3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80013c4:	2308      	movs	r3, #8
 80013c6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001508 <SUBGRF_SetModulationParams+0x194>)
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7b1b      	ldrb	r3, [r3, #12]
 80013ee:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7b5b      	ldrb	r3, [r3, #13]
 80013f4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2200      	movs	r2, #0
 80013fc:	461c      	mov	r4, r3
 80013fe:	4615      	mov	r5, r2
 8001400:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001404:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001408:	4a40      	ldr	r2, [pc, #256]	@ (800150c <SUBGRF_SetModulationParams+0x198>)
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	4640      	mov	r0, r8
 8001410:	4649      	mov	r1, r9
 8001412:	f7fe ff0d 	bl	8000230 <__aeabi_uldivmod>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4613      	mov	r3, r2
 800141c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	0c1b      	lsrs	r3, r3, #16
 8001422:	b2db      	uxtb	r3, r3
 8001424:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	b2db      	uxtb	r3, r3
 800142c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001434:	7cfb      	ldrb	r3, [r7, #19]
 8001436:	b29a      	uxth	r2, r3
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4619      	mov	r1, r3
 800143e:	208b      	movs	r0, #139	@ 0x8b
 8001440:	f000 f9d4 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 8001444:	e058      	b.n	80014f8 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001446:	2304      	movs	r3, #4
 8001448:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	4a2e      	ldr	r2, [pc, #184]	@ (8001508 <SUBGRF_SetModulationParams+0x194>)
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	b2db      	uxtb	r3, r3
 800145c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b2db      	uxtb	r3, r3
 8001464:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7d1b      	ldrb	r3, [r3, #20]
 8001470:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001472:	7cfb      	ldrb	r3, [r7, #19]
 8001474:	b29a      	uxth	r2, r3
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	208b      	movs	r0, #139	@ 0x8b
 800147e:	f000 f9b5 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 8001482:	e039      	b.n	80014f8 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8001484:	2304      	movs	r3, #4
 8001486:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e1b      	ldrb	r3, [r3, #24]
 800148c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7e5b      	ldrb	r3, [r3, #25]
 8001492:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e9b      	ldrb	r3, [r3, #26]
 8001498:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7edb      	ldrb	r3, [r3, #27]
 800149e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	208b      	movs	r0, #139	@ 0x8b
 80014ac:	f000 f99e 	bl	80017ec <SUBGRF_WriteCommand>

        break;
 80014b0:	e022      	b.n	80014f8 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 80014b2:	2305      	movs	r3, #5
 80014b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <SUBGRF_SetModulationParams+0x194>)
 80014bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7b1b      	ldrb	r3, [r3, #12]
 80014dc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7b5b      	ldrb	r3, [r3, #13]
 80014e2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80014e4:	7cfb      	ldrb	r3, [r7, #19]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	208b      	movs	r0, #139	@ 0x8b
 80014f0:	f000 f97c 	bl	80017ec <SUBGRF_WriteCommand>
        break;
 80014f4:	e000      	b.n	80014f8 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 80014f6:	bf00      	nop
    }
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001502:	bf00      	nop
 8001504:	2000011d 	.word	0x2000011d
 8001508:	3d090000 	.word	0x3d090000
 800150c:	01e84800 	.word	0x01e84800

08001510 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	4b44      	ldr	r3, [pc, #272]	@ (8001640 <SUBGRF_SetPacketParams+0x130>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d004      	beq.n	800153e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fe27 	bl	800118c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d878      	bhi.n	8001638 <SUBGRF_SetPacketParams+0x128>
 8001546:	a201      	add	r2, pc, #4	@ (adr r2, 800154c <SUBGRF_SetPacketParams+0x3c>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	0800155d 	.word	0x0800155d
 8001550:	080015ed 	.word	0x080015ed
 8001554:	080015e1 	.word	0x080015e1
 8001558:	0800155d 	.word	0x0800155d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7a5b      	ldrb	r3, [r3, #9]
 8001560:	2bf1      	cmp	r3, #241	@ 0xf1
 8001562:	d10a      	bne.n	800157a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001564:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001568:	f7ff fbf3 	bl	8000d52 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800156c:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001570:	f7ff fc0f 	bl	8000d92 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001574:	2302      	movs	r3, #2
 8001576:	75bb      	strb	r3, [r7, #22]
 8001578:	e011      	b.n	800159e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	2bf2      	cmp	r3, #242	@ 0xf2
 8001580:	d10a      	bne.n	8001598 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001582:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001586:	f7ff fbe4 	bl	8000d52 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800158a:	f241 0021 	movw	r0, #4129	@ 0x1021
 800158e:	f7ff fc00 	bl	8000d92 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001592:	2306      	movs	r3, #6
 8001594:	75bb      	strb	r3, [r7, #22]
 8001596:	e002      	b.n	800159e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7a5b      	ldrb	r3, [r3, #9]
 800159c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800159e:	2309      	movs	r3, #9
 80015a0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	885b      	ldrh	r3, [r3, #2]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	885b      	ldrh	r3, [r3, #2]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	791b      	ldrb	r3, [r3, #4]
 80015ba:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	799b      	ldrb	r3, [r3, #6]
 80015c6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	79db      	ldrb	r3, [r3, #7]
 80015cc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7a1b      	ldrb	r3, [r3, #8]
 80015d2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80015d4:	7dbb      	ldrb	r3, [r7, #22]
 80015d6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7a9b      	ldrb	r3, [r3, #10]
 80015dc:	753b      	strb	r3, [r7, #20]
        break;
 80015de:	e022      	b.n	8001626 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	733b      	strb	r3, [r7, #12]
        break;
 80015ea:	e01c      	b.n	8001626 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80015ec:	2306      	movs	r3, #6
 80015ee:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	89db      	ldrh	r3, [r3, #14]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	89db      	ldrh	r3, [r3, #14]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7c1a      	ldrb	r2, [r3, #16]
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <SUBGRF_SetPacketParams+0x134>)
 800160a:	4611      	mov	r1, r2
 800160c:	7019      	strb	r1, [r3, #0]
 800160e:	4613      	mov	r3, r2
 8001610:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7c5b      	ldrb	r3, [r3, #17]
 8001616:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7c9b      	ldrb	r3, [r3, #18]
 800161c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7cdb      	ldrb	r3, [r3, #19]
 8001622:	747b      	strb	r3, [r7, #17]
        break;
 8001624:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	b29a      	uxth	r2, r3
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4619      	mov	r1, r3
 8001630:	208c      	movs	r0, #140	@ 0x8c
 8001632:	f000 f8db 	bl	80017ec <SUBGRF_WriteCommand>
 8001636:	e000      	b.n	800163a <SUBGRF_SetPacketParams+0x12a>
        return;
 8001638:	bf00      	nop
}
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000011d 	.word	0x2000011d
 8001644:	2000011e 	.word	0x2000011e

08001648 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2202      	movs	r2, #2
 8001666:	4619      	mov	r1, r3
 8001668:	208f      	movs	r0, #143	@ 0x8f
 800166a:	f000 f8bf 	bl	80017ec <SUBGRF_WriteCommand>
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2202      	movs	r2, #2
 8001688:	4619      	mov	r1, r3
 800168a:	2013      	movs	r0, #19
 800168c:	f000 f8d0 	bl	8001830 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001690:	f7ff fd98 	bl	80011c4 <SUBGRF_GetPacketType>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d10d      	bne.n	80016b6 <SUBGRF_GetRxBufferStatus+0x3e>
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <SUBGRF_GetRxBufferStatus+0x54>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80016a4:	f240 7002 	movw	r0, #1794	@ 0x702
 80016a8:	f000 f826 	bl	80016f8 <SUBGRF_ReadRegister>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e002      	b.n	80016bc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80016b6:	7b3a      	ldrb	r2, [r7, #12]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80016bc:	7b7a      	ldrb	r2, [r7, #13]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000011e 	.word	0x2000011e

080016d0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	80fb      	strh	r3, [r7, #6]
 80016dc:	4613      	mov	r3, r2
 80016de:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80016e0:	1d7a      	adds	r2, r7, #5
 80016e2:	88f9      	ldrh	r1, [r7, #6]
 80016e4:	2301      	movs	r3, #1
 80016e6:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <SUBGRF_WriteRegister+0x24>)
 80016e8:	f002 f95e 	bl	80039a8 <HAL_SUBGHZ_WriteRegisters>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000078 	.word	0x20000078

080016f8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001702:	f107 020f 	add.w	r2, r7, #15
 8001706:	88f9      	ldrh	r1, [r7, #6]
 8001708:	2301      	movs	r3, #1
 800170a:	4804      	ldr	r0, [pc, #16]	@ (800171c <SUBGRF_ReadRegister+0x24>)
 800170c:	f002 f9ab 	bl	8003a66 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000078 	.word	0x20000078

08001720 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	4613      	mov	r3, r2
 800172e:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001730:	f3ef 8310 	mrs	r3, PRIMASK
 8001734:	60fb      	str	r3, [r7, #12]
  return(result);
 8001736:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800173a:	b672      	cpsid	i
}
 800173c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	88f9      	ldrh	r1, [r7, #6]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4806      	ldr	r0, [pc, #24]	@ (8001760 <SUBGRF_WriteRegisters+0x40>)
 8001746:	f002 f92f 	bl	80039a8 <HAL_SUBGHZ_WriteRegisters>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f383 8810 	msr	PRIMASK, r3
}
 8001754:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000078 	.word	0x20000078

08001764 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001774:	f3ef 8310 	mrs	r3, PRIMASK
 8001778:	60fb      	str	r3, [r7, #12]
  return(result);
 800177a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800177c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800177e:	b672      	cpsid	i
}
 8001780:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	b29b      	uxth	r3, r3
 8001786:	79f9      	ldrb	r1, [r7, #7]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <SUBGRF_WriteBuffer+0x40>)
 800178c:	f002 fa7f 	bl	8003c8e <HAL_SUBGHZ_WriteBuffer>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f383 8810 	msr	PRIMASK, r3
}
 800179a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000078 	.word	0x20000078

080017a8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017b8:	f3ef 8310 	mrs	r3, PRIMASK
 80017bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80017be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80017c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017c2:	b672      	cpsid	i
}
 80017c4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	79f9      	ldrb	r1, [r7, #7]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <SUBGRF_ReadBuffer+0x40>)
 80017d0:	f002 fab0 	bl	8003d34 <HAL_SUBGHZ_ReadBuffer>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f383 8810 	msr	PRIMASK, r3
}
 80017de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000078 	.word	0x20000078

080017ec <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001800:	60fb      	str	r3, [r7, #12]
  return(result);
 8001802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001806:	b672      	cpsid	i
}
 8001808:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	79f9      	ldrb	r1, [r7, #7]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	4806      	ldr	r0, [pc, #24]	@ (800182c <SUBGRF_WriteCommand+0x40>)
 8001812:	f002 f989 	bl	8003b28 <HAL_SUBGHZ_ExecSetCmd>
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f383 8810 	msr	PRIMASK, r3
}
 8001820:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000078 	.word	0x20000078

08001830 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001840:	f3ef 8310 	mrs	r3, PRIMASK
 8001844:	60fb      	str	r3, [r7, #12]
  return(result);
 8001846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800184a:	b672      	cpsid	i
}
 800184c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800184e:	88bb      	ldrh	r3, [r7, #4]
 8001850:	79f9      	ldrb	r1, [r7, #7]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	4806      	ldr	r0, [pc, #24]	@ (8001870 <SUBGRF_ReadCommand+0x40>)
 8001856:	f002 f9c6 	bl	8003be6 <HAL_SUBGHZ_ExecGetCmd>
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f383 8810 	msr	PRIMASK, r3
}
 8001864:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000078 	.word	0x20000078

08001874 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	460a      	mov	r2, r1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10d      	bne.n	80018aa <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d104      	bne.n	800189e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001894:	2302      	movs	r3, #2
 8001896:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001898:	2004      	movs	r0, #4
 800189a:	f000 f8e7 	bl	8001a6c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d107      	bne.n	80018b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80018a4:	2303      	movs	r3, #3
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e004      	b.n	80018b4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f98d 	bl	8000bd6 <RBI_ConfigRFSwitch>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80018d2:	f7ff f98e 	bl	8000bf2 <RBI_GetTxConfig>
 80018d6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d016      	beq.n	800190c <SUBGRF_SetRfTxPower+0x48>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	dc16      	bgt.n	8001912 <SUBGRF_SetRfTxPower+0x4e>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <SUBGRF_SetRfTxPower+0x2e>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d00a      	beq.n	8001906 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80018f0:	e00f      	b.n	8001912 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	dd02      	ble.n	8001900 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	73fb      	strb	r3, [r7, #15]
            break;
 80018fe:	e009      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
            break;
 8001904:	e006      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
            break;
 800190a:	e003      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800190c:	2302      	movs	r3, #2
 800190e:	73fb      	strb	r3, [r7, #15]
            break;
 8001910:	e000      	b.n	8001914 <SUBGRF_SetRfTxPower+0x50>
            break;
 8001912:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8001914:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2202      	movs	r2, #2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fc5b 	bl	80011d8 <SUBGRF_SetTxParams>

    return paSelect;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2001      	movs	r0, #1
 800193a:	4798      	blx	r3
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000120 	.word	0x20000120

08001948 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2002      	movs	r0, #2
 8001956:	4798      	blx	r3
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000120 	.word	0x20000120

08001964 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2040      	movs	r0, #64	@ 0x40
 8001972:	4798      	blx	r3
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000120 	.word	0x20000120

08001980 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8001996:	e00a      	b.n	80019ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2080      	movs	r0, #128	@ 0x80
 800199e:	4798      	blx	r3
            break;
 80019a0:	e005      	b.n	80019ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019aa:	4798      	blx	r3
            break;
 80019ac:	bf00      	nop
    }
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000120 	.word	0x20000120

080019bc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019cc:	4798      	blx	r3
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000120 	.word	0x20000120

080019dc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2020      	movs	r0, #32
 80019ea:	4798      	blx	r3
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000120 	.word	0x20000120

080019f8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2004      	movs	r0, #4
 8001a06:	4798      	blx	r3
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000120 	.word	0x20000120

08001a14 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2008      	movs	r0, #8
 8001a22:	4798      	blx	r3
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000120 	.word	0x20000120

08001a30 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2010      	movs	r0, #16
 8001a3e:	4798      	blx	r3
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000120 	.word	0x20000120

08001a4c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a5c:	4798      	blx	r3
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000120 	.word	0x20000120

08001a6c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8001a76:	f7ff f8ca 	bl	8000c0e <RBI_IsDCDC>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d112      	bne.n	8001aa6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8001a80:	f640 1023 	movw	r0, #2339	@ 0x923
 8001a84:	f7ff fe38 	bl	80016f8 <SUBGRF_ReadRegister>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	f023 0306 	bic.w	r3, r3, #6
 8001a92:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f640 1023 	movw	r0, #2339	@ 0x923
 8001aa2:	f7ff fe15 	bl	80016d0 <SUBGRF_WriteRegister>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f000 f982 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ac0:	f001 fb7c 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a09      	ldr	r2, [pc, #36]	@ (8001aec <HAL_Init+0x3c>)
 8001ac8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aca:	200f      	movs	r0, #15
 8001acc:	f000 f810 	bl	8001af0 <HAL_InitTick>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	e001      	b.n	8001ae0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001adc:	f7fe fdf8 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000000 	.word	0x20000000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_InitTick+0x6c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d024      	beq.n	8001b4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b04:	f001 fb5a 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <HAL_InitTick+0x6c>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f992 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10f      	bne.n	8001b48 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d809      	bhi.n	8001b42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	f000 f950 	bl	8001dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_InitTick+0x70>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e007      	b.n	8001b52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e004      	b.n	8001b52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a03      	ldr	r2, [pc, #12]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000124 	.word	0x20000124

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	@ (8001b98 <HAL_GetTick+0x10>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000124 	.word	0x20000124

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffe0 	bl	8001b88 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4906      	ldr	r1, [pc, #24]	@ (8001c7c <__NVIC_EnableIRQ+0x34>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db12      	blt.n	8001cb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	490a      	ldr	r1, [pc, #40]	@ (8001cc4 <__NVIC_DisableIRQ+0x44>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	3320      	adds	r3, #32
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cac:	f3bf 8f4f 	dsb	sy
}
 8001cb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb2:	f3bf 8f6f 	isb	sy
}
 8001cb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	@ (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	@ (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	@ 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff90 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff09 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff20 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff92 	bl	8001d1c <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff61 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff13 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff21 	bl	8001c80 <__NVIC_DisableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff96 	bl	8001d80 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6e:	e140      	b.n	80020f2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8132 	beq.w	80020ec <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d005      	beq.n	8001ea0 <HAL_GPIO_Init+0x40>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d130      	bne.n	8001f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 0201 	and.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d017      	beq.n	8001f3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d123      	bne.n	8001f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0203 	and.w	r2, r3, #3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 808c 	beq.w	80020ec <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002110 <HAL_GPIO_Init+0x2b0>)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	2207      	movs	r2, #7
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1bc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a44      	ldr	r2, [pc, #272]	@ (8002114 <HAL_GPIO_Init+0x2b4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1b8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a43      	ldr	r2, [pc, #268]	@ (8002118 <HAL_GPIO_Init+0x2b8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1b4>
 8002010:	2302      	movs	r3, #2
 8002012:	e004      	b.n	800201e <HAL_GPIO_Init+0x1be>
 8002014:	2307      	movs	r3, #7
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x1be>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_GPIO_Init+0x1be>
 800201c:	2300      	movs	r3, #0
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4093      	lsls	r3, r2
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800202e:	4938      	ldr	r1, [pc, #224]	@ (8002110 <HAL_GPIO_Init+0x2b0>)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800203c:	4b37      	ldr	r3, [pc, #220]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002060:	4a2e      	ldr	r2, [pc, #184]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002066:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800208a:	4a24      	ldr	r2, [pc, #144]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002090:	4b22      	ldr	r3, [pc, #136]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 8002092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002096:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80020b6:	4a19      	ldr	r2, [pc, #100]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80020be:	4b17      	ldr	r3, [pc, #92]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 80020c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020c4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f aeb7 	bne.w	8001e70 <HAL_GPIO_Init+0x10>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	48000400 	.word	0x48000400
 8002118:	48000800 	.word	0x48000800
 800211c:	58000800 	.word	0x58000800

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800213c:	e002      	b.n	8002144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
	...

08002150 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a03      	ldr	r2, [pc, #12]	@ (8002168 <HAL_PWR_EnableBkUpAccess+0x18>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	58000400 	.word	0x58000400

0800216c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_PWREx_GetVoltageRange+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	58000400 	.word	0x58000400

08002184 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002194:	d101      	bne.n	800219a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	58000400 	.word	0x58000400

080021a8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021f2:	d101      	bne.n	80021f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800222c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800224c:	d101      	bne.n	8002252 <LL_RCC_HSE_IsReady+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_RCC_HSE_IsReady+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800226a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002286:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	d101      	bne.n	80022ac <LL_RCC_HSI_IsReady+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_RCC_HSI_IsReady+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d101      	bne.n	80022f6 <LL_RCC_LSE_IsReady+0x18>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_RCC_LSE_IsReady+0x1a>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d101      	bne.n	8002358 <LL_RCC_LSI_IsReady+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_RCC_LSI_IsReady+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d101      	bne.n	80023b0 <LL_RCC_MSI_IsReady+0x16>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_RCC_MSI_IsReady+0x18>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d101      	bne.n	80023d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800247e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800249e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024cc:	f023 020f 	bic.w	r2, r3, #15
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002520:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002552:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025da:	d101      	bne.n	80025e0 <LL_RCC_PLL_IsReady+0x18>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <LL_RCC_PLL_IsReady+0x1a>
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0303 	and.w	r3, r3, #3
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002656:	d101      	bne.n	800265c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800266e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800267a:	d101      	bne.n	8002680 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002692:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800269e:	d101      	bne.n	80026a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026c0:	d101      	bne.n	80026c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026e2:	d101      	bne.n	80026e8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e36f      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002706:	f7ff fea6 	bl	8002456 <LL_RCC_GetSysClkSource>
 800270a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270c:	f7ff ff8f 	bl	800262e <LL_RCC_PLL_GetMainSource>
 8002710:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80c4 	beq.w	80028a8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x3e>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d176      	bne.n	800281a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d173      	bne.n	800281a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e353      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_OscConfig+0x68>
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275a:	e006      	b.n	800276a <HAL_RCC_OscConfig+0x76>
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800276a:	4293      	cmp	r3, r2
 800276c:	d222      	bcs.n	80027b4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fd5a 	bl	800322c <RCC_SetFlashLatencyFromMSIRange>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e331      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fe2b 	bl	8002408 <LL_RCC_MSI_SetCalibTrimming>
 80027b2:	e021      	b.n	80027f8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe12 	bl	8002408 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fd1f 	bl	800322c <RCC_SetFlashLatencyFromMSIRange>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e2f6      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027f8:	f000 fce0 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4aa7      	ldr	r2, [pc, #668]	@ (8002a9c <HAL_RCC_OscConfig+0x3a8>)
 8002800:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002802:	4ba7      	ldr	r3, [pc, #668]	@ (8002aa0 <HAL_RCC_OscConfig+0x3ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f972 	bl	8001af0 <HAL_InitTick>
 800280c:	4603      	mov	r3, r0
 800280e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d047      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	e2e5      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02c      	beq.n	800287c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002822:	f7ff fd9e 	bl	8002362 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002826:	f7ff f9af 	bl	8001b88 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282e:	f7ff f9ab 	bl	8001b88 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e2d2      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002840:	f7ff fdab 	bl	800239a <LL_RCC_MSI_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f1      	beq.n	800282e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fdc7 	bl	8002408 <LL_RCC_MSI_SetCalibTrimming>
 800287a:	e015      	b.n	80028a8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800287c:	f7ff fd7f 	bl	800237e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002880:	f7ff f982 	bl	8001b88 <HAL_GetTick>
 8002884:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002888:	f7ff f97e 	bl	8001b88 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e2a5      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800289a:	f7ff fd7e 	bl	800239a <LL_RCC_MSI_IsReady>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f1      	bne.n	8002888 <HAL_RCC_OscConfig+0x194>
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028a6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d058      	beq.n	8002966 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1d2>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d108      	bne.n	80028d2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d105      	bne.n	80028d2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d14b      	bne.n	8002966 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e289      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f0:	d102      	bne.n	80028f8 <HAL_RCC_OscConfig+0x204>
 80028f2:	f7ff fc86 	bl	8002202 <LL_RCC_HSE_Enable>
 80028f6:	e00d      	b.n	8002914 <HAL_RCC_OscConfig+0x220>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002900:	d104      	bne.n	800290c <HAL_RCC_OscConfig+0x218>
 8002902:	f7ff fc51 	bl	80021a8 <LL_RCC_HSE_EnableTcxo>
 8002906:	f7ff fc7c 	bl	8002202 <LL_RCC_HSE_Enable>
 800290a:	e003      	b.n	8002914 <HAL_RCC_OscConfig+0x220>
 800290c:	f7ff fc87 	bl	800221e <LL_RCC_HSE_Disable>
 8002910:	f7ff fc58 	bl	80021c4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff f934 	bl	8001b88 <HAL_GetTick>
 8002920:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff f930 	bl	8001b88 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e257      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002936:	f7ff fc80 	bl	800223a <LL_RCC_HSE_IsReady>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f1      	beq.n	8002924 <HAL_RCC_OscConfig+0x230>
 8002940:	e011      	b.n	8002966 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7ff f921 	bl	8001b88 <HAL_GetTick>
 8002946:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294a:	f7ff f91d 	bl	8001b88 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b64      	cmp	r3, #100	@ 0x64
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e244      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800295c:	f7ff fc6d 	bl	800223a <LL_RCC_HSE_IsReady>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f1      	bne.n	800294a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d046      	beq.n	8002a00 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x290>
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d10e      	bne.n	800299c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e22a      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fc8e 	bl	80022b6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800299a:	e031      	b.n	8002a00 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a4:	f7ff fc5a 	bl	800225c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7ff f8ee 	bl	8001b88 <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b0:	f7ff f8ea 	bl	8001b88 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e211      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80029c2:	f7ff fc67 	bl	8002294 <LL_RCC_HSI_IsReady>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f1      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fc70 	bl	80022b6 <LL_RCC_HSI_SetCalibTrimming>
 80029d6:	e013      	b.n	8002a00 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d8:	f7ff fc4e 	bl	8002278 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7ff f8d4 	bl	8001b88 <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e4:	f7ff f8d0 	bl	8001b88 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1f7      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029f6:	f7ff fc4d 	bl	8002294 <LL_RCC_HSI_IsReady>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f1      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d06e      	beq.n	8002aea <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d056      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a1c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d031      	beq.n	8002a90 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e1d0      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a4e:	f7ff fc67 	bl	8002320 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a52:	f7ff f899 	bl	8001b88 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7ff f895 	bl	8001b88 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b11      	cmp	r3, #17
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1bc      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002a6c:	f7ff fc68 	bl	8002340 <LL_RCC_LSI_IsReady>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f1      	bne.n	8002a5a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7e:	f023 0210 	bic.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a90:	f7ff fc36 	bl	8002300 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7ff f878 	bl	8001b88 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002a9a:	e00c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3c2>
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7ff f870 	bl	8001b88 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b11      	cmp	r3, #17
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e197      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002ab6:	f7ff fc43 	bl	8002340 <LL_RCC_LSI_IsReady>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f1      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x3b0>
 8002ac0:	e013      	b.n	8002aea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	f7ff fc2d 	bl	8002320 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7ff f85f 	bl	8001b88 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7ff f85b 	bl	8001b88 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b11      	cmp	r3, #17
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e182      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ae0:	f7ff fc2e 	bl	8002340 <LL_RCC_LSI_IsReady>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f1      	bne.n	8002ace <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80d8 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002af8:	f7ff fb44 	bl	8002184 <LL_PWR_IsEnabledBkUpAccess>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d113      	bne.n	8002b2a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b02:	f7ff fb25 	bl	8002150 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7ff f83f 	bl	8001b88 <HAL_GetTick>
 8002b0a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7ff f83b 	bl	8001b88 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e162      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b20:	f7ff fb30 	bl	8002184 <LL_PWR_IsEnabledBkUpAccess>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f1      	beq.n	8002b0e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d07b      	beq.n	8002c2a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b85      	cmp	r3, #133	@ 0x85
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7ff f817 	bl	8001b88 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7ff f809 	bl	8001b88 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e12e      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b88:	f7ff fba9 	bl	80022de <LL_RCC_LSE_IsReady>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ef      	beq.n	8002b72 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b81      	cmp	r3, #129	@ 0x81
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b85      	cmp	r3, #133	@ 0x85
 8002ba0:	d121      	bne.n	8002be6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fff1 	bl	8001b88 <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe ffe3 	bl	8001b88 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e108      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ec      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002be4:	e060      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe ffcf 	bl	8001b88 <HAL_GetTick>
 8002bea:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe ffc1 	bl	8001b88 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0e6      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ec      	bne.n	8002c02 <HAL_RCC_OscConfig+0x50e>
 8002c28:	e03e      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe ffad 	bl	8001b88 <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe ff9f 	bl	8001b88 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0c4      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ec      	bne.n	8002c46 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6c:	f7fe ff8c 	bl	8001b88 <HAL_GetTick>
 8002c70:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe ff7e 	bl	8001b88 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0a3      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c9e:	f7ff fb1e 	bl	80022de <LL_RCC_LSE_IsReady>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ef      	bne.n	8002c88 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8099 	beq.w	8002de4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d06c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d14b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	f7ff fc74 	bl	80025ac <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe ff60 	bl	8001b88 <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe ff5c 	bl	8001b88 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b0a      	cmp	r3, #10
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e083      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002cde:	f7ff fc73 	bl	80025c8 <LL_RCC_PLL_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f1      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b40      	ldr	r3, [pc, #256]	@ (8002df0 <HAL_RCC_OscConfig+0x6fc>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d00:	0212      	lsls	r2, r2, #8
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d0e:	4311      	orrs	r1, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d14:	430a      	orrs	r2, r1
 8002d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1e:	f7ff fc37 	bl	8002590 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe ff29 	bl	8001b88 <HAL_GetTick>
 8002d36:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe ff25 	bl	8001b88 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b0a      	cmp	r3, #10
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e04c      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002d4c:	f7ff fc3c 	bl	80025c8 <LL_RCC_PLL_IsReady>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f1      	beq.n	8002d3a <HAL_RCC_OscConfig+0x646>
 8002d56:	e045      	b.n	8002de4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	f7ff fc28 	bl	80025ac <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ff14 	bl	8001b88 <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe ff10 	bl	8001b88 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b0a      	cmp	r3, #10
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e037      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d76:	f7ff fc27 	bl	80025c8 <LL_RCC_PLL_IsReady>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f1      	bne.n	8002d64 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002df4 <HAL_RCC_OscConfig+0x700>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
 8002d90:	e028      	b.n	8002de4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e023      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d115      	bne.n	8002de0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10e      	bne.n	8002de0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	11c1808c 	.word	0x11c1808c
 8002df4:	eefefffc 	.word	0xeefefffc

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e12c      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b98      	ldr	r3, [pc, #608]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d91b      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b95      	ldr	r3, [pc, #596]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	4993      	ldr	r1, [pc, #588]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe fead 	bl	8001b88 <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e32:	f7fe fea9 	bl	8001b88 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e110      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e44:	4b8a      	ldr	r3, [pc, #552]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d1ef      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fb02 	bl	800246c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e68:	f7fe fe8e 	bl	8001b88 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e70:	f7fe fe8a 	bl	8001b88 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0f1      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e82:	f7ff fbdf 	bl	8002644 <LL_RCC_IsActiveFlag_HPRE>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f1      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d016      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff faf8 	bl	8002492 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ea2:	f7fe fe71 	bl	8001b88 <HAL_GetTick>
 8002ea6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eaa:	f7fe fe6d 	bl	8001b88 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0d4      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ebc:	f7ff fbd3 	bl	8002666 <LL_RCC_IsActiveFlag_C2HPRE>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f1      	beq.n	8002eaa <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff faf0 	bl	80024bc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fe54 	bl	8001b88 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ee4:	f7fe fe50 	bl	8001b88 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0b7      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ef6:	f7ff fbc8 	bl	800268a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f1      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fae9 	bl	80024e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f16:	f7fe fe37 	bl	8001b88 <HAL_GetTick>
 8002f1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f1e:	f7fe fe33 	bl	8001b88 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e09a      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f30:	f7ff fbbd 	bl	80026ae <LL_RCC_IsActiveFlag_PPRE1>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f1      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d017      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fade 	bl	800250e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f52:	f7fe fe19 	bl	8001b88 <HAL_GetTick>
 8002f56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f5a:	f7fe fe15 	bl	8001b88 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e07c      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f6c:	f7ff fbb0 	bl	80026d0 <LL_RCC_IsActiveFlag_PPRE2>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f1      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d043      	beq.n	800300a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f8a:	f7ff f956 	bl	800223a <LL_RCC_HSE_IsReady>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11e      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e066      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002fa0:	f7ff fb12 	bl	80025c8 <LL_RCC_PLL_IsReady>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e05b      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002fb6:	f7ff f9f0 	bl	800239a <LL_RCC_MSI_IsReady>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e050      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002fc4:	f7ff f966 	bl	8002294 <LL_RCC_HSI_IsReady>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e049      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fa2a 	bl	8002430 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fdd4 	bl	8001b88 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe4:	f7fe fdd0 	bl	8001b88 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e035      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	f7ff fa2c 	bl	8002456 <LL_RCC_GetSysClkSource>
 8002ffe:	4602      	mov	r2, r0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	429a      	cmp	r2, r3
 8003008:	d1ec      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800300a:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d21b      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003018:	4b15      	ldr	r3, [pc, #84]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 0207 	bic.w	r2, r3, #7
 8003020:	4913      	ldr	r1, [pc, #76]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003028:	f7fe fdae 	bl	8001b88 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	e008      	b.n	8003042 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003030:	f7fe fdaa 	bl	8001b88 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e011      	b.n	8003066 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_ClockConfig+0x278>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d1ef      	bne.n	8003030 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003050:	f000 f8b4 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8003054:	4603      	mov	r3, r0
 8003056:	4a07      	ldr	r2, [pc, #28]	@ (8003074 <HAL_RCC_ClockConfig+0x27c>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800305a:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <HAL_RCC_ClockConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fd46 	bl	8001af0 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	58004000 	.word	0x58004000
 8003074:	20000000 	.word	0x20000000
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308a:	f7ff f9e4 	bl	8002456 <LL_RCC_GetSysClkSource>
 800308e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	f7ff facd 	bl	800262e <LL_RCC_PLL_GetMainSource>
 8003094:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d139      	bne.n	8003116 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d136      	bne.n	8003116 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80030a8:	f7ff f987 	bl	80023ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x62>
 80030b2:	f7ff f982 	bl	80023ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0x4e>
 80030bc:	f7ff f98d 	bl	80023da <LL_RCC_MSI_GetRange>
 80030c0:	4603      	mov	r3, r0
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	e005      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x5a>
 80030ca:	f7ff f991 	bl	80023f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80030ce:	4603      	mov	r3, r0
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a36      	ldr	r2, [pc, #216]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	e014      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x8c>
 80030de:	f7ff f96c 	bl	80023ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x7a>
 80030e8:	f7ff f977 	bl	80023da <LL_RCC_MSI_GetRange>
 80030ec:	4603      	mov	r3, r0
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	e005      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x86>
 80030f6:	f7ff f97b 	bl	80023f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80030fa:	4603      	mov	r3, r0
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	4a2b      	ldr	r2, [pc, #172]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d115      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003114:	e012      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d102      	bne.n	8003122 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800311c:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e00c      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d109      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003128:	f7ff f85a 	bl	80021e0 <LL_RCC_HSE_IsEnabledDiv2>
 800312c:	4603      	mov	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e001      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003138:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800313a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313c:	f7ff f98b 	bl	8002456 <LL_RCC_GetSysClkSource>
 8003140:	4603      	mov	r3, r0
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d12f      	bne.n	80031a6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003146:	f7ff fa72 	bl	800262e <LL_RCC_PLL_GetMainSource>
 800314a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0xde>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d003      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0xe4>
 8003158:	e00d      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800315c:	60fb      	str	r3, [r7, #12]
        break;
 800315e:	e00d      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003160:	f7ff f83e 	bl	80021e0 <LL_RCC_HSE_IsEnabledDiv2>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d102      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800316c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800316e:	e005      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003172:	60fb      	str	r3, [r7, #12]
        break;
 8003174:	e002      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	60fb      	str	r3, [r7, #12]
        break;
 800317a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800317c:	f7ff fa35 	bl	80025ea <LL_RCC_PLL_GetN>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	fb03 f402 	mul.w	r4, r3, r2
 8003188:	f7ff fa46 	bl	8002618 <LL_RCC_PLL_GetDivider>
 800318c:	4603      	mov	r3, r0
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	3301      	adds	r3, #1
 8003192:	fbb4 f4f3 	udiv	r4, r4, r3
 8003196:	f7ff fa34 	bl	8002602 <LL_RCC_PLL_GetR>
 800319a:	4603      	mov	r3, r0
 800319c:	0f5b      	lsrs	r3, r3, #29
 800319e:	3301      	adds	r3, #1
 80031a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80031a4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80031a6:	697b      	ldr	r3, [r7, #20]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd90      	pop	{r4, r7, pc}
 80031b0:	08005da0 	.word	0x08005da0
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	01e84800 	.word	0x01e84800

080031bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b598      	push	{r3, r4, r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80031c0:	f7ff ff5c 	bl	800307c <HAL_RCC_GetSysClockFreq>
 80031c4:	4604      	mov	r4, r0
 80031c6:	f7ff f9b5 	bl	8002534 <LL_RCC_GetAHBPrescaler>
 80031ca:	4603      	mov	r3, r0
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4a03      	ldr	r2, [pc, #12]	@ (80031e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd98      	pop	{r3, r4, r7, pc}
 80031e0:	08005d40 	.word	0x08005d40

080031e4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e4:	b598      	push	{r3, r4, r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031e8:	f7ff ffe8 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031ec:	4604      	mov	r4, r0
 80031ee:	f7ff f9b9 	bl	8002564 <LL_RCC_GetAPB1Prescaler>
 80031f2:	4603      	mov	r3, r0
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	4a03      	ldr	r2, [pc, #12]	@ (8003204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd98      	pop	{r3, r4, r7, pc}
 8003204:	08005d80 	.word	0x08005d80

08003208 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b598      	push	{r3, r4, r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800320c:	f7ff ffd6 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8003210:	4604      	mov	r4, r0
 8003212:	f7ff f9b2 	bl	800257a <LL_RCC_GetAPB2Prescaler>
 8003216:	4603      	mov	r3, r0
 8003218:	0adb      	lsrs	r3, r3, #11
 800321a:	4a03      	ldr	r2, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK2Freq+0x20>)
 800321c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003220:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd98      	pop	{r3, r4, r7, pc}
 8003228:	08005d80 	.word	0x08005d80

0800322c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	4a10      	ldr	r2, [pc, #64]	@ (8003280 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003244:	f7ff f981 	bl	800254a <LL_RCC_GetAHB3Prescaler>
 8003248:	4603      	mov	r3, r0
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9c      	lsrs	r4, r3, #18
 8003268:	f7fe ff80 	bl	800216c <HAL_PWREx_GetVoltageRange>
 800326c:	4603      	mov	r3, r0
 800326e:	4619      	mov	r1, r3
 8003270:	4620      	mov	r0, r4
 8003272:	f000 f80b 	bl	800328c <RCC_SetFlashLatency>
 8003276:	4603      	mov	r3, r0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	08005da0 	.word	0x08005da0
 8003284:	08005d40 	.word	0x08005d40
 8003288:	431bde83 	.word	0x431bde83

0800328c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08e      	sub	sp, #56	@ 0x38
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003296:	4a3a      	ldr	r2, [pc, #232]	@ (8003380 <RCC_SetFlashLatency+0xf4>)
 8003298:	f107 0320 	add.w	r3, r7, #32
 800329c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032a0:	6018      	str	r0, [r3, #0]
 80032a2:	3304      	adds	r3, #4
 80032a4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80032a6:	4a37      	ldr	r2, [pc, #220]	@ (8003384 <RCC_SetFlashLatency+0xf8>)
 80032a8:	f107 0318 	add.w	r3, r7, #24
 80032ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032b0:	6018      	str	r0, [r3, #0]
 80032b2:	3304      	adds	r3, #4
 80032b4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80032b6:	4a34      	ldr	r2, [pc, #208]	@ (8003388 <RCC_SetFlashLatency+0xfc>)
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80032be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80032c2:	2300      	movs	r3, #0
 80032c4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032cc:	d11b      	bne.n	8003306 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032d2:	e014      	b.n	80032fe <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	3338      	adds	r3, #56	@ 0x38
 80032da:	443b      	add	r3, r7
 80032dc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d807      	bhi.n	80032f8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3338      	adds	r3, #56	@ 0x38
 80032ee:	443b      	add	r3, r7
 80032f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032f6:	e021      	b.n	800333c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	3301      	adds	r3, #1
 80032fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003300:	2b02      	cmp	r3, #2
 8003302:	d9e7      	bls.n	80032d4 <RCC_SetFlashLatency+0x48>
 8003304:	e01a      	b.n	800333c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800330a:	e014      	b.n	8003336 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800330c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	3338      	adds	r3, #56	@ 0x38
 8003312:	443b      	add	r3, r7
 8003314:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003318:	461a      	mov	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4293      	cmp	r3, r2
 800331e:	d807      	bhi.n	8003330 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3338      	adds	r3, #56	@ 0x38
 8003326:	443b      	add	r3, r7
 8003328:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800332e:	e005      	b.n	800333c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003332:	3301      	adds	r3, #1
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	2b02      	cmp	r3, #2
 800333a:	d9e7      	bls.n	800330c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800333c:	4b13      	ldr	r3, [pc, #76]	@ (800338c <RCC_SetFlashLatency+0x100>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 0207 	bic.w	r2, r3, #7
 8003344:	4911      	ldr	r1, [pc, #68]	@ (800338c <RCC_SetFlashLatency+0x100>)
 8003346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800334c:	f7fe fc1c 	bl	8001b88 <HAL_GetTick>
 8003350:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003352:	e008      	b.n	8003366 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003354:	f7fe fc18 	bl	8001b88 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e007      	b.n	8003376 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003366:	4b09      	ldr	r3, [pc, #36]	@ (800338c <RCC_SetFlashLatency+0x100>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003370:	429a      	cmp	r2, r3
 8003372:	d1ef      	bne.n	8003354 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3738      	adds	r7, #56	@ 0x38
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	08005cd4 	.word	0x08005cd4
 8003384:	08005cdc 	.word	0x08005cdc
 8003388:	08005ce4 	.word	0x08005ce4
 800338c:	58004000 	.word	0x58004000

08003390 <LL_RCC_LSE_IsReady>:
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d101      	bne.n	80033a8 <LL_RCC_LSE_IsReady+0x18>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <LL_RCC_LSE_IsReady+0x1a>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <LL_RCC_SetUSARTClockSource>:
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	43db      	mvns	r3, r3
 80033c8:	401a      	ands	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <LL_RCC_SetI2SClockSource>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <LL_RCC_SetLPUARTClockSource>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003420:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <LL_RCC_SetI2CClockSource>:
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003442:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800344e:	43db      	mvns	r3, r3
 8003450:	401a      	ands	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800345a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <LL_RCC_SetLPTIMClockSource>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800347a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	041b      	lsls	r3, r3, #16
 8003484:	43db      	mvns	r3, r3
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	041b      	lsls	r3, r3, #16
 800348c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <LL_RCC_SetRNGClockSource>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80034b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <LL_RCC_SetADCClockSource>:
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <LL_RCC_SetRTCClockSource>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <LL_RCC_GetRTCClockSource>:
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <LL_RCC_ForceBackupDomainReset>:
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003584:	2300      	movs	r3, #0
 8003586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003588:	2300      	movs	r3, #0
 800358a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d058      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003598:	f7fe fdda 	bl	8002150 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800359c:	f7fe faf4 	bl	8001b88 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80035a2:	e009      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fe faf0 	bl	8001b88 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	74fb      	strb	r3, [r7, #19]
        break;
 80035b6:	e006      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80035b8:	4b7b      	ldr	r3, [pc, #492]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c4:	d1ee      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d13c      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80035cc:	f7ff ffa7 	bl	800351e <LL_RCC_GetRTCClockSource>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d00f      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e8:	f7ff ffa5 	bl	8003536 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035ec:	f7ff ffb3 	bl	8003556 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d014      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe fac0 	bl	8001b88 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800360a:	e00b      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe fabc 	bl	8001b88 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d902      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	74fb      	strb	r3, [r7, #19]
            break;
 8003622:	e004      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003624:	f7ff feb4 	bl	8003390 <LL_RCC_LSE_IsReady>
 8003628:	4603      	mov	r3, r0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d1ee      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff5b 	bl	80034f4 <LL_RCC_SetRTCClockSource>
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
 8003644:	e001      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d004      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fea9 	bl	80033b2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fe9e 	bl	80033b2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fec0 	bl	800340c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fee6 	bl	800346e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fedb 	bl	800346e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fed0 	bl	800346e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fea9 	bl	8003436 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fe9e 	bl	8003436 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fe93 	bl	8003436 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d011      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fe5e 	bl	80033e2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372e:	d107      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d010      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fea5 	bl	80034a0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003768:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800376c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d011      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fea3 	bl	80034ca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378c:	d107      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800379e:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	58000400 	.word	0x58000400

080037ac <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037bc:	4904      	ldr	r1, [pc, #16]	@ (80037d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	58000400 	.word	0x58000400

080037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	58000400 	.word	0x58000400

080037f4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fe:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003800:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	58000400 	.word	0x58000400

08003814 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800381a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800381e:	619a      	str	r2, [r3, #24]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	58000400 	.word	0x58000400

0800382c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b02      	cmp	r3, #2
 800383a:	d101      	bne.n	8003840 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	58000400 	.word	0x58000400

08003850 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d101      	bne.n	8003864 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	58000400 	.word	0x58000400

08003874 <LL_RCC_RF_DisableReset>:
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003884:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003888:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <LL_RCC_IsRFUnderReset>:
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800389c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038a8:	d101      	bne.n	80038ae <LL_RCC_IsRFUnderReset+0x1a>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <LL_RCC_IsRFUnderReset+0x1c>
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <LL_EXTI_EnableIT_32_63+0x24>)
 80038c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80038c6:	4905      	ldr	r1, [pc, #20]	@ (80038dc <LL_EXTI_EnableIT_32_63+0x24>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	58000800 	.word	0x58000800

080038e0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
    return status;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	e052      	b.n	800399c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	799b      	ldrb	r3, [r3, #6]
 80038fe:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003900:	7bbb      	ldrb	r3, [r7, #14]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SUBGHZ_Init+0x2c>
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d109      	bne.n	8003920 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fc ff42 	bl	800079c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003918:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800391c:	f7ff ffcc 	bl	80038b8 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d126      	bne.n	8003974 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800392c:	f7ff ffa2 	bl	8003874 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003930:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <HAL_SUBGHZ_Init+0xc4>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	0cdb      	lsrs	r3, r3, #19
 800393e:	2264      	movs	r2, #100	@ 0x64
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	609a      	str	r2, [r3, #8]
        break;
 8003956:	e007      	b.n	8003968 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	3b01      	subs	r3, #1
 800395c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800395e:	f7ff ff99 	bl	8003894 <LL_RCC_IsRFUnderReset>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ee      	bne.n	8003946 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003968:	f7ff ff34 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800396c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003970:	f7ff ff1c 	bl	80037ac <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003974:	f7ff ff4e 	bl	8003814 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fabc 	bl	8003f00 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	719a      	strb	r2, [r3, #6]

  return status;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000000 	.word	0x20000000

080039a8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	460b      	mov	r3, r1
 80039b6:	817b      	strh	r3, [r7, #10]
 80039b8:	4613      	mov	r3, r2
 80039ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	799b      	ldrb	r3, [r3, #6]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d14a      	bne.n	8003a5c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	795b      	ldrb	r3, [r3, #5]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e045      	b.n	8003a5e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2202      	movs	r2, #2
 80039dc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fb5c 	bl	800409c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80039e4:	f7ff ff06 	bl	80037f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80039e8:	210d      	movs	r1, #13
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 faa8 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4619      	mov	r1, r3
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 faa0 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4619      	mov	r1, r3
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fa9a 	bl	8003f40 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	82bb      	strh	r3, [r7, #20]
 8003a10:	e00a      	b.n	8003a28 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003a12:	8abb      	ldrh	r3, [r7, #20]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fa8f 	bl	8003f40 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003a22:	8abb      	ldrh	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	82bb      	strh	r3, [r7, #20]
 8003a28:	8aba      	ldrh	r2, [r7, #20]
 8003a2a:	893b      	ldrh	r3, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3f0      	bcc.n	8003a12 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a30:	f7ff fed0 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fb55 	bl	80040e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
 8003a46:	e001      	b.n	8003a4c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	715a      	strb	r2, [r3, #5]

    return status;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	e000      	b.n	8003a5e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b088      	sub	sp, #32
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	461a      	mov	r2, r3
 8003a72:	460b      	mov	r3, r1
 8003a74:	817b      	strh	r3, [r7, #10]
 8003a76:	4613      	mov	r3, r2
 8003a78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	799b      	ldrb	r3, [r3, #6]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d14a      	bne.n	8003b1e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	795b      	ldrb	r3, [r3, #5]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e045      	b.n	8003b20 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fafe 	bl	800409c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003aa0:	f7ff fea8 	bl	80037f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003aa4:	211d      	movs	r1, #29
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa4a 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003aac:	897b      	ldrh	r3, [r7, #10]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa42 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003abc:	897b      	ldrh	r3, [r7, #10]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fa3c 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fa38 	bl	8003f40 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	82fb      	strh	r3, [r7, #22]
 8003ad4:	e009      	b.n	8003aea <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa87 	bl	8003fec <SUBGHZSPI_Receive>
      pData++;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003ae4:	8afb      	ldrh	r3, [r7, #22]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	82fb      	strh	r3, [r7, #22]
 8003aea:	8afa      	ldrh	r2, [r7, #22]
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d3f1      	bcc.n	8003ad6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003af2:	f7ff fe6f 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 faf4 	bl	80040e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e001      	b.n	8003b0e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	715a      	strb	r2, [r3, #5]

    return status;
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
 8003b1c:	e000      	b.n	8003b20 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	461a      	mov	r2, r3
 8003b34:	460b      	mov	r3, r1
 8003b36:	72fb      	strb	r3, [r7, #11]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	799b      	ldrb	r3, [r3, #6]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d14a      	bne.n	8003bdc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	795b      	ldrb	r3, [r3, #5]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e045      	b.n	8003bde <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa9f 	bl	800409c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	2b84      	cmp	r3, #132	@ 0x84
 8003b62:	d002      	beq.n	8003b6a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003b64:	7afb      	ldrb	r3, [r7, #11]
 8003b66:	2b94      	cmp	r3, #148	@ 0x94
 8003b68:	d103      	bne.n	8003b72 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	711a      	strb	r2, [r3, #4]
 8003b70:	e002      	b.n	8003b78 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b78:	f7ff fe3c 	bl	80037f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f9dd 	bl	8003f40 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	82bb      	strh	r3, [r7, #20]
 8003b8a:	e00a      	b.n	8003ba2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003b8c:	8abb      	ldrh	r3, [r7, #20]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	4619      	mov	r1, r3
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f9d2 	bl	8003f40 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003b9c:	8abb      	ldrh	r3, [r7, #20]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	82bb      	strh	r3, [r7, #20]
 8003ba2:	8aba      	ldrh	r2, [r7, #20]
 8003ba4:	893b      	ldrh	r3, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3f0      	bcc.n	8003b8c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003baa:	f7ff fe13 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	2b84      	cmp	r3, #132	@ 0x84
 8003bb2:	d002      	beq.n	8003bba <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fa95 	bl	80040e4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
 8003bc6:	e001      	b.n	8003bcc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	715a      	strb	r2, [r3, #5]

    return status;
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	e000      	b.n	8003bde <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	72fb      	strb	r3, [r7, #11]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	799b      	ldrb	r3, [r3, #6]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d13d      	bne.n	8003c84 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	795b      	ldrb	r3, [r3, #5]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e038      	b.n	8003c86 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa3e 	bl	800409c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c20:	f7ff fde8 	bl	80037f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	4619      	mov	r1, r3
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f989 	bl	8003f40 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003c2e:	2100      	movs	r1, #0
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f985 	bl	8003f40 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	82fb      	strh	r3, [r7, #22]
 8003c3a:	e009      	b.n	8003c50 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003c3c:	69b9      	ldr	r1, [r7, #24]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f9d4 	bl	8003fec <SUBGHZSPI_Receive>
      pData++;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003c4a:	8afb      	ldrh	r3, [r7, #22]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	82fb      	strh	r3, [r7, #22]
 8003c50:	8afa      	ldrh	r2, [r7, #22]
 8003c52:	893b      	ldrh	r3, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d3f1      	bcc.n	8003c3c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c58:	f7ff fdbc 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fa41 	bl	80040e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	77fb      	strb	r3, [r7, #31]
 8003c6e:	e001      	b.n	8003c74 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	715a      	strb	r2, [r3, #5]

    return status;
 8003c80:	7ffb      	ldrb	r3, [r7, #31]
 8003c82:	e000      	b.n	8003c86 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	72fb      	strb	r3, [r7, #11]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	799b      	ldrb	r3, [r3, #6]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d13e      	bne.n	8003d2a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	795b      	ldrb	r3, [r3, #5]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e039      	b.n	8003d2c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9ec 	bl	800409c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cc4:	f7ff fd96 	bl	80037f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003cc8:	210e      	movs	r1, #14
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f938 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f933 	bl	8003f40 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	82bb      	strh	r3, [r7, #20]
 8003cde:	e00a      	b.n	8003cf6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ce0:	8abb      	ldrh	r3, [r7, #20]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f928 	bl	8003f40 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003cf0:	8abb      	ldrh	r3, [r7, #20]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	82bb      	strh	r3, [r7, #20]
 8003cf6:	8aba      	ldrh	r2, [r7, #20]
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d3f0      	bcc.n	8003ce0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003cfe:	f7ff fd69 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f9ee 	bl	80040e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
 8003d14:	e001      	b.n	8003d1a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	715a      	strb	r2, [r3, #5]

    return status;
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	e000      	b.n	8003d2c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	460b      	mov	r3, r1
 8003d42:	72fb      	strb	r3, [r7, #11]
 8003d44:	4613      	mov	r3, r2
 8003d46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	799b      	ldrb	r3, [r3, #6]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d141      	bne.n	8003dda <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	795b      	ldrb	r3, [r3, #5]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e03c      	b.n	8003ddc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f997 	bl	800409c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d6e:	f7ff fd41 	bl	80037f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003d72:	211e      	movs	r1, #30
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f8e3 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f8de 	bl	8003f40 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003d84:	2100      	movs	r1, #0
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f8da 	bl	8003f40 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	82fb      	strh	r3, [r7, #22]
 8003d90:	e009      	b.n	8003da6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f929 	bl	8003fec <SUBGHZSPI_Receive>
      pData++;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003da0:	8afb      	ldrh	r3, [r7, #22]
 8003da2:	3301      	adds	r3, #1
 8003da4:	82fb      	strh	r3, [r7, #22]
 8003da6:	8afa      	ldrh	r2, [r7, #22]
 8003da8:	893b      	ldrh	r3, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3f1      	bcc.n	8003d92 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dae:	f7ff fd11 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f996 	bl	80040e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e001      	b.n	8003dca <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	715a      	strb	r2, [r3, #5]

    return status;
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	e000      	b.n	8003ddc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003dec:	2300      	movs	r3, #0
 8003dee:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003df0:	f107 020c 	add.w	r2, r7, #12
 8003df4:	2302      	movs	r3, #2
 8003df6:	2112      	movs	r1, #18
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fef4 	bl	8003be6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003dfe:	7b3b      	ldrb	r3, [r7, #12]
 8003e00:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	7b7b      	ldrb	r3, [r7, #13]
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b21b      	sxth	r3, r3
 8003e12:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003e14:	f107 020c 	add.w	r2, r7, #12
 8003e18:	2302      	movs	r3, #2
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fe83 	bl	8003b28 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003e22:	89fb      	ldrh	r3, [r7, #14]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fd fd7d 	bl	800192c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003e32:	89fb      	ldrh	r3, [r7, #14]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fd7c 	bl	8001948 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fd fdcb 	bl	80019f8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003e62:	89fb      	ldrh	r3, [r7, #14]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd fdd0 	bl	8001a14 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fd fdd5 	bl	8001a30 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fda2 	bl	80019dc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003e98:	89fb      	ldrh	r3, [r7, #14]
 8003e9a:	099b      	lsrs	r3, r3, #6
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fd fd5d 	bl	8001964 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003eaa:	89fb      	ldrh	r3, [r7, #14]
 8003eac:	09db      	lsrs	r3, r3, #7
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003eb6:	89fb      	ldrh	r3, [r7, #14]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fd fd5b 	bl	8001980 <HAL_SUBGHZ_CADStatusCallback>
 8003eca:	e003      	b.n	8003ed4 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fd56 	bl	8001980 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003ed4:	89fb      	ldrh	r3, [r7, #14]
 8003ed6:	0a5b      	lsrs	r3, r3, #9
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fd fd6b 	bl	80019bc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	0b9b      	lsrs	r3, r3, #14
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fdaa 	bl	8001a4c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <SUBGHZSPI_Init+0x3c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f3c <SUBGHZSPI_Init+0x3c>)
 8003f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f12:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003f14:	4a09      	ldr	r2, [pc, #36]	@ (8003f3c <SUBGHZSPI_Init+0x3c>)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003f1c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003f1e:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <SUBGHZSPI_Init+0x3c>)
 8003f20:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003f24:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f26:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <SUBGHZSPI_Init+0x3c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <SUBGHZSPI_Init+0x3c>)
 8003f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f30:	6013      	str	r3, [r2, #0]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	58010000 	.word	0x58010000

08003f40 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f50:	4b23      	ldr	r3, [pc, #140]	@ (8003fe0 <SUBGHZSPI_Transmit+0xa0>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	0cdb      	lsrs	r3, r3, #19
 8003f5e:	2264      	movs	r2, #100	@ 0x64
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	609a      	str	r2, [r3, #8]
      break;
 8003f76:	e008      	b.n	8003f8a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003f7e:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <SUBGHZSPI_Transmit+0xa4>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d1ed      	bne.n	8003f66 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003f8a:	4b17      	ldr	r3, [pc, #92]	@ (8003fe8 <SUBGHZSPI_Transmit+0xa8>)
 8003f8c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f94:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <SUBGHZSPI_Transmit+0xa0>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	0cdb      	lsrs	r3, r3, #19
 8003fa2:	2264      	movs	r2, #100	@ 0x64
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	609a      	str	r2, [r3, #8]
      break;
 8003fba:	e008      	b.n	8003fce <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003fc2:	4b08      	ldr	r3, [pc, #32]	@ (8003fe4 <SUBGHZSPI_Transmit+0xa4>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d1ed      	bne.n	8003faa <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003fce:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <SUBGHZSPI_Transmit+0xa4>)
 8003fd0:	68db      	ldr	r3, [r3, #12]

  return status;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	58010000 	.word	0x58010000
 8003fe8:	5801000c 	.word	0x5801000c

08003fec <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ffa:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <SUBGHZSPI_Receive+0xa4>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	0cdb      	lsrs	r3, r3, #19
 8004008:	2264      	movs	r2, #100	@ 0x64
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	609a      	str	r2, [r3, #8]
      break;
 8004020:	e008      	b.n	8004034 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b01      	subs	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004028:	4b1a      	ldr	r3, [pc, #104]	@ (8004094 <SUBGHZSPI_Receive+0xa8>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d1ed      	bne.n	8004010 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004034:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <SUBGHZSPI_Receive+0xac>)
 8004036:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	22ff      	movs	r2, #255	@ 0xff
 800403c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800403e:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <SUBGHZSPI_Receive+0xa4>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	0cdb      	lsrs	r3, r3, #19
 800404c:	2264      	movs	r2, #100	@ 0x64
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	609a      	str	r2, [r3, #8]
      break;
 8004064:	e008      	b.n	8004078 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b01      	subs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <SUBGHZSPI_Receive+0xa8>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d1ed      	bne.n	8004054 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <SUBGHZSPI_Receive+0xa8>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	701a      	strb	r2, [r3, #0]

  return status;
 8004082:	7dfb      	ldrb	r3, [r7, #23]
}
 8004084:	4618      	mov	r0, r3
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000000 	.word	0x20000000
 8004094:	58010000 	.word	0x58010000
 8004098:	5801000c 	.word	0x5801000c

0800409c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	791b      	ldrb	r3, [r3, #4]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d111      	bne.n	80040d0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80040ac:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <SUBGHZ_CheckDeviceReady+0x44>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80040bc:	f7ff fb9a 	bl	80037f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f9      	bne.n	80040c0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80040cc:	f7ff fb82 	bl	80037d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f807 	bl	80040e4 <SUBGHZ_WaitOnBusy>
 80040d6:	4603      	mov	r3, r0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000000 	.word	0x20000000

080040e4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80040f0:	4b12      	ldr	r3, [pc, #72]	@ (800413c <SUBGHZ_WaitOnBusy+0x58>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	0d1b      	lsrs	r3, r3, #20
 80040fe:	2264      	movs	r2, #100	@ 0x64
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004106:	f7ff fba3 	bl	8003850 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800410a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	609a      	str	r2, [r3, #8]
      break;
 800411c:	e009      	b.n	8004132 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3b01      	subs	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004124:	f7ff fb82 	bl	800382c <LL_PWR_IsActiveFlag_RFBUSYS>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	2b01      	cmp	r3, #1
 8004130:	d0e9      	beq.n	8004106 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000000 	.word	0x20000000

08004140 <LL_RCC_GetUSARTClockSource>:
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	401a      	ands	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	4313      	orrs	r3, r2
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <LL_RCC_GetLPUARTClockSource>:
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004170:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4013      	ands	r3, r2
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e042      	b.n	800421a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc fbc4 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	@ 0x24
 80041b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb23 	bl	8004818 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8ac 	bl	8004330 <UART_SetConfig>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e01b      	b.n	800421a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004200:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fba1 	bl	800495a <UART_CheckIdleState>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b08a      	sub	sp, #40	@ 0x28
 8004226:	af02      	add	r7, sp, #8
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	2b20      	cmp	r3, #32
 800423a:	d173      	bne.n	8004324 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_UART_Transmit+0x26>
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e06c      	b.n	8004326 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2221      	movs	r2, #33	@ 0x21
 8004258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800425c:	f7fd fc94 	bl	8001b88 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427a:	d108      	bne.n	800428e <HAL_UART_Transmit+0x6c>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e003      	b.n	8004296 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004296:	e02c      	b.n	80042f2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	2180      	movs	r1, #128	@ 0x80
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fba7 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e039      	b.n	8004326 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	3302      	adds	r3, #2
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e007      	b.n	80042e0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1cc      	bne.n	8004298 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	2140      	movs	r1, #64	@ 0x40
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fb74 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e006      	b.n	8004326 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b08c      	sub	sp, #48	@ 0x30
 8004336:	af00      	add	r7, sp, #0
 8004338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	431a      	orrs	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	431a      	orrs	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4313      	orrs	r3, r2
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b94      	ldr	r3, [pc, #592]	@ (80045b0 <UART_SetConfig+0x280>)
 8004360:	4013      	ands	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004368:	430b      	orrs	r3, r1
 800436a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a89      	ldr	r2, [pc, #548]	@ (80045b4 <UART_SetConfig+0x284>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004398:	4313      	orrs	r3, r2
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	f023 010f 	bic.w	r1, r3, #15
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a7a      	ldr	r2, [pc, #488]	@ (80045b8 <UART_SetConfig+0x288>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d127      	bne.n	8004424 <UART_SetConfig+0xf4>
 80043d4:	2003      	movs	r0, #3
 80043d6:	f7ff feb3 	bl	8004140 <LL_RCC_GetUSARTClockSource>
 80043da:	4603      	mov	r3, r0
 80043dc:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d81b      	bhi.n	800441c <UART_SetConfig+0xec>
 80043e4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ec <UART_SetConfig+0xbc>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004415 	.word	0x08004415
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004402:	e080      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440a:	e07c      	b.n	8004506 <UART_SetConfig+0x1d6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004412:	e078      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e074      	b.n	8004506 <UART_SetConfig+0x1d6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004422:	e070      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a64      	ldr	r2, [pc, #400]	@ (80045bc <UART_SetConfig+0x28c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d138      	bne.n	80044a0 <UART_SetConfig+0x170>
 800442e:	200c      	movs	r0, #12
 8004430:	f7ff fe86 	bl	8004140 <LL_RCC_GetUSARTClockSource>
 8004434:	4603      	mov	r3, r0
 8004436:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d82c      	bhi.n	8004498 <UART_SetConfig+0x168>
 800443e:	a201      	add	r2, pc, #4	@ (adr r2, 8004444 <UART_SetConfig+0x114>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004479 	.word	0x08004479
 8004448:	08004499 	.word	0x08004499
 800444c:	08004499 	.word	0x08004499
 8004450:	08004499 	.word	0x08004499
 8004454:	08004489 	.word	0x08004489
 8004458:	08004499 	.word	0x08004499
 800445c:	08004499 	.word	0x08004499
 8004460:	08004499 	.word	0x08004499
 8004464:	08004481 	.word	0x08004481
 8004468:	08004499 	.word	0x08004499
 800446c:	08004499 	.word	0x08004499
 8004470:	08004499 	.word	0x08004499
 8004474:	08004491 	.word	0x08004491
 8004478:	2300      	movs	r3, #0
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447e:	e042      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004480:	2302      	movs	r3, #2
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004486:	e03e      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448e:	e03a      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004496:	e036      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449e:	e032      	b.n	8004506 <UART_SetConfig+0x1d6>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a43      	ldr	r2, [pc, #268]	@ (80045b4 <UART_SetConfig+0x284>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d12a      	bne.n	8004500 <UART_SetConfig+0x1d0>
 80044aa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80044ae:	f7ff fe59 	bl	8004164 <LL_RCC_GetLPUARTClockSource>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044b8:	d01a      	beq.n	80044f0 <UART_SetConfig+0x1c0>
 80044ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044be:	d81b      	bhi.n	80044f8 <UART_SetConfig+0x1c8>
 80044c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c4:	d00c      	beq.n	80044e0 <UART_SetConfig+0x1b0>
 80044c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ca:	d815      	bhi.n	80044f8 <UART_SetConfig+0x1c8>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <UART_SetConfig+0x1a8>
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d4:	d008      	beq.n	80044e8 <UART_SetConfig+0x1b8>
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x1c8>
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044de:	e012      	b.n	8004506 <UART_SetConfig+0x1d6>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e6:	e00e      	b.n	8004506 <UART_SetConfig+0x1d6>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ee:	e00a      	b.n	8004506 <UART_SetConfig+0x1d6>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f6:	e006      	b.n	8004506 <UART_SetConfig+0x1d6>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fe:	e002      	b.n	8004506 <UART_SetConfig+0x1d6>
 8004500:	2310      	movs	r3, #16
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2a      	ldr	r2, [pc, #168]	@ (80045b4 <UART_SetConfig+0x284>)
 800450c:	4293      	cmp	r3, r2
 800450e:	f040 80a4 	bne.w	800465a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004512:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004516:	2b08      	cmp	r3, #8
 8004518:	d823      	bhi.n	8004562 <UART_SetConfig+0x232>
 800451a:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <UART_SetConfig+0x1f0>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004545 	.word	0x08004545
 8004524:	08004563 	.word	0x08004563
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004563 	.word	0x08004563
 8004530:	08004553 	.word	0x08004553
 8004534:	08004563 	.word	0x08004563
 8004538:	08004563 	.word	0x08004563
 800453c:	08004563 	.word	0x08004563
 8004540:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fe fe4e 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 8004548:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800454a:	e010      	b.n	800456e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b1c      	ldr	r3, [pc, #112]	@ (80045c0 <UART_SetConfig+0x290>)
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004550:	e00d      	b.n	800456e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe fd93 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004556:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004558:	e009      	b.n	800456e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004560:	e005      	b.n	800456e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800456c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8137 	beq.w	80047e4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <UART_SetConfig+0x294>)
 800457c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004580:	461a      	mov	r2, r3
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	fbb3 f3f2 	udiv	r3, r3, r2
 8004588:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4413      	add	r3, r2
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d305      	bcc.n	80045a6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d910      	bls.n	80045c8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045ac:	e11a      	b.n	80047e4 <UART_SetConfig+0x4b4>
 80045ae:	bf00      	nop
 80045b0:	cfff69f3 	.word	0xcfff69f3
 80045b4:	40008000 	.word	0x40008000
 80045b8:	40013800 	.word	0x40013800
 80045bc:	40004400 	.word	0x40004400
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	08005de0 	.word	0x08005de0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	2200      	movs	r2, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	60fa      	str	r2, [r7, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004810 <UART_SetConfig+0x4e0>)
 80045d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ea:	f7fb fe21 	bl	8000230 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	020b      	lsls	r3, r1, #8
 8004600:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004604:	0202      	lsls	r2, r0, #8
 8004606:	6979      	ldr	r1, [r7, #20]
 8004608:	6849      	ldr	r1, [r1, #4]
 800460a:	0849      	lsrs	r1, r1, #1
 800460c:	2000      	movs	r0, #0
 800460e:	460c      	mov	r4, r1
 8004610:	4605      	mov	r5, r0
 8004612:	eb12 0804 	adds.w	r8, r2, r4
 8004616:	eb43 0905 	adc.w	r9, r3, r5
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	469a      	mov	sl, r3
 8004622:	4693      	mov	fp, r2
 8004624:	4652      	mov	r2, sl
 8004626:	465b      	mov	r3, fp
 8004628:	4640      	mov	r0, r8
 800462a:	4649      	mov	r1, r9
 800462c:	f7fb fe00 	bl	8000230 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4613      	mov	r3, r2
 8004636:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800463e:	d308      	bcc.n	8004652 <UART_SetConfig+0x322>
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004646:	d204      	bcs.n	8004652 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e0c8      	b.n	80047e4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004658:	e0c4      	b.n	80047e4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004662:	d167      	bne.n	8004734 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004664:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004668:	2b08      	cmp	r3, #8
 800466a:	d828      	bhi.n	80046be <UART_SetConfig+0x38e>
 800466c:	a201      	add	r2, pc, #4	@ (adr r2, 8004674 <UART_SetConfig+0x344>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004699 	.word	0x08004699
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046a9 	.word	0x080046a9
 8004680:	080046bf 	.word	0x080046bf
 8004684:	080046af 	.word	0x080046af
 8004688:	080046bf 	.word	0x080046bf
 800468c:	080046bf 	.word	0x080046bf
 8004690:	080046bf 	.word	0x080046bf
 8004694:	080046b7 	.word	0x080046b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7fe fda4 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 800469c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800469e:	e014      	b.n	80046ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe fdb2 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 80046a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046a6:	e010      	b.n	80046ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004814 <UART_SetConfig+0x4e4>)
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046ac:	e00d      	b.n	80046ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ae:	f7fe fce5 	bl	800307c <HAL_RCC_GetSysClockFreq>
 80046b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046b4:	e009      	b.n	80046ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046bc:	e005      	b.n	80046ca <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8089 	beq.w	80047e4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004810 <UART_SetConfig+0x4e0>)
 80046d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046dc:	461a      	mov	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046e4:	005a      	lsls	r2, r3, #1
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	441a      	add	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d916      	bls.n	800472c <UART_SetConfig+0x3fc>
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004704:	d212      	bcs.n	800472c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f023 030f 	bic.w	r3, r3, #15
 800470e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	b29b      	uxth	r3, r3
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	b29a      	uxth	r2, r3
 800471c:	8bfb      	ldrh	r3, [r7, #30]
 800471e:	4313      	orrs	r3, r2
 8004720:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	8bfa      	ldrh	r2, [r7, #30]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	e05b      	b.n	80047e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004732:	e057      	b.n	80047e4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004734:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004738:	2b08      	cmp	r3, #8
 800473a:	d828      	bhi.n	800478e <UART_SetConfig+0x45e>
 800473c:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <UART_SetConfig+0x414>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004769 	.word	0x08004769
 8004748:	08004771 	.word	0x08004771
 800474c:	08004779 	.word	0x08004779
 8004750:	0800478f 	.word	0x0800478f
 8004754:	0800477f 	.word	0x0800477f
 8004758:	0800478f 	.word	0x0800478f
 800475c:	0800478f 	.word	0x0800478f
 8004760:	0800478f 	.word	0x0800478f
 8004764:	08004787 	.word	0x08004787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7fe fd3c 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 800476c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800476e:	e014      	b.n	800479a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7fe fd4a 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8004774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004776:	e010      	b.n	800479a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004778:	4b26      	ldr	r3, [pc, #152]	@ (8004814 <UART_SetConfig+0x4e4>)
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800477c:	e00d      	b.n	800479a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477e:	f7fe fc7d 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004782:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004784:	e009      	b.n	800479a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800478c:	e005      	b.n	800479a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004798:	bf00      	nop
    }

    if (pclk != 0U)
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d021      	beq.n	80047e4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004810 <UART_SetConfig+0x4e0>)
 80047a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	441a      	add	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d909      	bls.n	80047de <UART_SetConfig+0x4ae>
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d0:	d205      	bcs.n	80047de <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	e002      	b.n	80047e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004800:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004804:	4618      	mov	r0, r3
 8004806:	3730      	adds	r7, #48	@ 0x30
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480e:	bf00      	nop
 8004810:	08005de0 	.word	0x08005de0
 8004814:	00f42400 	.word	0x00f42400

08004818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01a      	beq.n	800492e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004916:	d10a      	bne.n	800492e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]
  }
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af02      	add	r7, sp, #8
 8004960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800496a:	f7fd f90d 	bl	8001b88 <HAL_GetTick>
 800496e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d10e      	bne.n	800499c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800497e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f832 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e028      	b.n	80049ee <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d10e      	bne.n	80049c8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f81c 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e012      	b.n	80049ee <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b09c      	sub	sp, #112	@ 0x70
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a06:	e0af      	b.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	f000 80ab 	beq.w	8004b68 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fd f8b9 	bl	8001b88 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d140      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a38:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004a3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a48:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e6      	bne.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a7a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004a7c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e06f      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d057      	beq.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x172>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b80      	cmp	r3, #128	@ 0x80
 8004abc:	d054      	beq.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x172>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d051      	beq.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad2:	d149      	bne.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004adc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004af2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b30:	623a      	str	r2, [r7, #32]
 8004b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	6a3a      	ldr	r2, [r7, #32]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e010      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	f43f af40 	beq.w	8004a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3770      	adds	r7, #112	@ 0x70
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e027      	b.n	8004bf8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	@ 0x24
 8004bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004bd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e02d      	b.n	8004c76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2224      	movs	r2, #36	@ 0x24
 8004c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f850 	bl	8004cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e02d      	b.n	8004cf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2224      	movs	r2, #36	@ 0x24
 8004ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f812 	bl	8004cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d108      	bne.n	8004d1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d1c:	e031      	b.n	8004d82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d1e:	2308      	movs	r3, #8
 8004d20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d22:	2308      	movs	r3, #8
 8004d24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	0e5b      	lsrs	r3, r3, #25
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	0f5b      	lsrs	r3, r3, #29
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d46:	7bbb      	ldrb	r3, [r7, #14]
 8004d48:	7b3a      	ldrb	r2, [r7, #12]
 8004d4a:	4910      	ldr	r1, [pc, #64]	@ (8004d8c <UARTEx_SetNbDataToProcess+0x90>)
 8004d4c:	5c8a      	ldrb	r2, [r1, r2]
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d52:	7b3a      	ldrb	r2, [r7, #12]
 8004d54:	490e      	ldr	r1, [pc, #56]	@ (8004d90 <UARTEx_SetNbDataToProcess+0x94>)
 8004d56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	7b7a      	ldrb	r2, [r7, #13]
 8004d68:	4908      	ldr	r1, [pc, #32]	@ (8004d8c <UARTEx_SetNbDataToProcess+0x90>)
 8004d6a:	5c8a      	ldrb	r2, [r1, r2]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d70:	7b7a      	ldrb	r2, [r7, #13]
 8004d72:	4907      	ldr	r1, [pc, #28]	@ (8004d90 <UARTEx_SetNbDataToProcess+0x94>)
 8004d74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d76:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	08005df8 	.word	0x08005df8
 8004d90:	08005e00 	.word	0x08005e00

08004d94 <setStateMode>:

/*	Sitting operation mode
 *	0 = STATE_MASTER
 *  1 = STATE_SLAVE
 */
LoRaState setStateMode (uint8_t  mode) {
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
	if (mode == 0) return STATE_MASTER;
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <setStateMode+0x14>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e005      	b.n	8004db4 <setStateMode+0x20>
	if (mode == 1) return STATE_SLAVE;
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <setStateMode+0x1e>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e000      	b.n	8004db4 <setStateMode+0x20>

	return STATE_NULL;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
	...

08004dc0 <getDefaultLoRaConfig>:

LoRaConfig getDefaultLoRaConfig (void) {
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	return (LoRaConfig){
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a04      	ldr	r2, [pc, #16]	@ (8004ddc <getDefaultLoRaConfig+0x1c>)
 8004dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.lora_spreading_factor =7,
		.lora_codingrate = 1,
		.lora_preamble_length = 8,
		.lora_symbol_timeout = 5,
	};
}
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	08005cf0 	.word	0x08005cf0

08004de0 <LoraInit>:
    if (conf.lora_symbol_timeout >= 0) config.lora_symbol_timeout = conf.lora_symbol_timeout;

    return config;
}

void LoraInit(LoRaConfig config) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	@ 0x30
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 8004dec:	4835      	ldr	r0, [pc, #212]	@ (8004ec4 <LoraInit+0xe4>)
 8004dee:	f7fb ff23 	bl	8000c38 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8004df2:	f640 1016 	movw	r0, #2326	@ 0x916
 8004df6:	f7fc fc7f 	bl	80016f8 <SUBGRF_ReadRegister>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	f640 1016 	movw	r0, #2326	@ 0x916
 8004e08:	f7fc fc62 	bl	80016d0 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 8004e0c:	f7fc f84d 	bl	8000eaa <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8004e10:	2100      	movs	r1, #0
 8004e12:	2000      	movs	r0, #0
 8004e14:	f7fc fc18 	bl	8001648 <SUBGRF_SetBufferBaseAddress>

	//Set Operating Frequency and Transmission Power
	SUBGRF_SetRfFrequency(config.rf_frequency);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fc f970 	bl	8001100 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(config.tx_output_power);
 8004e20:	7a3b      	ldrb	r3, [r7, #8]
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fc fd4d 	bl	80018c4 <SUBGRF_SetRfTxPower>

	//Preamble Interrupt Timer Configuration
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7fc f82e 	bl	8000e8c <SUBGRF_SetStopRxTimerOnPreambleDetect>

	//Set Packet Type to LoRa
	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8004e30:	2001      	movs	r0, #1
 8004e32:	f7fc f9ab 	bl	800118c <SUBGRF_SetPacketType>

	//Sync Word Setup
	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8004e36:	2114      	movs	r1, #20
 8004e38:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8004e3c:	f7fc fc48 	bl	80016d0 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8004e40:	2124      	movs	r1, #36	@ 0x24
 8004e42:	f240 7041 	movw	r0, #1857	@ 0x741
 8004e46:	f7fc fc43 	bl	80016d0 <SUBGRF_WriteRegister>
	 * Coding rate: Defined by config.lora_codingrate
	 * Spreading Factor: Defined by config.lora_spreading_factor
	 * Low Data Rate Optimization: Disabled with value 0x00
	 */
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	753b      	strb	r3, [r7, #20]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[config.lora_bandwidth];
 8004e4e:	7a7b      	ldrb	r3, [r7, #9]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <LoraInit+0xe8>)
 8004e54:	5c9b      	ldrb	r3, [r3, r2]
 8004e56:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)config.lora_codingrate;
 8004e5a:	7afb      	ldrb	r3, [r7, #11]
 8004e5c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)config.lora_spreading_factor;
 8004e66:	7abb      	ldrb	r3, [r7, #10]
 8004e68:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	SUBGRF_SetModulationParams(&modulationParams);
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fc fa7f 	bl	8001374 <SUBGRF_SetModulationParams>
	 * CRC Mode: Enables cyclic redundancy checking (CRC) to ensure packet integrity
	 * HeaderType: Defines the packet header type as variable length
	 * InvertIQ: Sets the inversion of IQ polarity (normal)
	 * Preamble Length: Used the value from config.lora_preamble_length
	 */
	packetParams.PacketType = PACKET_TYPE_LORA;
 8004e76:	4b15      	ldr	r3, [pc, #84]	@ (8004ecc <LoraInit+0xec>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8004e7c:	4b13      	ldr	r3, [pc, #76]	@ (8004ecc <LoraInit+0xec>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8004e82:	4b12      	ldr	r3, [pc, #72]	@ (8004ecc <LoraInit+0xec>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8004e88:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <LoraInit+0xec>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ecc <LoraInit+0xec>)
 8004e90:	22ff      	movs	r2, #255	@ 0xff
 8004e92:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = config.lora_preamble_length;
 8004e94:	7b3b      	ldrb	r3, [r7, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <LoraInit+0xec>)
 8004e9a:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8004e9c:	480b      	ldr	r0, [pc, #44]	@ (8004ecc <LoraInit+0xec>)
 8004e9e:	f7fc fb37 	bl	8001510 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8004ea2:	f240 7036 	movw	r0, #1846	@ 0x736
 8004ea6:	f7fc fc27 	bl	80016f8 <SUBGRF_ReadRegister>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f043 0304 	orr.w	r3, r3, #4
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f240 7036 	movw	r0, #1846	@ 0x736
 8004eb8:	f7fc fc0a 	bl	80016d0 <SUBGRF_WriteRegister>
}
 8004ebc:	bf00      	nop
 8004ebe:	3730      	adds	r7, #48	@ 0x30
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	08004ed1 	.word	0x08004ed1
 8004ec8:	08005e08 	.word	0x08005e08
 8004ecc:	20000128 	.word	0x20000128

08004ed0 <RadioOnDioIrq>:

#include "LoRaEvents.h"

volatile LoRaIrqStatus lastEventStatus = IRQ_DEFAULT_RETURN_STATUS;

void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	80fb      	strh	r3, [r7, #6]
	lastEventStatus = LoRaEventHandler(radioIrq);
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f80b 	bl	8004ef8 <LoRaEventHandler>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b03      	ldr	r3, [pc, #12]	@ (8004ef4 <RadioOnDioIrq+0x24>)
 8004ee8:	701a      	strb	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000009 	.word	0x20000009

08004ef8 <LoRaEventHandler>:

LoRaIrqStatus LoRaEventHandler(RadioIrqMasks_t radioIrq) {
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq) {
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f08:	d00f      	beq.n	8004f2a <LoRaEventHandler+0x32>
 8004f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f0e:	dc10      	bgt.n	8004f32 <LoRaEventHandler+0x3a>
 8004f10:	2b40      	cmp	r3, #64	@ 0x40
 8004f12:	d00c      	beq.n	8004f2e <LoRaEventHandler+0x36>
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	dc0c      	bgt.n	8004f32 <LoRaEventHandler+0x3a>
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d002      	beq.n	8004f22 <LoRaEventHandler+0x2a>
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d002      	beq.n	8004f26 <LoRaEventHandler+0x2e>
 8004f20:	e007      	b.n	8004f32 <LoRaEventHandler+0x3a>
        case IRQ_TX_DONE:
            return IRQ_TX_DONE_STATUS;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e006      	b.n	8004f34 <LoRaEventHandler+0x3c>
        case IRQ_RX_DONE:
            return IRQ_RX_DONE_STATUS;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e004      	b.n	8004f34 <LoRaEventHandler+0x3c>
        case IRQ_RX_TX_TIMEOUT:
            return IRQ_RX_TX_TIMEOUT_STATUS;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e002      	b.n	8004f34 <LoRaEventHandler+0x3c>
        case IRQ_CRC_ERROR:
            return IRQ_CRC_ERROR_STATUS;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e000      	b.n	8004f34 <LoRaEventHandler+0x3c>
        default:
            return IRQ_DEFAULT_RETURN_STATUS;
 8004f32:	2399      	movs	r3, #153	@ 0x99
    }
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
	...

08004f40 <getLastLoRaEvent>:

LoRaIrqStatus getLastLoRaEvent(void) {
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
    return lastEventStatus;
 8004f44:	4b03      	ldr	r3, [pc, #12]	@ (8004f54 <getLastLoRaEvent+0x14>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000009 	.word	0x20000009

08004f58 <SendMessage>:
 *      Author: Luiz Fernando Silvério Felisbino
 */

#include "LoRaMessageHandler.h"

LoRaIrqStatus SendMessage(const char *message) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	if (message == NULL || strlen(message) == 0) {
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <SendMessage+0x16>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <SendMessage+0x1a>
		return IRQ_CRC_ERROR_STATUS;  // Invalid message
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e035      	b.n	8004fde <SendMessage+0x86>
	}

	HAL_Delay(100);
 8004f72:	2064      	movs	r0, #100	@ 0x64
 8004f74:	f7fc fe12 	bl	8001b9c <HAL_Delay>

	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f240 2101 	movw	r1, #513	@ 0x201
 8004f80:	f240 2001 	movw	r0, #513	@ 0x201
 8004f84:	f7fc f860 	bl	8001048 <SUBGRF_SetDioIrqParams>
	                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8004f88:	2101      	movs	r1, #1
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f7fc fc72 	bl	8001874 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8004f90:	f640 0089 	movw	r0, #2185	@ 0x889
 8004f94:	f7fc fbb0 	bl	80016f8 <SUBGRF_ReadRegister>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f640 0089 	movw	r0, #2185	@ 0x889
 8004fa6:	f7fc fb93 	bl	80016d0 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = strlen(message);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fb f8e8 	bl	8000180 <strlen>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <SendMessage+0x90>)
 8004fb6:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8004fb8:	480b      	ldr	r0, [pc, #44]	@ (8004fe8 <SendMessage+0x90>)
 8004fba:	f7fc faa9 	bl	8001510 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t *)message, strlen(message), 0);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fb f8de 	bl	8000180 <strlen>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fb fead 	bl	8000d2c <SUBGRF_SendPayload>

	HAL_Delay(200);
 8004fd2:	20c8      	movs	r0, #200	@ 0xc8
 8004fd4:	f7fc fde2 	bl	8001b9c <HAL_Delay>

	return getLastLoRaEvent();
 8004fd8:	f7ff ffb2 	bl	8004f40 <getLastLoRaEvent>
 8004fdc:	4603      	mov	r3, r0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000128 	.word	0x20000128

08004fec <receiveMessage>:

LoRaIrqStatus receiveMessage(char *buffer, uint8_t bufferSize, uint16_t Timeout) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	803b      	strh	r3, [r7, #0]
    if (buffer == NULL || bufferSize <= 0) {
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <receiveMessage+0x1c>
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <receiveMessage+0x20>
        return IRQ_CRC_ERROR_STATUS;  // Invalid buffer
 8005008:	2303      	movs	r3, #3
 800500a:	e030      	b.n	800506e <receiveMessage+0x82>
    }

    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 800500c:	2300      	movs	r3, #0
 800500e:	2200      	movs	r2, #0
 8005010:	f240 2162 	movw	r1, #610	@ 0x262
 8005014:	f240 2062 	movw	r0, #610	@ 0x262
 8005018:	f7fc f816 	bl	8001048 <SUBGRF_SetDioIrqParams>
                           IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE);
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800501c:	2100      	movs	r1, #0
 800501e:	2001      	movs	r0, #1
 8005020:	f7fc fc28 	bl	8001874 <SUBGRF_SetSwitch>
    packetParams.Params.LoRa.PayloadLength = 0xFF;
 8005024:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <receiveMessage+0x8c>)
 8005026:	22ff      	movs	r2, #255	@ 0xff
 8005028:	745a      	strb	r2, [r3, #17]
    SUBGRF_SetPacketParams(&packetParams);
 800502a:	4813      	ldr	r0, [pc, #76]	@ (8005078 <receiveMessage+0x8c>)
 800502c:	f7fc fa70 	bl	8001510 <SUBGRF_SetPacketParams>
    SUBGRF_SetRx(Timeout << 6);
 8005030:	883b      	ldrh	r3, [r7, #0]
 8005032:	019b      	lsls	r3, r3, #6
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb ff09 	bl	8000e4c <SUBGRF_SetRx>

    LoRaIrqStatus event = getLastLoRaEvent();
 800503a:	f7ff ff81 	bl	8004f40 <getLastLoRaEvent>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]

    if (event == IRQ_RX_DONE_STATUS) {
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d111      	bne.n	800506c <receiveMessage+0x80>
    	SUBGRF_GetPayload((uint8_t *)buffer, (uint8_t)bufferSize, 0xFF);
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	22ff      	movs	r2, #255	@ 0xff
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fb fe4a 	bl	8000ce8 <SUBGRF_GetPayload>
    	buffer[bufferSize - 1] = '\0';
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	3b01      	subs	r3, #1
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
    	HAL_Delay(500);
 8005060:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005064:	f7fc fd9a 	bl	8001b9c <HAL_Delay>
        return IRQ_RX_DONE_STATUS;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <receiveMessage+0x82>
    }

    return event;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000128 	.word	0x20000128

0800507c <mainLoRa>:
#define STATE_MODE 0

extern UART_HandleTypeDef huart2;
enum CarState car = STATE_NULL;

void mainLoRa(void) {
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8005082:	af40      	add	r7, sp, #256	@ 0x100
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8005084:	2029      	movs	r0, #41	@ 0x29
 8005086:	f7fc fed0 	bl	8001e2a <HAL_NVIC_DisableIRQ>
    ConfigRES RES;
    LoraInit(getDefaultLoRaConfig());
 800508a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fe96 	bl	8004dc0 <getDefaultLoRaConfig>
 8005094:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005098:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800509c:	f7ff fea0 	bl	8004de0 <LoraInit>
    RES.rxTimeout = 3000;
 80050a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050a8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80050ac:	605a      	str	r2, [r3, #4]
    RES.rxMargin = 200;
 80050ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050b6:	22c8      	movs	r2, #200	@ 0xc8
 80050b8:	609a      	str	r2, [r3, #8]
    RES.state = setStateMode(STATE_MODE);
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7ff fe6a 	bl	8004d94 <setStateMode>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461a      	mov	r2, r3
 80050c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050cc:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 80050ce:	2300      	movs	r3, #0
 80050d0:	2200      	movs	r2, #0
 80050d2:	f240 2142 	movw	r1, #578	@ 0x242
 80050d6:	f240 2042 	movw	r0, #578	@ 0x242
 80050da:	f7fb ffb5 	bl	8001048 <SUBGRF_SetDioIrqParams>
        IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
        IRQ_RADIO_NONE,
        IRQ_RADIO_NONE );
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80050de:	2100      	movs	r1, #0
 80050e0:	2001      	movs	r0, #1
 80050e2:	f7fc fbc7 	bl	8001874 <SUBGRF_SetSwitch>
    SUBGRF_SetRx(RES.rxTimeout << 6);
 80050e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb feaa 	bl	8000e4c <SUBGRF_SetRx>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050f8:	2029      	movs	r0, #41	@ 0x29
 80050fa:	f7fc fe88 	bl	8001e0e <HAL_NVIC_EnableIRQ>

    while(true){
    	if (RES.state == STATE_MASTER) MasterController(RES);
 80050fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005102:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d110      	bne.n	800512e <mainLoRa+0xb2>
 800510c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005110:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 8005114:	4668      	mov	r0, sp
 8005116:	f104 0310 	add.w	r3, r4, #16
 800511a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800511e:	4619      	mov	r1, r3
 8005120:	f000 f982 	bl	8005428 <memcpy>
 8005124:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005128:	f000 f8c8 	bl	80052bc <MasterController>
 800512c:	e7e7      	b.n	80050fe <mainLoRa+0x82>
    	else if (RES.state == STATE_SLAVE) SlaveController(RES);
 800512e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005132:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d1e0      	bne.n	80050fe <mainLoRa+0x82>
 800513c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005140:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 8005144:	4668      	mov	r0, sp
 8005146:	f104 0310 	add.w	r3, r4, #16
 800514a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800514e:	4619      	mov	r1, r3
 8005150:	f000 f96a 	bl	8005428 <memcpy>
 8005154:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005158:	f000 f802 	bl	8005160 <SlaveController>
    	if (RES.state == STATE_MASTER) MasterController(RES);
 800515c:	e7cf      	b.n	80050fe <mainLoRa+0x82>
	...

08005160 <SlaveController>:
void CAN_SEND (){

}

uint8_t teste = 0;
void SlaveController (ConfigRES RES) {
 8005160:	b084      	sub	sp, #16
 8005162:	b580      	push	{r7, lr}
 8005164:	b0c0      	sub	sp, #256	@ 0x100
 8005166:	af00      	add	r7, sp, #0
 8005168:	f507 7c84 	add.w	ip, r7, #264	@ 0x108
 800516c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while (true) {
		receiveMessage(RES.rxBuffer, 20 , RES.rxTimeout);
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005174:	b29a      	uxth	r2, r3
 8005176:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800517a:	2114      	movs	r1, #20
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ff35 	bl	8004fec <receiveMessage>
		char uartBuff[255];
		sprintf(uartBuff, "%s\r\n", &RES.rxBuffer);
 8005182:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8005186:	463b      	mov	r3, r7
 8005188:	4942      	ldr	r1, [pc, #264]	@ (8005294 <SlaveController+0x134>)
 800518a:	4618      	mov	r0, r3
 800518c:	f000 f8e4 	bl	8005358 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8005190:	463b      	mov	r3, r7
 8005192:	4618      	mov	r0, r3
 8005194:	f7fa fff4 	bl	8000180 <strlen>
 8005198:	4603      	mov	r3, r0
 800519a:	b29a      	uxth	r2, r3
 800519c:	4639      	mov	r1, r7
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	483d      	ldr	r0, [pc, #244]	@ (8005298 <SlaveController+0x138>)
 80051a4:	f7ff f83d 	bl	8004222 <HAL_UART_Transmit>
		if (strncmp(RES.rxBuffer, "READY", strlen("READY")) == 0){
 80051a8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80051ac:	2205      	movs	r2, #5
 80051ae:	493b      	ldr	r1, [pc, #236]	@ (800529c <SlaveController+0x13c>)
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f8fb 	bl	80053ac <strncmp>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <SlaveController+0x64>
			teste = 1;
 80051bc:	4b38      	ldr	r3, [pc, #224]	@ (80052a0 <SlaveController+0x140>)
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e062      	b.n	800528a <SlaveController+0x12a>
		} else if (strncmp(RES.rxBuffer, "GO", strlen("GO")) == 0){
 80051c4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80051c8:	2202      	movs	r2, #2
 80051ca:	4936      	ldr	r1, [pc, #216]	@ (80052a4 <SlaveController+0x144>)
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 f8ed 	bl	80053ac <strncmp>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10f      	bne.n	80051f8 <SlaveController+0x98>
			HAL_GPIO_WritePin(EBS_GPIO_Port, EBS_Pin, 1);
 80051d8:	2201      	movs	r2, #1
 80051da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80051de:	4832      	ldr	r0, [pc, #200]	@ (80052a8 <SlaveController+0x148>)
 80051e0:	f7fc ff9e 	bl	8002120 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ShutDown_GPIO_Port, ShutDown_Pin, 1);
 80051e4:	2201      	movs	r2, #1
 80051e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051ea:	482f      	ldr	r0, [pc, #188]	@ (80052a8 <SlaveController+0x148>)
 80051ec:	f7fc ff98 	bl	8002120 <HAL_GPIO_WritePin>
			teste = 2;
 80051f0:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <SlaveController+0x140>)
 80051f2:	2202      	movs	r2, #2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e048      	b.n	800528a <SlaveController+0x12a>
		} else if (strncmp(RES.rxBuffer, "EMERGENCY", strlen("EMERGENCY")) == 0){
 80051f8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80051fc:	2209      	movs	r2, #9
 80051fe:	492b      	ldr	r1, [pc, #172]	@ (80052ac <SlaveController+0x14c>)
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f8d3 	bl	80053ac <strncmp>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d120      	bne.n	800524e <SlaveController+0xee>
			teste = 3;
 800520c:	4b24      	ldr	r3, [pc, #144]	@ (80052a0 <SlaveController+0x140>)
 800520e:	2203      	movs	r2, #3
 8005210:	701a      	strb	r2, [r3, #0]
			sprintf(uartBuff, "Emergency\r\n");
 8005212:	463b      	mov	r3, r7
 8005214:	4926      	ldr	r1, [pc, #152]	@ (80052b0 <SlaveController+0x150>)
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f89e 	bl	8005358 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 800521c:	463b      	mov	r3, r7
 800521e:	4618      	mov	r0, r3
 8005220:	f7fa ffae 	bl	8000180 <strlen>
 8005224:	4603      	mov	r3, r0
 8005226:	b29a      	uxth	r2, r3
 8005228:	4639      	mov	r1, r7
 800522a:	f04f 33ff 	mov.w	r3, #4294967295
 800522e:	481a      	ldr	r0, [pc, #104]	@ (8005298 <SlaveController+0x138>)
 8005230:	f7fe fff7 	bl	8004222 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(EBS_GPIO_Port, EBS_Pin, 0);
 8005234:	2200      	movs	r2, #0
 8005236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800523a:	481b      	ldr	r0, [pc, #108]	@ (80052a8 <SlaveController+0x148>)
 800523c:	f7fc ff70 	bl	8002120 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ShutDown_GPIO_Port, ShutDown_Pin, 0);
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005246:	4818      	ldr	r0, [pc, #96]	@ (80052a8 <SlaveController+0x148>)
 8005248:	f7fc ff6a 	bl	8002120 <HAL_GPIO_WritePin>
 800524c:	e01d      	b.n	800528a <SlaveController+0x12a>
		} else if (strncmp(RES.rxBuffer, "CONNECTED", strlen("CONNECTED")) == 0){
 800524e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005252:	2209      	movs	r2, #9
 8005254:	4917      	ldr	r1, [pc, #92]	@ (80052b4 <SlaveController+0x154>)
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f8a8 	bl	80053ac <strncmp>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d113      	bne.n	800528a <SlaveController+0x12a>
			teste = 4;
 8005262:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <SlaveController+0x140>)
 8005264:	2204      	movs	r2, #4
 8005266:	701a      	strb	r2, [r3, #0]
			sprintf(uartBuff, "Conectado\r\n");
 8005268:	463b      	mov	r3, r7
 800526a:	4913      	ldr	r1, [pc, #76]	@ (80052b8 <SlaveController+0x158>)
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f873 	bl	8005358 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8005272:	463b      	mov	r3, r7
 8005274:	4618      	mov	r0, r3
 8005276:	f7fa ff83 	bl	8000180 <strlen>
 800527a:	4603      	mov	r3, r0
 800527c:	b29a      	uxth	r2, r3
 800527e:	4639      	mov	r1, r7
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	4804      	ldr	r0, [pc, #16]	@ (8005298 <SlaveController+0x138>)
 8005286:	f7fe ffcc 	bl	8004222 <HAL_UART_Transmit>
		}

		RES.rxBuffer[0] = '\0';
 800528a:	2300      	movs	r3, #0
 800528c:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
	while (true) {
 8005290:	e76e      	b.n	8005170 <SlaveController+0x10>
 8005292:	bf00      	nop
 8005294:	08005d08 	.word	0x08005d08
 8005298:	20000088 	.word	0x20000088
 800529c:	08005d10 	.word	0x08005d10
 80052a0:	2000013d 	.word	0x2000013d
 80052a4:	08005d18 	.word	0x08005d18
 80052a8:	48000400 	.word	0x48000400
 80052ac:	08005cfc 	.word	0x08005cfc
 80052b0:	08005d1c 	.word	0x08005d1c
 80052b4:	08005d28 	.word	0x08005d28
 80052b8:	08005d34 	.word	0x08005d34

080052bc <MasterController>:
	}
}

void MasterController (ConfigRES RES) {
 80052bc:	b084      	sub	sp, #16
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	f107 0c10 	add.w	ip, r7, #16
 80052c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SendMessage("CONNECTED");
 80052cc:	481d      	ldr	r0, [pc, #116]	@ (8005344 <MasterController+0x88>)
 80052ce:	f7ff fe43 	bl	8004f58 <SendMessage>
	uint8_t count = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	71fb      	strb	r3, [r7, #7]
	if (car == READY) {
 80052d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005348 <MasterController+0x8c>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10e      	bne.n	80052fc <MasterController+0x40>
		while (count <= 50){
 80052de:	e005      	b.n	80052ec <MasterController+0x30>
			count++;
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	3301      	adds	r3, #1
 80052e4:	71fb      	strb	r3, [r7, #7]
			SendMessage("READY");
 80052e6:	4819      	ldr	r0, [pc, #100]	@ (800534c <MasterController+0x90>)
 80052e8:	f7ff fe36 	bl	8004f58 <SendMessage>
		while (count <= 50){
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	2b32      	cmp	r3, #50	@ 0x32
 80052f0:	d9f6      	bls.n	80052e0 <MasterController+0x24>
		}
		HAL_Delay(2000);
 80052f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80052f6:	f7fc fc51 	bl	8001b9c <HAL_Delay>
		while (count <= 20){
			count++;
			SendMessage("EMERGENCY");
		}
	}
}
 80052fa:	e01c      	b.n	8005336 <MasterController+0x7a>
	} else if (car == GO){
 80052fc:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <MasterController+0x8c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d10a      	bne.n	800531a <MasterController+0x5e>
		while (count <= 20){
 8005304:	e005      	b.n	8005312 <MasterController+0x56>
			count++;
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	3301      	adds	r3, #1
 800530a:	71fb      	strb	r3, [r7, #7]
			SendMessage("GO");
 800530c:	4810      	ldr	r0, [pc, #64]	@ (8005350 <MasterController+0x94>)
 800530e:	f7ff fe23 	bl	8004f58 <SendMessage>
		while (count <= 20){
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	2b14      	cmp	r3, #20
 8005316:	d9f6      	bls.n	8005306 <MasterController+0x4a>
}
 8005318:	e00d      	b.n	8005336 <MasterController+0x7a>
	} else if (car == EMERGENCY){
 800531a:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <MasterController+0x8c>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d109      	bne.n	8005336 <MasterController+0x7a>
		while (count <= 20){
 8005322:	e005      	b.n	8005330 <MasterController+0x74>
			count++;
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	3301      	adds	r3, #1
 8005328:	71fb      	strb	r3, [r7, #7]
			SendMessage("EMERGENCY");
 800532a:	480a      	ldr	r0, [pc, #40]	@ (8005354 <MasterController+0x98>)
 800532c:	f7ff fe14 	bl	8004f58 <SendMessage>
		while (count <= 20){
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	2b14      	cmp	r3, #20
 8005334:	d9f6      	bls.n	8005324 <MasterController+0x68>
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005340:	b004      	add	sp, #16
 8005342:	4770      	bx	lr
 8005344:	08005d28 	.word	0x08005d28
 8005348:	2000013c 	.word	0x2000013c
 800534c:	08005d10 	.word	0x08005d10
 8005350:	08005d18 	.word	0x08005d18
 8005354:	08005cfc 	.word	0x08005cfc

08005358 <siprintf>:
 8005358:	b40e      	push	{r1, r2, r3}
 800535a:	b510      	push	{r4, lr}
 800535c:	b09d      	sub	sp, #116	@ 0x74
 800535e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005360:	9002      	str	r0, [sp, #8]
 8005362:	9006      	str	r0, [sp, #24]
 8005364:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005368:	480a      	ldr	r0, [pc, #40]	@ (8005394 <siprintf+0x3c>)
 800536a:	9107      	str	r1, [sp, #28]
 800536c:	9104      	str	r1, [sp, #16]
 800536e:	490a      	ldr	r1, [pc, #40]	@ (8005398 <siprintf+0x40>)
 8005370:	f853 2b04 	ldr.w	r2, [r3], #4
 8005374:	9105      	str	r1, [sp, #20]
 8005376:	2400      	movs	r4, #0
 8005378:	a902      	add	r1, sp, #8
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005380:	f000 f9b4 	bl	80056ec <_svfiprintf_r>
 8005384:	9b02      	ldr	r3, [sp, #8]
 8005386:	701c      	strb	r4, [r3, #0]
 8005388:	b01d      	add	sp, #116	@ 0x74
 800538a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538e:	b003      	add	sp, #12
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	2000000c 	.word	0x2000000c
 8005398:	ffff0208 	.word	0xffff0208

0800539c <memset>:
 800539c:	4402      	add	r2, r0
 800539e:	4603      	mov	r3, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d100      	bne.n	80053a6 <memset+0xa>
 80053a4:	4770      	bx	lr
 80053a6:	f803 1b01 	strb.w	r1, [r3], #1
 80053aa:	e7f9      	b.n	80053a0 <memset+0x4>

080053ac <strncmp>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	b16a      	cbz	r2, 80053cc <strncmp+0x20>
 80053b0:	3901      	subs	r1, #1
 80053b2:	1884      	adds	r4, r0, r2
 80053b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80053bc:	429a      	cmp	r2, r3
 80053be:	d103      	bne.n	80053c8 <strncmp+0x1c>
 80053c0:	42a0      	cmp	r0, r4
 80053c2:	d001      	beq.n	80053c8 <strncmp+0x1c>
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d1f5      	bne.n	80053b4 <strncmp+0x8>
 80053c8:	1ad0      	subs	r0, r2, r3
 80053ca:	bd10      	pop	{r4, pc}
 80053cc:	4610      	mov	r0, r2
 80053ce:	e7fc      	b.n	80053ca <strncmp+0x1e>

080053d0 <__errno>:
 80053d0:	4b01      	ldr	r3, [pc, #4]	@ (80053d8 <__errno+0x8>)
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	2000000c 	.word	0x2000000c

080053dc <__libc_init_array>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	4d0d      	ldr	r5, [pc, #52]	@ (8005414 <__libc_init_array+0x38>)
 80053e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005418 <__libc_init_array+0x3c>)
 80053e2:	1b64      	subs	r4, r4, r5
 80053e4:	10a4      	asrs	r4, r4, #2
 80053e6:	2600      	movs	r6, #0
 80053e8:	42a6      	cmp	r6, r4
 80053ea:	d109      	bne.n	8005400 <__libc_init_array+0x24>
 80053ec:	4d0b      	ldr	r5, [pc, #44]	@ (800541c <__libc_init_array+0x40>)
 80053ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005420 <__libc_init_array+0x44>)
 80053f0:	f000 fc64 	bl	8005cbc <_init>
 80053f4:	1b64      	subs	r4, r4, r5
 80053f6:	10a4      	asrs	r4, r4, #2
 80053f8:	2600      	movs	r6, #0
 80053fa:	42a6      	cmp	r6, r4
 80053fc:	d105      	bne.n	800540a <__libc_init_array+0x2e>
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	f855 3b04 	ldr.w	r3, [r5], #4
 8005404:	4798      	blx	r3
 8005406:	3601      	adds	r6, #1
 8005408:	e7ee      	b.n	80053e8 <__libc_init_array+0xc>
 800540a:	f855 3b04 	ldr.w	r3, [r5], #4
 800540e:	4798      	blx	r3
 8005410:	3601      	adds	r6, #1
 8005412:	e7f2      	b.n	80053fa <__libc_init_array+0x1e>
 8005414:	08005e48 	.word	0x08005e48
 8005418:	08005e48 	.word	0x08005e48
 800541c:	08005e48 	.word	0x08005e48
 8005420:	08005e4c 	.word	0x08005e4c

08005424 <__retarget_lock_acquire_recursive>:
 8005424:	4770      	bx	lr

08005426 <__retarget_lock_release_recursive>:
 8005426:	4770      	bx	lr

08005428 <memcpy>:
 8005428:	440a      	add	r2, r1
 800542a:	4291      	cmp	r1, r2
 800542c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005430:	d100      	bne.n	8005434 <memcpy+0xc>
 8005432:	4770      	bx	lr
 8005434:	b510      	push	{r4, lr}
 8005436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800543a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800543e:	4291      	cmp	r1, r2
 8005440:	d1f9      	bne.n	8005436 <memcpy+0xe>
 8005442:	bd10      	pop	{r4, pc}

08005444 <_free_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4605      	mov	r5, r0
 8005448:	2900      	cmp	r1, #0
 800544a:	d041      	beq.n	80054d0 <_free_r+0x8c>
 800544c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005450:	1f0c      	subs	r4, r1, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	bfb8      	it	lt
 8005456:	18e4      	addlt	r4, r4, r3
 8005458:	f000 f8e0 	bl	800561c <__malloc_lock>
 800545c:	4a1d      	ldr	r2, [pc, #116]	@ (80054d4 <_free_r+0x90>)
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	b933      	cbnz	r3, 8005470 <_free_r+0x2c>
 8005462:	6063      	str	r3, [r4, #4]
 8005464:	6014      	str	r4, [r2, #0]
 8005466:	4628      	mov	r0, r5
 8005468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800546c:	f000 b8dc 	b.w	8005628 <__malloc_unlock>
 8005470:	42a3      	cmp	r3, r4
 8005472:	d908      	bls.n	8005486 <_free_r+0x42>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	1821      	adds	r1, r4, r0
 8005478:	428b      	cmp	r3, r1
 800547a:	bf01      	itttt	eq
 800547c:	6819      	ldreq	r1, [r3, #0]
 800547e:	685b      	ldreq	r3, [r3, #4]
 8005480:	1809      	addeq	r1, r1, r0
 8005482:	6021      	streq	r1, [r4, #0]
 8005484:	e7ed      	b.n	8005462 <_free_r+0x1e>
 8005486:	461a      	mov	r2, r3
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	b10b      	cbz	r3, 8005490 <_free_r+0x4c>
 800548c:	42a3      	cmp	r3, r4
 800548e:	d9fa      	bls.n	8005486 <_free_r+0x42>
 8005490:	6811      	ldr	r1, [r2, #0]
 8005492:	1850      	adds	r0, r2, r1
 8005494:	42a0      	cmp	r0, r4
 8005496:	d10b      	bne.n	80054b0 <_free_r+0x6c>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	4401      	add	r1, r0
 800549c:	1850      	adds	r0, r2, r1
 800549e:	4283      	cmp	r3, r0
 80054a0:	6011      	str	r1, [r2, #0]
 80054a2:	d1e0      	bne.n	8005466 <_free_r+0x22>
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	6053      	str	r3, [r2, #4]
 80054aa:	4408      	add	r0, r1
 80054ac:	6010      	str	r0, [r2, #0]
 80054ae:	e7da      	b.n	8005466 <_free_r+0x22>
 80054b0:	d902      	bls.n	80054b8 <_free_r+0x74>
 80054b2:	230c      	movs	r3, #12
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	e7d6      	b.n	8005466 <_free_r+0x22>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	1821      	adds	r1, r4, r0
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf04      	itt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	6063      	str	r3, [r4, #4]
 80054c6:	bf04      	itt	eq
 80054c8:	1809      	addeq	r1, r1, r0
 80054ca:	6021      	streq	r1, [r4, #0]
 80054cc:	6054      	str	r4, [r2, #4]
 80054ce:	e7ca      	b.n	8005466 <_free_r+0x22>
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
 80054d2:	bf00      	nop
 80054d4:	20000284 	.word	0x20000284

080054d8 <sbrk_aligned>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	4e0f      	ldr	r6, [pc, #60]	@ (8005518 <sbrk_aligned+0x40>)
 80054dc:	460c      	mov	r4, r1
 80054de:	6831      	ldr	r1, [r6, #0]
 80054e0:	4605      	mov	r5, r0
 80054e2:	b911      	cbnz	r1, 80054ea <sbrk_aligned+0x12>
 80054e4:	f000 fba4 	bl	8005c30 <_sbrk_r>
 80054e8:	6030      	str	r0, [r6, #0]
 80054ea:	4621      	mov	r1, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 fb9f 	bl	8005c30 <_sbrk_r>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d103      	bne.n	80054fe <sbrk_aligned+0x26>
 80054f6:	f04f 34ff 	mov.w	r4, #4294967295
 80054fa:	4620      	mov	r0, r4
 80054fc:	bd70      	pop	{r4, r5, r6, pc}
 80054fe:	1cc4      	adds	r4, r0, #3
 8005500:	f024 0403 	bic.w	r4, r4, #3
 8005504:	42a0      	cmp	r0, r4
 8005506:	d0f8      	beq.n	80054fa <sbrk_aligned+0x22>
 8005508:	1a21      	subs	r1, r4, r0
 800550a:	4628      	mov	r0, r5
 800550c:	f000 fb90 	bl	8005c30 <_sbrk_r>
 8005510:	3001      	adds	r0, #1
 8005512:	d1f2      	bne.n	80054fa <sbrk_aligned+0x22>
 8005514:	e7ef      	b.n	80054f6 <sbrk_aligned+0x1e>
 8005516:	bf00      	nop
 8005518:	20000280 	.word	0x20000280

0800551c <_malloc_r>:
 800551c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005520:	1ccd      	adds	r5, r1, #3
 8005522:	f025 0503 	bic.w	r5, r5, #3
 8005526:	3508      	adds	r5, #8
 8005528:	2d0c      	cmp	r5, #12
 800552a:	bf38      	it	cc
 800552c:	250c      	movcc	r5, #12
 800552e:	2d00      	cmp	r5, #0
 8005530:	4606      	mov	r6, r0
 8005532:	db01      	blt.n	8005538 <_malloc_r+0x1c>
 8005534:	42a9      	cmp	r1, r5
 8005536:	d904      	bls.n	8005542 <_malloc_r+0x26>
 8005538:	230c      	movs	r3, #12
 800553a:	6033      	str	r3, [r6, #0]
 800553c:	2000      	movs	r0, #0
 800553e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005618 <_malloc_r+0xfc>
 8005546:	f000 f869 	bl	800561c <__malloc_lock>
 800554a:	f8d8 3000 	ldr.w	r3, [r8]
 800554e:	461c      	mov	r4, r3
 8005550:	bb44      	cbnz	r4, 80055a4 <_malloc_r+0x88>
 8005552:	4629      	mov	r1, r5
 8005554:	4630      	mov	r0, r6
 8005556:	f7ff ffbf 	bl	80054d8 <sbrk_aligned>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	4604      	mov	r4, r0
 800555e:	d158      	bne.n	8005612 <_malloc_r+0xf6>
 8005560:	f8d8 4000 	ldr.w	r4, [r8]
 8005564:	4627      	mov	r7, r4
 8005566:	2f00      	cmp	r7, #0
 8005568:	d143      	bne.n	80055f2 <_malloc_r+0xd6>
 800556a:	2c00      	cmp	r4, #0
 800556c:	d04b      	beq.n	8005606 <_malloc_r+0xea>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	4639      	mov	r1, r7
 8005572:	4630      	mov	r0, r6
 8005574:	eb04 0903 	add.w	r9, r4, r3
 8005578:	f000 fb5a 	bl	8005c30 <_sbrk_r>
 800557c:	4581      	cmp	r9, r0
 800557e:	d142      	bne.n	8005606 <_malloc_r+0xea>
 8005580:	6821      	ldr	r1, [r4, #0]
 8005582:	1a6d      	subs	r5, r5, r1
 8005584:	4629      	mov	r1, r5
 8005586:	4630      	mov	r0, r6
 8005588:	f7ff ffa6 	bl	80054d8 <sbrk_aligned>
 800558c:	3001      	adds	r0, #1
 800558e:	d03a      	beq.n	8005606 <_malloc_r+0xea>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	442b      	add	r3, r5
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	f8d8 3000 	ldr.w	r3, [r8]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	bb62      	cbnz	r2, 80055f8 <_malloc_r+0xdc>
 800559e:	f8c8 7000 	str.w	r7, [r8]
 80055a2:	e00f      	b.n	80055c4 <_malloc_r+0xa8>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	1b52      	subs	r2, r2, r5
 80055a8:	d420      	bmi.n	80055ec <_malloc_r+0xd0>
 80055aa:	2a0b      	cmp	r2, #11
 80055ac:	d917      	bls.n	80055de <_malloc_r+0xc2>
 80055ae:	1961      	adds	r1, r4, r5
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	6025      	str	r5, [r4, #0]
 80055b4:	bf18      	it	ne
 80055b6:	6059      	strne	r1, [r3, #4]
 80055b8:	6863      	ldr	r3, [r4, #4]
 80055ba:	bf08      	it	eq
 80055bc:	f8c8 1000 	streq.w	r1, [r8]
 80055c0:	5162      	str	r2, [r4, r5]
 80055c2:	604b      	str	r3, [r1, #4]
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f82f 	bl	8005628 <__malloc_unlock>
 80055ca:	f104 000b 	add.w	r0, r4, #11
 80055ce:	1d23      	adds	r3, r4, #4
 80055d0:	f020 0007 	bic.w	r0, r0, #7
 80055d4:	1ac2      	subs	r2, r0, r3
 80055d6:	bf1c      	itt	ne
 80055d8:	1a1b      	subne	r3, r3, r0
 80055da:	50a3      	strne	r3, [r4, r2]
 80055dc:	e7af      	b.n	800553e <_malloc_r+0x22>
 80055de:	6862      	ldr	r2, [r4, #4]
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	bf0c      	ite	eq
 80055e4:	f8c8 2000 	streq.w	r2, [r8]
 80055e8:	605a      	strne	r2, [r3, #4]
 80055ea:	e7eb      	b.n	80055c4 <_malloc_r+0xa8>
 80055ec:	4623      	mov	r3, r4
 80055ee:	6864      	ldr	r4, [r4, #4]
 80055f0:	e7ae      	b.n	8005550 <_malloc_r+0x34>
 80055f2:	463c      	mov	r4, r7
 80055f4:	687f      	ldr	r7, [r7, #4]
 80055f6:	e7b6      	b.n	8005566 <_malloc_r+0x4a>
 80055f8:	461a      	mov	r2, r3
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	42a3      	cmp	r3, r4
 80055fe:	d1fb      	bne.n	80055f8 <_malloc_r+0xdc>
 8005600:	2300      	movs	r3, #0
 8005602:	6053      	str	r3, [r2, #4]
 8005604:	e7de      	b.n	80055c4 <_malloc_r+0xa8>
 8005606:	230c      	movs	r3, #12
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	4630      	mov	r0, r6
 800560c:	f000 f80c 	bl	8005628 <__malloc_unlock>
 8005610:	e794      	b.n	800553c <_malloc_r+0x20>
 8005612:	6005      	str	r5, [r0, #0]
 8005614:	e7d6      	b.n	80055c4 <_malloc_r+0xa8>
 8005616:	bf00      	nop
 8005618:	20000284 	.word	0x20000284

0800561c <__malloc_lock>:
 800561c:	4801      	ldr	r0, [pc, #4]	@ (8005624 <__malloc_lock+0x8>)
 800561e:	f7ff bf01 	b.w	8005424 <__retarget_lock_acquire_recursive>
 8005622:	bf00      	nop
 8005624:	2000027c 	.word	0x2000027c

08005628 <__malloc_unlock>:
 8005628:	4801      	ldr	r0, [pc, #4]	@ (8005630 <__malloc_unlock+0x8>)
 800562a:	f7ff befc 	b.w	8005426 <__retarget_lock_release_recursive>
 800562e:	bf00      	nop
 8005630:	2000027c 	.word	0x2000027c

08005634 <__ssputs_r>:
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	688e      	ldr	r6, [r1, #8]
 800563a:	461f      	mov	r7, r3
 800563c:	42be      	cmp	r6, r7
 800563e:	680b      	ldr	r3, [r1, #0]
 8005640:	4682      	mov	sl, r0
 8005642:	460c      	mov	r4, r1
 8005644:	4690      	mov	r8, r2
 8005646:	d82d      	bhi.n	80056a4 <__ssputs_r+0x70>
 8005648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800564c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005650:	d026      	beq.n	80056a0 <__ssputs_r+0x6c>
 8005652:	6965      	ldr	r5, [r4, #20]
 8005654:	6909      	ldr	r1, [r1, #16]
 8005656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800565a:	eba3 0901 	sub.w	r9, r3, r1
 800565e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005662:	1c7b      	adds	r3, r7, #1
 8005664:	444b      	add	r3, r9
 8005666:	106d      	asrs	r5, r5, #1
 8005668:	429d      	cmp	r5, r3
 800566a:	bf38      	it	cc
 800566c:	461d      	movcc	r5, r3
 800566e:	0553      	lsls	r3, r2, #21
 8005670:	d527      	bpl.n	80056c2 <__ssputs_r+0x8e>
 8005672:	4629      	mov	r1, r5
 8005674:	f7ff ff52 	bl	800551c <_malloc_r>
 8005678:	4606      	mov	r6, r0
 800567a:	b360      	cbz	r0, 80056d6 <__ssputs_r+0xa2>
 800567c:	6921      	ldr	r1, [r4, #16]
 800567e:	464a      	mov	r2, r9
 8005680:	f7ff fed2 	bl	8005428 <memcpy>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800568a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	6126      	str	r6, [r4, #16]
 8005692:	6165      	str	r5, [r4, #20]
 8005694:	444e      	add	r6, r9
 8005696:	eba5 0509 	sub.w	r5, r5, r9
 800569a:	6026      	str	r6, [r4, #0]
 800569c:	60a5      	str	r5, [r4, #8]
 800569e:	463e      	mov	r6, r7
 80056a0:	42be      	cmp	r6, r7
 80056a2:	d900      	bls.n	80056a6 <__ssputs_r+0x72>
 80056a4:	463e      	mov	r6, r7
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	4632      	mov	r2, r6
 80056aa:	4641      	mov	r1, r8
 80056ac:	f000 faa6 	bl	8005bfc <memmove>
 80056b0:	68a3      	ldr	r3, [r4, #8]
 80056b2:	1b9b      	subs	r3, r3, r6
 80056b4:	60a3      	str	r3, [r4, #8]
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	4433      	add	r3, r6
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	2000      	movs	r0, #0
 80056be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c2:	462a      	mov	r2, r5
 80056c4:	f000 fac4 	bl	8005c50 <_realloc_r>
 80056c8:	4606      	mov	r6, r0
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d1e0      	bne.n	8005690 <__ssputs_r+0x5c>
 80056ce:	6921      	ldr	r1, [r4, #16]
 80056d0:	4650      	mov	r0, sl
 80056d2:	f7ff feb7 	bl	8005444 <_free_r>
 80056d6:	230c      	movs	r3, #12
 80056d8:	f8ca 3000 	str.w	r3, [sl]
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e7e9      	b.n	80056be <__ssputs_r+0x8a>
	...

080056ec <_svfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	4698      	mov	r8, r3
 80056f2:	898b      	ldrh	r3, [r1, #12]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	b09d      	sub	sp, #116	@ 0x74
 80056f8:	4607      	mov	r7, r0
 80056fa:	460d      	mov	r5, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	d510      	bpl.n	8005722 <_svfiprintf_r+0x36>
 8005700:	690b      	ldr	r3, [r1, #16]
 8005702:	b973      	cbnz	r3, 8005722 <_svfiprintf_r+0x36>
 8005704:	2140      	movs	r1, #64	@ 0x40
 8005706:	f7ff ff09 	bl	800551c <_malloc_r>
 800570a:	6028      	str	r0, [r5, #0]
 800570c:	6128      	str	r0, [r5, #16]
 800570e:	b930      	cbnz	r0, 800571e <_svfiprintf_r+0x32>
 8005710:	230c      	movs	r3, #12
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	b01d      	add	sp, #116	@ 0x74
 800571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571e:	2340      	movs	r3, #64	@ 0x40
 8005720:	616b      	str	r3, [r5, #20]
 8005722:	2300      	movs	r3, #0
 8005724:	9309      	str	r3, [sp, #36]	@ 0x24
 8005726:	2320      	movs	r3, #32
 8005728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800572c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005730:	2330      	movs	r3, #48	@ 0x30
 8005732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058d0 <_svfiprintf_r+0x1e4>
 8005736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800573a:	f04f 0901 	mov.w	r9, #1
 800573e:	4623      	mov	r3, r4
 8005740:	469a      	mov	sl, r3
 8005742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005746:	b10a      	cbz	r2, 800574c <_svfiprintf_r+0x60>
 8005748:	2a25      	cmp	r2, #37	@ 0x25
 800574a:	d1f9      	bne.n	8005740 <_svfiprintf_r+0x54>
 800574c:	ebba 0b04 	subs.w	fp, sl, r4
 8005750:	d00b      	beq.n	800576a <_svfiprintf_r+0x7e>
 8005752:	465b      	mov	r3, fp
 8005754:	4622      	mov	r2, r4
 8005756:	4629      	mov	r1, r5
 8005758:	4638      	mov	r0, r7
 800575a:	f7ff ff6b 	bl	8005634 <__ssputs_r>
 800575e:	3001      	adds	r0, #1
 8005760:	f000 80a7 	beq.w	80058b2 <_svfiprintf_r+0x1c6>
 8005764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005766:	445a      	add	r2, fp
 8005768:	9209      	str	r2, [sp, #36]	@ 0x24
 800576a:	f89a 3000 	ldrb.w	r3, [sl]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 809f 	beq.w	80058b2 <_svfiprintf_r+0x1c6>
 8005774:	2300      	movs	r3, #0
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577e:	f10a 0a01 	add.w	sl, sl, #1
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	9307      	str	r3, [sp, #28]
 8005786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800578a:	931a      	str	r3, [sp, #104]	@ 0x68
 800578c:	4654      	mov	r4, sl
 800578e:	2205      	movs	r2, #5
 8005790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005794:	484e      	ldr	r0, [pc, #312]	@ (80058d0 <_svfiprintf_r+0x1e4>)
 8005796:	f7fa fcfb 	bl	8000190 <memchr>
 800579a:	9a04      	ldr	r2, [sp, #16]
 800579c:	b9d8      	cbnz	r0, 80057d6 <_svfiprintf_r+0xea>
 800579e:	06d0      	lsls	r0, r2, #27
 80057a0:	bf44      	itt	mi
 80057a2:	2320      	movmi	r3, #32
 80057a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057a8:	0711      	lsls	r1, r2, #28
 80057aa:	bf44      	itt	mi
 80057ac:	232b      	movmi	r3, #43	@ 0x2b
 80057ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057b2:	f89a 3000 	ldrb.w	r3, [sl]
 80057b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057b8:	d015      	beq.n	80057e6 <_svfiprintf_r+0xfa>
 80057ba:	9a07      	ldr	r2, [sp, #28]
 80057bc:	4654      	mov	r4, sl
 80057be:	2000      	movs	r0, #0
 80057c0:	f04f 0c0a 	mov.w	ip, #10
 80057c4:	4621      	mov	r1, r4
 80057c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ca:	3b30      	subs	r3, #48	@ 0x30
 80057cc:	2b09      	cmp	r3, #9
 80057ce:	d94b      	bls.n	8005868 <_svfiprintf_r+0x17c>
 80057d0:	b1b0      	cbz	r0, 8005800 <_svfiprintf_r+0x114>
 80057d2:	9207      	str	r2, [sp, #28]
 80057d4:	e014      	b.n	8005800 <_svfiprintf_r+0x114>
 80057d6:	eba0 0308 	sub.w	r3, r0, r8
 80057da:	fa09 f303 	lsl.w	r3, r9, r3
 80057de:	4313      	orrs	r3, r2
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	46a2      	mov	sl, r4
 80057e4:	e7d2      	b.n	800578c <_svfiprintf_r+0xa0>
 80057e6:	9b03      	ldr	r3, [sp, #12]
 80057e8:	1d19      	adds	r1, r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	9103      	str	r1, [sp, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfbb      	ittet	lt
 80057f2:	425b      	neglt	r3, r3
 80057f4:	f042 0202 	orrlt.w	r2, r2, #2
 80057f8:	9307      	strge	r3, [sp, #28]
 80057fa:	9307      	strlt	r3, [sp, #28]
 80057fc:	bfb8      	it	lt
 80057fe:	9204      	strlt	r2, [sp, #16]
 8005800:	7823      	ldrb	r3, [r4, #0]
 8005802:	2b2e      	cmp	r3, #46	@ 0x2e
 8005804:	d10a      	bne.n	800581c <_svfiprintf_r+0x130>
 8005806:	7863      	ldrb	r3, [r4, #1]
 8005808:	2b2a      	cmp	r3, #42	@ 0x2a
 800580a:	d132      	bne.n	8005872 <_svfiprintf_r+0x186>
 800580c:	9b03      	ldr	r3, [sp, #12]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	9203      	str	r2, [sp, #12]
 8005814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005818:	3402      	adds	r4, #2
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80058d4 <_svfiprintf_r+0x1e8>
 8005820:	7821      	ldrb	r1, [r4, #0]
 8005822:	2203      	movs	r2, #3
 8005824:	4650      	mov	r0, sl
 8005826:	f7fa fcb3 	bl	8000190 <memchr>
 800582a:	b138      	cbz	r0, 800583c <_svfiprintf_r+0x150>
 800582c:	9b04      	ldr	r3, [sp, #16]
 800582e:	eba0 000a 	sub.w	r0, r0, sl
 8005832:	2240      	movs	r2, #64	@ 0x40
 8005834:	4082      	lsls	r2, r0
 8005836:	4313      	orrs	r3, r2
 8005838:	3401      	adds	r4, #1
 800583a:	9304      	str	r3, [sp, #16]
 800583c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005840:	4825      	ldr	r0, [pc, #148]	@ (80058d8 <_svfiprintf_r+0x1ec>)
 8005842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005846:	2206      	movs	r2, #6
 8005848:	f7fa fca2 	bl	8000190 <memchr>
 800584c:	2800      	cmp	r0, #0
 800584e:	d036      	beq.n	80058be <_svfiprintf_r+0x1d2>
 8005850:	4b22      	ldr	r3, [pc, #136]	@ (80058dc <_svfiprintf_r+0x1f0>)
 8005852:	bb1b      	cbnz	r3, 800589c <_svfiprintf_r+0x1b0>
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	3307      	adds	r3, #7
 8005858:	f023 0307 	bic.w	r3, r3, #7
 800585c:	3308      	adds	r3, #8
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005862:	4433      	add	r3, r6
 8005864:	9309      	str	r3, [sp, #36]	@ 0x24
 8005866:	e76a      	b.n	800573e <_svfiprintf_r+0x52>
 8005868:	fb0c 3202 	mla	r2, ip, r2, r3
 800586c:	460c      	mov	r4, r1
 800586e:	2001      	movs	r0, #1
 8005870:	e7a8      	b.n	80057c4 <_svfiprintf_r+0xd8>
 8005872:	2300      	movs	r3, #0
 8005874:	3401      	adds	r4, #1
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	4619      	mov	r1, r3
 800587a:	f04f 0c0a 	mov.w	ip, #10
 800587e:	4620      	mov	r0, r4
 8005880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005884:	3a30      	subs	r2, #48	@ 0x30
 8005886:	2a09      	cmp	r2, #9
 8005888:	d903      	bls.n	8005892 <_svfiprintf_r+0x1a6>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0c6      	beq.n	800581c <_svfiprintf_r+0x130>
 800588e:	9105      	str	r1, [sp, #20]
 8005890:	e7c4      	b.n	800581c <_svfiprintf_r+0x130>
 8005892:	fb0c 2101 	mla	r1, ip, r1, r2
 8005896:	4604      	mov	r4, r0
 8005898:	2301      	movs	r3, #1
 800589a:	e7f0      	b.n	800587e <_svfiprintf_r+0x192>
 800589c:	ab03      	add	r3, sp, #12
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	462a      	mov	r2, r5
 80058a2:	4b0f      	ldr	r3, [pc, #60]	@ (80058e0 <_svfiprintf_r+0x1f4>)
 80058a4:	a904      	add	r1, sp, #16
 80058a6:	4638      	mov	r0, r7
 80058a8:	f3af 8000 	nop.w
 80058ac:	1c42      	adds	r2, r0, #1
 80058ae:	4606      	mov	r6, r0
 80058b0:	d1d6      	bne.n	8005860 <_svfiprintf_r+0x174>
 80058b2:	89ab      	ldrh	r3, [r5, #12]
 80058b4:	065b      	lsls	r3, r3, #25
 80058b6:	f53f af2d 	bmi.w	8005714 <_svfiprintf_r+0x28>
 80058ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058bc:	e72c      	b.n	8005718 <_svfiprintf_r+0x2c>
 80058be:	ab03      	add	r3, sp, #12
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	462a      	mov	r2, r5
 80058c4:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <_svfiprintf_r+0x1f4>)
 80058c6:	a904      	add	r1, sp, #16
 80058c8:	4638      	mov	r0, r7
 80058ca:	f000 f879 	bl	80059c0 <_printf_i>
 80058ce:	e7ed      	b.n	80058ac <_svfiprintf_r+0x1c0>
 80058d0:	08005e0b 	.word	0x08005e0b
 80058d4:	08005e11 	.word	0x08005e11
 80058d8:	08005e15 	.word	0x08005e15
 80058dc:	00000000 	.word	0x00000000
 80058e0:	08005635 	.word	0x08005635

080058e4 <_printf_common>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	4616      	mov	r6, r2
 80058ea:	4698      	mov	r8, r3
 80058ec:	688a      	ldr	r2, [r1, #8]
 80058ee:	690b      	ldr	r3, [r1, #16]
 80058f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	bfb8      	it	lt
 80058f8:	4613      	movlt	r3, r2
 80058fa:	6033      	str	r3, [r6, #0]
 80058fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005900:	4607      	mov	r7, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b10a      	cbz	r2, 800590a <_printf_common+0x26>
 8005906:	3301      	adds	r3, #1
 8005908:	6033      	str	r3, [r6, #0]
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	0699      	lsls	r1, r3, #26
 800590e:	bf42      	ittt	mi
 8005910:	6833      	ldrmi	r3, [r6, #0]
 8005912:	3302      	addmi	r3, #2
 8005914:	6033      	strmi	r3, [r6, #0]
 8005916:	6825      	ldr	r5, [r4, #0]
 8005918:	f015 0506 	ands.w	r5, r5, #6
 800591c:	d106      	bne.n	800592c <_printf_common+0x48>
 800591e:	f104 0a19 	add.w	sl, r4, #25
 8005922:	68e3      	ldr	r3, [r4, #12]
 8005924:	6832      	ldr	r2, [r6, #0]
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	42ab      	cmp	r3, r5
 800592a:	dc26      	bgt.n	800597a <_printf_common+0x96>
 800592c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	3b00      	subs	r3, #0
 8005934:	bf18      	it	ne
 8005936:	2301      	movne	r3, #1
 8005938:	0692      	lsls	r2, r2, #26
 800593a:	d42b      	bmi.n	8005994 <_printf_common+0xb0>
 800593c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005940:	4641      	mov	r1, r8
 8005942:	4638      	mov	r0, r7
 8005944:	47c8      	blx	r9
 8005946:	3001      	adds	r0, #1
 8005948:	d01e      	beq.n	8005988 <_printf_common+0xa4>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	6922      	ldr	r2, [r4, #16]
 800594e:	f003 0306 	and.w	r3, r3, #6
 8005952:	2b04      	cmp	r3, #4
 8005954:	bf02      	ittt	eq
 8005956:	68e5      	ldreq	r5, [r4, #12]
 8005958:	6833      	ldreq	r3, [r6, #0]
 800595a:	1aed      	subeq	r5, r5, r3
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	bf0c      	ite	eq
 8005960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005964:	2500      	movne	r5, #0
 8005966:	4293      	cmp	r3, r2
 8005968:	bfc4      	itt	gt
 800596a:	1a9b      	subgt	r3, r3, r2
 800596c:	18ed      	addgt	r5, r5, r3
 800596e:	2600      	movs	r6, #0
 8005970:	341a      	adds	r4, #26
 8005972:	42b5      	cmp	r5, r6
 8005974:	d11a      	bne.n	80059ac <_printf_common+0xc8>
 8005976:	2000      	movs	r0, #0
 8005978:	e008      	b.n	800598c <_printf_common+0xa8>
 800597a:	2301      	movs	r3, #1
 800597c:	4652      	mov	r2, sl
 800597e:	4641      	mov	r1, r8
 8005980:	4638      	mov	r0, r7
 8005982:	47c8      	blx	r9
 8005984:	3001      	adds	r0, #1
 8005986:	d103      	bne.n	8005990 <_printf_common+0xac>
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005990:	3501      	adds	r5, #1
 8005992:	e7c6      	b.n	8005922 <_printf_common+0x3e>
 8005994:	18e1      	adds	r1, r4, r3
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	2030      	movs	r0, #48	@ 0x30
 800599a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800599e:	4422      	add	r2, r4
 80059a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059a8:	3302      	adds	r3, #2
 80059aa:	e7c7      	b.n	800593c <_printf_common+0x58>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4622      	mov	r2, r4
 80059b0:	4641      	mov	r1, r8
 80059b2:	4638      	mov	r0, r7
 80059b4:	47c8      	blx	r9
 80059b6:	3001      	adds	r0, #1
 80059b8:	d0e6      	beq.n	8005988 <_printf_common+0xa4>
 80059ba:	3601      	adds	r6, #1
 80059bc:	e7d9      	b.n	8005972 <_printf_common+0x8e>
	...

080059c0 <_printf_i>:
 80059c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	7e0f      	ldrb	r7, [r1, #24]
 80059c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059c8:	2f78      	cmp	r7, #120	@ 0x78
 80059ca:	4691      	mov	r9, r2
 80059cc:	4680      	mov	r8, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	469a      	mov	sl, r3
 80059d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059d6:	d807      	bhi.n	80059e8 <_printf_i+0x28>
 80059d8:	2f62      	cmp	r7, #98	@ 0x62
 80059da:	d80a      	bhi.n	80059f2 <_printf_i+0x32>
 80059dc:	2f00      	cmp	r7, #0
 80059de:	f000 80d1 	beq.w	8005b84 <_printf_i+0x1c4>
 80059e2:	2f58      	cmp	r7, #88	@ 0x58
 80059e4:	f000 80b8 	beq.w	8005b58 <_printf_i+0x198>
 80059e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059f0:	e03a      	b.n	8005a68 <_printf_i+0xa8>
 80059f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059f6:	2b15      	cmp	r3, #21
 80059f8:	d8f6      	bhi.n	80059e8 <_printf_i+0x28>
 80059fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005a00 <_printf_i+0x40>)
 80059fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a00:	08005a59 	.word	0x08005a59
 8005a04:	08005a6d 	.word	0x08005a6d
 8005a08:	080059e9 	.word	0x080059e9
 8005a0c:	080059e9 	.word	0x080059e9
 8005a10:	080059e9 	.word	0x080059e9
 8005a14:	080059e9 	.word	0x080059e9
 8005a18:	08005a6d 	.word	0x08005a6d
 8005a1c:	080059e9 	.word	0x080059e9
 8005a20:	080059e9 	.word	0x080059e9
 8005a24:	080059e9 	.word	0x080059e9
 8005a28:	080059e9 	.word	0x080059e9
 8005a2c:	08005b6b 	.word	0x08005b6b
 8005a30:	08005a97 	.word	0x08005a97
 8005a34:	08005b25 	.word	0x08005b25
 8005a38:	080059e9 	.word	0x080059e9
 8005a3c:	080059e9 	.word	0x080059e9
 8005a40:	08005b8d 	.word	0x08005b8d
 8005a44:	080059e9 	.word	0x080059e9
 8005a48:	08005a97 	.word	0x08005a97
 8005a4c:	080059e9 	.word	0x080059e9
 8005a50:	080059e9 	.word	0x080059e9
 8005a54:	08005b2d 	.word	0x08005b2d
 8005a58:	6833      	ldr	r3, [r6, #0]
 8005a5a:	1d1a      	adds	r2, r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6032      	str	r2, [r6, #0]
 8005a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e09c      	b.n	8005ba6 <_printf_i+0x1e6>
 8005a6c:	6833      	ldr	r3, [r6, #0]
 8005a6e:	6820      	ldr	r0, [r4, #0]
 8005a70:	1d19      	adds	r1, r3, #4
 8005a72:	6031      	str	r1, [r6, #0]
 8005a74:	0606      	lsls	r6, r0, #24
 8005a76:	d501      	bpl.n	8005a7c <_printf_i+0xbc>
 8005a78:	681d      	ldr	r5, [r3, #0]
 8005a7a:	e003      	b.n	8005a84 <_printf_i+0xc4>
 8005a7c:	0645      	lsls	r5, r0, #25
 8005a7e:	d5fb      	bpl.n	8005a78 <_printf_i+0xb8>
 8005a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a84:	2d00      	cmp	r5, #0
 8005a86:	da03      	bge.n	8005a90 <_printf_i+0xd0>
 8005a88:	232d      	movs	r3, #45	@ 0x2d
 8005a8a:	426d      	negs	r5, r5
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a90:	4858      	ldr	r0, [pc, #352]	@ (8005bf4 <_printf_i+0x234>)
 8005a92:	230a      	movs	r3, #10
 8005a94:	e011      	b.n	8005aba <_printf_i+0xfa>
 8005a96:	6821      	ldr	r1, [r4, #0]
 8005a98:	6833      	ldr	r3, [r6, #0]
 8005a9a:	0608      	lsls	r0, r1, #24
 8005a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005aa0:	d402      	bmi.n	8005aa8 <_printf_i+0xe8>
 8005aa2:	0649      	lsls	r1, r1, #25
 8005aa4:	bf48      	it	mi
 8005aa6:	b2ad      	uxthmi	r5, r5
 8005aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aaa:	4852      	ldr	r0, [pc, #328]	@ (8005bf4 <_printf_i+0x234>)
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	bf14      	ite	ne
 8005ab0:	230a      	movne	r3, #10
 8005ab2:	2308      	moveq	r3, #8
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005aba:	6866      	ldr	r6, [r4, #4]
 8005abc:	60a6      	str	r6, [r4, #8]
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	db05      	blt.n	8005ace <_printf_i+0x10e>
 8005ac2:	6821      	ldr	r1, [r4, #0]
 8005ac4:	432e      	orrs	r6, r5
 8005ac6:	f021 0104 	bic.w	r1, r1, #4
 8005aca:	6021      	str	r1, [r4, #0]
 8005acc:	d04b      	beq.n	8005b66 <_printf_i+0x1a6>
 8005ace:	4616      	mov	r6, r2
 8005ad0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ad4:	fb03 5711 	mls	r7, r3, r1, r5
 8005ad8:	5dc7      	ldrb	r7, [r0, r7]
 8005ada:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ade:	462f      	mov	r7, r5
 8005ae0:	42bb      	cmp	r3, r7
 8005ae2:	460d      	mov	r5, r1
 8005ae4:	d9f4      	bls.n	8005ad0 <_printf_i+0x110>
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d10b      	bne.n	8005b02 <_printf_i+0x142>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	07df      	lsls	r7, r3, #31
 8005aee:	d508      	bpl.n	8005b02 <_printf_i+0x142>
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	6861      	ldr	r1, [r4, #4]
 8005af4:	4299      	cmp	r1, r3
 8005af6:	bfde      	ittt	le
 8005af8:	2330      	movle	r3, #48	@ 0x30
 8005afa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005afe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b02:	1b92      	subs	r2, r2, r6
 8005b04:	6122      	str	r2, [r4, #16]
 8005b06:	f8cd a000 	str.w	sl, [sp]
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	aa03      	add	r2, sp, #12
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4640      	mov	r0, r8
 8005b12:	f7ff fee7 	bl	80058e4 <_printf_common>
 8005b16:	3001      	adds	r0, #1
 8005b18:	d14a      	bne.n	8005bb0 <_printf_i+0x1f0>
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1e:	b004      	add	sp, #16
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	f043 0320 	orr.w	r3, r3, #32
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	4832      	ldr	r0, [pc, #200]	@ (8005bf8 <_printf_i+0x238>)
 8005b2e:	2778      	movs	r7, #120	@ 0x78
 8005b30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	6831      	ldr	r1, [r6, #0]
 8005b38:	061f      	lsls	r7, r3, #24
 8005b3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b3e:	d402      	bmi.n	8005b46 <_printf_i+0x186>
 8005b40:	065f      	lsls	r7, r3, #25
 8005b42:	bf48      	it	mi
 8005b44:	b2ad      	uxthmi	r5, r5
 8005b46:	6031      	str	r1, [r6, #0]
 8005b48:	07d9      	lsls	r1, r3, #31
 8005b4a:	bf44      	itt	mi
 8005b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b50:	6023      	strmi	r3, [r4, #0]
 8005b52:	b11d      	cbz	r5, 8005b5c <_printf_i+0x19c>
 8005b54:	2310      	movs	r3, #16
 8005b56:	e7ad      	b.n	8005ab4 <_printf_i+0xf4>
 8005b58:	4826      	ldr	r0, [pc, #152]	@ (8005bf4 <_printf_i+0x234>)
 8005b5a:	e7e9      	b.n	8005b30 <_printf_i+0x170>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	f023 0320 	bic.w	r3, r3, #32
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	e7f6      	b.n	8005b54 <_printf_i+0x194>
 8005b66:	4616      	mov	r6, r2
 8005b68:	e7bd      	b.n	8005ae6 <_printf_i+0x126>
 8005b6a:	6833      	ldr	r3, [r6, #0]
 8005b6c:	6825      	ldr	r5, [r4, #0]
 8005b6e:	6961      	ldr	r1, [r4, #20]
 8005b70:	1d18      	adds	r0, r3, #4
 8005b72:	6030      	str	r0, [r6, #0]
 8005b74:	062e      	lsls	r6, r5, #24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	d501      	bpl.n	8005b7e <_printf_i+0x1be>
 8005b7a:	6019      	str	r1, [r3, #0]
 8005b7c:	e002      	b.n	8005b84 <_printf_i+0x1c4>
 8005b7e:	0668      	lsls	r0, r5, #25
 8005b80:	d5fb      	bpl.n	8005b7a <_printf_i+0x1ba>
 8005b82:	8019      	strh	r1, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	4616      	mov	r6, r2
 8005b8a:	e7bc      	b.n	8005b06 <_printf_i+0x146>
 8005b8c:	6833      	ldr	r3, [r6, #0]
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	6032      	str	r2, [r6, #0]
 8005b92:	681e      	ldr	r6, [r3, #0]
 8005b94:	6862      	ldr	r2, [r4, #4]
 8005b96:	2100      	movs	r1, #0
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f7fa faf9 	bl	8000190 <memchr>
 8005b9e:	b108      	cbz	r0, 8005ba4 <_printf_i+0x1e4>
 8005ba0:	1b80      	subs	r0, r0, r6
 8005ba2:	6060      	str	r0, [r4, #4]
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bae:	e7aa      	b.n	8005b06 <_printf_i+0x146>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	4632      	mov	r2, r6
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	47d0      	blx	sl
 8005bba:	3001      	adds	r0, #1
 8005bbc:	d0ad      	beq.n	8005b1a <_printf_i+0x15a>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	079b      	lsls	r3, r3, #30
 8005bc2:	d413      	bmi.n	8005bec <_printf_i+0x22c>
 8005bc4:	68e0      	ldr	r0, [r4, #12]
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	4298      	cmp	r0, r3
 8005bca:	bfb8      	it	lt
 8005bcc:	4618      	movlt	r0, r3
 8005bce:	e7a6      	b.n	8005b1e <_printf_i+0x15e>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	47d0      	blx	sl
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d09d      	beq.n	8005b1a <_printf_i+0x15a>
 8005bde:	3501      	adds	r5, #1
 8005be0:	68e3      	ldr	r3, [r4, #12]
 8005be2:	9903      	ldr	r1, [sp, #12]
 8005be4:	1a5b      	subs	r3, r3, r1
 8005be6:	42ab      	cmp	r3, r5
 8005be8:	dcf2      	bgt.n	8005bd0 <_printf_i+0x210>
 8005bea:	e7eb      	b.n	8005bc4 <_printf_i+0x204>
 8005bec:	2500      	movs	r5, #0
 8005bee:	f104 0619 	add.w	r6, r4, #25
 8005bf2:	e7f5      	b.n	8005be0 <_printf_i+0x220>
 8005bf4:	08005e1c 	.word	0x08005e1c
 8005bf8:	08005e2d 	.word	0x08005e2d

08005bfc <memmove>:
 8005bfc:	4288      	cmp	r0, r1
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	eb01 0402 	add.w	r4, r1, r2
 8005c04:	d902      	bls.n	8005c0c <memmove+0x10>
 8005c06:	4284      	cmp	r4, r0
 8005c08:	4623      	mov	r3, r4
 8005c0a:	d807      	bhi.n	8005c1c <memmove+0x20>
 8005c0c:	1e43      	subs	r3, r0, #1
 8005c0e:	42a1      	cmp	r1, r4
 8005c10:	d008      	beq.n	8005c24 <memmove+0x28>
 8005c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c1a:	e7f8      	b.n	8005c0e <memmove+0x12>
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4601      	mov	r1, r0
 8005c20:	428a      	cmp	r2, r1
 8005c22:	d100      	bne.n	8005c26 <memmove+0x2a>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c2e:	e7f7      	b.n	8005c20 <memmove+0x24>

08005c30 <_sbrk_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d06      	ldr	r5, [pc, #24]	@ (8005c4c <_sbrk_r+0x1c>)
 8005c34:	2300      	movs	r3, #0
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	f7fa fdc2 	bl	80007c4 <_sbrk>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_sbrk_r+0x1a>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_sbrk_r+0x1a>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	20000278 	.word	0x20000278

08005c50 <_realloc_r>:
 8005c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c54:	4607      	mov	r7, r0
 8005c56:	4614      	mov	r4, r2
 8005c58:	460d      	mov	r5, r1
 8005c5a:	b921      	cbnz	r1, 8005c66 <_realloc_r+0x16>
 8005c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	4611      	mov	r1, r2
 8005c62:	f7ff bc5b 	b.w	800551c <_malloc_r>
 8005c66:	b92a      	cbnz	r2, 8005c74 <_realloc_r+0x24>
 8005c68:	f7ff fbec 	bl	8005444 <_free_r>
 8005c6c:	4625      	mov	r5, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	f000 f81a 	bl	8005cac <_malloc_usable_size_r>
 8005c78:	4284      	cmp	r4, r0
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	d802      	bhi.n	8005c84 <_realloc_r+0x34>
 8005c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c82:	d8f4      	bhi.n	8005c6e <_realloc_r+0x1e>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4638      	mov	r0, r7
 8005c88:	f7ff fc48 	bl	800551c <_malloc_r>
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	b908      	cbnz	r0, 8005c94 <_realloc_r+0x44>
 8005c90:	4645      	mov	r5, r8
 8005c92:	e7ec      	b.n	8005c6e <_realloc_r+0x1e>
 8005c94:	42b4      	cmp	r4, r6
 8005c96:	4622      	mov	r2, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	bf28      	it	cs
 8005c9c:	4632      	movcs	r2, r6
 8005c9e:	f7ff fbc3 	bl	8005428 <memcpy>
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f7ff fbcd 	bl	8005444 <_free_r>
 8005caa:	e7f1      	b.n	8005c90 <_realloc_r+0x40>

08005cac <_malloc_usable_size_r>:
 8005cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb0:	1f18      	subs	r0, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfbc      	itt	lt
 8005cb6:	580b      	ldrlt	r3, [r1, r0]
 8005cb8:	18c0      	addlt	r0, r0, r3
 8005cba:	4770      	bx	lr

08005cbc <_init>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	bf00      	nop
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr

08005cc8 <_fini>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr
