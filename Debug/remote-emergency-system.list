
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003048  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003180  08003180  00004180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003264  08003264  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003264  08003264  00004264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800326c  0800326c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800326c  0800326c  0000426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003270  08003270  00004270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003274  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003280  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003280  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f337  00000000  00000000  00005036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259b  00000000  00000000  0001436d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00016908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca7  00000000  00000000  000179c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d269  00000000  00000000  0001866f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010884  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b43ce  00000000  00000000  0004615c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa52a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a8  00000000  00000000  000fa570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000fea18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003168 	.word	0x08003168

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003168 	.word	0x08003168

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b96a 	b.w	8000464 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	460c      	mov	r4, r1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d14e      	bne.n	8000252 <__udivmoddi4+0xaa>
 80001b4:	4694      	mov	ip, r2
 80001b6:	458c      	cmp	ip, r1
 80001b8:	4686      	mov	lr, r0
 80001ba:	fab2 f282 	clz	r2, r2
 80001be:	d962      	bls.n	8000286 <__udivmoddi4+0xde>
 80001c0:	b14a      	cbz	r2, 80001d6 <__udivmoddi4+0x2e>
 80001c2:	f1c2 0320 	rsb	r3, r2, #32
 80001c6:	4091      	lsls	r1, r2
 80001c8:	fa20 f303 	lsr.w	r3, r0, r3
 80001cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d0:	4319      	orrs	r1, r3
 80001d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001da:	fa1f f68c 	uxth.w	r6, ip
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001e6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001ee:	fb04 f106 	mul.w	r1, r4, r6
 80001f2:	4299      	cmp	r1, r3
 80001f4:	d90a      	bls.n	800020c <__udivmoddi4+0x64>
 80001f6:	eb1c 0303 	adds.w	r3, ip, r3
 80001fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80001fe:	f080 8112 	bcs.w	8000426 <__udivmoddi4+0x27e>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 810f 	bls.w	8000426 <__udivmoddi4+0x27e>
 8000208:	3c02      	subs	r4, #2
 800020a:	4463      	add	r3, ip
 800020c:	1a59      	subs	r1, r3, r1
 800020e:	fa1f f38e 	uxth.w	r3, lr
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800021e:	fb00 f606 	mul.w	r6, r0, r6
 8000222:	429e      	cmp	r6, r3
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x94>
 8000226:	eb1c 0303 	adds.w	r3, ip, r3
 800022a:	f100 31ff 	add.w	r1, r0, #4294967295
 800022e:	f080 80fc 	bcs.w	800042a <__udivmoddi4+0x282>
 8000232:	429e      	cmp	r6, r3
 8000234:	f240 80f9 	bls.w	800042a <__udivmoddi4+0x282>
 8000238:	4463      	add	r3, ip
 800023a:	3802      	subs	r0, #2
 800023c:	1b9b      	subs	r3, r3, r6
 800023e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000242:	2100      	movs	r1, #0
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa6>
 8000246:	40d3      	lsrs	r3, r2
 8000248:	2200      	movs	r2, #0
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xba>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb4>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa6>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x150>
 800026a:	42a3      	cmp	r3, r4
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xcc>
 800026e:	4290      	cmp	r0, r2
 8000270:	f0c0 80f0 	bcc.w	8000454 <__udivmoddi4+0x2ac>
 8000274:	1a86      	subs	r6, r0, r2
 8000276:	eb64 0303 	sbc.w	r3, r4, r3
 800027a:	2001      	movs	r0, #1
 800027c:	2d00      	cmp	r5, #0
 800027e:	d0e6      	beq.n	800024e <__udivmoddi4+0xa6>
 8000280:	e9c5 6300 	strd	r6, r3, [r5]
 8000284:	e7e3      	b.n	800024e <__udivmoddi4+0xa6>
 8000286:	2a00      	cmp	r2, #0
 8000288:	f040 8090 	bne.w	80003ac <__udivmoddi4+0x204>
 800028c:	eba1 040c 	sub.w	r4, r1, ip
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	fa1f f78c 	uxth.w	r7, ip
 8000298:	2101      	movs	r1, #1
 800029a:	fbb4 f6f8 	udiv	r6, r4, r8
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002aa:	fb07 f006 	mul.w	r0, r7, r6
 80002ae:	4298      	cmp	r0, r3
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0x11c>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x11a>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f200 80cd 	bhi.w	800045c <__udivmoddi4+0x2b4>
 80002c2:	4626      	mov	r6, r4
 80002c4:	1a1c      	subs	r4, r3, r0
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002d6:	fb00 f707 	mul.w	r7, r0, r7
 80002da:	429f      	cmp	r7, r3
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x148>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x146>
 80002e8:	429f      	cmp	r7, r3
 80002ea:	f200 80b0 	bhi.w	800044e <__udivmoddi4+0x2a6>
 80002ee:	4620      	mov	r0, r4
 80002f0:	1bdb      	subs	r3, r3, r7
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x9c>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa20 fc06 	lsr.w	ip, r0, r6
 8000308:	fa04 f301 	lsl.w	r3, r4, r1
 800030c:	ea43 030c 	orr.w	r3, r3, ip
 8000310:	40f4      	lsrs	r4, r6
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	0c38      	lsrs	r0, r7, #16
 8000318:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800031c:	fbb4 fef0 	udiv	lr, r4, r0
 8000320:	fa1f fc87 	uxth.w	ip, r7
 8000324:	fb00 441e 	mls	r4, r0, lr, r4
 8000328:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800032c:	fb0e f90c 	mul.w	r9, lr, ip
 8000330:	45a1      	cmp	r9, r4
 8000332:	fa02 f201 	lsl.w	r2, r2, r1
 8000336:	d90a      	bls.n	800034e <__udivmoddi4+0x1a6>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800033e:	f080 8084 	bcs.w	800044a <__udivmoddi4+0x2a2>
 8000342:	45a1      	cmp	r9, r4
 8000344:	f240 8081 	bls.w	800044a <__udivmoddi4+0x2a2>
 8000348:	f1ae 0e02 	sub.w	lr, lr, #2
 800034c:	443c      	add	r4, r7
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	fa1f f983 	uxth.w	r9, r3
 8000356:	fbb4 f3f0 	udiv	r3, r4, r0
 800035a:	fb00 4413 	mls	r4, r0, r3, r4
 800035e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000362:	fb03 fc0c 	mul.w	ip, r3, ip
 8000366:	45a4      	cmp	ip, r4
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x1d2>
 800036a:	193c      	adds	r4, r7, r4
 800036c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000370:	d267      	bcs.n	8000442 <__udivmoddi4+0x29a>
 8000372:	45a4      	cmp	ip, r4
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0x29a>
 8000376:	3b02      	subs	r3, #2
 8000378:	443c      	add	r4, r7
 800037a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800037e:	fba0 9302 	umull	r9, r3, r0, r2
 8000382:	eba4 040c 	sub.w	r4, r4, ip
 8000386:	429c      	cmp	r4, r3
 8000388:	46ce      	mov	lr, r9
 800038a:	469c      	mov	ip, r3
 800038c:	d351      	bcc.n	8000432 <__udivmoddi4+0x28a>
 800038e:	d04e      	beq.n	800042e <__udivmoddi4+0x286>
 8000390:	b155      	cbz	r5, 80003a8 <__udivmoddi4+0x200>
 8000392:	ebb8 030e 	subs.w	r3, r8, lr
 8000396:	eb64 040c 	sbc.w	r4, r4, ip
 800039a:	fa04 f606 	lsl.w	r6, r4, r6
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	431e      	orrs	r6, r3
 80003a2:	40cc      	lsrs	r4, r1
 80003a4:	e9c5 6400 	strd	r6, r4, [r5]
 80003a8:	2100      	movs	r1, #0
 80003aa:	e750      	b.n	800024e <__udivmoddi4+0xa6>
 80003ac:	f1c2 0320 	rsb	r3, r2, #32
 80003b0:	fa20 f103 	lsr.w	r1, r0, r3
 80003b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b8:	fa24 f303 	lsr.w	r3, r4, r3
 80003bc:	4094      	lsls	r4, r2
 80003be:	430c      	orrs	r4, r1
 80003c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c8:	fa1f f78c 	uxth.w	r7, ip
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3110 	mls	r1, r8, r0, r3
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x24c>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29e>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29e>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x276>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x296>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x296>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e739      	b.n	800029a <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f0      	b.n	800020c <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e706      	b.n	800023c <__udivmoddi4+0x94>
 800042e:	45c8      	cmp	r8, r9
 8000430:	d2ae      	bcs.n	8000390 <__udivmoddi4+0x1e8>
 8000432:	ebb9 0e02 	subs.w	lr, r9, r2
 8000436:	eb63 0c07 	sbc.w	ip, r3, r7
 800043a:	3801      	subs	r0, #1
 800043c:	e7a8      	b.n	8000390 <__udivmoddi4+0x1e8>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x276>
 8000442:	4603      	mov	r3, r0
 8000444:	e799      	b.n	800037a <__udivmoddi4+0x1d2>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x24c>
 800044a:	46d6      	mov	lr, sl
 800044c:	e77f      	b.n	800034e <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74d      	b.n	80002f0 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e70f      	b.n	800027c <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e730      	b.n	80002c4 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048c:	68fb      	ldr	r3, [r7, #12]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ffe3 	bl	8000468 <LL_AHB2_GRP1_EnableClock>

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 f9bd 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f809 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f7ff fff1 	bl	8000498 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80004b6:	f000 f8a7 	bl	8000608 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f8f9 	bl	80006b0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004be:	bf00      	nop
 80004c0:	e7fd      	b.n	80004be <main+0x18>
	...

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b09a      	sub	sp, #104	@ 0x68
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0320 	add.w	r3, r7, #32
 80004ce:	2248      	movs	r2, #72	@ 0x48
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fe1c 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000564 <SystemClock_Config+0xa0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80004f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000564 <SystemClock_Config+0xa0>)
 80004f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <SystemClock_Config+0xa0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000506:	2320      	movs	r3, #32
 8000508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800050e:	2300      	movs	r3, #0
 8000510:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000512:	23b0      	movs	r3, #176	@ 0xb0
 8000514:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000516:	2300      	movs	r3, #0
 8000518:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	4618      	mov	r0, r3
 8000520:	f000 ff0c 	bl	800133c <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800052a:	f000 f81d 	bl	8000568 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800052e:	234f      	movs	r3, #79	@ 0x4f
 8000530:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fa78 	bl	8001a40 <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000556:	f000 f807 	bl	8000568 <Error_Handler>
  }
}
 800055a:	bf00      	nop
 800055c:	3768      	adds	r7, #104	@ 0x68
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	58000400 	.word	0x58000400

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <Error_Handler+0x8>

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <NMI_Handler+0x4>

08000588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <MemManage_Handler+0x4>

08000598 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f984 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80005e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80005e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80005f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_SUBGHZ_Init+0x20>)
 800060e:	2210      	movs	r2, #16
 8000610:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_SUBGHZ_Init+0x20>)
 8000614:	f001 ff54 	bl	80024c0 <HAL_SUBGHZ_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800061e:	f7ff ffa3 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028

0800062c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ffcf 	bl	80005d8 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <LL_AHB2_GRP1_EnableClock>:
{
 800064e:	b480      	push	{r7}
 8000650:	b085      	sub	sp, #20
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800065a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800065c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4313      	orrs	r3, r2
 8000664:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800066a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <LL_APB1_GRP1_EnableClock>:
{
 800067e:	b480      	push	{r7}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800068a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800068c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4313      	orrs	r3, r2
 8000694:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800069a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
	...

080006b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006b6:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <MX_USART2_UART_Init+0x94>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f8:	4811      	ldr	r0, [pc, #68]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 80006fa:	f001 ff86 	bl	800260a <HAL_UART_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000704:	f7ff ff30 	bl	8000568 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	480d      	ldr	r0, [pc, #52]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 800070c:	f002 fc37 	bl	8002f7e <HAL_UARTEx_SetTxFifoThreshold>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000716:	f7ff ff27 	bl	8000568 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4808      	ldr	r0, [pc, #32]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 800071e:	f002 fc6c 	bl	8002ffa <HAL_UARTEx_SetRxFifoThreshold>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000728:	f7ff ff1e 	bl	8000568 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_USART2_UART_Init+0x90>)
 800072e:	f002 fbee 	bl	8002f0e <HAL_UARTEx_DisableFifoMode>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000738:	f7ff ff16 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000034 	.word	0x20000034
 8000744:	40004400 	.word	0x40004400

08000748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	@ 0x58
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2238      	movs	r2, #56	@ 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fcd1 	bl	8003110 <memset>
  if(uartHandle->Instance==USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <HAL_UART_MspInit+0x88>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d126      	bne.n	80007c6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000778:	2302      	movs	r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000780:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fd1a 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000792:	f7ff fee9 	bl	8000568 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800079a:	f7ff ff70 	bl	800067e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff ff55 	bl	800064e <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80007a4:	230c      	movs	r3, #12
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b4:	2307      	movs	r3, #7
 80007b6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c2:	f000 f989 	bl	8000ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007c6:	bf00      	nop
 80007c8:	3758      	adds	r7, #88	@ 0x58
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40004400 	.word	0x40004400

080007d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d4:	480d      	ldr	r0, [pc, #52]	@ (800080c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f7ff ff33 	bl	8000642 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000802:	f002 fc8d 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fe4e 	bl	80004a6 <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   r0, =_estack
 800080c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000818:	08003274 	.word	0x08003274
  ldr r2, =_sbss
 800081c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000820:	200000cc 	.word	0x200000cc

08000824 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000832:	2003      	movs	r0, #3
 8000834:	f000 f91e 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000838:	f001 fae4 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 800083c:	4603      	mov	r3, r0
 800083e:	4a09      	ldr	r2, [pc, #36]	@ (8000864 <HAL_Init+0x3c>)
 8000840:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000842:	200f      	movs	r0, #15
 8000844:	f000 f810 	bl	8000868 <HAL_InitTick>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	e001      	b.n	8000858 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000854:	f7ff fe8e 	bl	8000574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000858:	79fb      	ldrb	r3, [r7, #7]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <HAL_InitTick+0x6c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d024      	beq.n	80008c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800087c:	f001 fac2 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8000880:	4602      	mov	r2, r0
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_InitTick+0x6c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000890:	fbb2 f3f3 	udiv	r3, r2, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f912 	bl	8000abe <HAL_SYSTICK_Config>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10f      	bne.n	80008c0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b0f      	cmp	r3, #15
 80008a4:	d809      	bhi.n	80008ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a6:	2200      	movs	r2, #0
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	f04f 30ff 	mov.w	r0, #4294967295
 80008ae:	f000 f8ec 	bl	8000a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <HAL_InitTick+0x70>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	e007      	b.n	80008ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	e004      	b.n	80008ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e001      	b.n	80008ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x20>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a03      	ldr	r2, [pc, #12]	@ (80008fc <HAL_IncTick+0x20>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	20000008 	.word	0x20000008
 80008fc:	200000c8 	.word	0x200000c8

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	200000c8 	.word	0x200000c8

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800093c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	@ (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	@ (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	@ 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	@ 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff90 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff49 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff60 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff92 	bl	80009cc <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff61 	bl	8000978 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ffb2 	bl	8000a30 <SysTick_Config>
 8000acc:	4603      	mov	r3, r0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae6:	e140      	b.n	8000d6a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	2101      	movs	r1, #1
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8132 	beq.w	8000d64 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d005      	beq.n	8000b18 <HAL_GPIO_Init+0x40>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d130      	bne.n	8000b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	f003 0201 	and.w	r2, r3, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d017      	beq.n	8000bb6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d123      	bne.n	8000c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	08da      	lsrs	r2, r3, #3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3208      	adds	r2, #8
 8000bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	220f      	movs	r2, #15
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f003 0307 	and.w	r3, r3, #7
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	6939      	ldr	r1, [r7, #16]
 8000c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0203 	and.w	r2, r3, #3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 808c 	beq.w	8000d64 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	2207      	movs	r2, #7
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c76:	d00d      	beq.n	8000c94 <HAL_GPIO_Init+0x1bc>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a44      	ldr	r2, [pc, #272]	@ (8000d8c <HAL_GPIO_Init+0x2b4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0x1b8>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a43      	ldr	r2, [pc, #268]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d101      	bne.n	8000c8c <HAL_GPIO_Init+0x1b4>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e004      	b.n	8000c96 <HAL_GPIO_Init+0x1be>
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x1be>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0x1be>
 8000c94:	2300      	movs	r3, #0
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	f002 0203 	and.w	r2, r2, #3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca6:	4938      	ldr	r1, [pc, #224]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cb4:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d02:	4a24      	ldr	r2, [pc, #144]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d0e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000d2e:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000d3c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f47f aeb7 	bne.w	8000ae8 <HAL_GPIO_Init+0x10>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	48000800 	.word	0x48000800
 8000d94:	58000800 	.word	0x58000800

08000d98 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a03      	ldr	r2, [pc, #12]	@ (8000db0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	58000400 	.word	0x58000400

08000db4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <HAL_PWREx_GetVoltageRange+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	58000400 	.word	0x58000400

08000dcc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ddc:	d101      	bne.n	8000de2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	58000400 	.word	0x58000400

08000df0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000e3a:	d101      	bne.n	8000e40 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e5c:	6013      	str	r3, [r2, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e94:	d101      	bne.n	8000e9a <LL_RCC_HSE_IsReady+0x18>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <LL_RCC_HSE_IsReady+0x1a>
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ece:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eee:	d101      	bne.n	8000ef4 <LL_RCC_HSI_IsReady+0x18>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <LL_RCC_HSI_IsReady+0x1a>
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	061b      	lsls	r3, r3, #24
 8000f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d101      	bne.n	8000f3e <LL_RCC_LSE_IsReady+0x18>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <LL_RCC_LSE_IsReady+0x1a>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d101      	bne.n	8000fa0 <LL_RCC_LSI_IsReady+0x18>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <LL_RCC_LSI_IsReady+0x1a>
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6013      	str	r3, [r2, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d101      	bne.n	8000ff8 <LL_RCC_MSI_IsReady+0x16>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <LL_RCC_MSI_IsReady+0x18>
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	2b08      	cmp	r3, #8
 8001012:	d101      	bne.n	8001018 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001044:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800106a:	4313      	orrs	r3, r2
 800106c:	604b      	str	r3, [r1, #4]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f023 0203 	bic.w	r2, r3, #3
 800108a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4313      	orrs	r3, r2
 8001092:	608b      	str	r3, [r1, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 030c 	and.w	r3, r3, #12
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001110:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001114:	f023 020f 	bic.w	r2, r3, #15
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001120:	4313      	orrs	r3, r2
 8001122:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001168:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80011c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001222:	d101      	bne.n	8001228 <LL_RCC_PLL_IsReady+0x18>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <LL_RCC_PLL_IsReady+0x1a>
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0303 	and.w	r3, r3, #3
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800129e:	d101      	bne.n	80012a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012c2:	d101      	bne.n	80012c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80012d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80012de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e6:	d101      	bne.n	80012ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80012fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001308:	d101      	bne.n	800130e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800131c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001326:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800132a:	d101      	bne.n	8001330 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e36f      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	f7ff fea6 	bl	800109e <LL_RCC_GetSysClkSource>
 8001352:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001354:	f7ff ff8f 	bl	8001276 <LL_RCC_PLL_GetMainSource>
 8001358:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80c4 	beq.w	80014f0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x3e>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	2b0c      	cmp	r3, #12
 8001372:	d176      	bne.n	8001462 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d173      	bne.n	8001462 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e353      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x68>
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013a2:	e006      	b.n	80013b2 <HAL_RCC_OscConfig+0x76>
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d222      	bcs.n	80013fc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fd5a 	bl	8001e74 <RCC_SetFlashLatencyFromMSIRange>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e331      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe2b 	bl	8001050 <LL_RCC_MSI_SetCalibTrimming>
 80013fa:	e021      	b.n	8001440 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe12 	bl	8001050 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fd1f 	bl	8001e74 <RCC_SetFlashLatencyFromMSIRange>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e2f6      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001440:	f000 fce0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001444:	4603      	mov	r3, r0
 8001446:	4aa7      	ldr	r2, [pc, #668]	@ (80016e4 <HAL_RCC_OscConfig+0x3a8>)
 8001448:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800144a:	4ba7      	ldr	r3, [pc, #668]	@ (80016e8 <HAL_RCC_OscConfig+0x3ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fa0a 	bl	8000868 <HAL_InitTick>
 8001454:	4603      	mov	r3, r0
 8001456:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001458:	7cfb      	ldrb	r3, [r7, #19]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d047      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800145e:	7cfb      	ldrb	r3, [r7, #19]
 8001460:	e2e5      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d02c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800146a:	f7ff fd9e 	bl	8000faa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800146e:	f7ff fa47 	bl	8000900 <HAL_GetTick>
 8001472:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001476:	f7ff fa43 	bl	8000900 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e2d2      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001488:	f7ff fdab 	bl	8000fe2 <LL_RCC_MSI_IsReady>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f1      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdc7 	bl	8001050 <LL_RCC_MSI_SetCalibTrimming>
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014c4:	f7ff fd7f 	bl	8000fc6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fa1a 	bl	8000900 <HAL_GetTick>
 80014cc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d0:	f7ff fa16 	bl	8000900 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e2a5      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80014e2:	f7ff fd7e 	bl	8000fe2 <LL_RCC_MSI_IsReady>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f1      	bne.n	80014d0 <HAL_RCC_OscConfig+0x194>
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014ee:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d058      	beq.n	80015ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x1d2>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d108      	bne.n	800151a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d105      	bne.n	800151a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d14b      	bne.n	80015ae <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e289      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x204>
 800153a:	f7ff fc86 	bl	8000e4a <LL_RCC_HSE_Enable>
 800153e:	e00d      	b.n	800155c <HAL_RCC_OscConfig+0x220>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001548:	d104      	bne.n	8001554 <HAL_RCC_OscConfig+0x218>
 800154a:	f7ff fc51 	bl	8000df0 <LL_RCC_HSE_EnableTcxo>
 800154e:	f7ff fc7c 	bl	8000e4a <LL_RCC_HSE_Enable>
 8001552:	e003      	b.n	800155c <HAL_RCC_OscConfig+0x220>
 8001554:	f7ff fc87 	bl	8000e66 <LL_RCC_HSE_Disable>
 8001558:	f7ff fc58 	bl	8000e0c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d012      	beq.n	800158a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff f9cc 	bl	8000900 <HAL_GetTick>
 8001568:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff f9c8 	bl	8000900 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e257      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800157e:	f7ff fc80 	bl	8000e82 <LL_RCC_HSE_IsReady>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f1      	beq.n	800156c <HAL_RCC_OscConfig+0x230>
 8001588:	e011      	b.n	80015ae <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff f9b9 	bl	8000900 <HAL_GetTick>
 800158e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001592:	f7ff f9b5 	bl	8000900 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b64      	cmp	r3, #100	@ 0x64
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e244      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80015a4:	f7ff fc6d 	bl	8000e82 <LL_RCC_HSE_IsReady>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d046      	beq.n	8001648 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x290>
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d10e      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d10b      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e22a      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fc8e 	bl	8000efe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015e2:	e031      	b.n	8001648 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d019      	beq.n	8001620 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ec:	f7ff fc5a 	bl	8000ea4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff f986 	bl	8000900 <HAL_GetTick>
 80015f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff f982 	bl	8000900 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e211      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800160a:	f7ff fc67 	bl	8000edc <LL_RCC_HSI_IsReady>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f1      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc70 	bl	8000efe <LL_RCC_HSI_SetCalibTrimming>
 800161e:	e013      	b.n	8001648 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001620:	f7ff fc4e 	bl	8000ec0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff f96c 	bl	8000900 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff f968 	bl	8000900 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1f7      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800163e:	f7ff fc4d 	bl	8000edc <LL_RCC_HSI_IsReady>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f1      	bne.n	800162c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d06e      	beq.n	8001732 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d056      	beq.n	800170a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001664:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	429a      	cmp	r2, r3
 8001672:	d031      	beq.n	80016d8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e1d0      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d013      	beq.n	80016be <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001696:	f7ff fc67 	bl	8000f68 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800169a:	f7ff f931 	bl	8000900 <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff f92d 	bl	8000900 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b11      	cmp	r3, #17
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1bc      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80016b4:	f7ff fc68 	bl	8000f88 <LL_RCC_LSI_IsReady>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f1      	bne.n	80016a2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c6:	f023 0210 	bic.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016d2:	4313      	orrs	r3, r2
 80016d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d8:	f7ff fc36 	bl	8000f48 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff f910 	bl	8000900 <HAL_GetTick>
 80016e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80016e2:	e00c      	b.n	80016fe <HAL_RCC_OscConfig+0x3c2>
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff f908 	bl	8000900 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b11      	cmp	r3, #17
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e197      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80016fe:	f7ff fc43 	bl	8000f88 <LL_RCC_LSI_IsReady>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f1      	beq.n	80016ec <HAL_RCC_OscConfig+0x3b0>
 8001708:	e013      	b.n	8001732 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170a:	f7ff fc2d 	bl	8000f68 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff f8f7 	bl	8000900 <HAL_GetTick>
 8001712:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff f8f3 	bl	8000900 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b11      	cmp	r3, #17
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e182      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001728:	f7ff fc2e 	bl	8000f88 <LL_RCC_LSI_IsReady>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f1      	bne.n	8001716 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80d8 	beq.w	80018f0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001740:	f7ff fb44 	bl	8000dcc <LL_PWR_IsEnabledBkUpAccess>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d113      	bne.n	8001772 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800174a:	f7ff fb25 	bl	8000d98 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff f8d7 	bl	8000900 <HAL_GetTick>
 8001752:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff f8d3 	bl	8000900 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e162      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001768:	f7ff fb30 	bl	8000dcc <LL_PWR_IsEnabledBkUpAccess>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f1      	beq.n	8001756 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d07b      	beq.n	8001872 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b85      	cmp	r3, #133	@ 0x85
 8001780:	d003      	beq.n	800178a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d109      	bne.n	800179e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff f8af 	bl	8000900 <HAL_GetTick>
 80017a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff f8a1 	bl	8000900 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e12e      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80017d0:	f7ff fba9 	bl	8000f26 <LL_RCC_LSE_IsReady>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0ef      	beq.n	80017ba <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b81      	cmp	r3, #129	@ 0x81
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b85      	cmp	r3, #133	@ 0x85
 80017e8:	d121      	bne.n	800182e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f889 	bl	8000900 <HAL_GetTick>
 80017ee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff f87b 	bl	8000900 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e108      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ec      	beq.n	8001806 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800182c:	e060      	b.n	80018f0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f867 	bl	8000900 <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff f859 	bl	8000900 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0e6      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ec      	bne.n	800184a <HAL_RCC_OscConfig+0x50e>
 8001870:	e03e      	b.n	80018f0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f845 	bl	8000900 <HAL_GetTick>
 8001876:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff f837 	bl	8000900 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e0c4      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ec      	bne.n	800188e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff f824 	bl	8000900 <HAL_GetTick>
 80018b8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff f816 	bl	8000900 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0a3      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80018e6:	f7ff fb1e 	bl	8000f26 <LL_RCC_LSE_IsReady>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ef      	bne.n	80018d0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8099 	beq.w	8001a2c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d06c      	beq.n	80019da <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	2b02      	cmp	r3, #2
 8001906:	d14b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	f7ff fc74 	bl	80011f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7fe fff8 	bl	8000900 <HAL_GetTick>
 8001910:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7fe fff4 	bl	8000900 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e083      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001926:	f7ff fc73 	bl	8001210 <LL_RCC_PLL_IsReady>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f1      	bne.n	8001914 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x6fc>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001948:	0212      	lsls	r2, r2, #8
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800195c:	430a      	orrs	r2, r1
 800195e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001962:	4313      	orrs	r3, r2
 8001964:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001966:	f7ff fc37 	bl	80011d8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001978:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7fe ffc1 	bl	8000900 <HAL_GetTick>
 800197e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7fe ffbd 	bl	8000900 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b0a      	cmp	r3, #10
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e04c      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001994:	f7ff fc3c 	bl	8001210 <LL_RCC_PLL_IsReady>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f1      	beq.n	8001982 <HAL_RCC_OscConfig+0x646>
 800199e:	e045      	b.n	8001a2c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	f7ff fc28 	bl	80011f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7fe ffac 	bl	8000900 <HAL_GetTick>
 80019a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7fe ffa8 	bl	8000900 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e037      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80019be:	f7ff fc27 	bl	8001210 <LL_RCC_PLL_IsReady>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f1      	bne.n	80019ac <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_RCC_OscConfig+0x700>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
 80019d8:	e028      	b.n	8001a2c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e023      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d115      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d10e      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d106      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	11c1808c 	.word	0x11c1808c
 8001a3c:	eefefffc 	.word	0xeefefffc

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e12c      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b98      	ldr	r3, [pc, #608]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d91b      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b95      	ldr	r3, [pc, #596]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4993      	ldr	r1, [pc, #588]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a72:	f7fe ff45 	bl	8000900 <HAL_GetTick>
 8001a76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a7a:	f7fe ff41 	bl	8000900 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e110      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d016      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fb02 	bl	80010b4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ab0:	f7fe ff26 	bl	8000900 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ab8:	f7fe ff22 	bl	8000900 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0f1      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001aca:	f7ff fbdf 	bl	800128c <LL_RCC_IsActiveFlag_HPRE>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f1      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d016      	beq.n	8001b0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff faf8 	bl	80010da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001aea:	f7fe ff09 	bl	8000900 <HAL_GetTick>
 8001aee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001af2:	f7fe ff05 	bl	8000900 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0d4      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b04:	f7ff fbd3 	bl	80012ae <LL_RCC_IsActiveFlag_C2HPRE>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f1      	beq.n	8001af2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d016      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff faf0 	bl	8001104 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b24:	f7fe feec 	bl	8000900 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b2c:	f7fe fee8 	bl	8000900 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0b7      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b3e:	f7ff fbc8 	bl	80012d2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f1      	beq.n	8001b2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d016      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fae9 	bl	8001130 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b5e:	f7fe fecf 	bl	8000900 <HAL_GetTick>
 8001b62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b66:	f7fe fecb 	bl	8000900 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e09a      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b78:	f7ff fbbd 	bl	80012f6 <LL_RCC_IsActiveFlag_PPRE1>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f1      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d017      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fade 	bl	8001156 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b9a:	f7fe feb1 	bl	8000900 <HAL_GetTick>
 8001b9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ba2:	f7fe fead 	bl	8000900 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e07c      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001bb4:	f7ff fbb0 	bl	8001318 <LL_RCC_IsActiveFlag_PPRE2>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f1      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d043      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001bd2:	f7ff f956 	bl	8000e82 <LL_RCC_HSE_IsReady>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11e      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e066      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001be8:	f7ff fb12 	bl	8001210 <LL_RCC_PLL_IsReady>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d113      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e05b      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001bfe:	f7ff f9f0 	bl	8000fe2 <LL_RCC_MSI_IsReady>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d108      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e050      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001c0c:	f7ff f966 	bl	8000edc <LL_RCC_HSI_IsReady>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e049      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fa2a 	bl	8001078 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7fe fe6c 	bl	8000900 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7fe fe68 	bl	8000900 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e035      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	f7ff fa2c 	bl	800109e <LL_RCC_GetSysClkSource>
 8001c46:	4602      	mov	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d1ec      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d21b      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c60:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 0207 	bic.w	r2, r3, #7
 8001c68:	4913      	ldr	r1, [pc, #76]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7fe fe46 	bl	8000900 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c78:	f7fe fe42 	bl	8000900 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e011      	b.n	8001cae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1ef      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c98:	f000 f8b4 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <HAL_RCC_ClockConfig+0x27c>)
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <HAL_RCC_ClockConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fdde 	bl	8000868 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	58004000 	.word	0x58004000
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd2:	f7ff f9e4 	bl	800109e <LL_RCC_GetSysClkSource>
 8001cd6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd8:	f7ff facd 	bl	8001276 <LL_RCC_PLL_GetMainSource>
 8001cdc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x2c>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d139      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d136      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001cf0:	f7ff f987 	bl	8001002 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_GetSysClockFreq+0x62>
 8001cfa:	f7ff f982 	bl	8001002 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x4e>
 8001d04:	f7ff f98d 	bl	8001022 <LL_RCC_MSI_GetRange>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x5a>
 8001d12:	f7ff f991 	bl	8001038 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d16:	4603      	mov	r3, r0
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4a36      	ldr	r2, [pc, #216]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x8c>
 8001d26:	f7ff f96c 	bl	8001002 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_GetSysClockFreq+0x7a>
 8001d30:	f7ff f977 	bl	8001022 <LL_RCC_MSI_GetRange>
 8001d34:	4603      	mov	r3, r0
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	e005      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x86>
 8001d3e:	f7ff f97b 	bl	8001038 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d42:	4603      	mov	r3, r0
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d115      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d5c:	e012      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e00c      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d109      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d70:	f7ff f85a 	bl	8000e28 <LL_RCC_HSE_IsEnabledDiv2>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e001      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d82:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	f7ff f98b 	bl	800109e <LL_RCC_GetSysClkSource>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d12f      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001d8e:	f7ff fa72 	bl	8001276 <LL_RCC_PLL_GetMainSource>
 8001d92:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0xde>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d003      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0xe4>
 8001da0:	e00d      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8001da4:	60fb      	str	r3, [r7, #12]
        break;
 8001da6:	e00d      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001da8:	f7ff f83e 	bl	8000e28 <LL_RCC_HSE_IsEnabledDiv2>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8001db4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dba:	60fb      	str	r3, [r7, #12]
        break;
 8001dbc:	e002      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	60fb      	str	r3, [r7, #12]
        break;
 8001dc2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001dc4:	f7ff fa35 	bl	8001232 <LL_RCC_PLL_GetN>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	fb03 f402 	mul.w	r4, r3, r2
 8001dd0:	f7ff fa46 	bl	8001260 <LL_RCC_PLL_GetDivider>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	3301      	adds	r3, #1
 8001dda:	fbb4 f4f3 	udiv	r4, r4, r3
 8001dde:	f7ff fa34 	bl	800124a <LL_RCC_PLL_GetR>
 8001de2:	4603      	mov	r3, r0
 8001de4:	0f5b      	lsrs	r3, r3, #29
 8001de6:	3301      	adds	r3, #1
 8001de8:	fbb4 f3f3 	udiv	r3, r4, r3
 8001dec:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001dee:	697b      	ldr	r3, [r7, #20]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	080031fc 	.word	0x080031fc
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	01e84800 	.word	0x01e84800

08001e04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b598      	push	{r3, r4, r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001e08:	f7ff ff5c 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	f7ff f9b5 	bl	800117c <LL_RCC_GetAHBPrescaler>
 8001e12:	4603      	mov	r3, r0
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a03      	ldr	r2, [pc, #12]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd98      	pop	{r3, r4, r7, pc}
 8001e28:	0800319c 	.word	0x0800319c

08001e2c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b598      	push	{r3, r4, r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e30:	f7ff ffe8 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e34:	4604      	mov	r4, r0
 8001e36:	f7ff f9b9 	bl	80011ac <LL_RCC_GetAPB1Prescaler>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	4a03      	ldr	r2, [pc, #12]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd98      	pop	{r3, r4, r7, pc}
 8001e4c:	080031dc 	.word	0x080031dc

08001e50 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e50:	b598      	push	{r3, r4, r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001e54:	f7ff ffd6 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	f7ff f9b2 	bl	80011c2 <LL_RCC_GetAPB2Prescaler>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	0adb      	lsrs	r3, r3, #11
 8001e62:	4a03      	ldr	r2, [pc, #12]	@ (8001e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd98      	pop	{r3, r4, r7, pc}
 8001e70:	080031dc 	.word	0x080031dc

08001e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	4a10      	ldr	r2, [pc, #64]	@ (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001e8c:	f7ff f981 	bl	8001192 <LL_RCC_GetAHB3Prescaler>
 8001e90:	4603      	mov	r3, r0
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9c      	lsrs	r4, r3, #18
 8001eb0:	f7fe ff80 	bl	8000db4 <HAL_PWREx_GetVoltageRange>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f000 f80b 	bl	8001ed4 <RCC_SetFlashLatency>
 8001ebe:	4603      	mov	r3, r0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd90      	pop	{r4, r7, pc}
 8001ec8:	080031fc 	.word	0x080031fc
 8001ecc:	0800319c 	.word	0x0800319c
 8001ed0:	431bde83 	.word	0x431bde83

08001ed4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08e      	sub	sp, #56	@ 0x38
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001ede:	4a3a      	ldr	r2, [pc, #232]	@ (8001fc8 <RCC_SetFlashLatency+0xf4>)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee8:	6018      	str	r0, [r3, #0]
 8001eea:	3304      	adds	r3, #4
 8001eec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001eee:	4a37      	ldr	r2, [pc, #220]	@ (8001fcc <RCC_SetFlashLatency+0xf8>)
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef8:	6018      	str	r0, [r3, #0]
 8001efa:	3304      	adds	r3, #4
 8001efc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001efe:	4a34      	ldr	r2, [pc, #208]	@ (8001fd0 <RCC_SetFlashLatency+0xfc>)
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f14:	d11b      	bne.n	8001f4e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f1a:	e014      	b.n	8001f46 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	3338      	adds	r3, #56	@ 0x38
 8001f22:	443b      	add	r3, r7
 8001f24:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d807      	bhi.n	8001f40 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3338      	adds	r3, #56	@ 0x38
 8001f36:	443b      	add	r3, r7
 8001f38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001f3e:	e021      	b.n	8001f84 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f42:	3301      	adds	r3, #1
 8001f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d9e7      	bls.n	8001f1c <RCC_SetFlashLatency+0x48>
 8001f4c:	e01a      	b.n	8001f84 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f52:	e014      	b.n	8001f7e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	3338      	adds	r3, #56	@ 0x38
 8001f5a:	443b      	add	r3, r7
 8001f5c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d807      	bhi.n	8001f78 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3338      	adds	r3, #56	@ 0x38
 8001f6e:	443b      	add	r3, r7
 8001f70:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001f76:	e005      	b.n	8001f84 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d9e7      	bls.n	8001f54 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <RCC_SetFlashLatency+0x100>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0207 	bic.w	r2, r3, #7
 8001f8c:	4911      	ldr	r1, [pc, #68]	@ (8001fd4 <RCC_SetFlashLatency+0x100>)
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f94:	f7fe fcb4 	bl	8000900 <HAL_GetTick>
 8001f98:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f9a:	e008      	b.n	8001fae <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f9c:	f7fe fcb0 	bl	8000900 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e007      	b.n	8001fbe <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <RCC_SetFlashLatency+0x100>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1ef      	bne.n	8001f9c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3738      	adds	r7, #56	@ 0x38
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08003180 	.word	0x08003180
 8001fcc:	08003188 	.word	0x08003188
 8001fd0:	08003190 	.word	0x08003190
 8001fd4:	58004000 	.word	0x58004000

08001fd8 <LL_RCC_LSE_IsReady>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d101      	bne.n	8001ff0 <LL_RCC_LSE_IsReady+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_RCC_LSE_IsReady+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_SetUSARTClockSource>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	43db      	mvns	r3, r3
 8002010:	401a      	ands	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	b29b      	uxth	r3, r3
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <LL_RCC_SetI2SClockSource>:
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800203e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <LL_RCC_SetLPUARTClockSource>:
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002068:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <LL_RCC_SetI2CClockSource>:
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002096:	43db      	mvns	r3, r3
 8002098:	401a      	ands	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80020a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <LL_RCC_SetLPTIMClockSource>:
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_SetRNGClockSource>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80020fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <LL_RCC_SetADCClockSource>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002122:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <LL_RCC_SetRTCClockSource>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002150:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <LL_RCC_GetRTCClockSource>:
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <LL_RCC_ForceBackupDomainReset>:
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800218e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <LL_RCC_ReleaseBackupDomainReset>:
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80021cc:	2300      	movs	r3, #0
 80021ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80021d0:	2300      	movs	r3, #0
 80021d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d058      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80021e0:	f7fe fdda 	bl	8000d98 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fb8c 	bl	8000900 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80021ea:	e009      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe fb88 	bl	8000900 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d902      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	74fb      	strb	r3, [r7, #19]
        break;
 80021fe:	e006      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002200:	4b7b      	ldr	r3, [pc, #492]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800220c:	d1ee      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d13c      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002214:	f7ff ffa7 	bl	8002166 <LL_RCC_GetRTCClockSource>
 8002218:	4602      	mov	r2, r0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221e:	429a      	cmp	r2, r3
 8002220:	d00f      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800222e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002230:	f7ff ffa5 	bl	800217e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002234:	f7ff ffb3 	bl	800219e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d014      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fb58 	bl	8000900 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002252:	e00b      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fb54 	bl	8000900 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d902      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	74fb      	strb	r3, [r7, #19]
            break;
 800226a:	e004      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800226c:	f7ff feb4 	bl	8001fd8 <LL_RCC_LSE_IsReady>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d1ee      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5b 	bl	800213c <LL_RCC_SetRTCClockSource>
 8002286:	e004      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
 800228c:	e001      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fea9 	bl	8001ffa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe9e 	bl	8001ffa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fec0 	bl	8002054 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fee6 	bl	80020b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fedb 	bl	80020b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fed0 	bl	80020b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fea9 	bl	800207e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe9e 	bl	800207e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe93 	bl	800207e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d011      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fe5e 	bl	800202a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002376:	d107      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002386:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fea5 	bl	80020e8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d011      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fea3 	bl	8002112 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023d4:	d107      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80023e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	58000400 	.word	0x58000400

080023f4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002404:	4904      	ldr	r1, [pc, #16]	@ (8002418 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	58000400 	.word	0x58000400

0800241c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002426:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	58000400 	.word	0x58000400

0800243c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002446:	619a      	str	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	58000400 	.word	0x58000400

08002454 <LL_RCC_RF_DisableReset>:
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002460:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002464:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002468:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <LL_RCC_IsRFUnderReset>:
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002488:	d101      	bne.n	800248e <LL_RCC_IsRFUnderReset+0x1a>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_RCC_IsRFUnderReset+0x1c>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <LL_EXTI_EnableIT_32_63+0x24>)
 80024a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80024a6:	4905      	ldr	r1, [pc, #20]	@ (80024bc <LL_EXTI_EnableIT_32_63+0x24>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	58000800 	.word	0x58000800

080024c0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
    return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	e052      	b.n	800257c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	799b      	ldrb	r3, [r3, #6]
 80024de:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80024e0:	7bbb      	ldrb	r3, [r7, #14]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_SUBGHZ_Init+0x2c>
 80024e6:	7bbb      	ldrb	r3, [r7, #14]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d109      	bne.n	8002500 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe f89a 	bl	800062c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80024f8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80024fc:	f7ff ffcc 	bl	8002498 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002500:	7bbb      	ldrb	r3, [r7, #14]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d126      	bne.n	8002554 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800250c:	f7ff ffa2 	bl	8002454 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002510:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <HAL_SUBGHZ_Init+0xc4>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	0cdb      	lsrs	r3, r3, #19
 800251e:	2264      	movs	r2, #100	@ 0x64
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	609a      	str	r2, [r3, #8]
        break;
 8002536:	e007      	b.n	8002548 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3b01      	subs	r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800253e:	f7ff ff99 	bl	8002474 <LL_RCC_IsRFUnderReset>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002548:	f7ff ff68 	bl	800241c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800254c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002550:	f7ff ff50 	bl	80023f4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002554:	f7ff ff72 	bl	800243c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f810 	bl	8002588 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	719a      	strb	r2, [r3, #6]

  return status;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000

08002588 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <SUBGHZSPI_Init+0x3c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <SUBGHZSPI_Init+0x3c>)
 8002596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800259a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800259c:	4a09      	ldr	r2, [pc, #36]	@ (80025c4 <SUBGHZSPI_Init+0x3c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80025a4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80025a6:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <SUBGHZSPI_Init+0x3c>)
 80025a8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80025ac:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <SUBGHZSPI_Init+0x3c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <SUBGHZSPI_Init+0x3c>)
 80025b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	58010000 	.word	0x58010000

080025c8 <LL_RCC_GetUSARTClockSource>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	4313      	orrs	r3, r2
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <LL_RCC_GetLPUARTClockSource>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4013      	ands	r3, r2
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e042      	b.n	80026a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe f88a 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	@ 0x24
 8002638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fa9d 	bl	8002b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f826 	bl	80026ac <UART_SetConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e01b      	b.n	80026a2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002678:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002688:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fb1b 	bl	8002cd6 <UART_CheckIdleState>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b08c      	sub	sp, #48	@ 0x30
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b94      	ldr	r3, [pc, #592]	@ (800292c <UART_SetConfig+0x280>)
 80026dc:	4013      	ands	r3, r2
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a89      	ldr	r2, [pc, #548]	@ (8002930 <UART_SetConfig+0x284>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002714:	4313      	orrs	r3, r2
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002722:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800272c:	430b      	orrs	r3, r1
 800272e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002736:	f023 010f 	bic.w	r1, r3, #15
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7a      	ldr	r2, [pc, #488]	@ (8002934 <UART_SetConfig+0x288>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d127      	bne.n	80027a0 <UART_SetConfig+0xf4>
 8002750:	2003      	movs	r0, #3
 8002752:	f7ff ff39 	bl	80025c8 <LL_RCC_GetUSARTClockSource>
 8002756:	4603      	mov	r3, r0
 8002758:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800275c:	2b03      	cmp	r3, #3
 800275e:	d81b      	bhi.n	8002798 <UART_SetConfig+0xec>
 8002760:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <UART_SetConfig+0xbc>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	08002789 	.word	0x08002789
 8002770:	08002781 	.word	0x08002781
 8002774:	08002791 	.word	0x08002791
 8002778:	2301      	movs	r3, #1
 800277a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800277e:	e080      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002780:	2302      	movs	r3, #2
 8002782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002786:	e07c      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002788:	2304      	movs	r3, #4
 800278a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800278e:	e078      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002790:	2308      	movs	r3, #8
 8002792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002796:	e074      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002798:	2310      	movs	r3, #16
 800279a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800279e:	e070      	b.n	8002882 <UART_SetConfig+0x1d6>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a64      	ldr	r2, [pc, #400]	@ (8002938 <UART_SetConfig+0x28c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d138      	bne.n	800281c <UART_SetConfig+0x170>
 80027aa:	200c      	movs	r0, #12
 80027ac:	f7ff ff0c 	bl	80025c8 <LL_RCC_GetUSARTClockSource>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d82c      	bhi.n	8002814 <UART_SetConfig+0x168>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <UART_SetConfig+0x114>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027f5 	.word	0x080027f5
 80027c4:	08002815 	.word	0x08002815
 80027c8:	08002815 	.word	0x08002815
 80027cc:	08002815 	.word	0x08002815
 80027d0:	08002805 	.word	0x08002805
 80027d4:	08002815 	.word	0x08002815
 80027d8:	08002815 	.word	0x08002815
 80027dc:	08002815 	.word	0x08002815
 80027e0:	080027fd 	.word	0x080027fd
 80027e4:	08002815 	.word	0x08002815
 80027e8:	08002815 	.word	0x08002815
 80027ec:	08002815 	.word	0x08002815
 80027f0:	0800280d 	.word	0x0800280d
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027fa:	e042      	b.n	8002882 <UART_SetConfig+0x1d6>
 80027fc:	2302      	movs	r3, #2
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002802:	e03e      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002804:	2304      	movs	r3, #4
 8002806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800280a:	e03a      	b.n	8002882 <UART_SetConfig+0x1d6>
 800280c:	2308      	movs	r3, #8
 800280e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002812:	e036      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002814:	2310      	movs	r3, #16
 8002816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800281a:	e032      	b.n	8002882 <UART_SetConfig+0x1d6>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a43      	ldr	r2, [pc, #268]	@ (8002930 <UART_SetConfig+0x284>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12a      	bne.n	800287c <UART_SetConfig+0x1d0>
 8002826:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800282a:	f7ff fedf 	bl	80025ec <LL_RCC_GetLPUARTClockSource>
 800282e:	4603      	mov	r3, r0
 8002830:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002834:	d01a      	beq.n	800286c <UART_SetConfig+0x1c0>
 8002836:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800283a:	d81b      	bhi.n	8002874 <UART_SetConfig+0x1c8>
 800283c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002840:	d00c      	beq.n	800285c <UART_SetConfig+0x1b0>
 8002842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002846:	d815      	bhi.n	8002874 <UART_SetConfig+0x1c8>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <UART_SetConfig+0x1a8>
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002850:	d008      	beq.n	8002864 <UART_SetConfig+0x1b8>
 8002852:	e00f      	b.n	8002874 <UART_SetConfig+0x1c8>
 8002854:	2300      	movs	r3, #0
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285a:	e012      	b.n	8002882 <UART_SetConfig+0x1d6>
 800285c:	2302      	movs	r3, #2
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002862:	e00e      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002864:	2304      	movs	r3, #4
 8002866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800286a:	e00a      	b.n	8002882 <UART_SetConfig+0x1d6>
 800286c:	2308      	movs	r3, #8
 800286e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002872:	e006      	b.n	8002882 <UART_SetConfig+0x1d6>
 8002874:	2310      	movs	r3, #16
 8002876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800287a:	e002      	b.n	8002882 <UART_SetConfig+0x1d6>
 800287c:	2310      	movs	r3, #16
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <UART_SetConfig+0x284>)
 8002888:	4293      	cmp	r3, r2
 800288a:	f040 80a4 	bne.w	80029d6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800288e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002892:	2b08      	cmp	r3, #8
 8002894:	d823      	bhi.n	80028de <UART_SetConfig+0x232>
 8002896:	a201      	add	r2, pc, #4	@ (adr r2, 800289c <UART_SetConfig+0x1f0>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028df 	.word	0x080028df
 80028a4:	080028c9 	.word	0x080028c9
 80028a8:	080028df 	.word	0x080028df
 80028ac:	080028cf 	.word	0x080028cf
 80028b0:	080028df 	.word	0x080028df
 80028b4:	080028df 	.word	0x080028df
 80028b8:	080028df 	.word	0x080028df
 80028bc:	080028d7 	.word	0x080028d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c0:	f7ff fab4 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80028c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028c6:	e010      	b.n	80028ea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028c8:	4b1c      	ldr	r3, [pc, #112]	@ (800293c <UART_SetConfig+0x290>)
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028cc:	e00d      	b.n	80028ea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ce:	f7ff f9f9 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 80028d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028d4:	e009      	b.n	80028ea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028dc:	e005      	b.n	80028ea <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80028e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8137 	beq.w	8002b60 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	4a12      	ldr	r2, [pc, #72]	@ (8002940 <UART_SetConfig+0x294>)
 80028f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028fc:	461a      	mov	r2, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	fbb3 f3f2 	udiv	r3, r3, r2
 8002904:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	429a      	cmp	r2, r3
 8002914:	d305      	bcc.n	8002922 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002928:	e11a      	b.n	8002b60 <UART_SetConfig+0x4b4>
 800292a:	bf00      	nop
 800292c:	cfff69f3 	.word	0xcfff69f3
 8002930:	40008000 	.word	0x40008000
 8002934:	40013800 	.word	0x40013800
 8002938:	40004400 	.word	0x40004400
 800293c:	00f42400 	.word	0x00f42400
 8002940:	0800323c 	.word	0x0800323c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	2200      	movs	r2, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	60fa      	str	r2, [r7, #12]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	4a8e      	ldr	r2, [pc, #568]	@ (8002b8c <UART_SetConfig+0x4e0>)
 8002952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002956:	b29b      	uxth	r3, r3
 8002958:	2200      	movs	r2, #0
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002966:	f7fd fc07 	bl	8000178 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	020b      	lsls	r3, r1, #8
 800297c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002980:	0202      	lsls	r2, r0, #8
 8002982:	6979      	ldr	r1, [r7, #20]
 8002984:	6849      	ldr	r1, [r1, #4]
 8002986:	0849      	lsrs	r1, r1, #1
 8002988:	2000      	movs	r0, #0
 800298a:	460c      	mov	r4, r1
 800298c:	4605      	mov	r5, r0
 800298e:	eb12 0804 	adds.w	r8, r2, r4
 8002992:	eb43 0905 	adc.w	r9, r3, r5
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	469a      	mov	sl, r3
 800299e:	4693      	mov	fp, r2
 80029a0:	4652      	mov	r2, sl
 80029a2:	465b      	mov	r3, fp
 80029a4:	4640      	mov	r0, r8
 80029a6:	4649      	mov	r1, r9
 80029a8:	f7fd fbe6 	bl	8000178 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4613      	mov	r3, r2
 80029b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029ba:	d308      	bcc.n	80029ce <UART_SetConfig+0x322>
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029c2:	d204      	bcs.n	80029ce <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	60da      	str	r2, [r3, #12]
 80029cc:	e0c8      	b.n	8002b60 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80029d4:	e0c4      	b.n	8002b60 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029de:	d167      	bne.n	8002ab0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80029e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d828      	bhi.n	8002a3a <UART_SetConfig+0x38e>
 80029e8:	a201      	add	r2, pc, #4	@ (adr r2, 80029f0 <UART_SetConfig+0x344>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a15 	.word	0x08002a15
 80029f4:	08002a1d 	.word	0x08002a1d
 80029f8:	08002a25 	.word	0x08002a25
 80029fc:	08002a3b 	.word	0x08002a3b
 8002a00:	08002a2b 	.word	0x08002a2b
 8002a04:	08002a3b 	.word	0x08002a3b
 8002a08:	08002a3b 	.word	0x08002a3b
 8002a0c:	08002a3b 	.word	0x08002a3b
 8002a10:	08002a33 	.word	0x08002a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a14:	f7ff fa0a 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a1a:	e014      	b.n	8002a46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a1c:	f7ff fa18 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8002a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a22:	e010      	b.n	8002a46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a24:	4b5a      	ldr	r3, [pc, #360]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a28:	e00d      	b.n	8002a46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a2a:	f7ff f94b 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8002a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a30:	e009      	b.n	8002a46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a38:	e005      	b.n	8002a46 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8089 	beq.w	8002b60 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	4a4e      	ldr	r2, [pc, #312]	@ (8002b8c <UART_SetConfig+0x4e0>)
 8002a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a60:	005a      	lsls	r2, r3, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	441a      	add	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	d916      	bls.n	8002aa8 <UART_SetConfig+0x3fc>
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a80:	d212      	bcs.n	8002aa8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f023 030f 	bic.w	r3, r3, #15
 8002a8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	8bfb      	ldrh	r3, [r7, #30]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	8bfa      	ldrh	r2, [r7, #30]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	e05b      	b.n	8002b60 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002aae:	e057      	b.n	8002b60 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ab0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d828      	bhi.n	8002b0a <UART_SetConfig+0x45e>
 8002ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac0 <UART_SetConfig+0x414>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ae5 	.word	0x08002ae5
 8002ac4:	08002aed 	.word	0x08002aed
 8002ac8:	08002af5 	.word	0x08002af5
 8002acc:	08002b0b 	.word	0x08002b0b
 8002ad0:	08002afb 	.word	0x08002afb
 8002ad4:	08002b0b 	.word	0x08002b0b
 8002ad8:	08002b0b 	.word	0x08002b0b
 8002adc:	08002b0b 	.word	0x08002b0b
 8002ae0:	08002b03 	.word	0x08002b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f7ff f9a2 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002ae8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002aea:	e014      	b.n	8002b16 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002aec:	f7ff f9b0 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8002af0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002af2:	e010      	b.n	8002b16 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af4:	4b26      	ldr	r3, [pc, #152]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002af8:	e00d      	b.n	8002b16 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002afa:	f7ff f8e3 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8002afe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b00:	e009      	b.n	8002b16 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b08:	e005      	b.n	8002b16 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b14:	bf00      	nop
    }

    if (pclk != 0U)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d021      	beq.n	8002b60 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	4a1a      	ldr	r2, [pc, #104]	@ (8002b8c <UART_SetConfig+0x4e0>)
 8002b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b26:	461a      	mov	r2, r3
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	441a      	add	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	d909      	bls.n	8002b5a <UART_SetConfig+0x4ae>
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4c:	d205      	bcs.n	8002b5a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	e002      	b.n	8002b60 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002b7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3730      	adds	r7, #48	@ 0x30
 8002b84:	46bd      	mov	sp, r7
 8002b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8a:	bf00      	nop
 8002b8c:	0800323c 	.word	0x0800323c
 8002b90:	00f42400 	.word	0x00f42400

08002b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01a      	beq.n	8002caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c92:	d10a      	bne.n	8002caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ce6:	f7fd fe0b 	bl	8000900 <HAL_GetTick>
 8002cea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d10e      	bne.n	8002d18 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cfa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f832 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e028      	b.n	8002d6a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d10e      	bne.n	8002d44 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f81c 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e012      	b.n	8002d6a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b09c      	sub	sp, #112	@ 0x70
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	e0af      	b.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	f000 80ab 	beq.w	8002ee4 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7fd fdb7 	bl	8000900 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d140      	bne.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002db4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002db8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002dc8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8002dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e6      	bne.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3308      	adds	r3, #8
 8002df4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002df6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002df8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e5      	bne.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e06f      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d057      	beq.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x172>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b80      	cmp	r3, #128	@ 0x80
 8002e38:	d054      	beq.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x172>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b40      	cmp	r3, #64	@ 0x40
 8002e3e:	d051      	beq.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e4e:	d149      	bne.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e6      	bne.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3308      	adds	r3, #8
 8002e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002eac:	623a      	str	r2, [r7, #32]
 8002eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	69f9      	ldr	r1, [r7, #28]
 8002eb2:	6a3a      	ldr	r2, [r7, #32]
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e010      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	f43f af40 	beq.w	8002d84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3770      	adds	r7, #112	@ 0x70
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_UARTEx_DisableFifoMode+0x16>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e027      	b.n	8002f74 <HAL_UARTEx_DisableFifoMode+0x66>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	@ 0x24
 8002f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002f52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e02d      	b.n	8002ff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2224      	movs	r2, #36	@ 0x24
 8002fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f850 	bl	8003078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800300e:	2302      	movs	r3, #2
 8003010:	e02d      	b.n	800306e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2224      	movs	r2, #36	@ 0x24
 800301e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f812 	bl	8003078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003084:	2b00      	cmp	r3, #0
 8003086:	d108      	bne.n	800309a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003098:	e031      	b.n	80030fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800309a:	2308      	movs	r3, #8
 800309c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800309e:	2308      	movs	r3, #8
 80030a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	0e5b      	lsrs	r3, r3, #25
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	0f5b      	lsrs	r3, r3, #29
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030c2:	7bbb      	ldrb	r3, [r7, #14]
 80030c4:	7b3a      	ldrb	r2, [r7, #12]
 80030c6:	4910      	ldr	r1, [pc, #64]	@ (8003108 <UARTEx_SetNbDataToProcess+0x90>)
 80030c8:	5c8a      	ldrb	r2, [r1, r2]
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80030ce:	7b3a      	ldrb	r2, [r7, #12]
 80030d0:	490e      	ldr	r1, [pc, #56]	@ (800310c <UARTEx_SetNbDataToProcess+0x94>)
 80030d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	7b7a      	ldrb	r2, [r7, #13]
 80030e4:	4908      	ldr	r1, [pc, #32]	@ (8003108 <UARTEx_SetNbDataToProcess+0x90>)
 80030e6:	5c8a      	ldrb	r2, [r1, r2]
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80030ec:	7b7a      	ldrb	r2, [r7, #13]
 80030ee:	4907      	ldr	r1, [pc, #28]	@ (800310c <UARTEx_SetNbDataToProcess+0x94>)
 80030f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	08003254 	.word	0x08003254
 800310c:	0800325c 	.word	0x0800325c

08003110 <memset>:
 8003110:	4402      	add	r2, r0
 8003112:	4603      	mov	r3, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	4d0d      	ldr	r5, [pc, #52]	@ (8003158 <__libc_init_array+0x38>)
 8003124:	4c0d      	ldr	r4, [pc, #52]	@ (800315c <__libc_init_array+0x3c>)
 8003126:	1b64      	subs	r4, r4, r5
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	2600      	movs	r6, #0
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	4d0b      	ldr	r5, [pc, #44]	@ (8003160 <__libc_init_array+0x40>)
 8003132:	4c0c      	ldr	r4, [pc, #48]	@ (8003164 <__libc_init_array+0x44>)
 8003134:	f000 f818 	bl	8003168 <_init>
 8003138:	1b64      	subs	r4, r4, r5
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	2600      	movs	r6, #0
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	f855 3b04 	ldr.w	r3, [r5], #4
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	0800326c 	.word	0x0800326c
 800315c:	0800326c 	.word	0x0800326c
 8003160:	0800326c 	.word	0x0800326c
 8003164:	08003270 	.word	0x08003270

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
