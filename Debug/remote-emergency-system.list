
remote-emergency-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080066a8  080066a8  000076a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b8  080067b8  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067b8  080067b8  000077b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c0  080067c0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c0  080067c0  000077c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067c4  080067c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080067c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  080067d4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080067d4  000081bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9ad  00000000  00000000  00008036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000483e  00000000  00000000  000269e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  0002b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ac  00000000  00000000  0002cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021264  00000000  00000000  0002e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214d5  00000000  00000000  0004f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3a5a  00000000  00000000  00070db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013480f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b40  00000000  00000000  00134854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0013c394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08006690 	.word	0x08006690

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08006690 	.word	0x08006690

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b988 	b.w	80004b0 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	468e      	mov	lr, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4617      	mov	r7, r2
 80001cc:	d962      	bls.n	8000294 <__udivmoddi4+0xdc>
 80001ce:	fab2 f682 	clz	r6, r2
 80001d2:	b14e      	cbz	r6, 80001e8 <__udivmoddi4+0x30>
 80001d4:	f1c6 0320 	rsb	r3, r6, #32
 80001d8:	fa01 f806 	lsl.w	r8, r1, r6
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	40b7      	lsls	r7, r6
 80001e2:	ea43 0808 	orr.w	r8, r3, r8
 80001e6:	40b4      	lsls	r4, r6
 80001e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ec:	fa1f fc87 	uxth.w	ip, r7
 80001f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001f4:	0c23      	lsrs	r3, r4, #16
 80001f6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000202:	429a      	cmp	r2, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f101 30ff 	add.w	r0, r1, #4294967295
 800020c:	f080 80ea 	bcs.w	80003e4 <__udivmoddi4+0x22c>
 8000210:	429a      	cmp	r2, r3
 8000212:	f240 80e7 	bls.w	80003e4 <__udivmoddi4+0x22c>
 8000216:	3902      	subs	r1, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a9a      	subs	r2, r3, r2
 800021c:	b2a3      	uxth	r3, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800022a:	fb00 fc0c 	mul.w	ip, r0, ip
 800022e:	459c      	cmp	ip, r3
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	18fb      	adds	r3, r7, r3
 8000234:	f100 32ff 	add.w	r2, r0, #4294967295
 8000238:	f080 80d6 	bcs.w	80003e8 <__udivmoddi4+0x230>
 800023c:	459c      	cmp	ip, r3
 800023e:	f240 80d3 	bls.w	80003e8 <__udivmoddi4+0x230>
 8000242:	443b      	add	r3, r7
 8000244:	3802      	subs	r0, #2
 8000246:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024a:	eba3 030c 	sub.w	r3, r3, ip
 800024e:	2100      	movs	r1, #0
 8000250:	b11d      	cbz	r5, 800025a <__udivmoddi4+0xa2>
 8000252:	40f3      	lsrs	r3, r6
 8000254:	2200      	movs	r2, #0
 8000256:	e9c5 3200 	strd	r3, r2, [r5]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d905      	bls.n	800026e <__udivmoddi4+0xb6>
 8000262:	b10d      	cbz	r5, 8000268 <__udivmoddi4+0xb0>
 8000264:	e9c5 0100 	strd	r0, r1, [r5]
 8000268:	2100      	movs	r1, #0
 800026a:	4608      	mov	r0, r1
 800026c:	e7f5      	b.n	800025a <__udivmoddi4+0xa2>
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d146      	bne.n	8000304 <__udivmoddi4+0x14c>
 8000276:	4573      	cmp	r3, lr
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xc8>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 8105 	bhi.w	800048a <__udivmoddi4+0x2d2>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb6e 0203 	sbc.w	r2, lr, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4690      	mov	r8, r2
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e5      	beq.n	800025a <__udivmoddi4+0xa2>
 800028e:	e9c5 4800 	strd	r4, r8, [r5]
 8000292:	e7e2      	b.n	800025a <__udivmoddi4+0xa2>
 8000294:	2a00      	cmp	r2, #0
 8000296:	f000 8090 	beq.w	80003ba <__udivmoddi4+0x202>
 800029a:	fab2 f682 	clz	r6, r2
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f040 80a4 	bne.w	80003ec <__udivmoddi4+0x234>
 80002a4:	1a8a      	subs	r2, r1, r2
 80002a6:	0c03      	lsrs	r3, r0, #16
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	b280      	uxth	r0, r0
 80002ae:	b2bc      	uxth	r4, r7
 80002b0:	2101      	movs	r1, #1
 80002b2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002b6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002be:	fb04 f20c 	mul.w	r2, r4, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d907      	bls.n	80002d6 <__udivmoddi4+0x11e>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x11c>
 80002ce:	429a      	cmp	r2, r3
 80002d0:	f200 80e0 	bhi.w	8000494 <__udivmoddi4+0x2dc>
 80002d4:	46c4      	mov	ip, r8
 80002d6:	1a9b      	subs	r3, r3, r2
 80002d8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002dc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002e4:	fb02 f404 	mul.w	r4, r2, r4
 80002e8:	429c      	cmp	r4, r3
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x144>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f102 30ff 	add.w	r0, r2, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x142>
 80002f4:	429c      	cmp	r4, r3
 80002f6:	f200 80ca 	bhi.w	800048e <__udivmoddi4+0x2d6>
 80002fa:	4602      	mov	r2, r0
 80002fc:	1b1b      	subs	r3, r3, r4
 80002fe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000302:	e7a5      	b.n	8000250 <__udivmoddi4+0x98>
 8000304:	f1c1 0620 	rsb	r6, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 f706 	lsr.w	r7, r2, r6
 800030e:	431f      	orrs	r7, r3
 8000310:	fa0e f401 	lsl.w	r4, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fa2e fe06 	lsr.w	lr, lr, r6
 800031c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	fa1f fc87 	uxth.w	ip, r7
 800032a:	fbbe f0f9 	udiv	r0, lr, r9
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	fb09 ee10 	mls	lr, r9, r0, lr
 8000334:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000338:	fb00 fe0c 	mul.w	lr, r0, ip
 800033c:	45a6      	cmp	lr, r4
 800033e:	fa02 f201 	lsl.w	r2, r2, r1
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x1a0>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 3aff 	add.w	sl, r0, #4294967295
 800034a:	f080 809c 	bcs.w	8000486 <__udivmoddi4+0x2ce>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f240 8099 	bls.w	8000486 <__udivmoddi4+0x2ce>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	fa1f fe83 	uxth.w	lr, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800036c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000370:	45a4      	cmp	ip, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1ce>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f103 3eff 	add.w	lr, r3, #4294967295
 800037a:	f080 8082 	bcs.w	8000482 <__udivmoddi4+0x2ca>
 800037e:	45a4      	cmp	ip, r4
 8000380:	d97f      	bls.n	8000482 <__udivmoddi4+0x2ca>
 8000382:	3b02      	subs	r3, #2
 8000384:	443c      	add	r4, r7
 8000386:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800038a:	eba4 040c 	sub.w	r4, r4, ip
 800038e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000392:	4564      	cmp	r4, ip
 8000394:	4673      	mov	r3, lr
 8000396:	46e1      	mov	r9, ip
 8000398:	d362      	bcc.n	8000460 <__udivmoddi4+0x2a8>
 800039a:	d05f      	beq.n	800045c <__udivmoddi4+0x2a4>
 800039c:	b15d      	cbz	r5, 80003b6 <__udivmoddi4+0x1fe>
 800039e:	ebb8 0203 	subs.w	r2, r8, r3
 80003a2:	eb64 0409 	sbc.w	r4, r4, r9
 80003a6:	fa04 f606 	lsl.w	r6, r4, r6
 80003aa:	fa22 f301 	lsr.w	r3, r2, r1
 80003ae:	431e      	orrs	r6, r3
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	e9c5 6400 	strd	r6, r4, [r5]
 80003b6:	2100      	movs	r1, #0
 80003b8:	e74f      	b.n	800025a <__udivmoddi4+0xa2>
 80003ba:	fbb1 fcf2 	udiv	ip, r1, r2
 80003be:	0c01      	lsrs	r1, r0, #16
 80003c0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ca:	463b      	mov	r3, r7
 80003cc:	4638      	mov	r0, r7
 80003ce:	463c      	mov	r4, r7
 80003d0:	46b8      	mov	r8, r7
 80003d2:	46be      	mov	lr, r7
 80003d4:	2620      	movs	r6, #32
 80003d6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003da:	eba2 0208 	sub.w	r2, r2, r8
 80003de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003e2:	e766      	b.n	80002b2 <__udivmoddi4+0xfa>
 80003e4:	4601      	mov	r1, r0
 80003e6:	e718      	b.n	800021a <__udivmoddi4+0x62>
 80003e8:	4610      	mov	r0, r2
 80003ea:	e72c      	b.n	8000246 <__udivmoddi4+0x8e>
 80003ec:	f1c6 0220 	rsb	r2, r6, #32
 80003f0:	fa2e f302 	lsr.w	r3, lr, r2
 80003f4:	40b7      	lsls	r7, r6
 80003f6:	40b1      	lsls	r1, r6
 80003f8:	fa20 f202 	lsr.w	r2, r0, r2
 80003fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000400:	430a      	orrs	r2, r1
 8000402:	fbb3 f8fe 	udiv	r8, r3, lr
 8000406:	b2bc      	uxth	r4, r7
 8000408:	fb0e 3318 	mls	r3, lr, r8, r3
 800040c:	0c11      	lsrs	r1, r2, #16
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb08 f904 	mul.w	r9, r8, r4
 8000416:	40b0      	lsls	r0, r6
 8000418:	4589      	cmp	r9, r1
 800041a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800041e:	b280      	uxth	r0, r0
 8000420:	d93e      	bls.n	80004a0 <__udivmoddi4+0x2e8>
 8000422:	1879      	adds	r1, r7, r1
 8000424:	f108 3cff 	add.w	ip, r8, #4294967295
 8000428:	d201      	bcs.n	800042e <__udivmoddi4+0x276>
 800042a:	4589      	cmp	r9, r1
 800042c:	d81f      	bhi.n	800046e <__udivmoddi4+0x2b6>
 800042e:	eba1 0109 	sub.w	r1, r1, r9
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fb09 f804 	mul.w	r8, r9, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	b292      	uxth	r2, r2
 8000440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000444:	4542      	cmp	r2, r8
 8000446:	d229      	bcs.n	800049c <__udivmoddi4+0x2e4>
 8000448:	18ba      	adds	r2, r7, r2
 800044a:	f109 31ff 	add.w	r1, r9, #4294967295
 800044e:	d2c4      	bcs.n	80003da <__udivmoddi4+0x222>
 8000450:	4542      	cmp	r2, r8
 8000452:	d2c2      	bcs.n	80003da <__udivmoddi4+0x222>
 8000454:	f1a9 0102 	sub.w	r1, r9, #2
 8000458:	443a      	add	r2, r7
 800045a:	e7be      	b.n	80003da <__udivmoddi4+0x222>
 800045c:	45f0      	cmp	r8, lr
 800045e:	d29d      	bcs.n	800039c <__udivmoddi4+0x1e4>
 8000460:	ebbe 0302 	subs.w	r3, lr, r2
 8000464:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000468:	3801      	subs	r0, #1
 800046a:	46e1      	mov	r9, ip
 800046c:	e796      	b.n	800039c <__udivmoddi4+0x1e4>
 800046e:	eba7 0909 	sub.w	r9, r7, r9
 8000472:	4449      	add	r1, r9
 8000474:	f1a8 0c02 	sub.w	ip, r8, #2
 8000478:	fbb1 f9fe 	udiv	r9, r1, lr
 800047c:	fb09 f804 	mul.w	r8, r9, r4
 8000480:	e7db      	b.n	800043a <__udivmoddi4+0x282>
 8000482:	4673      	mov	r3, lr
 8000484:	e77f      	b.n	8000386 <__udivmoddi4+0x1ce>
 8000486:	4650      	mov	r0, sl
 8000488:	e766      	b.n	8000358 <__udivmoddi4+0x1a0>
 800048a:	4608      	mov	r0, r1
 800048c:	e6fd      	b.n	800028a <__udivmoddi4+0xd2>
 800048e:	443b      	add	r3, r7
 8000490:	3a02      	subs	r2, #2
 8000492:	e733      	b.n	80002fc <__udivmoddi4+0x144>
 8000494:	f1ac 0c02 	sub.w	ip, ip, #2
 8000498:	443b      	add	r3, r7
 800049a:	e71c      	b.n	80002d6 <__udivmoddi4+0x11e>
 800049c:	4649      	mov	r1, r9
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x222>
 80004a0:	eba1 0109 	sub.w	r1, r1, r9
 80004a4:	46c4      	mov	ip, r8
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	e7c4      	b.n	800043a <__udivmoddi4+0x282>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80004be:	2300      	movs	r3, #0
 80004c0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80004ca:	2300      	movs	r3, #0
 80004cc:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80004ce:	2300      	movs	r3, #0
 80004d0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004de:	2300      	movs	r3, #0
 80004e0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80004ea:	2300      	movs	r3, #0
 80004ec:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80004ee:	2308      	movs	r3, #8
 80004f0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80004f2:	2300      	movs	r3, #0
 80004f4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800052e:	2308      	movs	r3, #8
 8000530:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800053a:	f000 f937 	bl	80007ac <MCP2515_Initialize>
 800053e:	4603      	mov	r3, r0
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <CANSPI_Initialize+0x9a>
  {
    return false;
 800054a:	2300      	movs	r3, #0
 800054c:	e05e      	b.n	800060c <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 800054e:	f000 f94d 	bl	80007ec <MCP2515_SetConfigMode>
 8000552:	4603      	mov	r3, r0
 8000554:	f083 0301 	eor.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <CANSPI_Initialize+0xae>
  {
    return false;
 800055e:	2300      	movs	r3, #0
 8000560:	e054      	b.n	800060c <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	461a      	mov	r2, r3
 8000566:	2123      	movs	r1, #35	@ 0x23
 8000568:	2020      	movs	r0, #32
 800056a:	f000 f9bf 	bl	80008ec <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800056e:	463b      	mov	r3, r7
 8000570:	461a      	mov	r2, r3
 8000572:	2127      	movs	r1, #39	@ 0x27
 8000574:	2024      	movs	r0, #36	@ 0x24
 8000576:	f000 f9b9 	bl	80008ec <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	461a      	mov	r2, r3
 8000580:	2103      	movs	r1, #3
 8000582:	2000      	movs	r0, #0
 8000584:	f000 f9b2 	bl	80008ec <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	461a      	mov	r2, r3
 800058e:	2107      	movs	r1, #7
 8000590:	2004      	movs	r0, #4
 8000592:	f000 f9ab 	bl	80008ec <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	461a      	mov	r2, r3
 800059c:	210b      	movs	r1, #11
 800059e:	2008      	movs	r0, #8
 80005a0:	f000 f9a4 	bl	80008ec <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	461a      	mov	r2, r3
 80005aa:	2113      	movs	r1, #19
 80005ac:	2010      	movs	r0, #16
 80005ae:	f000 f99d 	bl	80008ec <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	461a      	mov	r2, r3
 80005b8:	2117      	movs	r1, #23
 80005ba:	2014      	movs	r0, #20
 80005bc:	f000 f996 	bl	80008ec <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	211b      	movs	r1, #27
 80005c8:	2018      	movs	r0, #24
 80005ca:	f000 f98f 	bl	80008ec <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005ce:	2104      	movs	r1, #4
 80005d0:	2060      	movs	r0, #96	@ 0x60
 80005d2:	f000 f968 	bl	80008a6 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80005d6:	2101      	movs	r1, #1
 80005d8:	2070      	movs	r0, #112	@ 0x70
 80005da:	f000 f964 	bl	80008a6 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80005de:	2100      	movs	r1, #0
 80005e0:	202a      	movs	r0, #42	@ 0x2a
 80005e2:	f000 f960 	bl	80008a6 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80005e6:	21e5      	movs	r1, #229	@ 0xe5
 80005e8:	2029      	movs	r0, #41	@ 0x29
 80005ea:	f000 f95c 	bl	80008a6 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80005ee:	2183      	movs	r1, #131	@ 0x83
 80005f0:	2028      	movs	r0, #40	@ 0x28
 80005f2:	f000 f958 	bl	80008a6 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80005f6:	f000 f917 	bl	8000828 <MCP2515_SetNormalMode>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f083 0301 	eor.w	r3, r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <CANSPI_Initialize+0x156>
    return false;
 8000606:	2300      	movs	r3, #0
 8000608:	e000      	b.n	800060c <CANSPI_Initialize+0x158>

  return true;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000620:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <CANSPI_Transmit+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000626:	4b35      	ldr	r3, [pc, #212]	@ (80006fc <CANSPI_Transmit+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800062c:	4b33      	ldr	r3, [pc, #204]	@ (80006fc <CANSPI_Transmit+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <CANSPI_Transmit+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000638:	f000 f9c4 	bl	80009c4 <MCP2515_ReadStatus>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <CANSPI_Transmit+0xec>)
 8000642:	701a      	strb	r2, [r3, #0]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000644:	4b2e      	ldr	r3, [pc, #184]	@ (8000700 <CANSPI_Transmit+0xec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d115      	bne.n	800067e <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6858      	ldr	r0, [r3, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <CANSPI_Transmit+0xe8>)
 800065c:	4619      	mov	r1, r3
 800065e:	f000 f851 	bl	8000704 <convertCANid2Reg>

    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7a1a      	ldrb	r2, [r3, #8]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3309      	adds	r3, #9
 800066a:	4924      	ldr	r1, [pc, #144]	@ (80006fc <CANSPI_Transmit+0xe8>)
 800066c:	2040      	movs	r0, #64	@ 0x40
 800066e:	f000 f966 	bl	800093e <MCP2515_LoadTxSequence>

    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000672:	2081      	movs	r0, #129	@ 0x81
 8000674:	f000 f98d 	bl	8000992 <MCP2515_RequestToSend>

    returnValue = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	e038      	b.n	80006f0 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <CANSPI_Transmit+0xec>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f003 0310 	and.w	r3, r3, #16
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d115      	bne.n	80006b8 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6858      	ldr	r0, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <CANSPI_Transmit+0xe8>)
 8000696:	4619      	mov	r1, r3
 8000698:	f000 f834 	bl	8000704 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7a1a      	ldrb	r2, [r3, #8]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3309      	adds	r3, #9
 80006a4:	4915      	ldr	r1, [pc, #84]	@ (80006fc <CANSPI_Transmit+0xe8>)
 80006a6:	2042      	movs	r0, #66	@ 0x42
 80006a8:	f000 f949 	bl	800093e <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006ac:	2082      	movs	r0, #130	@ 0x82
 80006ae:	f000 f970 	bl	8000992 <MCP2515_RequestToSend>

    returnValue = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	e01b      	b.n	80006f0 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <CANSPI_Transmit+0xec>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d114      	bne.n	80006f0 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6858      	ldr	r0, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <CANSPI_Transmit+0xe8>)
 80006d0:	4619      	mov	r1, r3
 80006d2:	f000 f817 	bl	8000704 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3309      	adds	r3, #9
 80006de:	4907      	ldr	r1, [pc, #28]	@ (80006fc <CANSPI_Transmit+0xe8>)
 80006e0:	2044      	movs	r0, #68	@ 0x44
 80006e2:	f000 f92c 	bl	800093e <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80006e6:	2084      	movs	r0, #132	@ 0x84
 80006e8:	f000 f953 	bl	8000992 <MCP2515_RequestToSend>

    returnValue = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	20000028 	.word	0x20000028

08000704 <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	460b      	mov	r3, r1
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000716:	7afb      	ldrb	r3, [r7, #11]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d12e      	bne.n	800077a <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f023 031f 	bic.w	r3, r3, #31
 8000750:	b2da      	uxtb	r2, r3
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	4413      	add	r3, r2
 8000756:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	3308      	adds	r3, #8
 800075c:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800075e:	7dfb      	ldrb	r3, [r7, #23]
 8000760:	f023 0314 	bic.w	r3, r3, #20
 8000764:	b2da      	uxtb	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000778:	e013      	b.n	80007a2 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	015b      	lsls	r3, r3, #5
 800078a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	371c      	adds	r7, #28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80007b2:	2201      	movs	r2, #1
 80007b4:	2110      	movs	r1, #16
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f001 fba9 	bl	8001f10 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80007be:	230a      	movs	r3, #10
 80007c0:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <MCP2515_Initialize+0x3c>)
 80007c4:	f003 fe9b 	bl	80044fe <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d101      	bne.n	80007d2 <MCP2515_Initialize+0x26>
      return true;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e006      	b.n	80007e0 <MCP2515_Initialize+0x34>

    loop--;
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f1      	bne.n	80007c2 <MCP2515_Initialize+0x16>

  return false;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000048 	.word	0x20000048

080007ec <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80007f2:	2180      	movs	r1, #128	@ 0x80
 80007f4:	200f      	movs	r0, #15
 80007f6:	f000 f856 	bl	80008a6 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80007fa:	230a      	movs	r3, #10
 80007fc:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80007fe:	200e      	movs	r0, #14
 8000800:	f000 f830 	bl	8000864 <MCP2515_ReadByte>
 8000804:	4603      	mov	r3, r0
 8000806:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800080a:	2b80      	cmp	r3, #128	@ 0x80
 800080c:	d101      	bne.n	8000812 <MCP2515_SetConfigMode+0x26>
      return true;
 800080e:	2301      	movs	r3, #1
 8000810:	e006      	b.n	8000820 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	3b01      	subs	r3, #1
 8000816:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1ef      	bne.n	80007fe <MCP2515_SetConfigMode+0x12>

  return false;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800082e:	2100      	movs	r1, #0
 8000830:	200f      	movs	r0, #15
 8000832:	f000 f838 	bl	80008a6 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000836:	230a      	movs	r3, #10
 8000838:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800083a:	200e      	movs	r0, #14
 800083c:	f000 f812 	bl	8000864 <MCP2515_ReadByte>
 8000840:	4603      	mov	r3, r0
 8000842:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <MCP2515_SetNormalMode+0x26>
      return true;
 800084a:	2301      	movs	r3, #1
 800084c:	e006      	b.n	800085c <MCP2515_SetNormalMode+0x34>

    loop--;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3b01      	subs	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1ef      	bne.n	800083a <MCP2515_SetNormalMode+0x12>

  return false;
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 800086e:	2200      	movs	r2, #0
 8000870:	2110      	movs	r1, #16
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f001 fb4b 	bl	8001f10 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 800087a:	2003      	movs	r0, #3
 800087c:	f000 f8be 	bl	80009fc <SPI_Tx>
  SPI_Tx(address);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f8ba 	bl	80009fc <SPI_Tx>
  retVal = SPI_Rx();
 8000888:	f000 f8de 	bl	8000a48 <SPI_Rx>
 800088c:	4603      	mov	r3, r0
 800088e:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000890:	2201      	movs	r2, #1
 8000892:	2110      	movs	r1, #16
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f001 fb3a 	bl	8001f10 <HAL_GPIO_WritePin>

  return retVal;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	460a      	mov	r2, r1
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4613      	mov	r3, r2
 80008b4:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80008b6:	2200      	movs	r2, #0
 80008b8:	2110      	movs	r1, #16
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f001 fb27 	bl	8001f10 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 f89a 	bl	80009fc <SPI_Tx>
  SPI_Tx(address);
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f896 	bl	80009fc <SPI_Tx>
  SPI_Tx(data);
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f892 	bl	80009fc <SPI_Tx>

  MCP2515_CS_HIGH();
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f001 fb16 	bl	8001f10 <HAL_GPIO_WritePin>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	603a      	str	r2, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
 80008f8:	460b      	mov	r3, r1
 80008fa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000904:	f001 fb04 	bl	8001f10 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000908:	2002      	movs	r0, #2
 800090a:	f000 f877 	bl	80009fc <SPI_Tx>
  SPI_Tx(startAddress);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f873 	bl	80009fc <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3301      	adds	r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 f87b 	bl	8000a20 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f001 faed 	bl	8001f10 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b084      	sub	sp, #16
 8000942:	af00      	add	r7, sp, #0
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	4613      	mov	r3, r2
 800094e:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000950:	2200      	movs	r2, #0
 8000952:	2110      	movs	r1, #16
 8000954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000958:	f001 fada 	bl	8001f10 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f84c 	bl	80009fc <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000964:	2104      	movs	r1, #4
 8000966:	68b8      	ldr	r0, [r7, #8]
 8000968:	f000 f85a 	bl	8000a20 <SPI_TxBuffer>
  SPI_Tx(dlc);
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f844 	bl	80009fc <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	4619      	mov	r1, r3
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f851 	bl	8000a20 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000986:	f001 fac3 	bl	8001f10 <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f001 fab4 	bl	8001f10 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f826 	bl	80009fc <SPI_Tx>

  MCP2515_CS_HIGH();
 80009b0:	2201      	movs	r2, #1
 80009b2:	2110      	movs	r1, #16
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b8:	f001 faaa 	bl	8001f10 <HAL_GPIO_WritePin>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80009ca:	2200      	movs	r2, #0
 80009cc:	2110      	movs	r1, #16
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d2:	f001 fa9d 	bl	8001f10 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 80009d6:	20a0      	movs	r0, #160	@ 0xa0
 80009d8:	f000 f810 	bl	80009fc <SPI_Tx>
  retVal = SPI_Rx();
 80009dc:	f000 f834 	bl	8000a48 <SPI_Rx>
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80009e4:	2201      	movs	r2, #1
 80009e6:	2110      	movs	r1, #16
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f001 fa90 	bl	8001f10 <HAL_GPIO_WritePin>

  return retVal;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000a06:	1df9      	adds	r1, r7, #7
 8000a08:	230a      	movs	r3, #10
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <SPI_Tx+0x20>)
 8000a0e:	f002 feb1 	bl	8003774 <HAL_SPI_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000048 	.word	0x20000048

08000a20 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	230a      	movs	r3, #10
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <SPI_TxBuffer+0x24>)
 8000a36:	f002 fe9d 	bl	8003774 <HAL_SPI_Transmit>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000048 	.word	0x20000048

08000a48 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000a4e:	1df9      	adds	r1, r7, #7
 8000a50:	230a      	movs	r3, #10
 8000a52:	2201      	movs	r2, #1
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <SPI_Rx+0x1c>)
 8000a56:	f003 f824 	bl	8003aa2 <HAL_SPI_Receive>
  return retVal;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000048 	.word	0x20000048

08000a68 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	2002      	movs	r0, #2
 8000aae:	f7ff ffdb 	bl	8000a68 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f7ff ffd8 	bl	8000a68 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff ffd5 	bl	8000a68 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHUTDOWN_CIRCUIT_GPIO_Port, SHUTDOWN_CIRCUIT_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ac4:	4828      	ldr	r0, [pc, #160]	@ (8000b68 <MX_GPIO_Init+0xd0>)
 8000ac6:	f001 fa23 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EBS_GPIO_Port, EBS_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad0:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <MX_GPIO_Init+0xd4>)
 8000ad2:	f001 fa1d 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2110      	movs	r1, #16
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ade:	f001 fa17 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NextState_Pin */
  GPIO_InitStruct.Pin = NextState_Pin;
 8000ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(NextState_GPIO_Port, &GPIO_InitStruct);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	481c      	ldr	r0, [pc, #112]	@ (8000b68 <MX_GPIO_Init+0xd0>)
 8000af8:	f001 f8aa 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_CIRCUIT_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_CIRCUIT_Pin;
 8000afc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SHUTDOWN_CIRCUIT_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4815      	ldr	r0, [pc, #84]	@ (8000b68 <MX_GPIO_Init+0xd0>)
 8000b14:	f001 f89c 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : EBS_Pin */
  GPIO_InitStruct.Pin = EBS_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EBS_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <MX_GPIO_Init+0xd4>)
 8000b30:	f001 f88e 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000b34:	2310      	movs	r3, #16
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4c:	f001 f880 	bl	8001c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2029      	movs	r0, #41	@ 0x29
 8000b56:	f001 f846 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b5a:	2029      	movs	r0, #41	@ 0x29
 8000b5c:	f001 f85d 	bl	8001c1a <HAL_NVIC_EnableIRQ>

}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	48000800 	.word	0x48000800

08000b70 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b80:	f023 0218 	bic.w	r2, r3, #24
 8000b84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
	...

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba0:	f000 feb0 	bl	8001904 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ba4:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <main+0x84>)
 8000ba6:	f004 fb3d 	bl	8005224 <HAL_TIM_Base_Start_IT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000baa:	f000 f83f 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bae:	f7ff ff73 	bl	8000a98 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 8000bb2:	f000 f9a1 	bl	8000ef8 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000bb6:	f000 fa79 	bl	80010ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bba:	f000 f8c9 	bl	8000d50 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000bbe:	f000 f9df 	bl	8000f80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!CANSPI_Initialize()){
 8000bc2:	f7ff fc77 	bl	80004b4 <CANSPI_Initialize>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <main+0x3c>
	  cont = 1 ;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <main+0x88>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <main+0x8c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
	  txMessage.frame.id = 0x127; // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <main+0x8c>)
 8000be0:	f240 1227 	movw	r2, #295	@ 0x127
 8000be4:	605a      	str	r2, [r3, #4]
	  txMessage.frame.dlc = 8;
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <main+0x8c>)
 8000be8:	2208      	movs	r2, #8
 8000bea:	721a      	strb	r2, [r3, #8]
	  txMessage.frame.data0 = 'S';
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <main+0x8c>)
 8000bee:	2253      	movs	r2, #83	@ 0x53
 8000bf0:	725a      	strb	r2, [r3, #9]
	  txMessage.frame.data1 = 'T';
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <main+0x8c>)
 8000bf4:	2254      	movs	r2, #84	@ 0x54
 8000bf6:	729a      	strb	r2, [r3, #10]
	  txMessage.frame.data2 = 'M';
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <main+0x8c>)
 8000bfa:	224d      	movs	r2, #77	@ 0x4d
 8000bfc:	72da      	strb	r2, [r3, #11]
	  txMessage.frame.data3 = '3';
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <main+0x8c>)
 8000c00:	2233      	movs	r2, #51	@ 0x33
 8000c02:	731a      	strb	r2, [r3, #12]
	  txMessage.frame.data4 = '2';
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <main+0x8c>)
 8000c06:	2232      	movs	r2, #50	@ 0x32
 8000c08:	735a      	strb	r2, [r3, #13]
	  txMessage.frame.data5 = '-';
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <main+0x8c>)
 8000c0c:	222d      	movs	r2, #45	@ 0x2d
 8000c0e:	739a      	strb	r2, [r3, #14]
	  CANSPI_Transmit(&txMessage);
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <main+0x8c>)
 8000c12:	f7ff fcff 	bl	8000614 <CANSPI_Transmit>
	  HAL_Delay(100);
 8000c16:	2064      	movs	r0, #100	@ 0x64
 8000c18:	f000 feea 	bl	80019f0 <HAL_Delay>
	  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000c1c:	bf00      	nop
 8000c1e:	e7db      	b.n	8000bd8 <main+0x3c>
 8000c20:	200000b8 	.word	0x200000b8
 8000c24:	20000044 	.word	0x20000044
 8000c28:	20000030 	.word	0x20000030

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09a      	sub	sp, #104	@ 0x68
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2248      	movs	r2, #72	@ 0x48
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f005 fcfc 	bl	8006638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c52:	f001 f98d 	bl	8001f70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff ff8a 	bl	8000b70 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <SystemClock_Config+0xac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c64:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <SystemClock_Config+0xac>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <SystemClock_Config+0xac>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c78:	2324      	movs	r3, #36	@ 0x24
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c7c:	2381      	movs	r3, #129	@ 0x81
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c88:	2360      	movs	r3, #96	@ 0x60
 8000c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fc3d 	bl	8002514 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ca0:	f000 f81c 	bl	8000cdc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000ca4:	234f      	movs	r3, #79	@ 0x4f
 8000ca6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 ffa9 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ccc:	f000 f806 	bl	8000cdc <Error_Handler>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3768      	adds	r7, #104	@ 0x68
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	58000400 	.word	0x58000400

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  cont = 1;
 8000ce4:	4b01      	ldr	r3, [pc, #4]	@ (8000cec <Error_Handler+0x10>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e7fb      	b.n	8000ce4 <Error_Handler+0x8>
 8000cec:	20000044 	.word	0x20000044

08000cf0 <LL_AHB2_GRP1_EnableClock>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d44:	68fb      	ldr	r3, [r7, #12]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc8 <MX_SPI1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d9e:	2207      	movs	r2, #7
 8000da0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000db0:	f002 fc0c 	bl	80035cc <HAL_SPI_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f7ff ff8f 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000048 	.word	0x20000048
 8000dc8:	40013000 	.word	0x40013000

08000dcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e28 <HAL_SPI_MspInit+0x5c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d117      	bne.n	8000e1e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000df2:	f7ff ff95 	bl	8000d20 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff ff7a 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 8000dfc:	23e0      	movs	r3, #224	@ 0xe0
 8000dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f000 ff19 	bl	8001c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013000 	.word	0x40013000

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 fd96 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM2_IRQHandler+0x10>)
 8000e96:	f004 fa11 	bl	80052bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000b8 	.word	0x200000b8

08000ea4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NextState_Pin);
 8000ea8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000eac:	f001 f848 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000eba:	f003 ffad 	bl	8004e18 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000ac 	.word	0x200000ac

08000ec8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_SUBGHZ_Init+0x20>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_SUBGHZ_Init+0x20>)
 8000f04:	f003 fd5e 	bl	80049c4 <HAL_SUBGHZ_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000f0e:	f7ff fee5 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000ac 	.word	0x200000ac

08000f1c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff ffcf 	bl	8000ec8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2032      	movs	r0, #50	@ 0x32
 8000f30:	f000 fe59 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000f34:	2032      	movs	r0, #50	@ 0x32
 8000f36:	f000 fe70 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <LL_APB1_GRP1_EnableClock>:
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b085      	sub	sp, #20
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
	...

08000f80 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc6:	4814      	ldr	r0, [pc, #80]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fc8:	f004 f8d4 	bl	8005174 <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fd2:	f7ff fe83 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480d      	ldr	r0, [pc, #52]	@ (8001018 <MX_TIM2_Init+0x98>)
 8000fe4:	f004 fa6c 	bl	80054c0 <HAL_TIM_ConfigClockSource>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fee:	f7ff fe75 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	@ (8001018 <MX_TIM2_Init+0x98>)
 8001000:	f004 fc5a 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800100a:	f7ff fe67 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000b8 	.word	0x200000b8

0800101c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800102c:	d10a      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff ff8d 	bl	8000f4e <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	201b      	movs	r0, #27
 800103a:	f000 fdd4 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103e:	201b      	movs	r0, #27
 8001040:	f000 fdeb 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <LL_AHB2_GRP1_EnableClock>:
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001058:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800105a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001068:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <LL_APB1_GRP1_EnableClock>:
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001088:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800108a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4313      	orrs	r3, r2
 8001092:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001098:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010b2:	4a23      	ldr	r2, [pc, #140]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f4:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_USART2_UART_Init+0x90>)
 80010f6:	f004 fc79 	bl	80059ec <HAL_UART_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001100:	f7ff fdec 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_USART2_UART_Init+0x90>)
 8001108:	f005 f929 	bl	800635e <HAL_UARTEx_SetTxFifoThreshold>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001112:	f7ff fde3 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4808      	ldr	r0, [pc, #32]	@ (800113c <MX_USART2_UART_Init+0x90>)
 800111a:	f005 f95e 	bl	80063da <HAL_UARTEx_SetRxFifoThreshold>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001124:	f7ff fdda 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_USART2_UART_Init+0x90>)
 800112a:	f005 f8e0 	bl	80062ee <HAL_UARTEx_DisableFifoMode>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001134:	f7ff fdd2 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000104 	.word	0x20000104
 8001140:	40004400 	.word	0x40004400

08001144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	@ 0x58
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2238      	movs	r2, #56	@ 0x38
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f005 fa67 	bl	8006638 <memset>
  if(uartHandle->Instance==USART2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d126      	bne.n	80011c2 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001174:	2302      	movs	r3, #2
 8001176:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001178:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800117c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4618      	mov	r0, r3
 8001184:	f002 f908 	bl	8003398 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800118e:	f7ff fda5 	bl	8000cdc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001192:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001196:	f7ff ff71 	bl	800107c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff56 	bl	800104c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80011a0:	230c      	movs	r3, #12
 80011a2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b0:	2307      	movs	r3, #7
 80011b2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011be:	f000 fd47 	bl	8001c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3758      	adds	r7, #88	@ 0x58
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004400 	.word	0x40004400

080011d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d0:	480d      	ldr	r0, [pc, #52]	@ (8001208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d4:	f7ff feb5 	bl	8000f42 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	@ (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	@ (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011fe:	f005 fa23 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001202:	f7ff fccb 	bl	8000b9c <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   r0, =_estack
 8001208:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001214:	080067c8 	.word	0x080067c8
  ldr r2, =_sbss
 8001218:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800121c:	200001bc 	.word	0x200001bc

08001220 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b03      	cmp	r3, #3
 8001232:	d84b      	bhi.n	80012cc <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001234:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	0800124d 	.word	0x0800124d
 8001240:	0800126d 	.word	0x0800126d
 8001244:	0800128d 	.word	0x0800128d
 8001248:	080012ad 	.word	0x080012ad
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2108      	movs	r1, #8
 8001250:	4821      	ldr	r0, [pc, #132]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001252:	f000 fe5d 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2110      	movs	r1, #16
 800125a:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800125c:	f000 fe58 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2120      	movs	r1, #32
 8001264:	481c      	ldr	r0, [pc, #112]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001266:	f000 fe53 	bl	8001f10 <HAL_GPIO_WritePin>
      break;      
 800126a:	e030      	b.n	80012ce <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2108      	movs	r1, #8
 8001270:	4819      	ldr	r0, [pc, #100]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001272:	f000 fe4d 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001276:	2201      	movs	r2, #1
 8001278:	2110      	movs	r1, #16
 800127a:	4817      	ldr	r0, [pc, #92]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800127c:	f000 fe48 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001280:	2200      	movs	r2, #0
 8001282:	2120      	movs	r1, #32
 8001284:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001286:	f000 fe43 	bl	8001f10 <HAL_GPIO_WritePin>
      break;
 800128a:	e020      	b.n	80012ce <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2108      	movs	r1, #8
 8001290:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001292:	f000 fe3d 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001296:	2201      	movs	r2, #1
 8001298:	2110      	movs	r1, #16
 800129a:	480f      	ldr	r0, [pc, #60]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800129c:	f000 fe38 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80012a0:	2201      	movs	r2, #1
 80012a2:	2120      	movs	r1, #32
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012a6:	f000 fe33 	bl	8001f10 <HAL_GPIO_WritePin>
      break;
 80012aa:	e010      	b.n	80012ce <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2108      	movs	r1, #8
 80012b0:	4809      	ldr	r0, [pc, #36]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012b2:	f000 fe2d 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80012b6:	2200      	movs	r2, #0
 80012b8:	2110      	movs	r1, #16
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012bc:	f000 fe28 	bl	8001f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80012c0:	2201      	movs	r2, #1
 80012c2:	2120      	movs	r1, #32
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012c6:	f000 fe23 	bl	8001f10 <HAL_GPIO_WritePin>
      break;
 80012ca:	e000      	b.n	80012ce <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80012cc:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	48000800 	.word	0x48000800

080012dc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff94 	bl	8001224 <BSP_RADIO_ConfigRFSwitch>
 80012fc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <RBI_IsDCDC>:
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}

int32_t RBI_IsDCDC(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800130a:	f7ff ffe7 	bl	80012dc <BSP_RADIO_IsDCDC>
 800130e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}

08001314 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	461a      	mov	r2, r3
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f9be 	bl	80016a8 <SUBGRF_WriteBuffer>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <SUBGRF_SendPayload>:

    return 0;
}

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	460b      	mov	r3, r1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	4619      	mov	r1, r3
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff ffe4 	bl	8001314 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f845 	bl	80013dc <SUBGRF_SetTx>
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001374:	f000 f8a8 	bl	80014c8 <SUBGRF_GetPacketType>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d108      	bne.n	8001390 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2202      	movs	r2, #2
 8001384:	4619      	mov	r1, r3
 8001386:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800138a:	f000 f96b 	bl	8001664 <SUBGRF_WriteRegisters>
            break;
 800138e:	e000      	b.n	8001392 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001390:	bf00      	nop
    }
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80013b4:	f000 f888 	bl	80014c8 <SUBGRF_GetPacketType>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d108      	bne.n	80013d0 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2202      	movs	r2, #2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f240 60be 	movw	r0, #1726	@ 0x6be
 80013ca:	f000 f94b 	bl	8001664 <SUBGRF_WriteRegisters>
            break;
 80013ce:	e000      	b.n	80013d2 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80013d0:	bf00      	nop
    }
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <SUBGRF_SetTx+0x3c>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	0c1b      	lsrs	r3, r3, #16
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2203      	movs	r2, #3
 8001406:	4619      	mov	r1, r3
 8001408:	2083      	movs	r0, #131	@ 0x83
 800140a:	f000 f96f 	bl	80016ec <SUBGRF_WriteCommand>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000198 	.word	0x20000198

0800141c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	b29b      	uxth	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	b29b      	uxth	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800146a:	883b      	ldrh	r3, [r7, #0]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	b29b      	uxth	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001474:	883b      	ldrh	r3, [r7, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2208      	movs	r2, #8
 8001480:	4619      	mov	r1, r3
 8001482:	2008      	movs	r0, #8
 8001484:	f000 f932 	bl	80016ec <SUBGRF_WriteCommand>
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}

08001490 <SUBGRF_SetPacketType>:
    buf[3] = ( uint8_t )( chan & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
}

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <SUBGRF_SetPacketType+0x34>)
 800149e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d104      	bne.n	80014b0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80014a6:	2100      	movs	r1, #0
 80014a8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80014ac:	f000 f8b2 	bl	8001614 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	2201      	movs	r2, #1
 80014b4:	4619      	mov	r1, r3
 80014b6:	208a      	movs	r0, #138	@ 0x8a
 80014b8:	f000 f918 	bl	80016ec <SUBGRF_WriteCommand>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000199 	.word	0x20000199

080014c8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
    return PacketType;
 80014cc:	4b02      	ldr	r3, [pc, #8]	@ (80014d8 <SUBGRF_GetPacketType+0x10>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000199 	.word	0x20000199

080014dc <SUBGRF_SetPacketParams>:
      break;
    }
}

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	4b44      	ldr	r3, [pc, #272]	@ (800160c <SUBGRF_SetPacketParams+0x130>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d004      	beq.n	800150a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ffc3 	bl	8001490 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d878      	bhi.n	8001604 <SUBGRF_SetPacketParams+0x128>
 8001512:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <SUBGRF_SetPacketParams+0x3c>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001529 	.word	0x08001529
 800151c:	080015b9 	.word	0x080015b9
 8001520:	080015ad 	.word	0x080015ad
 8001524:	08001529 	.word	0x08001529
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7a5b      	ldrb	r3, [r3, #9]
 800152c:	2bf1      	cmp	r3, #241	@ 0xf1
 800152e:	d10a      	bne.n	8001546 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001530:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001534:	f7ff ff11 	bl	800135a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001538:	f248 0005 	movw	r0, #32773	@ 0x8005
 800153c:	f7ff ff2d 	bl	800139a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001540:	2302      	movs	r3, #2
 8001542:	75bb      	strb	r3, [r7, #22]
 8001544:	e011      	b.n	800156a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7a5b      	ldrb	r3, [r3, #9]
 800154a:	2bf2      	cmp	r3, #242	@ 0xf2
 800154c:	d10a      	bne.n	8001564 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800154e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001552:	f7ff ff02 	bl	800135a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001556:	f241 0021 	movw	r0, #4129	@ 0x1021
 800155a:	f7ff ff1e 	bl	800139a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800155e:	2306      	movs	r3, #6
 8001560:	75bb      	strb	r3, [r7, #22]
 8001562:	e002      	b.n	800156a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7a5b      	ldrb	r3, [r3, #9]
 8001568:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800156a:	2309      	movs	r3, #9
 800156c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	885b      	ldrh	r3, [r3, #2]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	795b      	ldrb	r3, [r3, #5]
 800158c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	799b      	ldrb	r3, [r3, #6]
 8001592:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	79db      	ldrb	r3, [r3, #7]
 8001598:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7a1b      	ldrb	r3, [r3, #8]
 800159e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80015a0:	7dbb      	ldrb	r3, [r7, #22]
 80015a2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7a9b      	ldrb	r3, [r3, #10]
 80015a8:	753b      	strb	r3, [r7, #20]
        break;
 80015aa:	e022      	b.n	80015f2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7b1b      	ldrb	r3, [r3, #12]
 80015b4:	733b      	strb	r3, [r7, #12]
        break;
 80015b6:	e01c      	b.n	80015f2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80015b8:	2306      	movs	r3, #6
 80015ba:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	89db      	ldrh	r3, [r3, #14]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	89db      	ldrh	r3, [r3, #14]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7c1a      	ldrb	r2, [r3, #16]
 80015d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <SUBGRF_SetPacketParams+0x134>)
 80015d6:	4611      	mov	r1, r2
 80015d8:	7019      	strb	r1, [r3, #0]
 80015da:	4613      	mov	r3, r2
 80015dc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7c5b      	ldrb	r3, [r3, #17]
 80015e2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7c9b      	ldrb	r3, [r3, #18]
 80015e8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7cdb      	ldrb	r3, [r3, #19]
 80015ee:	747b      	strb	r3, [r7, #17]
        break;
 80015f0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	208c      	movs	r0, #140	@ 0x8c
 80015fe:	f000 f875 	bl	80016ec <SUBGRF_WriteCommand>
 8001602:	e000      	b.n	8001606 <SUBGRF_SetPacketParams+0x12a>
        return;
 8001604:	bf00      	nop
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000199 	.word	0x20000199
 8001610:	2000019a 	.word	0x2000019a

08001614 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	460a      	mov	r2, r1
 800161e:	80fb      	strh	r3, [r7, #6]
 8001620:	4613      	mov	r3, r2
 8001622:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001624:	1d7a      	adds	r2, r7, #5
 8001626:	88f9      	ldrh	r1, [r7, #6]
 8001628:	2301      	movs	r3, #1
 800162a:	4803      	ldr	r0, [pc, #12]	@ (8001638 <SUBGRF_WriteRegister+0x24>)
 800162c:	f003 fa2e 	bl	8004a8c <HAL_SUBGHZ_WriteRegisters>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200000ac 	.word	0x200000ac

0800163c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001646:	f107 020f 	add.w	r2, r7, #15
 800164a:	88f9      	ldrh	r1, [r7, #6]
 800164c:	2301      	movs	r3, #1
 800164e:	4804      	ldr	r0, [pc, #16]	@ (8001660 <SUBGRF_ReadRegister+0x24>)
 8001650:	f003 fa7b 	bl	8004b4a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200000ac 	.word	0x200000ac

08001664 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	80fb      	strh	r3, [r7, #6]
 8001670:	4613      	mov	r3, r2
 8001672:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001674:	f3ef 8310 	mrs	r3, PRIMASK
 8001678:	60fb      	str	r3, [r7, #12]
  return(result);
 800167a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800167c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800167e:	b672      	cpsid	i
}
 8001680:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001682:	88bb      	ldrh	r3, [r7, #4]
 8001684:	88f9      	ldrh	r1, [r7, #6]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <SUBGRF_WriteRegisters+0x40>)
 800168a:	f003 f9ff 	bl	8004a8c <HAL_SUBGHZ_WriteRegisters>
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f383 8810 	msr	PRIMASK, r3
}
 8001698:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200000ac 	.word	0x200000ac

080016a8 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	4613      	mov	r3, r2
 80016b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016b8:	f3ef 8310 	mrs	r3, PRIMASK
 80016bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80016be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80016c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80016c2:	b672      	cpsid	i
}
 80016c4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	79f9      	ldrb	r1, [r7, #7]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <SUBGRF_WriteBuffer+0x40>)
 80016d0:	f003 fb4f 	bl	8004d72 <HAL_SUBGHZ_WriteBuffer>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f383 8810 	msr	PRIMASK, r3
}
 80016de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200000ac 	.word	0x200000ac

080016ec <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001700:	60fb      	str	r3, [r7, #12]
  return(result);
 8001702:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001706:	b672      	cpsid	i
}
 8001708:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	79f9      	ldrb	r1, [r7, #7]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4806      	ldr	r0, [pc, #24]	@ (800172c <SUBGRF_WriteCommand+0x40>)
 8001712:	f003 fa7b 	bl	8004c0c <HAL_SUBGHZ_ExecSetCmd>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f383 8810 	msr	PRIMASK, r3
}
 8001720:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200000ac 	.word	0x200000ac

08001730 <SUBGRF_SetSwitch>:
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
    CRITICAL_SECTION_END();
}

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10d      	bne.n	8001766 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d104      	bne.n	800175a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001750:	2302      	movs	r3, #2
 8001752:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001754:	2004      	movs	r0, #4
 8001756:	f000 f8b3 	bl	80018c0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d107      	bne.n	8001770 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8001760:	2303      	movs	r3, #3
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e004      	b.n	8001770 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fdb9 	bl	80012ea <RBI_ConfigRFSwitch>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2001      	movs	r0, #1
 800178e:	4798      	blx	r3
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000019c 	.word	0x2000019c

0800179c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2002      	movs	r0, #2
 80017aa:	4798      	blx	r3
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000019c 	.word	0x2000019c

080017b8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2040      	movs	r0, #64	@ 0x40
 80017c6:	4798      	blx	r3
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2000019c 	.word	0x2000019c

080017d4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_SUBGHZ_CADStatusCallback+0x18>
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d005      	beq.n	80017f6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80017ea:	e00a      	b.n	8001802 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2080      	movs	r0, #128	@ 0x80
 80017f2:	4798      	blx	r3
            break;
 80017f4:	e005      	b.n	8001802 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017fe:	4798      	blx	r3
            break;
 8001800:	bf00      	nop
    }
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000019c 	.word	0x2000019c

08001810 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001820:	4798      	blx	r3
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000019c 	.word	0x2000019c

08001830 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2020      	movs	r0, #32
 800183e:	4798      	blx	r3
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000019c 	.word	0x2000019c

0800184c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2004      	movs	r0, #4
 800185a:	4798      	blx	r3
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000019c 	.word	0x2000019c

08001868 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2008      	movs	r0, #8
 8001876:	4798      	blx	r3
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000019c 	.word	0x2000019c

08001884 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2010      	movs	r0, #16
 8001892:	4798      	blx	r3
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000019c 	.word	0x2000019c

080018a0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80018b0:	4798      	blx	r3
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000019c 	.word	0x2000019c

080018c0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80018ca:	f7ff fd1c 	bl	8001306 <RBI_IsDCDC>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d112      	bne.n	80018fa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80018d4:	f640 1023 	movw	r0, #2339	@ 0x923
 80018d8:	f7ff feb0 	bl	800163c <SUBGRF_ReadRegister>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	f023 0306 	bic.w	r3, r3, #6
 80018e6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	f640 1023 	movw	r0, #2339	@ 0x923
 80018f6:	f7ff fe8d 	bl	8001614 <SUBGRF_WriteRegister>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190e:	2003      	movs	r0, #3
 8001910:	f000 f95e 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001914:	f001 fb62 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8001918:	4603      	mov	r3, r0
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <HAL_Init+0x3c>)
 800191c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191e:	200f      	movs	r0, #15
 8001920:	f000 f810 	bl	8001944 <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	e001      	b.n	8001934 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001930:	f7ff fa7c 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001934:	79fb      	ldrb	r3, [r7, #7]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_InitTick+0x6c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d024      	beq.n	80019a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001958:	f001 fb40 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_InitTick+0x6c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4619      	mov	r1, r3
 8001964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001968:	fbb3 f3f1 	udiv	r3, r3, r1
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f960 	bl	8001c36 <HAL_SYSTICK_Config>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10f      	bne.n	800199c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	d809      	bhi.n	8001996 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001982:	2200      	movs	r2, #0
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	f04f 30ff 	mov.w	r0, #4294967295
 800198a:	f000 f92c 	bl	8001be6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800198e:	4a09      	ldr	r2, [pc, #36]	@ (80019b4 <HAL_InitTick+0x70>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e007      	b.n	80019a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e004      	b.n	80019a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e001      	b.n	80019a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_IncTick+0x1c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_IncTick+0x20>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a03      	ldr	r2, [pc, #12]	@ (80019d8 <HAL_IncTick+0x20>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000008 	.word	0x20000008
 80019d8:	200001a0 	.word	0x200001a0

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b02      	ldr	r3, [pc, #8]	@ (80019ec <HAL_GetTick+0x10>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	200001a0 	.word	0x200001a0

080019f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff fff0 	bl	80019dc <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d005      	beq.n	8001a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_Delay+0x44>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a16:	bf00      	nop
 8001a18:	f7ff ffe0 	bl	80019dc <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8f7      	bhi.n	8001a18 <HAL_Delay+0x28>
  {
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4906      	ldr	r1, [pc, #24]	@ (8001ad0 <__NVIC_EnableIRQ+0x34>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	@ (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	@ (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff90 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff2d 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff44 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff92 	bl	8001b28 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff61 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff37 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa4 	bl	8001b8c <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	e140      	b.n	8001ee2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8132 	beq.w	8001edc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d005      	beq.n	8001c90 <HAL_GPIO_Init+0x40>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d130      	bne.n	8001cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	f003 0201 	and.w	r2, r3, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d017      	beq.n	8001d2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d123      	bne.n	8001d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0203 	and.w	r2, r3, #3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 808c 	beq.w	8001edc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f00 <HAL_GPIO_Init+0x2b0>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	2207      	movs	r2, #7
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dee:	d00d      	beq.n	8001e0c <HAL_GPIO_Init+0x1bc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a44      	ldr	r2, [pc, #272]	@ (8001f04 <HAL_GPIO_Init+0x2b4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0x1b8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a43      	ldr	r2, [pc, #268]	@ (8001f08 <HAL_GPIO_Init+0x2b8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_GPIO_Init+0x1b4>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e004      	b.n	8001e0e <HAL_GPIO_Init+0x1be>
 8001e04:	2307      	movs	r3, #7
 8001e06:	e002      	b.n	8001e0e <HAL_GPIO_Init+0x1be>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_GPIO_Init+0x1be>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	f002 0203 	and.w	r2, r2, #3
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4093      	lsls	r3, r2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1e:	4938      	ldr	r1, [pc, #224]	@ (8001f00 <HAL_GPIO_Init+0x2b0>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2c:	4b37      	ldr	r3, [pc, #220]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e50:	4a2e      	ldr	r2, [pc, #184]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e56:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7a:	4a24      	ldr	r2, [pc, #144]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001e80:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e86:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eb4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f aeb7 	bne.w	8001c60 <HAL_GPIO_Init+0x10>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010000 	.word	0x40010000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	58000800 	.word	0x58000800

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f004 fb1c 	bl	800659c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	58000800 	.word	0x58000800

08001f70 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	58000400 	.word	0x58000400

08001f8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_PWREx_GetVoltageRange+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	58000400 	.word	0x58000400

08001fa4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fb4:	d101      	bne.n	8001fba <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	58000400 	.word	0x58000400

08001fc8 <LL_RCC_HSE_EnableTcxo>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <LL_RCC_HSE_DisableTcxo>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002012:	d101      	bne.n	8002018 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <LL_RCC_HSE_Enable>:
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <LL_RCC_HSE_Disable>:
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800204c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002050:	6013      	str	r3, [r2, #0]
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <LL_RCC_HSE_IsReady>:
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800206c:	d101      	bne.n	8002072 <LL_RCC_HSE_IsReady+0x18>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_RCC_HSE_IsReady+0x1a>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <LL_RCC_HSI_Enable>:
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <LL_RCC_HSI_Disable>:
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_HSI_IsReady>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c6:	d101      	bne.n	80020cc <LL_RCC_HSI_IsReady+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <LL_RCC_HSI_IsReady+0x1a>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d101      	bne.n	8002116 <LL_RCC_LSE_IsReady+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_RCC_LSE_IsReady+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b02      	cmp	r3, #2
 8002172:	d101      	bne.n	8002178 <LL_RCC_LSI_IsReady+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_RCC_LSI_IsReady+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d101      	bne.n	80021d0 <LL_RCC_MSI_IsReady+0x16>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <LL_RCC_MSI_IsReady+0x18>
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d101      	bne.n	80021f0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 030c 	and.w	r3, r3, #12
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80022c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80022ec:	f023 020f 	bic.w	r2, r3, #15
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800231a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002340:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002372:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023fa:	d101      	bne.n	8002400 <LL_RCC_PLL_IsReady+0x18>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <LL_RCC_PLL_IsReady+0x1a>
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0303 	and.w	r3, r3, #3
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002476:	d101      	bne.n	800247c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800249a:	d101      	bne.n	80024a0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024be:	d101      	bne.n	80024c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024e0:	d101      	bne.n	80024e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002502:	d101      	bne.n	8002508 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
	...

08002514 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e36f      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002526:	f7ff fea6 	bl	8002276 <LL_RCC_GetSysClkSource>
 800252a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800252c:	f7ff ff8f 	bl	800244e <LL_RCC_PLL_GetMainSource>
 8002530:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80c4 	beq.w	80026c8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x3e>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d176      	bne.n	800263a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d173      	bne.n	800263a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e353      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x68>
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800257a:	e006      	b.n	800258a <HAL_RCC_OscConfig+0x76>
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258a:	4293      	cmp	r3, r2
 800258c:	d222      	bcs.n	80025d4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fd5a 	bl	800304c <RCC_SetFlashLatencyFromMSIRange>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e331      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fe2b 	bl	8002228 <LL_RCC_MSI_SetCalibTrimming>
 80025d2:	e021      	b.n	8002618 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fe12 	bl	8002228 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fd1f 	bl	800304c <RCC_SetFlashLatencyFromMSIRange>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e2f6      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002618:	f000 fce0 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 800261c:	4603      	mov	r3, r0
 800261e:	4aa7      	ldr	r2, [pc, #668]	@ (80028bc <HAL_RCC_OscConfig+0x3a8>)
 8002620:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002622:	4ba7      	ldr	r3, [pc, #668]	@ (80028c0 <HAL_RCC_OscConfig+0x3ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f98c 	bl	8001944 <HAL_InitTick>
 800262c:	4603      	mov	r3, r0
 800262e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d047      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	e2e5      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d02c      	beq.n	800269c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002642:	f7ff fd9e 	bl	8002182 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002646:	f7ff f9c9 	bl	80019dc <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264e:	f7ff f9c5 	bl	80019dc <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e2d2      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002660:	f7ff fdab 	bl	80021ba <LL_RCC_MSI_IsReady>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f1      	beq.n	800264e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002688:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fdc7 	bl	8002228 <LL_RCC_MSI_SetCalibTrimming>
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800269c:	f7ff fd7f 	bl	800219e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a0:	f7ff f99c 	bl	80019dc <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a8:	f7ff f998 	bl	80019dc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e2a5      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80026ba:	f7ff fd7e 	bl	80021ba <LL_RCC_MSI_IsReady>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f1      	bne.n	80026a8 <HAL_RCC_OscConfig+0x194>
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026c6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d058      	beq.n	8002786 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d005      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1d2>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d108      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d105      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d14b      	bne.n	8002786 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e289      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d102      	bne.n	8002718 <HAL_RCC_OscConfig+0x204>
 8002712:	f7ff fc86 	bl	8002022 <LL_RCC_HSE_Enable>
 8002716:	e00d      	b.n	8002734 <HAL_RCC_OscConfig+0x220>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002720:	d104      	bne.n	800272c <HAL_RCC_OscConfig+0x218>
 8002722:	f7ff fc51 	bl	8001fc8 <LL_RCC_HSE_EnableTcxo>
 8002726:	f7ff fc7c 	bl	8002022 <LL_RCC_HSE_Enable>
 800272a:	e003      	b.n	8002734 <HAL_RCC_OscConfig+0x220>
 800272c:	f7ff fc87 	bl	800203e <LL_RCC_HSE_Disable>
 8002730:	f7ff fc58 	bl	8001fe4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff f94e 	bl	80019dc <HAL_GetTick>
 8002740:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff f94a 	bl	80019dc <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e257      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002756:	f7ff fc80 	bl	800205a <LL_RCC_HSE_IsReady>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f1      	beq.n	8002744 <HAL_RCC_OscConfig+0x230>
 8002760:	e011      	b.n	8002786 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff f93b 	bl	80019dc <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276a:	f7ff f937 	bl	80019dc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	@ 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e244      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800277c:	f7ff fc6d 	bl	800205a <LL_RCC_HSE_IsReady>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f1      	bne.n	800276a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d046      	beq.n	8002820 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x290>
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d10e      	bne.n	80027bc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d10b      	bne.n	80027bc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e22a      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fc8e 	bl	80020d6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027ba:	e031      	b.n	8002820 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d019      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	f7ff fc5a 	bl	800207c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7ff f908 	bl	80019dc <HAL_GetTick>
 80027cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d0:	f7ff f904 	bl	80019dc <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e211      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80027e2:	f7ff fc67 	bl	80020b4 <LL_RCC_HSI_IsReady>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f1      	beq.n	80027d0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fc70 	bl	80020d6 <LL_RCC_HSI_SetCalibTrimming>
 80027f6:	e013      	b.n	8002820 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f8:	f7ff fc4e 	bl	8002098 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7ff f8ee 	bl	80019dc <HAL_GetTick>
 8002800:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002804:	f7ff f8ea 	bl	80019dc <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1f7      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002816:	f7ff fc4d 	bl	80020b4 <LL_RCC_HSI_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f1      	bne.n	8002804 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d06e      	beq.n	800290a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d056      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	429a      	cmp	r2, r3
 800284a:	d031      	beq.n	80028b0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e1d0      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d013      	beq.n	8002896 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800286e:	f7ff fc67 	bl	8002140 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002872:	f7ff f8b3 	bl	80019dc <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287a:	f7ff f8af 	bl	80019dc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b11      	cmp	r3, #17
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1bc      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800288c:	f7ff fc68 	bl	8002160 <LL_RCC_LSI_IsReady>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f1      	bne.n	800287a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800289e:	f023 0210 	bic.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b0:	f7ff fc36 	bl	8002120 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7ff f892 	bl	80019dc <HAL_GetTick>
 80028b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80028ba:	e00c      	b.n	80028d6 <HAL_RCC_OscConfig+0x3c2>
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c4:	f7ff f88a 	bl	80019dc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b11      	cmp	r3, #17
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e197      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80028d6:	f7ff fc43 	bl	8002160 <LL_RCC_LSI_IsReady>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f1      	beq.n	80028c4 <HAL_RCC_OscConfig+0x3b0>
 80028e0:	e013      	b.n	800290a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	f7ff fc2d 	bl	8002140 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e6:	f7ff f879 	bl	80019dc <HAL_GetTick>
 80028ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ee:	f7ff f875 	bl	80019dc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b11      	cmp	r3, #17
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e182      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002900:	f7ff fc2e 	bl	8002160 <LL_RCC_LSI_IsReady>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f1      	bne.n	80028ee <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80d8 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002918:	f7ff fb44 	bl	8001fa4 <LL_PWR_IsEnabledBkUpAccess>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d113      	bne.n	800294a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002922:	f7ff fb25 	bl	8001f70 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7ff f859 	bl	80019dc <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7ff f855 	bl	80019dc <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e162      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002940:	f7ff fb30 	bl	8001fa4 <LL_PWR_IsEnabledBkUpAccess>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f1      	beq.n	800292e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d07b      	beq.n	8002a4a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b85      	cmp	r3, #133	@ 0x85
 8002958:	d003      	beq.n	8002962 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d109      	bne.n	8002976 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7ff f831 	bl	80019dc <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800297c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7ff f823 	bl	80019dc <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e12e      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80029a8:	f7ff fba9 	bl	80020fe <LL_RCC_LSE_IsReady>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ef      	beq.n	8002992 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b81      	cmp	r3, #129	@ 0x81
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b85      	cmp	r3, #133	@ 0x85
 80029c0:	d121      	bne.n	8002a06 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff f80b 	bl	80019dc <HAL_GetTick>
 80029c6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fffd 	bl	80019dc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e108      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ec      	beq.n	80029de <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a04:	e060      	b.n	8002ac8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe ffe9 	bl	80019dc <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe ffdb 	bl	80019dc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0e6      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ec      	bne.n	8002a22 <HAL_RCC_OscConfig+0x50e>
 8002a48:	e03e      	b.n	8002ac8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe ffc7 	bl	80019dc <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe ffb9 	bl	80019dc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0c4      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ec      	bne.n	8002a66 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe ffa6 	bl	80019dc <HAL_GetTick>
 8002a90:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fe ff98 	bl	80019dc <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0a3      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002abe:	f7ff fb1e 	bl	80020fe <LL_RCC_LSE_IsReady>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ef      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8099 	beq.w	8002c04 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d06c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d14b      	bne.n	8002b78 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	f7ff fc74 	bl	80023cc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe ff7a 	bl	80019dc <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe ff76 	bl	80019dc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e083      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002afe:	f7ff fc73 	bl	80023e8 <LL_RCC_PLL_IsReady>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f1      	bne.n	8002aec <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b40      	ldr	r3, [pc, #256]	@ (8002c10 <HAL_RCC_OscConfig+0x6fc>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b20:	0212      	lsls	r2, r2, #8
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b34:	430a      	orrs	r2, r1
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3e:	f7ff fc37 	bl	80023b0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe ff43 	bl	80019dc <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe ff3f 	bl	80019dc <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b0a      	cmp	r3, #10
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e04c      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b6c:	f7ff fc3c 	bl	80023e8 <LL_RCC_PLL_IsReady>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f1      	beq.n	8002b5a <HAL_RCC_OscConfig+0x646>
 8002b76:	e045      	b.n	8002c04 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	f7ff fc28 	bl	80023cc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe ff2e 	bl	80019dc <HAL_GetTick>
 8002b80:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe ff2a 	bl	80019dc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b0a      	cmp	r3, #10
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e037      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b96:	f7ff fc27 	bl	80023e8 <LL_RCC_PLL_IsReady>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f1      	bne.n	8002b84 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_RCC_OscConfig+0x700>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	60cb      	str	r3, [r1, #12]
 8002bb0:	e028      	b.n	8002c04 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e023      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f003 0203 	and.w	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d115      	bne.n	8002c00 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d10e      	bne.n	8002c00 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	11c1808c 	.word	0x11c1808c
 8002c14:	eefefffc 	.word	0xeefefffc

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e12c      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b98      	ldr	r3, [pc, #608]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d91b      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b95      	ldr	r3, [pc, #596]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4993      	ldr	r1, [pc, #588]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fec7 	bl	80019dc <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c52:	f7fe fec3 	bl	80019dc <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e110      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c64:	4b8a      	ldr	r3, [pc, #552]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d1ef      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fb02 	bl	800228c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fea8 	bl	80019dc <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c90:	f7fe fea4 	bl	80019dc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0f1      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ca2:	f7ff fbdf 	bl	8002464 <LL_RCC_IsActiveFlag_HPRE>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f1      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff faf8 	bl	80022b2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe fe8b 	bl	80019dc <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cca:	f7fe fe87 	bl	80019dc <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0d4      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cdc:	f7ff fbd3 	bl	8002486 <LL_RCC_IsActiveFlag_C2HPRE>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f1      	beq.n	8002cca <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff faf0 	bl	80022dc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fe6e 	bl	80019dc <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d04:	f7fe fe6a 	bl	80019dc <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0b7      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d16:	f7ff fbc8 	bl	80024aa <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f1      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d016      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fae9 	bl	8002308 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d36:	f7fe fe51 	bl	80019dc <HAL_GetTick>
 8002d3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d3e:	f7fe fe4d 	bl	80019dc <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e09a      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d50:	f7ff fbbd 	bl	80024ce <LL_RCC_IsActiveFlag_PPRE1>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f1      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d017      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fade 	bl	800232e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d72:	f7fe fe33 	bl	80019dc <HAL_GetTick>
 8002d76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d7a:	f7fe fe2f 	bl	80019dc <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e07c      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d8c:	f7ff fbb0 	bl	80024f0 <LL_RCC_IsActiveFlag_PPRE2>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f1      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d043      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002daa:	f7ff f956 	bl	800205a <LL_RCC_HSE_IsReady>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d11e      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e066      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002dc0:	f7ff fb12 	bl	80023e8 <LL_RCC_PLL_IsReady>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d113      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e05b      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002dd6:	f7ff f9f0 	bl	80021ba <LL_RCC_MSI_IsReady>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d108      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e050      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002de4:	f7ff f966 	bl	80020b4 <LL_RCC_HSI_IsReady>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e049      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fa2a 	bl	8002250 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fdee 	bl	80019dc <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fe fdea 	bl	80019dc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e035      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	f7ff fa2c 	bl	8002276 <LL_RCC_GetSysClkSource>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d1ec      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d21b      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 0207 	bic.w	r2, r3, #7
 8002e40:	4913      	ldr	r1, [pc, #76]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fdc8 	bl	80019dc <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e50:	f7fe fdc4 	bl	80019dc <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e011      	b.n	8002e86 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1ef      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e70:	f000 f8b4 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <HAL_RCC_ClockConfig+0x27c>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002e7a:	4b07      	ldr	r3, [pc, #28]	@ (8002e98 <HAL_RCC_ClockConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fd60 	bl	8001944 <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	58004000 	.word	0x58004000
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eaa:	f7ff f9e4 	bl	8002276 <LL_RCC_GetSysClkSource>
 8002eae:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb0:	f7ff facd 	bl	800244e <LL_RCC_PLL_GetMainSource>
 8002eb4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x2c>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d139      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d136      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ec8:	f7ff f987 	bl	80021da <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x62>
 8002ed2:	f7ff f982 	bl	80021da <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_GetSysClockFreq+0x4e>
 8002edc:	f7ff f98d 	bl	80021fa <LL_RCC_MSI_GetRange>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	e005      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x5a>
 8002eea:	f7ff f991 	bl	8002210 <LL_RCC_MSI_GetRangeAfterStandby>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	4a36      	ldr	r2, [pc, #216]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x8c>
 8002efe:	f7ff f96c 	bl	80021da <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_GetSysClockFreq+0x7a>
 8002f08:	f7ff f977 	bl	80021fa <LL_RCC_MSI_GetRange>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	e005      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x86>
 8002f16:	f7ff f97b 	bl	8002210 <LL_RCC_MSI_GetRangeAfterStandby>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d115      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f34:	e012      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f3c:	4b25      	ldr	r3, [pc, #148]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e00c      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d109      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f48:	f7ff f85a 	bl	8002000 <LL_RCC_HSE_IsEnabledDiv2>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f52:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e001      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f58:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f5a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5c:	f7ff f98b 	bl	8002276 <LL_RCC_GetSysClkSource>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d12f      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f66:	f7ff fa72 	bl	800244e <LL_RCC_PLL_GetMainSource>
 8002f6a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0xde>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d003      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0xe4>
 8002f78:	e00d      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f7c:	60fb      	str	r3, [r7, #12]
        break;
 8002f7e:	e00d      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f80:	f7ff f83e 	bl	8002000 <LL_RCC_HSE_IsEnabledDiv2>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f8a:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f8c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002f90:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f92:	60fb      	str	r3, [r7, #12]
        break;
 8002f94:	e002      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	60fb      	str	r3, [r7, #12]
        break;
 8002f9a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002f9c:	f7ff fa35 	bl	800240a <LL_RCC_PLL_GetN>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	fb03 f402 	mul.w	r4, r3, r2
 8002fa8:	f7ff fa46 	bl	8002438 <LL_RCC_PLL_GetDivider>
 8002fac:	4603      	mov	r3, r0
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	fbb4 f4f3 	udiv	r4, r4, r3
 8002fb6:	f7ff fa34 	bl	8002422 <LL_RCC_PLL_GetR>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	0f5b      	lsrs	r3, r3, #29
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fc4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002fc6:	697b      	ldr	r3, [r7, #20]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	08006750 	.word	0x08006750
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	01e84800 	.word	0x01e84800

08002fdc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b598      	push	{r3, r4, r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002fe0:	f7ff ff5c 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	f7ff f9b5 	bl	8002354 <LL_RCC_GetAHBPrescaler>
 8002fea:	4603      	mov	r3, r0
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	4a03      	ldr	r2, [pc, #12]	@ (8003000 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd98      	pop	{r3, r4, r7, pc}
 8003000:	080066f0 	.word	0x080066f0

08003004 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b598      	push	{r3, r4, r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003008:	f7ff ffe8 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 800300c:	4604      	mov	r4, r0
 800300e:	f7ff f9b9 	bl	8002384 <LL_RCC_GetAPB1Prescaler>
 8003012:	4603      	mov	r3, r0
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	4a03      	ldr	r2, [pc, #12]	@ (8003024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd98      	pop	{r3, r4, r7, pc}
 8003024:	08006730 	.word	0x08006730

08003028 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b598      	push	{r3, r4, r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800302c:	f7ff ffd6 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8003030:	4604      	mov	r4, r0
 8003032:	f7ff f9b2 	bl	800239a <LL_RCC_GetAPB2Prescaler>
 8003036:	4603      	mov	r3, r0
 8003038:	0adb      	lsrs	r3, r3, #11
 800303a:	4a03      	ldr	r2, [pc, #12]	@ (8003048 <HAL_RCC_GetPCLK2Freq+0x20>)
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd98      	pop	{r3, r4, r7, pc}
 8003048:	08006730 	.word	0x08006730

0800304c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	4a10      	ldr	r2, [pc, #64]	@ (80030a0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800305e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003062:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003064:	f7ff f981 	bl	800236a <LL_RCC_GetAHB3Prescaler>
 8003068:	4603      	mov	r3, r0
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0c9c      	lsrs	r4, r3, #18
 8003088:	f7fe ff80 	bl	8001f8c <HAL_PWREx_GetVoltageRange>
 800308c:	4603      	mov	r3, r0
 800308e:	4619      	mov	r1, r3
 8003090:	4620      	mov	r0, r4
 8003092:	f000 f80b 	bl	80030ac <RCC_SetFlashLatency>
 8003096:	4603      	mov	r3, r0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	08006750 	.word	0x08006750
 80030a4:	080066f0 	.word	0x080066f0
 80030a8:	431bde83 	.word	0x431bde83

080030ac <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	@ 0x38
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80030b6:	4a3a      	ldr	r2, [pc, #232]	@ (80031a0 <RCC_SetFlashLatency+0xf4>)
 80030b8:	f107 0320 	add.w	r3, r7, #32
 80030bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c0:	6018      	str	r0, [r3, #0]
 80030c2:	3304      	adds	r3, #4
 80030c4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80030c6:	4a37      	ldr	r2, [pc, #220]	@ (80031a4 <RCC_SetFlashLatency+0xf8>)
 80030c8:	f107 0318 	add.w	r3, r7, #24
 80030cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030d0:	6018      	str	r0, [r3, #0]
 80030d2:	3304      	adds	r3, #4
 80030d4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80030d6:	4a34      	ldr	r2, [pc, #208]	@ (80031a8 <RCC_SetFlashLatency+0xfc>)
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ec:	d11b      	bne.n	8003126 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f2:	e014      	b.n	800311e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	3338      	adds	r3, #56	@ 0x38
 80030fa:	443b      	add	r3, r7
 80030fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4293      	cmp	r3, r2
 8003106:	d807      	bhi.n	8003118 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	3338      	adds	r3, #56	@ 0x38
 800310e:	443b      	add	r3, r7
 8003110:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003116:	e021      	b.n	800315c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	3301      	adds	r3, #1
 800311c:	633b      	str	r3, [r7, #48]	@ 0x30
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	2b02      	cmp	r3, #2
 8003122:	d9e7      	bls.n	80030f4 <RCC_SetFlashLatency+0x48>
 8003124:	e01a      	b.n	800315c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003126:	2300      	movs	r3, #0
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800312a:	e014      	b.n	8003156 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	3338      	adds	r3, #56	@ 0x38
 8003132:	443b      	add	r3, r7
 8003134:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4293      	cmp	r3, r2
 800313e:	d807      	bhi.n	8003150 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3338      	adds	r3, #56	@ 0x38
 8003146:	443b      	add	r3, r7
 8003148:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800314c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800314e:	e005      	b.n	800315c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003152:	3301      	adds	r3, #1
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003158:	2b02      	cmp	r3, #2
 800315a:	d9e7      	bls.n	800312c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <RCC_SetFlashLatency+0x100>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 0207 	bic.w	r2, r3, #7
 8003164:	4911      	ldr	r1, [pc, #68]	@ (80031ac <RCC_SetFlashLatency+0x100>)
 8003166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800316c:	f7fe fc36 	bl	80019dc <HAL_GetTick>
 8003170:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003172:	e008      	b.n	8003186 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003174:	f7fe fc32 	bl	80019dc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e007      	b.n	8003196 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <RCC_SetFlashLatency+0x100>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003190:	429a      	cmp	r2, r3
 8003192:	d1ef      	bne.n	8003174 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3738      	adds	r7, #56	@ 0x38
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	080066a8 	.word	0x080066a8
 80031a4:	080066b0 	.word	0x080066b0
 80031a8:	080066b8 	.word	0x080066b8
 80031ac:	58004000 	.word	0x58004000

080031b0 <LL_RCC_LSE_IsReady>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d101      	bne.n	80031c8 <LL_RCC_LSE_IsReady+0x18>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <LL_RCC_LSE_IsReady+0x1a>
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <LL_RCC_SetUSARTClockSource>:
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	43db      	mvns	r3, r3
 80031e8:	401a      	ands	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_RCC_SetI2SClockSource>:
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003212:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <LL_RCC_SetLPUARTClockSource>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003240:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <LL_RCC_SetI2CClockSource>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003262:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800326e:	43db      	mvns	r3, r3
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800327a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <LL_RCC_SetLPTIMClockSource>:
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800329a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <LL_RCC_SetRNGClockSource>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80032d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <LL_RCC_SetADCClockSource>:
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <LL_RCC_SetRTCClockSource>:
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003324:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003328:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <LL_RCC_GetRTCClockSource>:
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <LL_RCC_ForceBackupDomainReset>:
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
	...

08003398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80033a4:	2300      	movs	r3, #0
 80033a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033a8:	2300      	movs	r3, #0
 80033aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d058      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80033b8:	f7fe fdda 	bl	8001f70 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033bc:	f7fe fb0e 	bl	80019dc <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033c2:	e009      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fe fb0a 	bl	80019dc <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d902      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	74fb      	strb	r3, [r7, #19]
        break;
 80033d6:	e006      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033d8:	4b7b      	ldr	r3, [pc, #492]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e4:	d1ee      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13c      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80033ec:	f7ff ffa7 	bl	800333e <LL_RCC_GetRTCClockSource>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d00f      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003406:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003408:	f7ff ffa5 	bl	8003356 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800340c:	f7ff ffb3 	bl	8003376 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d014      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fada 	bl	80019dc <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800342a:	e00b      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe fad6 	bl	80019dc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d902      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	74fb      	strb	r3, [r7, #19]
            break;
 8003442:	e004      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003444:	f7ff feb4 	bl	80031b0 <LL_RCC_LSE_IsReady>
 8003448:	4603      	mov	r3, r0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d1ee      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff5b 	bl	8003314 <LL_RCC_SetRTCClockSource>
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
 8003464:	e001      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fea9 	bl	80031d2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d004      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fe9e 	bl	80031d2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fec0 	bl	800322c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fee6 	bl	800328e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fedb 	bl	800328e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fed0 	bl	800328e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fea9 	bl	8003256 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fe9e 	bl	8003256 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fe93 	bl	8003256 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	d011      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe5e 	bl	8003202 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354e:	d107      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800355a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800355e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d010      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fea5 	bl	80032c0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800357e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003588:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800358c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d011      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fea3 	bl	80032ea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ac:	d107      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80035be:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	58000400 	.word	0x58000400

080035cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0c6      	b.n	800376c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ee:	d009      	beq.n	8003604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	61da      	str	r2, [r3, #28]
 80035f6:	e005      	b.n	8003604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7fd fbd7 	bl	8000dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003634:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800363e:	d902      	bls.n	8003646 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e002      	b.n	800364c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003654:	d007      	beq.n	8003666 <HAL_SPI_Init+0x9a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800365e:	d002      	beq.n	8003666 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	ea42 0103 	orr.w	r1, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c4:	d11b      	bne.n	80036fe <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d6:	d903      	bls.n	80036e0 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80036de:	e002      	b.n	80036e6 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d107      	bne.n	80036fe <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	f003 0204 	and.w	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003724:	ea42 0103 	orr.w	r1, r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373e:	d105      	bne.n	800374c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b292      	uxth	r2, r2
 800374a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800375a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_SPI_Transmit+0x22>
 8003792:	2302      	movs	r3, #2
 8003794:	e181      	b.n	8003a9a <HAL_SPI_Transmit+0x326>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379e:	f7fe f91d 	bl	80019dc <HAL_GetTick>
 80037a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
 80037b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037b8:	e16a      	b.n	8003a90 <HAL_SPI_Transmit+0x31c>
  }

  if ((pData == NULL) || (Size == 0U))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_Transmit+0x52>
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ca:	e161      	b.n	8003a90 <HAL_SPI_Transmit+0x31c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2203      	movs	r2, #3
 80037d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003816:	d10f      	bne.n	8003838 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003826:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003836:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003840:	d10f      	bne.n	8003862 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003860:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d007      	beq.n	8003880 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003888:	d94f      	bls.n	800392a <HAL_SPI_Transmit+0x1b6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_SPI_Transmit+0x124>
 8003892:	8afb      	ldrh	r3, [r7, #22]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d142      	bne.n	800391e <HAL_SPI_Transmit+0x1aa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038bc:	e02f      	b.n	800391e <HAL_SPI_Transmit+0x1aa>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d112      	bne.n	80038f2 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	881a      	ldrh	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038f0:	e015      	b.n	800391e <HAL_SPI_Transmit+0x1aa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f2:	f7fe f873 	bl	80019dc <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d803      	bhi.n	800390a <HAL_SPI_Transmit+0x196>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d102      	bne.n	8003910 <HAL_SPI_Transmit+0x19c>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_SPI_Transmit+0x1aa>
        {
          errorcode = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800391c:	e0b8      	b.n	8003a90 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ca      	bne.n	80038be <HAL_SPI_Transmit+0x14a>
 8003928:	e080      	b.n	8003a2c <HAL_SPI_Transmit+0x2b8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Transmit+0x1c4>
 8003932:	8afb      	ldrh	r3, [r7, #22]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d174      	bne.n	8003a22 <HAL_SPI_Transmit+0x2ae>
    {
      if (hspi->TxXferCount > 1U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d912      	bls.n	8003968 <HAL_SPI_Transmit+0x1f4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003946:	881a      	ldrh	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	1c9a      	adds	r2, r3, #2
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b02      	subs	r3, #2
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003966:	e05c      	b.n	8003a22 <HAL_SPI_Transmit+0x2ae>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800398e:	e048      	b.n	8003a22 <HAL_SPI_Transmit+0x2ae>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d12b      	bne.n	80039f6 <HAL_SPI_Transmit+0x282>
      {
        if (hspi->TxXferCount > 1U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d912      	bls.n	80039ce <HAL_SPI_Transmit+0x25a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b02      	subs	r3, #2
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039cc:	e029      	b.n	8003a22 <HAL_SPI_Transmit+0x2ae>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039f4:	e015      	b.n	8003a22 <HAL_SPI_Transmit+0x2ae>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f6:	f7fd fff1 	bl	80019dc <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d803      	bhi.n	8003a0e <HAL_SPI_Transmit+0x29a>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d102      	bne.n	8003a14 <HAL_SPI_Transmit+0x2a0>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <HAL_SPI_Transmit+0x2ae>
        {
          errorcode = HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003a20:	e036      	b.n	8003a90 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1b1      	bne.n	8003990 <HAL_SPI_Transmit+0x21c>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a34:	d107      	bne.n	8003a46 <HAL_SPI_Transmit+0x2d2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a44:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	6839      	ldr	r1, [r7, #0]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 feda 	bl	8004804 <SPI_EndRxTxTransaction>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Transmit+0x2e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <HAL_SPI_Transmit+0x306>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_SPI_Transmit+0x314>
  {
    errorcode = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e003      	b.n	8003a90 <HAL_SPI_Transmit+0x31c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b08c      	sub	sp, #48	@ 0x30
 8003aa6:	af02      	add	r7, sp, #8
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d003      	beq.n	8003ad4 <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8003ad2:	e1cc      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003adc:	d112      	bne.n	8003b04 <HAL_SPI_Receive+0x62>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10e      	bne.n	8003b04 <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f9c1 	bl	8003e82 <HAL_SPI_TransmitReceive>
 8003b00:	4603      	mov	r3, r0
 8003b02:	e1ba      	b.n	8003e7a <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Receive+0x70>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e1b3      	b.n	8003e7a <HAL_SPI_Receive+0x3d8>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b1a:	f7fd ff5f 	bl	80019dc <HAL_GetTick>
 8003b1e:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_SPI_Receive+0x8a>
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8003b32:	e19c      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2204      	movs	r2, #4
 8003b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b7e:	d118      	bne.n	8003bb2 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b9e:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bba:	d908      	bls.n	8003bce <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	e007      	b.n	8003bde <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bdc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be6:	d10f      	bne.n	8003c08 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d007      	beq.n	8003c26 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c2e:	d871      	bhi.n	8003d14 <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c30:	e035      	b.n	8003c9e <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d117      	bne.n	8003c70 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f103 020c 	add.w	r2, r3, #12
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003c6e:	e016      	b.n	8003c9e <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c70:	f7fd feb4 	bl	80019dc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d803      	bhi.n	8003c88 <HAL_SPI_Receive+0x1e6>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d102      	bne.n	8003c8e <HAL_SPI_Receive+0x1ec>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003c9c:	e0e7      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1c3      	bne.n	8003c32 <HAL_SPI_Receive+0x190>
 8003caa:	e039      	b.n	8003d20 <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d115      	bne.n	8003ce6 <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	b292      	uxth	r2, r2
 8003cc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003ce4:	e016      	b.n	8003d14 <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce6:	f7fd fe79 	bl	80019dc <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d803      	bhi.n	8003cfe <HAL_SPI_Receive+0x25c>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d102      	bne.n	8003d04 <HAL_SPI_Receive+0x262>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d107      	bne.n	8003d14 <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d12:	e0ac      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1c5      	bne.n	8003cac <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d28:	d178      	bne.n	8003e1c <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d38:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2201      	movs	r2, #1
 8003d42:	2101      	movs	r1, #1
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fbe7 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8003d56:	e08a      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d60:	d907      	bls.n	8003d72 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	e008      	b.n	8003d84 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f103 020c 	add.w	r2, r3, #12
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fbc2 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9e:	f043 0202 	orr.w	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8003dac:	e05f      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003db6:	d105      	bne.n	8003dc4 <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	e02b      	b.n	8003e1c <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dde:	d11d      	bne.n	8003e1c <HAL_SPI_Receive+0x37a>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d119      	bne.n	8003e1c <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	2101      	movs	r1, #1
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fb90 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8003e10:	e02d      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fc97 	bl	8004754 <SPI_EndRxTransaction>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d10a      	bne.n	8003e56 <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e44:	f043 0202 	orr.w	r2, r3, #2
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003e54:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003e64:	e003      	b.n	8003e6e <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003e76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3728      	adds	r7, #40	@ 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b092      	sub	sp, #72	@ 0x48
 8003e86:	af02      	add	r7, sp, #8
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x2e>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e322      	b.n	80044f6 <HAL_SPI_TransmitReceive+0x674>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb8:	f7fd fd90 	bl	80019dc <HAL_GetTick>
 8003ebc:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ec4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  tmp_mode            = hspi->Init.Mode;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  initial_TxXferCount = Size;
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	853b      	strh	r3, [r7, #40]	@ 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d00f      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x8c>
 8003eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ef4:	d107      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x84>
 8003efe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d003      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8003f0c:	e2ed      	b.n	80044ea <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x9e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x9e>
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8003f26:	e2e0      	b.n	80044ea <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d003      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2205      	movs	r2, #5
 8003f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f9e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fa8:	d802      	bhi.n	8003fb0 <HAL_SPI_TransmitReceive+0x12e>
 8003faa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d908      	bls.n	8003fc2 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	e007      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fd0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d007      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ff8:	f240 80ce 	bls.w	8004198 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_SPI_TransmitReceive+0x18a>
 8004004:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004006:	2b01      	cmp	r3, #1
 8004008:	f040 80b8 	bne.w	800417c <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 80a0 	bne.w	800417c <HAL_SPI_TransmitReceive+0x2fa>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004044:	f040 809a 	bne.w	800417c <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_SPI_TransmitReceive+0x1ea>
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406a:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800407a:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407c:	e07e      	b.n	800417c <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d13f      	bne.n	800410c <HAL_SPI_TransmitReceive+0x28a>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03a      	beq.n	800410c <HAL_SPI_TransmitReceive+0x28a>
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d137      	bne.n	800410c <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d11e      	bne.n	800410c <HAL_SPI_TransmitReceive+0x28a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d6:	d119      	bne.n	800410c <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x27a>
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800410a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d11c      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x2d2>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	b292      	uxth	r2, r2
 8004132:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004150:	2301      	movs	r3, #1
 8004152:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004154:	f7fd fc42 	bl	80019dc <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004160:	429a      	cmp	r2, r3
 8004162:	d80b      	bhi.n	800417c <HAL_SPI_TransmitReceive+0x2fa>
 8004164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d007      	beq.n	800417c <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800417a:	e1b6      	b.n	80044ea <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f47f af7b 	bne.w	800407e <HAL_SPI_TransmitReceive+0x1fc>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	f47f af74 	bne.w	800407e <HAL_SPI_TransmitReceive+0x1fc>
 8004196:	e12d      	b.n	80043f4 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x326>
 80041a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	f040 8119 	bne.w	80043da <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d912      	bls.n	80041d8 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b6:	881a      	ldrh	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	1c9a      	adds	r2, r3, #2
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b02      	subs	r3, #2
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041d6:	e100      	b.n	80043da <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	f040 80e8 	bne.w	80043da <HAL_SPI_TransmitReceive+0x558>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004212:	f040 80e2 	bne.w	80043da <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10c      	bne.n	800423a <HAL_SPI_TransmitReceive+0x3b8>
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004238:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004248:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424a:	e0c6      	b.n	80043da <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d158      	bne.n	800430c <HAL_SPI_TransmitReceive+0x48a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d053      	beq.n	800430c <HAL_SPI_TransmitReceive+0x48a>
 8004264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004266:	2b01      	cmp	r3, #1
 8004268:	d150      	bne.n	800430c <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d912      	bls.n	800429a <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004278:	881a      	ldrh	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	1c9a      	adds	r2, r3, #2
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b02      	subs	r3, #2
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004298:	e012      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11e      	bne.n	800430c <HAL_SPI_TransmitReceive+0x48a>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d6:	d119      	bne.n	800430c <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x47a>
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fa:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800430a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d148      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x52a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d042      	beq.n	80043ac <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d923      	bls.n	800437a <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	b292      	uxth	r2, r2
 800433e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	1c9a      	adds	r2, r3, #2
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b02      	subs	r3, #2
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d81f      	bhi.n	80043a8 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	e016      	b.n	80043a8 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f103 020c 	add.w	r2, r3, #12
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a8:	2301      	movs	r3, #1
 80043aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043ac:	f7fd fb16 	bl	80019dc <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d803      	bhi.n	80043c4 <HAL_SPI_TransmitReceive+0x542>
 80043bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x548>
 80043c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80043d8:	e087      	b.n	80044ea <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f af33 	bne.w	800424c <HAL_SPI_TransmitReceive+0x3ca>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f47f af2c 	bne.w	800424c <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fc:	d146      	bne.n	800448c <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80043fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004404:	2201      	movs	r2, #1
 8004406:	2101      	movs	r1, #1
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f885 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004418:	f043 0202 	orr.w	r2, r3, #2
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      goto error;
 8004426:	e060      	b.n	80044ea <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004430:	d105      	bne.n	800443e <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	e026      	b.n	800448c <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800444e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	2b02      	cmp	r3, #2
 8004456:	d119      	bne.n	800448c <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800445e:	2201      	movs	r2, #1
 8004460:	2101      	movs	r1, #1
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f858 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004472:	f043 0202 	orr.w	r2, r3, #2
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          goto error;
 8004480:	e033      	b.n	80044ea <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800448a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b10      	cmp	r3, #16
 8004498:	d10d      	bne.n	80044b6 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449e:	f043 0202 	orr.w	r2, r3, #2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80044ae:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f9a2 	bl	8004804 <SPI_EndRxTxTransaction>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80044e0:	e003      	b.n	80044ea <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80044f2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3740      	adds	r7, #64	@ 0x40
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800450c:	b2db      	uxtb	r3, r3
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004528:	f7fd fa58 	bl	80019dc <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	4413      	add	r3, r2
 8004536:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004538:	f7fd fa50 	bl	80019dc <HAL_GetTick>
 800453c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800453e:	4b39      	ldr	r3, [pc, #228]	@ (8004624 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	015b      	lsls	r3, r3, #5
 8004544:	0d1b      	lsrs	r3, r3, #20
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454e:	e054      	b.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d050      	beq.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004558:	f7fd fa40 	bl	80019dc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	429a      	cmp	r2, r3
 8004566:	d902      	bls.n	800456e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d13d      	bne.n	80045ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800457c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004586:	d111      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004590:	d004      	beq.n	800459c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459a:	d107      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b4:	d10f      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e017      	b.n	800461a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	429a      	cmp	r2, r3
 8004616:	d19b      	bne.n	8004550 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000000 	.word	0x20000000

08004628 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	@ 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800463a:	f7fd f9cf 	bl	80019dc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	4413      	add	r3, r2
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800464a:	f7fd f9c7 	bl	80019dc <HAL_GetTick>
 800464e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004658:	4b3d      	ldr	r3, [pc, #244]	@ (8004750 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	00da      	lsls	r2, r3, #3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	0d1b      	lsrs	r3, r3, #20
 8004668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004670:	e060      	b.n	8004734 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004678:	d107      	bne.n	800468a <SPI_WaitFifoStateUntilTimeout+0x62>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004688:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d050      	beq.n	8004734 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004692:	f7fd f9a3 	bl	80019dc <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469e:	429a      	cmp	r2, r3
 80046a0:	d902      	bls.n	80046a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d13d      	bne.n	8004724 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046c0:	d111      	bne.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ca:	d004      	beq.n	80046d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d4:	d107      	bne.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ee:	d10f      	bne.n	8004710 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800470e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e010      	b.n	8004746 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3b01      	subs	r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d196      	bne.n	8004672 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3728      	adds	r7, #40	@ 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000000 	.word	0x20000000

08004754 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004768:	d111      	bne.n	800478e <SPI_EndRxTransaction+0x3a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004772:	d004      	beq.n	800477e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477c:	d107      	bne.n	800478e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	@ 0x80
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff febd 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e023      	b.n	80047fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047bc:	d11d      	bne.n	80047fa <SPI_EndRxTransaction+0xa6>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c6:	d004      	beq.n	80047d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d0:	d113      	bne.n	80047fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff22 	bl	8004628 <SPI_WaitFifoStateUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e000      	b.n	80047fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff ff03 	bl	8004628 <SPI_WaitFifoStateUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e027      	b.n	8004888 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	@ 0x80
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fe68 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e014      	b.n	8004888 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7ff fedc 	bl	8004628 <SPI_WaitFifoStateUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487a:	f043 0220 	orr.w	r2, r3, #32
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e000      	b.n	8004888 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80048a0:	4904      	ldr	r1, [pc, #16]	@ (80048b4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	608b      	str	r3, [r1, #8]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	58000400 	.word	0x58000400

080048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80048bc:	4b05      	ldr	r3, [pc, #20]	@ (80048d4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c2:	4a04      	ldr	r2, [pc, #16]	@ (80048d4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80048c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	58000400 	.word	0x58000400

080048d8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80048e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	58000400 	.word	0x58000400

080048f8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80048fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004902:	619a      	str	r2, [r3, #24]
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	58000400 	.word	0x58000400

08004910 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d101      	bne.n	8004924 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	58000400 	.word	0x58000400

08004934 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d101      	bne.n	8004948 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	58000400 	.word	0x58000400

08004958 <LL_RCC_RF_DisableReset>:
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800495c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004964:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004968:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800496c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <LL_RCC_IsRFUnderReset>:
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498c:	d101      	bne.n	8004992 <LL_RCC_IsRFUnderReset+0x1a>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_RCC_IsRFUnderReset+0x1c>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80049a4:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80049a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049aa:	4905      	ldr	r1, [pc, #20]	@ (80049c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	58000800 	.word	0x58000800

080049c4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
    return status;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	e052      	b.n	8004a80 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	799b      	ldrb	r3, [r3, #6]
 80049e2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SUBGHZ_Init+0x2c>
 80049ea:	7bbb      	ldrb	r3, [r7, #14]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d109      	bne.n	8004a04 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fa90 	bl	8000f1c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80049fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004a00:	f7ff ffcc 	bl	800499c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d126      	bne.n	8004a58 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004a10:	f7ff ffa2 	bl	8004958 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a14:	4b1c      	ldr	r3, [pc, #112]	@ (8004a88 <HAL_SUBGHZ_Init+0xc4>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	0cdb      	lsrs	r3, r3, #19
 8004a22:	2264      	movs	r2, #100	@ 0x64
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	609a      	str	r2, [r3, #8]
        break;
 8004a3a:	e007      	b.n	8004a4c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004a42:	f7ff ff99 	bl	8004978 <LL_RCC_IsRFUnderReset>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ee      	bne.n	8004a2a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a4c:	f7ff ff34 	bl	80048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004a50:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004a54:	f7ff ff1c 	bl	8004890 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004a58:	f7ff ff4e 	bl	80048f8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fa64 	bl	8004f34 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	719a      	strb	r2, [r3, #6]

  return status;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000000 	.word	0x20000000

08004a8c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	461a      	mov	r2, r3
 8004a98:	460b      	mov	r3, r1
 8004a9a:	817b      	strh	r3, [r7, #10]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	799b      	ldrb	r3, [r3, #6]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d14a      	bne.n	8004b40 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	795b      	ldrb	r3, [r3, #5]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e045      	b.n	8004b42 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fb04 	bl	80050d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ac8:	f7ff ff06 	bl	80048d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004acc:	210d      	movs	r1, #13
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fa50 	bl	8004f74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004ad4:	897b      	ldrh	r3, [r7, #10]
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	4619      	mov	r1, r3
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fa48 	bl	8004f74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa42 	bl	8004f74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	82bb      	strh	r3, [r7, #20]
 8004af4:	e00a      	b.n	8004b0c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004af6:	8abb      	ldrh	r3, [r7, #20]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fa37 	bl	8004f74 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b06:	8abb      	ldrh	r3, [r7, #20]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	82bb      	strh	r3, [r7, #20]
 8004b0c:	8aba      	ldrh	r2, [r7, #20]
 8004b0e:	893b      	ldrh	r3, [r7, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d3f0      	bcc.n	8004af6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b14:	f7ff fed0 	bl	80048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fafd 	bl	8005118 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
 8004b2a:	e001      	b.n	8004b30 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	715a      	strb	r2, [r3, #5]

    return status;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	e000      	b.n	8004b42 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b088      	sub	sp, #32
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	461a      	mov	r2, r3
 8004b56:	460b      	mov	r3, r1
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	799b      	ldrb	r3, [r3, #6]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d14a      	bne.n	8004c02 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	795b      	ldrb	r3, [r3, #5]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e045      	b.n	8004c04 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 faa6 	bl	80050d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b84:	f7ff fea8 	bl	80048d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004b88:	211d      	movs	r1, #29
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f9f2 	bl	8004f74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004b90:	897b      	ldrh	r3, [r7, #10]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	4619      	mov	r1, r3
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f9ea 	bl	8004f74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004ba0:	897b      	ldrh	r3, [r7, #10]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f9e4 	bl	8004f74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004bac:	2100      	movs	r1, #0
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f9e0 	bl	8004f74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	82fb      	strh	r3, [r7, #22]
 8004bb8:	e009      	b.n	8004bce <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bba:	69b9      	ldr	r1, [r7, #24]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fa2f 	bl	8005020 <SUBGHZSPI_Receive>
      pData++;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004bc8:	8afb      	ldrh	r3, [r7, #22]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	82fb      	strh	r3, [r7, #22]
 8004bce:	8afa      	ldrh	r2, [r7, #22]
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d3f1      	bcc.n	8004bba <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004bd6:	f7ff fe6f 	bl	80048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa9c 	bl	8005118 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e001      	b.n	8004bf2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	715a      	strb	r2, [r3, #5]

    return status;
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
 8004c00:	e000      	b.n	8004c04 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	461a      	mov	r2, r3
 8004c18:	460b      	mov	r3, r1
 8004c1a:	72fb      	strb	r3, [r7, #11]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	799b      	ldrb	r3, [r3, #6]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d14a      	bne.n	8004cc0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	795b      	ldrb	r3, [r3, #5]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e045      	b.n	8004cc2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fa47 	bl	80050d0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004c42:	7afb      	ldrb	r3, [r7, #11]
 8004c44:	2b84      	cmp	r3, #132	@ 0x84
 8004c46:	d002      	beq.n	8004c4e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004c48:	7afb      	ldrb	r3, [r7, #11]
 8004c4a:	2b94      	cmp	r3, #148	@ 0x94
 8004c4c:	d103      	bne.n	8004c56 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	711a      	strb	r2, [r3, #4]
 8004c54:	e002      	b.n	8004c5c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004c5c:	f7ff fe3c 	bl	80048d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004c60:	7afb      	ldrb	r3, [r7, #11]
 8004c62:	4619      	mov	r1, r3
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f985 	bl	8004f74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	82bb      	strh	r3, [r7, #20]
 8004c6e:	e00a      	b.n	8004c86 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004c70:	8abb      	ldrh	r3, [r7, #20]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f97a 	bl	8004f74 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c80:	8abb      	ldrh	r3, [r7, #20]
 8004c82:	3301      	adds	r3, #1
 8004c84:	82bb      	strh	r3, [r7, #20]
 8004c86:	8aba      	ldrh	r2, [r7, #20]
 8004c88:	893b      	ldrh	r3, [r7, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d3f0      	bcc.n	8004c70 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004c8e:	f7ff fe13 	bl	80048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004c92:	7afb      	ldrb	r3, [r7, #11]
 8004c94:	2b84      	cmp	r3, #132	@ 0x84
 8004c96:	d002      	beq.n	8004c9e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fa3d 	bl	8005118 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
 8004caa:	e001      	b.n	8004cb0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	715a      	strb	r2, [r3, #5]

    return status;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	e000      	b.n	8004cc2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	72fb      	strb	r3, [r7, #11]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	799b      	ldrb	r3, [r3, #6]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d13d      	bne.n	8004d68 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	795b      	ldrb	r3, [r3, #5]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e038      	b.n	8004d6a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f9e6 	bl	80050d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004d04:	f7ff fde8 	bl	80048d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004d08:	7afb      	ldrb	r3, [r7, #11]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f931 	bl	8004f74 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004d12:	2100      	movs	r1, #0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f92d 	bl	8004f74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	82fb      	strh	r3, [r7, #22]
 8004d1e:	e009      	b.n	8004d34 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f97c 	bl	8005020 <SUBGHZSPI_Receive>
      pData++;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004d2e:	8afb      	ldrh	r3, [r7, #22]
 8004d30:	3301      	adds	r3, #1
 8004d32:	82fb      	strh	r3, [r7, #22]
 8004d34:	8afa      	ldrh	r2, [r7, #22]
 8004d36:	893b      	ldrh	r3, [r7, #8]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d3f1      	bcc.n	8004d20 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004d3c:	f7ff fdbc 	bl	80048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f9e9 	bl	8005118 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e001      	b.n	8004d58 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	715a      	strb	r2, [r3, #5]

    return status;
 8004d64:	7ffb      	ldrb	r3, [r7, #31]
 8004d66:	e000      	b.n	8004d6a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b086      	sub	sp, #24
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	460b      	mov	r3, r1
 8004d80:	72fb      	strb	r3, [r7, #11]
 8004d82:	4613      	mov	r3, r2
 8004d84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	799b      	ldrb	r3, [r3, #6]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d13e      	bne.n	8004e0e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	795b      	ldrb	r3, [r3, #5]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e039      	b.n	8004e10 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f994 	bl	80050d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004da8:	f7ff fd96 	bl	80048d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004dac:	210e      	movs	r1, #14
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f8e0 	bl	8004f74 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004db4:	7afb      	ldrb	r3, [r7, #11]
 8004db6:	4619      	mov	r1, r3
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f8db 	bl	8004f74 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	82bb      	strh	r3, [r7, #20]
 8004dc2:	e00a      	b.n	8004dda <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004dc4:	8abb      	ldrh	r3, [r7, #20]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f8d0 	bl	8004f74 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004dd4:	8abb      	ldrh	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	82bb      	strh	r3, [r7, #20]
 8004dda:	8aba      	ldrh	r2, [r7, #20]
 8004ddc:	893b      	ldrh	r3, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3f0      	bcc.n	8004dc4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004de2:	f7ff fd69 	bl	80048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f996 	bl	8005118 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
 8004df8:	e001      	b.n	8004dfe <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	715a      	strb	r2, [r3, #5]

    return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	e000      	b.n	8004e10 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
  }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004e20:	2300      	movs	r3, #0
 8004e22:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004e24:	f107 020c 	add.w	r2, r7, #12
 8004e28:	2302      	movs	r3, #2
 8004e2a:	2112      	movs	r1, #18
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff ff4c 	bl	8004cca <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004e32:	7b3b      	ldrb	r3, [r7, #12]
 8004e34:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	b21a      	sxth	r2, r3
 8004e3e:	7b7b      	ldrb	r3, [r7, #13]
 8004e40:	b21b      	sxth	r3, r3
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b21b      	sxth	r3, r3
 8004e46:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004e48:	f107 020c 	add.w	r2, r7, #12
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	2102      	movs	r1, #2
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fedb 	bl	8004c0c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fc fc8d 	bl	8001780 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004e66:	89fb      	ldrh	r3, [r7, #14]
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004e72:	89fb      	ldrh	r3, [r7, #14]
 8004e74:	099b      	lsrs	r3, r3, #6
 8004e76:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc fc8c 	bl	800179c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004e84:	89fb      	ldrh	r3, [r7, #14]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fc fcdb 	bl	800184c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004e96:	89fb      	ldrh	r3, [r7, #14]
 8004e98:	08db      	lsrs	r3, r3, #3
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fc fce0 	bl	8001868 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
 8004eaa:	091b      	lsrs	r3, r3, #4
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fc fce5 	bl	8001884 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004eba:	89fb      	ldrh	r3, [r7, #14]
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc fcb2 	bl	8001830 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004ecc:	89fb      	ldrh	r3, [r7, #14]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc fc6d 	bl	80017b8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004ede:	89fb      	ldrh	r3, [r7, #14]
 8004ee0:	09db      	lsrs	r3, r3, #7
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004eea:	89fb      	ldrh	r3, [r7, #14]
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d004      	beq.n	8004f00 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fc fc6b 	bl	80017d4 <HAL_SUBGHZ_CADStatusCallback>
 8004efe:	e003      	b.n	8004f08 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004f00:	2100      	movs	r1, #0
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc fc66 	bl	80017d4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	0a5b      	lsrs	r3, r3, #9
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fc fc7b 	bl	8001810 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004f1a:	89fb      	ldrh	r3, [r7, #14]
 8004f1c:	0b9b      	lsrs	r3, r3, #14
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fc fcba 	bl	80018a0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <SUBGHZSPI_Init+0x3c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0b      	ldr	r2, [pc, #44]	@ (8004f70 <SUBGHZSPI_Init+0x3c>)
 8004f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f46:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004f48:	4a09      	ldr	r2, [pc, #36]	@ (8004f70 <SUBGHZSPI_Init+0x3c>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004f50:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004f52:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <SUBGHZSPI_Init+0x3c>)
 8004f54:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004f58:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004f5a:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <SUBGHZSPI_Init+0x3c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a04      	ldr	r2, [pc, #16]	@ (8004f70 <SUBGHZSPI_Init+0x3c>)
 8004f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f64:	6013      	str	r3, [r2, #0]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	58010000 	.word	0x58010000

08004f74 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004f84:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <SUBGHZSPI_Transmit+0xa0>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	0cdb      	lsrs	r3, r3, #19
 8004f92:	2264      	movs	r2, #100	@ 0x64
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	609a      	str	r2, [r3, #8]
      break;
 8004faa:	e008      	b.n	8004fbe <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004fb2:	4b19      	ldr	r3, [pc, #100]	@ (8005018 <SUBGHZSPI_Transmit+0xa4>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d1ed      	bne.n	8004f9a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004fbe:	4b17      	ldr	r3, [pc, #92]	@ (800501c <SUBGHZSPI_Transmit+0xa8>)
 8004fc0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004fc8:	4b12      	ldr	r3, [pc, #72]	@ (8005014 <SUBGHZSPI_Transmit+0xa0>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	0cdb      	lsrs	r3, r3, #19
 8004fd6:	2264      	movs	r2, #100	@ 0x64
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	609a      	str	r2, [r3, #8]
      break;
 8004fee:	e008      	b.n	8005002 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <SUBGHZSPI_Transmit+0xa4>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d1ed      	bne.n	8004fde <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005002:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <SUBGHZSPI_Transmit+0xa4>)
 8005004:	68db      	ldr	r3, [r3, #12]

  return status;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000000 	.word	0x20000000
 8005018:	58010000 	.word	0x58010000
 800501c:	5801000c 	.word	0x5801000c

08005020 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800502e:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <SUBGHZSPI_Receive+0xa4>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	0cdb      	lsrs	r3, r3, #19
 800503c:	2264      	movs	r2, #100	@ 0x64
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d105      	bne.n	8005056 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	609a      	str	r2, [r3, #8]
      break;
 8005054:	e008      	b.n	8005068 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3b01      	subs	r3, #1
 800505a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800505c:	4b1a      	ldr	r3, [pc, #104]	@ (80050c8 <SUBGHZSPI_Receive+0xa8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d1ed      	bne.n	8005044 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005068:	4b18      	ldr	r3, [pc, #96]	@ (80050cc <SUBGHZSPI_Receive+0xac>)
 800506a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	22ff      	movs	r2, #255	@ 0xff
 8005070:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005072:	4b14      	ldr	r3, [pc, #80]	@ (80050c4 <SUBGHZSPI_Receive+0xa4>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	0cdb      	lsrs	r3, r3, #19
 8005080:	2264      	movs	r2, #100	@ 0x64
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	609a      	str	r2, [r3, #8]
      break;
 8005098:	e008      	b.n	80050ac <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b01      	subs	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80050a0:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <SUBGHZSPI_Receive+0xa8>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d1ed      	bne.n	8005088 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <SUBGHZSPI_Receive+0xa8>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	701a      	strb	r2, [r3, #0]

  return status;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000
 80050c8:	58010000 	.word	0x58010000
 80050cc:	5801000c 	.word	0x5801000c

080050d0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	791b      	ldrb	r3, [r3, #4]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d111      	bne.n	8005104 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80050e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <SUBGHZ_CheckDeviceReady+0x44>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	0c1b      	lsrs	r3, r3, #16
 80050ee:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80050f0:	f7ff fbf2 	bl	80048d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f9      	bne.n	80050f4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005100:	f7ff fbda 	bl	80048b8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f807 	bl	8005118 <SUBGHZ_WaitOnBusy>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000000 	.word	0x20000000

08005118 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005124:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <SUBGHZ_WaitOnBusy+0x58>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	0d1b      	lsrs	r3, r3, #20
 8005132:	2264      	movs	r2, #100	@ 0x64
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800513a:	f7ff fbfb 	bl	8004934 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800513e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	609a      	str	r2, [r3, #8]
      break;
 8005150:	e009      	b.n	8005166 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b01      	subs	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005158:	f7ff fbda 	bl	8004910 <LL_PWR_IsActiveFlag_RFBUSYS>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	2b01      	cmp	r3, #1
 8005164:	d0e9      	beq.n	800513a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005166:	7dfb      	ldrb	r3, [r7, #23]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000000 	.word	0x20000000

08005174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e049      	b.n	800521a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb ff3e 	bl	800101c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fa7a 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e036      	b.n	80052aa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a16      	ldr	r2, [pc, #88]	@ (80052b4 <HAL_TIM_Base_Start_IT+0x90>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x44>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d115      	bne.n	8005294 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_TIM_Base_Start_IT+0x94>)
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d015      	beq.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005280:	d011      	beq.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	e008      	b.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	00010007 	.word	0x00010007

080052bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0202 	mvn.w	r2, #2
 80052f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9b5 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f9a8 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f9b7 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0204 	mvn.w	r2, #4
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f98f 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f982 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f991 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d020      	beq.n	80053b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0208 	mvn.w	r2, #8
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2204      	movs	r2, #4
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f969 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f95c 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f96b 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d020      	beq.n	8005404 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01b      	beq.n	8005404 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0210 	mvn.w	r2, #16
 80053d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2208      	movs	r2, #8
 80053da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f943 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f936 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f945 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00c      	beq.n	8005428 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0201 	mvn.w	r2, #1
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f915 	bl	8005652 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fa9d 	bl	8005986 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00c      	beq.n	8005470 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa94 	bl	8005998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00c      	beq.n	8005494 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f903 	bl	800569a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0220 	mvn.w	r2, #32
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa5e 	bl	8005974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_ConfigClockSource+0x1c>
 80054d8:	2302      	movs	r3, #2
 80054da:	e0b6      	b.n	800564a <HAL_TIM_ConfigClockSource+0x18a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80054fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005518:	d03e      	beq.n	8005598 <HAL_TIM_ConfigClockSource+0xd8>
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551e:	f200 8087 	bhi.w	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005526:	f000 8086 	beq.w	8005636 <HAL_TIM_ConfigClockSource+0x176>
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552e:	d87f      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005530:	2b70      	cmp	r3, #112	@ 0x70
 8005532:	d01a      	beq.n	800556a <HAL_TIM_ConfigClockSource+0xaa>
 8005534:	2b70      	cmp	r3, #112	@ 0x70
 8005536:	d87b      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005538:	2b60      	cmp	r3, #96	@ 0x60
 800553a:	d050      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x11e>
 800553c:	2b60      	cmp	r3, #96	@ 0x60
 800553e:	d877      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005540:	2b50      	cmp	r3, #80	@ 0x50
 8005542:	d03c      	beq.n	80055be <HAL_TIM_ConfigClockSource+0xfe>
 8005544:	2b50      	cmp	r3, #80	@ 0x50
 8005546:	d873      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	d058      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x13e>
 800554c:	2b40      	cmp	r3, #64	@ 0x40
 800554e:	d86f      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005550:	2b30      	cmp	r3, #48	@ 0x30
 8005552:	d064      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15e>
 8005554:	2b30      	cmp	r3, #48	@ 0x30
 8005556:	d86b      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d060      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15e>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d867      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05c      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15e>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d05a      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15e>
 8005568:	e062      	b.n	8005630 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800557a:	f000 f97e 	bl	800587a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800558c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	609a      	str	r2, [r3, #8]
      break;
 8005596:	e04f      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055a8:	f000 f967 	bl	800587a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055ba:	609a      	str	r2, [r3, #8]
      break;
 80055bc:	e03c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 f8dc 	bl	8005788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2150      	movs	r1, #80	@ 0x50
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f933 	bl	8005842 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e02c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ea:	461a      	mov	r2, r3
 80055ec:	f000 f8fa 	bl	80057e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2160      	movs	r1, #96	@ 0x60
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f923 	bl	8005842 <TIM_ITRx_SetConfig>
      break;
 80055fc:	e01c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800560a:	461a      	mov	r2, r3
 800560c:	f000 f8bc 	bl	8005788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2140      	movs	r1, #64	@ 0x40
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f913 	bl	8005842 <TIM_ITRx_SetConfig>
      break;
 800561c:	e00c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f000 f90a 	bl	8005842 <TIM_ITRx_SetConfig>
      break;
 800562e:	e003      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
      break;
 8005634:	e000      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a2f      	ldr	r2, [pc, #188]	@ (800577c <TIM_Base_SetConfig+0xd0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x20>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a26      	ldr	r2, [pc, #152]	@ (800577c <TIM_Base_SetConfig+0xd0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00b      	beq.n	80056fe <TIM_Base_SetConfig+0x52>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ec:	d007      	beq.n	80056fe <TIM_Base_SetConfig+0x52>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a23      	ldr	r2, [pc, #140]	@ (8005780 <TIM_Base_SetConfig+0xd4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_Base_SetConfig+0x52>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a22      	ldr	r2, [pc, #136]	@ (8005784 <TIM_Base_SetConfig+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a11      	ldr	r2, [pc, #68]	@ (800577c <TIM_Base_SetConfig+0xd0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_Base_SetConfig+0xa0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a10      	ldr	r2, [pc, #64]	@ (8005780 <TIM_Base_SetConfig+0xd4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0xa0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0f      	ldr	r2, [pc, #60]	@ (8005784 <TIM_Base_SetConfig+0xd8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d105      	bne.n	8005772 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]
  }
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800

08005788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 030a 	bic.w	r3, r3, #10
 80057c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0210 	bic.w	r2, r3, #16
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800580e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	031b      	lsls	r3, r3, #12
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005820:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	621a      	str	r2, [r3, #32]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	f043 0307 	orr.w	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005894:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	431a      	orrs	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	609a      	str	r2, [r3, #8]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e04a      	b.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d108      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005900:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a11      	ldr	r2, [pc, #68]	@ (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005938:	d10c      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4313      	orrs	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr
 8005970:	40012c00 	.word	0x40012c00

08005974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <LL_RCC_GetUSARTClockSource>:
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	401a      	ands	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	4313      	orrs	r3, r2
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <LL_RCC_GetLPUARTClockSource>:
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4013      	ands	r3, r2
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e042      	b.n	8005a84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fb fb97 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2224      	movs	r2, #36	@ 0x24
 8005a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa9c 	bl	8005f74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f825 	bl	8005a8c <UART_SetConfig>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e01b      	b.n	8005a84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fb1a 	bl	80060b6 <UART_CheckIdleState>
 8005a82:	4603      	mov	r3, r0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a90:	b08c      	sub	sp, #48	@ 0x30
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4b94      	ldr	r3, [pc, #592]	@ (8005d0c <UART_SetConfig+0x280>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a89      	ldr	r2, [pc, #548]	@ (8005d10 <UART_SetConfig+0x284>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af4:	4313      	orrs	r3, r2
 8005af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005b02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b16:	f023 010f 	bic.w	r1, r3, #15
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a7a      	ldr	r2, [pc, #488]	@ (8005d14 <UART_SetConfig+0x288>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d127      	bne.n	8005b80 <UART_SetConfig+0xf4>
 8005b30:	2003      	movs	r0, #3
 8005b32:	f7ff ff3a 	bl	80059aa <LL_RCC_GetUSARTClockSource>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d81b      	bhi.n	8005b78 <UART_SetConfig+0xec>
 8005b40:	a201      	add	r2, pc, #4	@ (adr r2, 8005b48 <UART_SetConfig+0xbc>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b59 	.word	0x08005b59
 8005b4c:	08005b69 	.word	0x08005b69
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b71 	.word	0x08005b71
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5e:	e080      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005b60:	2302      	movs	r3, #2
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b66:	e07c      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6e:	e078      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b76:	e074      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7e:	e070      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a64      	ldr	r2, [pc, #400]	@ (8005d18 <UART_SetConfig+0x28c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d138      	bne.n	8005bfc <UART_SetConfig+0x170>
 8005b8a:	200c      	movs	r0, #12
 8005b8c:	f7ff ff0d 	bl	80059aa <LL_RCC_GetUSARTClockSource>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005b96:	2b0c      	cmp	r3, #12
 8005b98:	d82c      	bhi.n	8005bf4 <UART_SetConfig+0x168>
 8005b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba0 <UART_SetConfig+0x114>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005bf5 	.word	0x08005bf5
 8005ba8:	08005bf5 	.word	0x08005bf5
 8005bac:	08005bf5 	.word	0x08005bf5
 8005bb0:	08005be5 	.word	0x08005be5
 8005bb4:	08005bf5 	.word	0x08005bf5
 8005bb8:	08005bf5 	.word	0x08005bf5
 8005bbc:	08005bf5 	.word	0x08005bf5
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	08005bf5 	.word	0x08005bf5
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bda:	e042      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be2:	e03e      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bea:	e03a      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bf2:	e036      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bfa:	e032      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a43      	ldr	r2, [pc, #268]	@ (8005d10 <UART_SetConfig+0x284>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d12a      	bne.n	8005c5c <UART_SetConfig+0x1d0>
 8005c06:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005c0a:	f7ff fee0 	bl	80059ce <LL_RCC_GetLPUARTClockSource>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c14:	d01a      	beq.n	8005c4c <UART_SetConfig+0x1c0>
 8005c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c1a:	d81b      	bhi.n	8005c54 <UART_SetConfig+0x1c8>
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c20:	d00c      	beq.n	8005c3c <UART_SetConfig+0x1b0>
 8005c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c26:	d815      	bhi.n	8005c54 <UART_SetConfig+0x1c8>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <UART_SetConfig+0x1a8>
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c30:	d008      	beq.n	8005c44 <UART_SetConfig+0x1b8>
 8005c32:	e00f      	b.n	8005c54 <UART_SetConfig+0x1c8>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3a:	e012      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c42:	e00e      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005c44:	2304      	movs	r3, #4
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4a:	e00a      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c52:	e006      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5a:	e002      	b.n	8005c62 <UART_SetConfig+0x1d6>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2a      	ldr	r2, [pc, #168]	@ (8005d10 <UART_SetConfig+0x284>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	f040 80a4 	bne.w	8005db6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d823      	bhi.n	8005cbe <UART_SetConfig+0x232>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <UART_SetConfig+0x1f0>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005cbf 	.word	0x08005cbf
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005caf 	.word	0x08005caf
 8005c90:	08005cbf 	.word	0x08005cbf
 8005c94:	08005cbf 	.word	0x08005cbf
 8005c98:	08005cbf 	.word	0x08005cbf
 8005c9c:	08005cb7 	.word	0x08005cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fd f9b0 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ca6:	e010      	b.n	8005cca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d1c <UART_SetConfig+0x290>)
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cac:	e00d      	b.n	8005cca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cae:	f7fd f8f5 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8005cb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cb4:	e009      	b.n	8005cca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cbc:	e005      	b.n	8005cca <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8137 	beq.w	8005f40 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	4a12      	ldr	r2, [pc, #72]	@ (8005d20 <UART_SetConfig+0x294>)
 8005cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d305      	bcc.n	8005d02 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d910      	bls.n	8005d24 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d08:	e11a      	b.n	8005f40 <UART_SetConfig+0x4b4>
 8005d0a:	bf00      	nop
 8005d0c:	cfff69f3 	.word	0xcfff69f3
 8005d10:	40008000 	.word	0x40008000
 8005d14:	40013800 	.word	0x40013800
 8005d18:	40004400 	.word	0x40004400
 8005d1c:	00f42400 	.word	0x00f42400
 8005d20:	08006790 	.word	0x08006790
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	2200      	movs	r2, #0
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	60fa      	str	r2, [r7, #12]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	4a8e      	ldr	r2, [pc, #568]	@ (8005f6c <UART_SetConfig+0x4e0>)
 8005d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2200      	movs	r2, #0
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d46:	f7fa fa1f 	bl	8000188 <__aeabi_uldivmod>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	020b      	lsls	r3, r1, #8
 8005d5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d60:	0202      	lsls	r2, r0, #8
 8005d62:	6979      	ldr	r1, [r7, #20]
 8005d64:	6849      	ldr	r1, [r1, #4]
 8005d66:	0849      	lsrs	r1, r1, #1
 8005d68:	2000      	movs	r0, #0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	eb12 0804 	adds.w	r8, r2, r4
 8005d72:	eb43 0905 	adc.w	r9, r3, r5
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	469a      	mov	sl, r3
 8005d7e:	4693      	mov	fp, r2
 8005d80:	4652      	mov	r2, sl
 8005d82:	465b      	mov	r3, fp
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa f9fe 	bl	8000188 <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4613      	mov	r3, r2
 8005d92:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d9a:	d308      	bcc.n	8005dae <UART_SetConfig+0x322>
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005da2:	d204      	bcs.n	8005dae <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	60da      	str	r2, [r3, #12]
 8005dac:	e0c8      	b.n	8005f40 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005db4:	e0c4      	b.n	8005f40 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dbe:	d167      	bne.n	8005e90 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005dc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d828      	bhi.n	8005e1a <UART_SetConfig+0x38e>
 8005dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <UART_SetConfig+0x344>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	08005e1b 	.word	0x08005e1b
 8005de0:	08005e0b 	.word	0x08005e0b
 8005de4:	08005e1b 	.word	0x08005e1b
 8005de8:	08005e1b 	.word	0x08005e1b
 8005dec:	08005e1b 	.word	0x08005e1b
 8005df0:	08005e13 	.word	0x08005e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fd f906 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8005df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dfa:	e014      	b.n	8005e26 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dfc:	f7fd f914 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8005e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e02:	e010      	b.n	8005e26 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e04:	4b5a      	ldr	r3, [pc, #360]	@ (8005f70 <UART_SetConfig+0x4e4>)
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e08:	e00d      	b.n	8005e26 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0a:	f7fd f847 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8005e0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e10:	e009      	b.n	8005e26 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e18:	e005      	b.n	8005e26 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8089 	beq.w	8005f40 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	4a4e      	ldr	r2, [pc, #312]	@ (8005f6c <UART_SetConfig+0x4e0>)
 8005e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e40:	005a      	lsls	r2, r3, #1
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	441a      	add	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d916      	bls.n	8005e88 <UART_SetConfig+0x3fc>
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e60:	d212      	bcs.n	8005e88 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f023 030f 	bic.w	r3, r3, #15
 8005e6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	085b      	lsrs	r3, r3, #1
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	8bfb      	ldrh	r3, [r7, #30]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	8bfa      	ldrh	r2, [r7, #30]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	e05b      	b.n	8005f40 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e8e:	e057      	b.n	8005f40 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d828      	bhi.n	8005eea <UART_SetConfig+0x45e>
 8005e98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <UART_SetConfig+0x414>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ed5 	.word	0x08005ed5
 8005eac:	08005eeb 	.word	0x08005eeb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005eeb 	.word	0x08005eeb
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005ee3 	.word	0x08005ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fd f89e 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8005ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eca:	e014      	b.n	8005ef6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ecc:	f7fd f8ac 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8005ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ed2:	e010      	b.n	8005ef6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b26      	ldr	r3, [pc, #152]	@ (8005f70 <UART_SetConfig+0x4e4>)
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed8:	e00d      	b.n	8005ef6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fc ffdf 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8005ede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ee0:	e009      	b.n	8005ef6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ee8:	e005      	b.n	8005ef6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ef4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d021      	beq.n	8005f40 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	4a1a      	ldr	r2, [pc, #104]	@ (8005f6c <UART_SetConfig+0x4e0>)
 8005f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	441a      	add	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b0f      	cmp	r3, #15
 8005f24:	d909      	bls.n	8005f3a <UART_SetConfig+0x4ae>
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2c:	d205      	bcs.n	8005f3a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60da      	str	r2, [r3, #12]
 8005f38:	e002      	b.n	8005f40 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3730      	adds	r7, #48	@ 0x30
 8005f64:	46bd      	mov	sp, r7
 8005f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6a:	bf00      	nop
 8005f6c:	08006790 	.word	0x08006790
 8005f70:	00f42400 	.word	0x00f42400

08005f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01a      	beq.n	800608a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006072:	d10a      	bne.n	800608a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af02      	add	r7, sp, #8
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c6:	f7fb fc89 	bl	80019dc <HAL_GetTick>
 80060ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d10e      	bne.n	80060f8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f832 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e028      	b.n	800614a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b04      	cmp	r3, #4
 8006104:	d10e      	bne.n	8006124 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006106:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f81c 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e012      	b.n	800614a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b09c      	sub	sp, #112	@ 0x70
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006162:	e0af      	b.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	f000 80ab 	beq.w	80062c4 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616e:	f7fb fc35 	bl	80019dc <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <UART_WaitOnFlagUntilTimeout+0x32>
 800617e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006180:	2b00      	cmp	r3, #0
 8006182:	d140      	bne.n	8006206 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006194:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006198:	667b      	str	r3, [r7, #100]	@ 0x64
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80061b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e6      	bne.n	8006184 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80061d6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80061d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80061e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e5      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e06f      	b.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d057      	beq.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x172>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b80      	cmp	r3, #128	@ 0x80
 8006218:	d054      	beq.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x172>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d051      	beq.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800622e:	d149      	bne.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006238:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800624e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006258:	637b      	str	r3, [r7, #52]	@ 0x34
 800625a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800625e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	613b      	str	r3, [r7, #16]
   return(result);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800628c:	623a      	str	r2, [r7, #32]
 800628e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	69f9      	ldr	r1, [r7, #28]
 8006292:	6a3a      	ldr	r2, [r7, #32]
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	61bb      	str	r3, [r7, #24]
   return(result);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e010      	b.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69da      	ldr	r2, [r3, #28]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4013      	ands	r3, r2
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	429a      	cmp	r2, r3
 80062e0:	f43f af40 	beq.w	8006164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3770      	adds	r7, #112	@ 0x70
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_UARTEx_DisableFifoMode+0x16>
 8006300:	2302      	movs	r3, #2
 8006302:	e027      	b.n	8006354 <HAL_UARTEx_DisableFifoMode+0x66>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2224      	movs	r2, #36	@ 0x24
 8006310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006372:	2302      	movs	r3, #2
 8006374:	e02d      	b.n	80063d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2224      	movs	r2, #36	@ 0x24
 8006382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f850 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e02d      	b.n	800644e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2224      	movs	r2, #36	@ 0x24
 80063fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f812 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006464:	2b00      	cmp	r3, #0
 8006466:	d108      	bne.n	800647a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006478:	e031      	b.n	80064de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800647a:	2308      	movs	r3, #8
 800647c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800647e:	2308      	movs	r3, #8
 8006480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	0e5b      	lsrs	r3, r3, #25
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	0f5b      	lsrs	r3, r3, #29
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	7b3a      	ldrb	r2, [r7, #12]
 80064a6:	4910      	ldr	r1, [pc, #64]	@ (80064e8 <UARTEx_SetNbDataToProcess+0x90>)
 80064a8:	5c8a      	ldrb	r2, [r1, r2]
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064ae:	7b3a      	ldrb	r2, [r7, #12]
 80064b0:	490e      	ldr	r1, [pc, #56]	@ (80064ec <UARTEx_SetNbDataToProcess+0x94>)
 80064b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	7b7a      	ldrb	r2, [r7, #13]
 80064c4:	4908      	ldr	r1, [pc, #32]	@ (80064e8 <UARTEx_SetNbDataToProcess+0x90>)
 80064c6:	5c8a      	ldrb	r2, [r1, r2]
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064cc:	7b7a      	ldrb	r2, [r7, #13]
 80064ce:	4907      	ldr	r1, [pc, #28]	@ (80064ec <UARTEx_SetNbDataToProcess+0x94>)
 80064d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	080067a8 	.word	0x080067a8
 80064ec:	080067b0 	.word	0x080067b0

080064f0 <getLastLoRaEvent>:
        default:
            return IRQ_DEFAULT_RETURN_STATUS;
    }
}

LoRaIrqStatus getLastLoRaEvent(void) {
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
    return lastEventStatus;
 80064f4:	4b03      	ldr	r3, [pc, #12]	@ (8006504 <getLastLoRaEvent+0x14>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	b2db      	uxtb	r3, r3
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000009 	.word	0x20000009

08006508 <SendMessage>:
 *      Author: Luiz Fernando Silvério Felisbino
 */

#include "LoRaMessageHandler.h"

LoRaIrqStatus SendMessage(const char *message) {
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	if (message == NULL || strlen(message) == 0) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <SendMessage+0x16>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <SendMessage+0x1a>
		return IRQ_CRC_ERROR_STATUS;  // Invalid message
 800651e:	2303      	movs	r3, #3
 8006520:	e035      	b.n	800658e <SendMessage+0x86>
	}

	HAL_Delay(100);
 8006522:	2064      	movs	r0, #100	@ 0x64
 8006524:	f7fb fa64 	bl	80019f0 <HAL_Delay>

	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8006528:	2300      	movs	r3, #0
 800652a:	2200      	movs	r2, #0
 800652c:	f240 2101 	movw	r1, #513	@ 0x201
 8006530:	f240 2001 	movw	r0, #513	@ 0x201
 8006534:	f7fa ff72 	bl	800141c <SUBGRF_SetDioIrqParams>
	                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8006538:	2101      	movs	r1, #1
 800653a:	2001      	movs	r0, #1
 800653c:	f7fb f8f8 	bl	8001730 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8006540:	f640 0089 	movw	r0, #2185	@ 0x889
 8006544:	f7fb f87a 	bl	800163c <SUBGRF_ReadRegister>
 8006548:	4603      	mov	r3, r0
 800654a:	f043 0304 	orr.w	r3, r3, #4
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	f640 0089 	movw	r0, #2185	@ 0x889
 8006556:	f7fb f85d 	bl	8001614 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = strlen(message);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7f9 fe0c 	bl	8000178 <strlen>
 8006560:	4603      	mov	r3, r0
 8006562:	b2da      	uxtb	r2, r3
 8006564:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <SendMessage+0x90>)
 8006566:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8006568:	480b      	ldr	r0, [pc, #44]	@ (8006598 <SendMessage+0x90>)
 800656a:	f7fa ffb7 	bl	80014dc <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t *)message, strlen(message), 0);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7f9 fe02 	bl	8000178 <strlen>
 8006574:	4603      	mov	r3, r0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2200      	movs	r2, #0
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fa fed9 	bl	8001334 <SUBGRF_SendPayload>

	HAL_Delay(200);
 8006582:	20c8      	movs	r0, #200	@ 0xc8
 8006584:	f7fb fa34 	bl	80019f0 <HAL_Delay>

	return getLastLoRaEvent();
 8006588:	f7ff ffb2 	bl	80064f0 <getLastLoRaEvent>
 800658c:	4603      	mov	r3, r0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200001a4 	.word	0x200001a4

0800659c <HAL_GPIO_EXTI_Callback>:
    	if (RES.state == STATE_MASTER) MasterController(RES);
    	else if (RES.state == STATE_SLAVE) SlaveController(RES);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ac:	d138      	bne.n	8006620 <HAL_GPIO_EXTI_Callback+0x84>
		case NextState_Pin:
			car++;
 80065ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006628 <HAL_GPIO_EXTI_Callback+0x8c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006628 <HAL_GPIO_EXTI_Callback+0x8c>)
 80065b8:	701a      	strb	r2, [r3, #0]
			uint8_t count = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
			if (car == READY) {
 80065be:	4b1a      	ldr	r3, [pc, #104]	@ (8006628 <HAL_GPIO_EXTI_Callback+0x8c>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10e      	bne.n	80065e4 <HAL_GPIO_EXTI_Callback+0x48>
				while (count <= 100){
 80065c6:	e005      	b.n	80065d4 <HAL_GPIO_EXTI_Callback+0x38>
					count++;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	3301      	adds	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
					SendMessage("READY");
 80065ce:	4817      	ldr	r0, [pc, #92]	@ (800662c <HAL_GPIO_EXTI_Callback+0x90>)
 80065d0:	f7ff ff9a 	bl	8006508 <SendMessage>
				while (count <= 100){
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b64      	cmp	r3, #100	@ 0x64
 80065d8:	d9f6      	bls.n	80065c8 <HAL_GPIO_EXTI_Callback+0x2c>
				}
				HAL_Delay(2000);
 80065da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80065de:	f7fb fa07 	bl	80019f0 <HAL_Delay>
				while (count <= 100){
					count++;
					SendMessage("EMERGENCY");
				}
			}
			break;
 80065e2:	e01c      	b.n	800661e <HAL_GPIO_EXTI_Callback+0x82>
			} else if (car == GO){
 80065e4:	4b10      	ldr	r3, [pc, #64]	@ (8006628 <HAL_GPIO_EXTI_Callback+0x8c>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d10a      	bne.n	8006602 <HAL_GPIO_EXTI_Callback+0x66>
				while (count <= 100){
 80065ec:	e005      	b.n	80065fa <HAL_GPIO_EXTI_Callback+0x5e>
					count++;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	3301      	adds	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
					SendMessage("GO");
 80065f4:	480e      	ldr	r0, [pc, #56]	@ (8006630 <HAL_GPIO_EXTI_Callback+0x94>)
 80065f6:	f7ff ff87 	bl	8006508 <SendMessage>
				while (count <= 100){
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b64      	cmp	r3, #100	@ 0x64
 80065fe:	d9f6      	bls.n	80065ee <HAL_GPIO_EXTI_Callback+0x52>
			break;
 8006600:	e00d      	b.n	800661e <HAL_GPIO_EXTI_Callback+0x82>
			} else if (car == EMERGENCY){
 8006602:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <HAL_GPIO_EXTI_Callback+0x8c>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d109      	bne.n	800661e <HAL_GPIO_EXTI_Callback+0x82>
				while (count <= 100){
 800660a:	e005      	b.n	8006618 <HAL_GPIO_EXTI_Callback+0x7c>
					count++;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	3301      	adds	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
					SendMessage("EMERGENCY");
 8006612:	4808      	ldr	r0, [pc, #32]	@ (8006634 <HAL_GPIO_EXTI_Callback+0x98>)
 8006614:	f7ff ff78 	bl	8006508 <SendMessage>
				while (count <= 100){
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d9f6      	bls.n	800660c <HAL_GPIO_EXTI_Callback+0x70>
			break;
 800661e:	bf00      	nop
    }
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200001b8 	.word	0x200001b8
 800662c:	080066c4 	.word	0x080066c4
 8006630:	080066cc 	.word	0x080066cc
 8006634:	080066d0 	.word	0x080066d0

08006638 <memset>:
 8006638:	4402      	add	r2, r0
 800663a:	4603      	mov	r3, r0
 800663c:	4293      	cmp	r3, r2
 800663e:	d100      	bne.n	8006642 <memset+0xa>
 8006640:	4770      	bx	lr
 8006642:	f803 1b01 	strb.w	r1, [r3], #1
 8006646:	e7f9      	b.n	800663c <memset+0x4>

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4d0d      	ldr	r5, [pc, #52]	@ (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	@ (8006684 <__libc_init_array+0x3c>)
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2600      	movs	r6, #0
 8006654:	42a6      	cmp	r6, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4d0b      	ldr	r5, [pc, #44]	@ (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	@ (800668c <__libc_init_array+0x44>)
 800665c:	f000 f818 	bl	8006690 <_init>
 8006660:	1b64      	subs	r4, r4, r5
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2600      	movs	r6, #0
 8006666:	42a6      	cmp	r6, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006670:	4798      	blx	r3
 8006672:	3601      	adds	r6, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f855 3b04 	ldr.w	r3, [r5], #4
 800667a:	4798      	blx	r3
 800667c:	3601      	adds	r6, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	080067c0 	.word	0x080067c0
 8006684:	080067c0 	.word	0x080067c0
 8006688:	080067c0 	.word	0x080067c0
 800668c:	080067c4 	.word	0x080067c4

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
